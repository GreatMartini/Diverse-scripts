#include "Problem.h"
#include "Functions.h"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <stack>
#include "hdf5.h"
#include <gsl/gsl_rng.h>
#include <random>
#include "SAMRAI/pdat/CellVariable.h"
#include "SAMRAI/pdat/NodeData.h"
#include "SAMRAI/pdat/NodeVariable.h"
#include "LagrangianPolynomicRefine.h"


#include "SAMRAI/tbox/Array.h"
#include "SAMRAI/hier/BoundaryBox.h"
#include "SAMRAI/hier/BoxContainer.h"
#include "SAMRAI/geom/CartesianPatchGeometry.h"
#include "SAMRAI/hier/VariableDatabase.h"
#include "SAMRAI/hier/PatchDataRestartManager.h"
#include "SAMRAI/hier/Index.h"
#include "SAMRAI/tbox/PIO.h"
#include "SAMRAI/tbox/Utilities.h"
#include "SAMRAI/tbox/Timer.h"
#include "SAMRAI/tbox/TimerManager.h"

#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))
#define MAX(X,Y) ((X) > (Y) ? (X) : (Y))
#define SIGN(X) (((X) > 0) - ((X) < 0))
#define isEven(a) ((a) % 2 == 0 ? true : false)
#define greaterEq(a,b) ((fabs((a) - (b))/1.0E-15 > 10 ? false : (floor(fabs((a) - (b))/1.0E-15) < 1)) || (b)<(a))
#define lessEq(a,b) ((fabs((a) - (b))/1.0E-15 > 10 ? false: (floor(fabs((a) - (b))/1.0E-15) < 1)) || (a)<(b))
#define equalsEq(a,b) ((fabs((a) - (b))/1.0E-15 > 10 ? false: (floor(fabs((a) - (b))/1.0E-15) < 1)))
#define reducePrecision(x, p) (floor(((x) * pow(10, (p)) + 0.5)) / pow(10, (p)))

using namespace external;

const gsl_rng_type * T;
gsl_rng *r_var;

//Timers
std::shared_ptr<tbox::Timer> t_step;
std::shared_ptr<tbox::Timer> t_moveParticles;
std::shared_ptr<tbox::Timer> t_output;

inline int Problem::GetExpoBase2(double d)
{
	int i = 0;
	((short *)(&i))[0] = (((short *)(&d))[3] & (short)32752); // _123456789ab____ & 0111111111110000
	return (i >> 4) - 1023;
}

bool	Problem::Equals(double d1, double d2)
{
	if (d1 == d2)
		return true;
	int e1 = GetExpoBase2(d1);
	int e2 = GetExpoBase2(d2);
	int e3 = GetExpoBase2(d1 - d2);
	if ((e3 - e2 < -48) && (e3 - e1 < -48))
		return true;
	return false;
}

/*
 * Constructor of the problem.
 */
Problem::Problem(const string& object_name, const tbox::Dimension& dim, std::shared_ptr<tbox::Database>& database, std::shared_ptr<geom::CartesianGridGeometry >& grid_geom, std::shared_ptr<hier::PatchHierarchy >& patch_hierarchy, MainRestartData& mrd, const double dt, const bool init_from_restart, const int console_output, const int timer_output, const int mesh_output_period, const vector<string> full_mesh_writer_variables, std::shared_ptr<appu::VisItDataWriter>& mesh_data_writer, const vector<int> slicer_output_period, const vector<set<string> > sliceVariables, vector<std::shared_ptr<SlicerDataWriter > >sliceWriters, const vector<int> sphere_output_period, const vector<set<string> > sphereVariables, vector<std::shared_ptr<SphereDataWriter > > sphereWriters, const vector<bool> slicer_analysis_output, const vector<bool> sphere_analysis_output, const vector<int> integration_output_period, const vector<set<string> > integralVariables, vector<std::shared_ptr<IntegrateDataWriter > > integrateDataWriters, const vector<bool> integration_analysis_output, const vector<int> point_output_period, const vector<set<string> > pointVariables, vector<std::shared_ptr<PointDataWriter > > pointDataWriters, const vector<bool> point_analysis_output): 
d_dim(dim), xfer::RefinePatchStrategy(), xfer::CoarsenPatchStrategy(), viz_mesh_dump_interval(mesh_output_period), d_full_mesh_writer_variables(full_mesh_writer_variables.begin(), full_mesh_writer_variables.end()), d_visit_data_writer(mesh_data_writer), d_output_interval(console_output), d_timer_output_interval(timer_output), d_sliceWriters(sliceWriters.begin(), sliceWriters.end()), d_sphereWriters(sphereWriters.begin(), sphereWriters.end()), d_slicer_output_period(slicer_output_period.begin(), slicer_output_period.end()), d_sphere_output_period(sphere_output_period.begin(), sphere_output_period.end()), analysis_slice_dump(slicer_analysis_output.begin(), slicer_analysis_output.end()), analysis_sphere_dump(sphere_analysis_output.begin(), sphere_analysis_output.end()), d_integrateDataWriters(integrateDataWriters.begin(), integrateDataWriters.end()), d_integration_output_period(integration_output_period.begin(), integration_output_period.end()), analysis_integration_dump(integration_analysis_output.begin(), integration_analysis_output.end()), d_pointDataWriters(pointDataWriters.begin(), pointDataWriters.end()), d_point_output_period(point_output_period.begin(), point_output_period.end()), analysis_point_dump(point_analysis_output.begin(), point_analysis_output.end())
{
	//Setup the timers
	t_step = tbox::TimerManager::getManager()->getTimer("Step");
	t_moveParticles = tbox::TimerManager::getManager()->getTimer("Move particles");
	t_output = tbox::TimerManager::getManager()->getTimer("OutputGeneration");

	//Output configuration
	next_console_output = d_output_interval;
	next_timer_output = d_timer_output_interval;

	//Get the object name, the grid geometry and the patch hierarchy
  	d_grid_geometry = grid_geom;
	d_patch_hierarchy = patch_hierarchy;
	d_object_name = object_name;
	d_init_from_restart = init_from_restart;
	initial_dt = dt;

	for (vector<set<string> >::const_iterator it = sliceVariables.begin(); it != sliceVariables.end(); ++it) {
		set<string> vars = *it;
		for (set<string>::const_iterator it2 = vars.begin() ; it2 != vars.end(); ++it2) {
			d_sliceVariables.push_back(vars);
		}
	}
	for (vector<set<string> >::const_iterator it = sphereVariables.begin(); it != sphereVariables.end(); ++it) {
		set<string> vars = *it;
		for (set<string>::const_iterator it2 = vars.begin() ; it2 != vars.end(); ++it2) {
			d_sphereVariables.push_back(vars);
		}
	}
	for (vector<set<string> >::const_iterator it = integralVariables.begin(); it != integralVariables.end(); ++it) {
		set<string> vars = *it;
		for (set<string>::const_iterator it2 = vars.begin() ; it2 != vars.end(); ++it2) {
			d_integralVariables.push_back(vars);
		}
	}
	for (vector<set<string> >::const_iterator it = pointVariables.begin(); it != pointVariables.end(); ++it) {
		set<string> vars = *it;
		for (set<string>::const_iterator it2 = vars.begin() ; it2 != vars.end(); ++it2) {
			d_pointVariables.push_back(vars);
		}
	}


	//Get parameters
    cout<<"Reading parameters"<<endl;
	dissipation_factor_A_xx = database->getDouble("dissipation_factor_A_xx");
	dissipation_factor_A_zz = database->getDouble("dissipation_factor_A_zz");
	dissipation_factor_A_xy = database->getDouble("dissipation_factor_A_xy");
	dissipation_factor_A_xz = database->getDouble("dissipation_factor_A_xz");
	dissipation_factor_Phi = database->getDouble("dissipation_factor_Phi");
	yc = database->getDouble("yc");
	dissipation_factor_trK = database->getDouble("dissipation_factor_trK");
	lambda_z = database->getDouble("lambda_z");
	tend = database->getDouble("tend");
	dissipation_factor_gammac_zx = database->getDouble("dissipation_factor_gammac_zx");
	dissipation_factor_gammac_xx = database->getDouble("dissipation_factor_gammac_xx");
	dissipation_factor_gammac_zz = database->getDouble("dissipation_factor_gammac_zz");
	dissipation_factor_gammac_zy = database->getDouble("dissipation_factor_gammac_zy");
	dissipation_factor_gammac_xz = database->getDouble("dissipation_factor_gammac_xz");
	dissipation_factor_gammac_xy = database->getDouble("dissipation_factor_gammac_xy");
	dissipation_factor_A_yy = database->getDouble("dissipation_factor_A_yy");
	dissipation_factor_A_yz = database->getDouble("dissipation_factor_A_yz");
	xc = database->getDouble("xc");
	dissipation_factor_Gam_z = database->getDouble("dissipation_factor_Gam_z");
	dissipation_factor_Gam_y = database->getDouble("dissipation_factor_Gam_y");
	dissipation_factor_Gam_x = database->getDouble("dissipation_factor_Gam_x");
	a0 = database->getDouble("a0");
	rc = database->getDouble("rc");
	dissipation_factor_beta_x = database->getDouble("dissipation_factor_beta_x");
	dissipation_factor_beta_y = database->getDouble("dissipation_factor_beta_y");
	lambda_r = database->getDouble("lambda_r");
	dissipation_factor_beta_z = database->getDouble("dissipation_factor_beta_z");
	dissipation_factor_alpha = database->getDouble("dissipation_factor_alpha");
	dissipation_factor_gammac_yy = database->getDouble("dissipation_factor_gammac_yy");
	dissipation_factor_gammac_yx = database->getDouble("dissipation_factor_gammac_yx");
	dissipation_factor_gammac_yz = database->getDouble("dissipation_factor_gammac_yz");
	//Random initialization
	gsl_rng_env_setup();
	//Random for simulation
	const tbox::SAMRAI_MPI& mpi(tbox::SAMRAI_MPI::getSAMRAIWorld());
	int random_seed = database->getDouble("random_seed")*(mpi.getRank() + 1);
	r_var = gsl_rng_alloc(gsl_rng_ranlxs0);
	gsl_rng_set(r_var, random_seed);
	for (int il = 0; il < d_patch_hierarchy->getMaxNumberOfLevels(); il++) {
		bo_substep_iteration.push_back(0);
	}
	//Initialization from input file
	if (!d_init_from_restart) {
		next_mesh_dump_iteration = viz_mesh_dump_interval;
		for (std::vector<int>::iterator it = d_slicer_output_period.begin(); it != d_slicer_output_period.end(); ++it) {
			next_slice_dump_iteration.push_back((*it));
		}
		for (std::vector<int>::iterator it = d_sphere_output_period.begin(); it != d_sphere_output_period.end(); ++it) {
			next_sphere_dump_iteration.push_back((*it));
		}
		for (std::vector<int>::iterator it = d_integration_output_period.begin(); it != d_integration_output_period.end(); ++it) {
			next_integration_dump_iteration.push_back((*it));
		}
		for (std::vector<int>::iterator it = d_point_output_period.begin(); it != d_point_output_period.end(); ++it) {
			next_point_dump_iteration.push_back((*it));
		}

		//Iteration counter
		for (int il = 0; il < d_patch_hierarchy->getMaxNumberOfLevels(); il++) {
			current_iteration.push_back(0);
		}
	}
	//Initialization from restart file
	else {
		getFromRestart(mrd);
		if (d_slicer_output_period.size() < next_slice_dump_iteration.size()) {
			TBOX_ERROR("Number of slices cannot be reduced after a checkpoint.");
		}
		for (int il = 0; il < d_slicer_output_period.size(); il++) {
			if (il >= next_slice_dump_iteration.size()) {
				next_slice_dump_iteration.push_back(0);
			}
			if (next_slice_dump_iteration[il] == 0 && d_slicer_output_period[il] > 0) {
				next_slice_dump_iteration[il] = current_iteration[d_patch_hierarchy->getNumberOfLevels() - 1] + d_slicer_output_period[il];
			}
		}
		if (d_sphere_output_period.size() < next_sphere_dump_iteration.size()) {
			TBOX_ERROR("Number of spheres cannot be reduced after a checkpoint.");
		}
		for (int il = 0; il < d_sphere_output_period.size(); il++) {
			if (il >= next_sphere_dump_iteration.size()) {
				next_sphere_dump_iteration.push_back(0);
			}
			if (next_sphere_dump_iteration[il] == 0 && d_sphere_output_period[il] > 0) {
				next_sphere_dump_iteration[il] = current_iteration[d_patch_hierarchy->getNumberOfLevels() - 1] + d_sphere_output_period[il];
			}
		}
		if (d_integration_output_period.size() < next_integration_dump_iteration.size()) {
			TBOX_ERROR("Number of integrations cannot be reduced after a checkpoint.");
		}
		for (int il = 0; il < d_integration_output_period.size(); il++) {
			if (il >= next_integration_dump_iteration.size()) {
				next_integration_dump_iteration.push_back(0);
			}
			if (next_integration_dump_iteration[il] == 0 && d_integration_output_period[il] > 0) {
				next_integration_dump_iteration[il] = current_iteration[d_patch_hierarchy->getNumberOfLevels() - 1] + d_integration_output_period[il];
			}
		}
		if (d_point_output_period.size() < next_point_dump_iteration.size()) {
			TBOX_ERROR("Number of point output cannot be reduced after a checkpoint.");
		}
		for (int il = 0; il < d_point_output_period.size(); il++) {
			if (il >= next_point_dump_iteration.size()) {
				next_point_dump_iteration.push_back(0);
			}
			if (next_point_dump_iteration[il] == 0 && d_point_output_period[il] > 0) {
				next_point_dump_iteration[il] = current_iteration[d_patch_hierarchy->getNumberOfLevels() - 1] + d_point_output_period[il];
			}
		}
	}


	//External eos parameters
#ifdef EXTERNAL_EOS

	std::shared_ptr<tbox::Database> external_eos_db = database->getDatabase("external_EOS");
	Commons::ExternalEos::reprimand_eos_type = external_eos_db->getInteger("eos_type");
	Commons::ExternalEos::reprimand_atmo_Ye = external_eos_db->getDouble("atmo_Ye");
	Commons::ExternalEos::reprimand_max_z = external_eos_db->getDouble("max_z");
	Commons::ExternalEos::reprimand_max_b = external_eos_db->getDouble("max_b");
	Commons::ExternalEos::reprimand_c2p_acc = external_eos_db->getDouble("c2p_acc");
	Commons::ExternalEos::reprimand_atmo_rho = external_eos_db->getDouble("atmo_rho");
	Commons::ExternalEos::reprimand_rho_strict = external_eos_db->getDouble("rho_strict");
	Commons::ExternalEos::reprimand_max_rho = external_eos_db->getDouble("max_rho");
	Commons::ExternalEos::reprimand_max_eps = external_eos_db->getDouble("max_eps");
	Commons::ExternalEos::reprimand_gamma_th = external_eos_db->getDouble("gamma_th");
#endif

    	//Subcycling
	d_refinedTimeStepping = false;
	if (database->isString("subcycling")) {
		if (database->getString("subcycling") == "BERGER-OLIGER") {
			d_refinedTimeStepping = true;
		}
	}


	//Regridding options
	d_regridding = false;
	if (database->isDatabase("regridding")) {
		regridding_db = database->getDatabase("regridding");
		d_regridding_buffer = regridding_db->getDouble("regridding_buffer");
		int smallest_patch_size = d_patch_hierarchy->getSmallestPatchSize(0).min();
		for (int il = 1; il < d_patch_hierarchy->getMaxNumberOfLevels(); il++) {
			smallest_patch_size = MIN(smallest_patch_size, d_patch_hierarchy->getSmallestPatchSize(il).min());
		}
		if (d_regridding_buffer > smallest_patch_size) {
			TBOX_ERROR("Error: Regridding_buffer parameter ("<<d_regridding_buffer<<") cannot be greater than smallest_patch_size minimum value("<<smallest_patch_size<<")");
		}
		if (regridding_db->isString("regridding_type")) {
			d_regridding_type = regridding_db->getString("regridding_type");
			d_regridding_min_level = regridding_db->getInteger("regridding_min_level");
			d_regridding_max_level = regridding_db->getInteger("regridding_max_level");
			if (d_regridding_type == "GRADIENT") {
				d_regridding_field = regridding_db->getString("regridding_field");
				d_regridding_compressionFactor = regridding_db->getDouble("regridding_compressionFactor");
				d_regridding_mOffset = regridding_db->getDouble("regridding_mOffset");
				d_regridding = true;
			} else {
				if (d_regridding_type == "FUNCTION") {
					d_regridding_field = regridding_db->getString("regridding_function_field");
					d_regridding_threshold = regridding_db->getDouble("regridding_threshold");
					d_regridding = true;
				} else {
					if (d_regridding_type == "SHADOW") {
						std::string* fields = new std::string[2];
						regridding_db->getStringArray("regridding_fields", fields, 2);
						d_regridding_field = fields[0];
						d_regridding_field_shadow = fields[1];
						d_regridding_error = regridding_db->getDouble("regridding_error");
						d_regridding = true;
						delete[] fields;
					}
				}
			}
		}
	}

	//Stencil of the discretization method
	int maxratio = 1;
	for (int il = 1; il < d_patch_hierarchy->getMaxNumberOfLevels(); il++) {
		const hier::IntVector ratio = d_patch_hierarchy->getRatioToCoarserLevel(il);
		maxratio = MAX(maxratio, ratio.max());
	}
	//Minimum region thickness
	d_regionMinThickness = 3;
	d_ghost_width = 3;

	
	//Register Fields and temporal fields into the variable database
	hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
  	std::shared_ptr<hier::VariableContext> d_cont_curr(vdb->getContext("Current"));
	std::shared_ptr< pdat::CellVariable<int> > mask(std::shared_ptr< pdat::CellVariable<int> >(new pdat::CellVariable<int>(d_dim, "samrai_mask",1)));
	d_mask_id = vdb->registerVariableAndContext(mask ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	IntegrateDataWriter::setMaskVariable(d_mask_id);
	std::shared_ptr< pdat::NodeVariable<double> > interior(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "regridding_value",1)));
	d_interior_regridding_value_id = vdb->registerVariableAndContext(interior ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<int> > nonSync(std::shared_ptr< pdat::NodeVariable<int> >(new pdat::NodeVariable<int>(d_dim, "regridding_tag",1)));
	d_nonSync_regridding_tag_id = vdb->registerVariableAndContext(nonSync ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > interior_i(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "interior_i",1)));
	d_interior_i_id = vdb->registerVariableAndContext(interior_i ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > interior_j(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "interior_j",1)));
	d_interior_j_id = vdb->registerVariableAndContext(interior_j ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > interior_k(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "interior_k",1)));
	d_interior_k_id = vdb->registerVariableAndContext(interior_k ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > FOV_1(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_1",1)));
	d_FOV_1_id = vdb->registerVariableAndContext(FOV_1 ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_1_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_xLower(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_xLower",1)));
	d_FOV_xLower_id = vdb->registerVariableAndContext(FOV_xLower ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_xLower_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_xUpper(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_xUpper",1)));
	d_FOV_xUpper_id = vdb->registerVariableAndContext(FOV_xUpper ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_xUpper_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_yLower(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_yLower",1)));
	d_FOV_yLower_id = vdb->registerVariableAndContext(FOV_yLower ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_yLower_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_yUpper(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_yUpper",1)));
	d_FOV_yUpper_id = vdb->registerVariableAndContext(FOV_yUpper ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_yUpper_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_zLower(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_zLower",1)));
	d_FOV_zLower_id = vdb->registerVariableAndContext(FOV_zLower ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_zLower_id);
	std::shared_ptr< pdat::NodeVariable<double> > FOV_zUpper(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "FOV_zUpper",1)));
	d_FOV_zUpper_id = vdb->registerVariableAndContext(FOV_zUpper ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_FOV_zUpper_id);
	std::shared_ptr< pdat::NodeVariable<double> > Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Phi",1)));
	d_Phi_id = vdb->registerVariableAndContext(Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_Phi_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xx",1)));
	d_gammac_xx_id = vdb->registerVariableAndContext(gammac_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_xx_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xy",1)));
	d_gammac_xy_id = vdb->registerVariableAndContext(gammac_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_xy_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xz",1)));
	d_gammac_xz_id = vdb->registerVariableAndContext(gammac_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_xz_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yx",1)));
	d_gammac_yx_id = vdb->registerVariableAndContext(gammac_yx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_yx_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yy",1)));
	d_gammac_yy_id = vdb->registerVariableAndContext(gammac_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_yy_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yz",1)));
	d_gammac_yz_id = vdb->registerVariableAndContext(gammac_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_yz_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zx",1)));
	d_gammac_zx_id = vdb->registerVariableAndContext(gammac_zx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_zx_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zy",1)));
	d_gammac_zy_id = vdb->registerVariableAndContext(gammac_zy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_zy_id);
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zz",1)));
	d_gammac_zz_id = vdb->registerVariableAndContext(gammac_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_gammac_zz_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xx",1)));
	d_A_xx_id = vdb->registerVariableAndContext(A_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_xx_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xy",1)));
	d_A_xy_id = vdb->registerVariableAndContext(A_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_xy_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xz",1)));
	d_A_xz_id = vdb->registerVariableAndContext(A_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_xz_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_yy",1)));
	d_A_yy_id = vdb->registerVariableAndContext(A_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_yy_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_yz",1)));
	d_A_yz_id = vdb->registerVariableAndContext(A_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_yz_id);
	std::shared_ptr< pdat::NodeVariable<double> > A_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_zz",1)));
	d_A_zz_id = vdb->registerVariableAndContext(A_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_A_zz_id);
	std::shared_ptr< pdat::NodeVariable<double> > trK(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "trK",1)));
	d_trK_id = vdb->registerVariableAndContext(trK ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_trK_id);
	std::shared_ptr< pdat::NodeVariable<double> > alpha(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "alpha",1)));
	d_alpha_id = vdb->registerVariableAndContext(alpha ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_alpha_id);
	std::shared_ptr< pdat::NodeVariable<double> > beta_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_x",1)));
	d_beta_x_id = vdb->registerVariableAndContext(beta_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_beta_x_id);
	std::shared_ptr< pdat::NodeVariable<double> > beta_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_y",1)));
	d_beta_y_id = vdb->registerVariableAndContext(beta_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_beta_y_id);
	std::shared_ptr< pdat::NodeVariable<double> > beta_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_z",1)));
	d_beta_z_id = vdb->registerVariableAndContext(beta_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_beta_z_id);
	std::shared_ptr< pdat::NodeVariable<double> > Gam_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_x",1)));
	d_Gam_x_id = vdb->registerVariableAndContext(Gam_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_Gam_x_id);
	std::shared_ptr< pdat::NodeVariable<double> > Gam_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_y",1)));
	d_Gam_y_id = vdb->registerVariableAndContext(Gam_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_Gam_y_id);
	std::shared_ptr< pdat::NodeVariable<double> > Gam_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_z",1)));
	d_Gam_z_id = vdb->registerVariableAndContext(Gam_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_Gam_z_id);
	std::shared_ptr< pdat::NodeVariable<double> > Rscalar(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Rscalar",1)));
	d_Rscalar_id = vdb->registerVariableAndContext(Rscalar ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > HamCon(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "HamCon",1)));
	d_HamCon_id = vdb->registerVariableAndContext(HamCon ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > MomCon_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "MomCon_x",1)));
	d_MomCon_x_id = vdb->registerVariableAndContext(MomCon_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > MomCon_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "MomCon_y",1)));
	d_MomCon_y_id = vdb->registerVariableAndContext(MomCon_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > MomCon_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "MomCon_z",1)));
	d_MomCon_z_id = vdb->registerVariableAndContext(MomCon_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_xx",1)));
	d_rk1gammac_xx_id = vdb->registerVariableAndContext(rk1gammac_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_xy",1)));
	d_rk1gammac_xy_id = vdb->registerVariableAndContext(rk1gammac_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_xz",1)));
	d_rk1gammac_xz_id = vdb->registerVariableAndContext(rk1gammac_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_yy",1)));
	d_rk1gammac_yy_id = vdb->registerVariableAndContext(rk1gammac_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_yx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_yx",1)));
	d_rk1gammac_yx_id = vdb->registerVariableAndContext(rk1gammac_yx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_yz",1)));
	d_rk1gammac_yz_id = vdb->registerVariableAndContext(rk1gammac_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_zz",1)));
	d_rk1gammac_zz_id = vdb->registerVariableAndContext(rk1gammac_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_zx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_zx",1)));
	d_rk1gammac_zx_id = vdb->registerVariableAndContext(rk1gammac_zx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1gammac_zy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1gammac_zy",1)));
	d_rk1gammac_zy_id = vdb->registerVariableAndContext(rk1gammac_zy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_xx",1)));
	d_rk1A_xx_id = vdb->registerVariableAndContext(rk1A_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_xy",1)));
	d_rk1A_xy_id = vdb->registerVariableAndContext(rk1A_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_xz",1)));
	d_rk1A_xz_id = vdb->registerVariableAndContext(rk1A_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_yy",1)));
	d_rk1A_yy_id = vdb->registerVariableAndContext(rk1A_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_yz",1)));
	d_rk1A_yz_id = vdb->registerVariableAndContext(rk1A_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1A_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1A_zz",1)));
	d_rk1A_zz_id = vdb->registerVariableAndContext(rk1A_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1Phi",1)));
	d_rk1Phi_id = vdb->registerVariableAndContext(rk1Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1trK(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1trK",1)));
	d_rk1trK_id = vdb->registerVariableAndContext(rk1trK ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1beta_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1beta_x",1)));
	d_rk1beta_x_id = vdb->registerVariableAndContext(rk1beta_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1beta_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1beta_y",1)));
	d_rk1beta_y_id = vdb->registerVariableAndContext(rk1beta_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1beta_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1beta_z",1)));
	d_rk1beta_z_id = vdb->registerVariableAndContext(rk1beta_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1alpha(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1alpha",1)));
	d_rk1alpha_id = vdb->registerVariableAndContext(rk1alpha ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1Gam_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1Gam_x",1)));
	d_rk1Gam_x_id = vdb->registerVariableAndContext(rk1Gam_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1Gam_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1Gam_y",1)));
	d_rk1Gam_y_id = vdb->registerVariableAndContext(rk1Gam_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk1Gam_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk1Gam_z",1)));
	d_rk1Gam_z_id = vdb->registerVariableAndContext(rk1Gam_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_xx",1)));
	d_rk2gammac_xx_id = vdb->registerVariableAndContext(rk2gammac_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_xy",1)));
	d_rk2gammac_xy_id = vdb->registerVariableAndContext(rk2gammac_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_xz",1)));
	d_rk2gammac_xz_id = vdb->registerVariableAndContext(rk2gammac_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_yy",1)));
	d_rk2gammac_yy_id = vdb->registerVariableAndContext(rk2gammac_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_yx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_yx",1)));
	d_rk2gammac_yx_id = vdb->registerVariableAndContext(rk2gammac_yx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_yz",1)));
	d_rk2gammac_yz_id = vdb->registerVariableAndContext(rk2gammac_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_zz",1)));
	d_rk2gammac_zz_id = vdb->registerVariableAndContext(rk2gammac_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_zx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_zx",1)));
	d_rk2gammac_zx_id = vdb->registerVariableAndContext(rk2gammac_zx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2gammac_zy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2gammac_zy",1)));
	d_rk2gammac_zy_id = vdb->registerVariableAndContext(rk2gammac_zy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_xx",1)));
	d_rk2A_xx_id = vdb->registerVariableAndContext(rk2A_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_xy",1)));
	d_rk2A_xy_id = vdb->registerVariableAndContext(rk2A_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_xz",1)));
	d_rk2A_xz_id = vdb->registerVariableAndContext(rk2A_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_yy",1)));
	d_rk2A_yy_id = vdb->registerVariableAndContext(rk2A_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_yz",1)));
	d_rk2A_yz_id = vdb->registerVariableAndContext(rk2A_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2A_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2A_zz",1)));
	d_rk2A_zz_id = vdb->registerVariableAndContext(rk2A_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2Phi",1)));
	d_rk2Phi_id = vdb->registerVariableAndContext(rk2Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2trK(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2trK",1)));
	d_rk2trK_id = vdb->registerVariableAndContext(rk2trK ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2beta_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2beta_x",1)));
	d_rk2beta_x_id = vdb->registerVariableAndContext(rk2beta_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2beta_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2beta_y",1)));
	d_rk2beta_y_id = vdb->registerVariableAndContext(rk2beta_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2beta_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2beta_z",1)));
	d_rk2beta_z_id = vdb->registerVariableAndContext(rk2beta_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2alpha(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2alpha",1)));
	d_rk2alpha_id = vdb->registerVariableAndContext(rk2alpha ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2Gam_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2Gam_x",1)));
	d_rk2Gam_x_id = vdb->registerVariableAndContext(rk2Gam_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2Gam_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2Gam_y",1)));
	d_rk2Gam_y_id = vdb->registerVariableAndContext(rk2Gam_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk2Gam_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk2Gam_z",1)));
	d_rk2Gam_z_id = vdb->registerVariableAndContext(rk2Gam_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_xx",1)));
	d_rk3gammac_xx_id = vdb->registerVariableAndContext(rk3gammac_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_xy",1)));
	d_rk3gammac_xy_id = vdb->registerVariableAndContext(rk3gammac_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_xz",1)));
	d_rk3gammac_xz_id = vdb->registerVariableAndContext(rk3gammac_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_yy",1)));
	d_rk3gammac_yy_id = vdb->registerVariableAndContext(rk3gammac_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_yx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_yx",1)));
	d_rk3gammac_yx_id = vdb->registerVariableAndContext(rk3gammac_yx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_yz",1)));
	d_rk3gammac_yz_id = vdb->registerVariableAndContext(rk3gammac_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_zz",1)));
	d_rk3gammac_zz_id = vdb->registerVariableAndContext(rk3gammac_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_zx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_zx",1)));
	d_rk3gammac_zx_id = vdb->registerVariableAndContext(rk3gammac_zx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3gammac_zy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3gammac_zy",1)));
	d_rk3gammac_zy_id = vdb->registerVariableAndContext(rk3gammac_zy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_xx(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_xx",1)));
	d_rk3A_xx_id = vdb->registerVariableAndContext(rk3A_xx ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_xy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_xy",1)));
	d_rk3A_xy_id = vdb->registerVariableAndContext(rk3A_xy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_xz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_xz",1)));
	d_rk3A_xz_id = vdb->registerVariableAndContext(rk3A_xz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_yy(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_yy",1)));
	d_rk3A_yy_id = vdb->registerVariableAndContext(rk3A_yy ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_yz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_yz",1)));
	d_rk3A_yz_id = vdb->registerVariableAndContext(rk3A_yz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3A_zz(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3A_zz",1)));
	d_rk3A_zz_id = vdb->registerVariableAndContext(rk3A_zz ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3Phi",1)));
	d_rk3Phi_id = vdb->registerVariableAndContext(rk3Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3trK(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3trK",1)));
	d_rk3trK_id = vdb->registerVariableAndContext(rk3trK ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3beta_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3beta_x",1)));
	d_rk3beta_x_id = vdb->registerVariableAndContext(rk3beta_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3beta_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3beta_y",1)));
	d_rk3beta_y_id = vdb->registerVariableAndContext(rk3beta_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3beta_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3beta_z",1)));
	d_rk3beta_z_id = vdb->registerVariableAndContext(rk3beta_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3alpha(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3alpha",1)));
	d_rk3alpha_id = vdb->registerVariableAndContext(rk3alpha ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3Gam_x(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3Gam_x",1)));
	d_rk3Gam_x_id = vdb->registerVariableAndContext(rk3Gam_x ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3Gam_y(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3Gam_y",1)));
	d_rk3Gam_y_id = vdb->registerVariableAndContext(rk3Gam_y ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > rk3Gam_z(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "rk3Gam_z",1)));
	d_rk3Gam_z_id = vdb->registerVariableAndContext(rk3Gam_z ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi",1)));
	d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id = vdb->registerVariableAndContext(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id);
	std::shared_ptr< pdat::NodeVariable<double> > d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi",1)));
	d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id = vdb->registerVariableAndContext(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id);
	std::shared_ptr< pdat::NodeVariable<double> > d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi",1)));
	d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id = vdb->registerVariableAndContext(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id);
	std::shared_ptr< pdat::NodeVariable<double> > stalled_1(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "stalled_1",1)));
	d_stalled_1_id = vdb->registerVariableAndContext(stalled_1 ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	hier::PatchDataRestartManager::getManager()->registerPatchDataForRestart(d_stalled_1_id);
	std::shared_ptr< pdat::NodeVariable<double> > Phi_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Phi_p",1)));
	d_Phi_p_id = vdb->registerVariableAndContext(Phi_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xx_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xx_p",1)));
	d_gammac_xx_p_id = vdb->registerVariableAndContext(gammac_xx_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xy_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xy_p",1)));
	d_gammac_xy_p_id = vdb->registerVariableAndContext(gammac_xy_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_xz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_xz_p",1)));
	d_gammac_xz_p_id = vdb->registerVariableAndContext(gammac_xz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yx_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yx_p",1)));
	d_gammac_yx_p_id = vdb->registerVariableAndContext(gammac_yx_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yy_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yy_p",1)));
	d_gammac_yy_p_id = vdb->registerVariableAndContext(gammac_yy_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_yz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_yz_p",1)));
	d_gammac_yz_p_id = vdb->registerVariableAndContext(gammac_yz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zx_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zx_p",1)));
	d_gammac_zx_p_id = vdb->registerVariableAndContext(gammac_zx_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zy_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zy_p",1)));
	d_gammac_zy_p_id = vdb->registerVariableAndContext(gammac_zy_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > gammac_zz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "gammac_zz_p",1)));
	d_gammac_zz_p_id = vdb->registerVariableAndContext(gammac_zz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_xx_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xx_p",1)));
	d_A_xx_p_id = vdb->registerVariableAndContext(A_xx_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_xy_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xy_p",1)));
	d_A_xy_p_id = vdb->registerVariableAndContext(A_xy_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_xz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_xz_p",1)));
	d_A_xz_p_id = vdb->registerVariableAndContext(A_xz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_yy_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_yy_p",1)));
	d_A_yy_p_id = vdb->registerVariableAndContext(A_yy_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_yz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_yz_p",1)));
	d_A_yz_p_id = vdb->registerVariableAndContext(A_yz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > A_zz_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "A_zz_p",1)));
	d_A_zz_p_id = vdb->registerVariableAndContext(A_zz_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > trK_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "trK_p",1)));
	d_trK_p_id = vdb->registerVariableAndContext(trK_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > alpha_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "alpha_p",1)));
	d_alpha_p_id = vdb->registerVariableAndContext(alpha_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > beta_x_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_x_p",1)));
	d_beta_x_p_id = vdb->registerVariableAndContext(beta_x_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > beta_y_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_y_p",1)));
	d_beta_y_p_id = vdb->registerVariableAndContext(beta_y_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > beta_z_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "beta_z_p",1)));
	d_beta_z_p_id = vdb->registerVariableAndContext(beta_z_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > Gam_x_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_x_p",1)));
	d_Gam_x_p_id = vdb->registerVariableAndContext(Gam_x_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > Gam_y_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_y_p",1)));
	d_Gam_y_p_id = vdb->registerVariableAndContext(Gam_y_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));
	std::shared_ptr< pdat::NodeVariable<double> > Gam_z_p(std::shared_ptr< pdat::NodeVariable<double> >(new pdat::NodeVariable<double>(d_dim, "Gam_z_p",1)));
	d_Gam_z_p_id = vdb->registerVariableAndContext(Gam_z_p ,d_cont_curr ,hier::IntVector(d_dim, d_ghost_width));


	//Refine and coarse algorithms

	d_bdry_fill_init = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_post_coarsen = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_fill_advance1 = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_fill_advance6 = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_fill_advance11 = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_fill_advance16 = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_bdry_fill_analysis1 = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_coarsen_algorithm = std::shared_ptr< xfer::CoarsenAlgorithm >(new xfer::CoarsenAlgorithm(d_dim));

	d_mapping_fill = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
    d_tagging_fill = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());
	d_fill_new_level    = std::shared_ptr< xfer::RefineAlgorithm >(new xfer::RefineAlgorithm());


	//mapping communication

	std::shared_ptr< hier::RefineOperator > refine_operator_map = d_grid_geometry->lookupRefineOperator(interior, "LINEAR_REFINE");
	d_mapping_fill->registerRefine(d_interior_regridding_value_id,d_interior_regridding_value_id,d_interior_regridding_value_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_interior_i_id,d_interior_i_id,d_interior_i_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_interior_j_id,d_interior_j_id,d_interior_j_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_interior_k_id,d_interior_k_id,d_interior_k_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_1_id,d_FOV_1_id,d_FOV_1_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_xLower_id,d_FOV_xLower_id,d_FOV_xLower_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_xUpper_id,d_FOV_xUpper_id,d_FOV_xUpper_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_yLower_id,d_FOV_yLower_id,d_FOV_yLower_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_yUpper_id,d_FOV_yUpper_id,d_FOV_yUpper_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_zLower_id,d_FOV_zLower_id,d_FOV_zLower_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_FOV_zUpper_id,d_FOV_zUpper_id,d_FOV_zUpper_id, refine_operator_map);
	d_mapping_fill->registerRefine(d_stalled_1_id,d_stalled_1_id,d_stalled_1_id, refine_operator_map);


    d_tagging_fill->registerRefine(d_nonSync_regridding_tag_id,d_nonSync_regridding_tag_id,d_nonSync_regridding_tag_id, d_grid_geometry->lookupRefineOperator(nonSync, "NO_REFINE"));

	//refine and coarsen operators
	string refine_op_name = "LINEAR_REFINE";
	int order = 0;
	if (database->isDatabase("regridding")) {
		regridding_db = database->getDatabase("regridding");
		if (regridding_db->isString("interpolator")) {
			refine_op_name = regridding_db->getString("interpolator");
			if (refine_op_name == "LINEAR_REFINE") {
				order = 1;
			}
			if (refine_op_name == "CUBIC_REFINE") {
				order = 3;
			}
			if (refine_op_name == "QUINTIC_REFINE") {
				order = 5;
			}
		}
	}
	std::shared_ptr< hier::RefineOperator > refine_operator, refine_operator_bound;
	std::shared_ptr< hier::CoarsenOperator > coarsen_operator = d_grid_geometry->lookupCoarsenOperator(FOV_1, "CONSTANT_COARSEN");
	if (order > 0) {
		std::shared_ptr< hier::RefineOperator > tmp_refine_operator(new LagrangianPolynomicRefine(false, order, d_patch_hierarchy, d_dim));
		refine_operator = tmp_refine_operator;
		std::shared_ptr< hier::RefineOperator > tmp_refine_operator_bound(new LagrangianPolynomicRefine(true, order, d_patch_hierarchy, d_dim));
		refine_operator_bound = tmp_refine_operator_bound;
	} else {
		refine_operator = d_grid_geometry->lookupRefineOperator(FOV_1, refine_op_name);
		refine_operator_bound = d_grid_geometry->lookupRefineOperator(FOV_1, refine_op_name);
	}

	std::shared_ptr<SAMRAI::hier::TimeInterpolateOperator> tio_mesh1(new TimeInterpolator(d_grid_geometry, "mesh"));
	time_interpolate_operator_mesh1 = std::dynamic_pointer_cast<TimeInterpolator>(tio_mesh1);


	//Register variables to the refineAlgorithm for boundaries

	if (d_refinedTimeStepping) {
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_z_id,d_rk1Gam_z_id,d_Gam_z_p_id,d_rk1Gam_z_id,d_rk2Gam_z_id,d_rk3Gam_z_id,d_Gam_z_id,d_rk1Gam_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_y_id,d_rk1Gam_y_id,d_Gam_y_p_id,d_rk1Gam_y_id,d_rk2Gam_y_id,d_rk3Gam_y_id,d_Gam_y_id,d_rk1Gam_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_x_id,d_rk1Gam_x_id,d_Gam_x_p_id,d_rk1Gam_x_id,d_rk2Gam_x_id,d_rk3Gam_x_id,d_Gam_x_id,d_rk1Gam_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1alpha_id,d_rk1alpha_id,d_alpha_p_id,d_rk1alpha_id,d_rk2alpha_id,d_rk3alpha_id,d_alpha_id,d_rk1alpha_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_z_id,d_rk1beta_z_id,d_beta_z_p_id,d_rk1beta_z_id,d_rk2beta_z_id,d_rk3beta_z_id,d_beta_z_id,d_rk1beta_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_y_id,d_rk1beta_y_id,d_beta_y_p_id,d_rk1beta_y_id,d_rk2beta_y_id,d_rk3beta_y_id,d_beta_y_id,d_rk1beta_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_x_id,d_rk1beta_x_id,d_beta_x_p_id,d_rk1beta_x_id,d_rk2beta_x_id,d_rk3beta_x_id,d_beta_x_id,d_rk1beta_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1trK_id,d_rk1trK_id,d_trK_p_id,d_rk1trK_id,d_rk2trK_id,d_rk3trK_id,d_trK_id,d_rk1trK_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1Phi_id,d_rk1Phi_id,d_Phi_p_id,d_rk1Phi_id,d_rk2Phi_id,d_rk3Phi_id,d_Phi_id,d_rk1Phi_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_zz_id,d_rk1A_zz_id,d_A_zz_p_id,d_rk1A_zz_id,d_rk2A_zz_id,d_rk3A_zz_id,d_A_zz_id,d_rk1A_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_yz_id,d_rk1A_yz_id,d_A_yz_p_id,d_rk1A_yz_id,d_rk2A_yz_id,d_rk3A_yz_id,d_A_yz_id,d_rk1A_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_yy_id,d_rk1A_yy_id,d_A_yy_p_id,d_rk1A_yy_id,d_rk2A_yy_id,d_rk3A_yy_id,d_A_yy_id,d_rk1A_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xz_id,d_rk1A_xz_id,d_A_xz_p_id,d_rk1A_xz_id,d_rk2A_xz_id,d_rk3A_xz_id,d_A_xz_id,d_rk1A_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xy_id,d_rk1A_xy_id,d_A_xy_p_id,d_rk1A_xy_id,d_rk2A_xy_id,d_rk3A_xy_id,d_A_xy_id,d_rk1A_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xx_id,d_rk1A_xx_id,d_A_xx_p_id,d_rk1A_xx_id,d_rk2A_xx_id,d_rk3A_xx_id,d_A_xx_id,d_rk1A_xx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zy_id,d_rk1gammac_zy_id,d_gammac_zy_p_id,d_rk1gammac_zy_id,d_rk2gammac_zy_id,d_rk3gammac_zy_id,d_gammac_zy_id,d_rk1gammac_zy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zx_id,d_rk1gammac_zx_id,d_gammac_zx_p_id,d_rk1gammac_zx_id,d_rk2gammac_zx_id,d_rk3gammac_zx_id,d_gammac_zx_id,d_rk1gammac_zx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zz_id,d_rk1gammac_zz_id,d_gammac_zz_p_id,d_rk1gammac_zz_id,d_rk2gammac_zz_id,d_rk3gammac_zz_id,d_gammac_zz_id,d_rk1gammac_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yz_id,d_rk1gammac_yz_id,d_gammac_yz_p_id,d_rk1gammac_yz_id,d_rk2gammac_yz_id,d_rk3gammac_yz_id,d_gammac_yz_id,d_rk1gammac_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yx_id,d_rk1gammac_yx_id,d_gammac_yx_p_id,d_rk1gammac_yx_id,d_rk2gammac_yx_id,d_rk3gammac_yx_id,d_gammac_yx_id,d_rk1gammac_yx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yy_id,d_rk1gammac_yy_id,d_gammac_yy_p_id,d_rk1gammac_yy_id,d_rk2gammac_yy_id,d_rk3gammac_yy_id,d_gammac_yy_id,d_rk1gammac_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xz_id,d_rk1gammac_xz_id,d_gammac_xz_p_id,d_rk1gammac_xz_id,d_rk2gammac_xz_id,d_rk3gammac_xz_id,d_gammac_xz_id,d_rk1gammac_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xy_id,d_rk1gammac_xy_id,d_gammac_xy_p_id,d_rk1gammac_xy_id,d_rk2gammac_xy_id,d_rk3gammac_xy_id,d_gammac_xy_id,d_rk1gammac_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xx_id,d_rk1gammac_xx_id,d_gammac_xx_p_id,d_rk1gammac_xx_id,d_rk2gammac_xx_id,d_rk3gammac_xx_id,d_gammac_xx_id,d_rk1gammac_xx_id,refine_operator,tio_mesh1);
	} else {
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_z_id,d_rk1Gam_z_id,d_rk1Gam_z_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_y_id,d_rk1Gam_y_id,d_rk1Gam_y_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1Gam_x_id,d_rk1Gam_x_id,d_rk1Gam_x_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1alpha_id,d_rk1alpha_id,d_rk1alpha_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_z_id,d_rk1beta_z_id,d_rk1beta_z_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_y_id,d_rk1beta_y_id,d_rk1beta_y_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1beta_x_id,d_rk1beta_x_id,d_rk1beta_x_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1trK_id,d_rk1trK_id,d_rk1trK_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1Phi_id,d_rk1Phi_id,d_rk1Phi_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_zz_id,d_rk1A_zz_id,d_rk1A_zz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_yz_id,d_rk1A_yz_id,d_rk1A_yz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_yy_id,d_rk1A_yy_id,d_rk1A_yy_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xz_id,d_rk1A_xz_id,d_rk1A_xz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xy_id,d_rk1A_xy_id,d_rk1A_xy_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1A_xx_id,d_rk1A_xx_id,d_rk1A_xx_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zy_id,d_rk1gammac_zy_id,d_rk1gammac_zy_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zx_id,d_rk1gammac_zx_id,d_rk1gammac_zx_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_zz_id,d_rk1gammac_zz_id,d_rk1gammac_zz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yz_id,d_rk1gammac_yz_id,d_rk1gammac_yz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yx_id,d_rk1gammac_yx_id,d_rk1gammac_yx_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_yy_id,d_rk1gammac_yy_id,d_rk1gammac_yy_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xz_id,d_rk1gammac_xz_id,d_rk1gammac_xz_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xy_id,d_rk1gammac_xy_id,d_rk1gammac_xy_id,refine_operator);
		d_bdry_fill_advance1->registerRefine(d_rk1gammac_xx_id,d_rk1gammac_xx_id,d_rk1gammac_xx_id,refine_operator);
	}
	if (d_refinedTimeStepping) {
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_z_id,d_rk2Gam_z_id,d_Gam_z_p_id,d_rk1Gam_z_id,d_rk2Gam_z_id,d_rk3Gam_z_id,d_Gam_z_id,d_rk2Gam_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_y_id,d_rk2Gam_y_id,d_Gam_y_p_id,d_rk1Gam_y_id,d_rk2Gam_y_id,d_rk3Gam_y_id,d_Gam_y_id,d_rk2Gam_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_x_id,d_rk2Gam_x_id,d_Gam_x_p_id,d_rk1Gam_x_id,d_rk2Gam_x_id,d_rk3Gam_x_id,d_Gam_x_id,d_rk2Gam_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2alpha_id,d_rk2alpha_id,d_alpha_p_id,d_rk1alpha_id,d_rk2alpha_id,d_rk3alpha_id,d_alpha_id,d_rk2alpha_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_z_id,d_rk2beta_z_id,d_beta_z_p_id,d_rk1beta_z_id,d_rk2beta_z_id,d_rk3beta_z_id,d_beta_z_id,d_rk2beta_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_y_id,d_rk2beta_y_id,d_beta_y_p_id,d_rk1beta_y_id,d_rk2beta_y_id,d_rk3beta_y_id,d_beta_y_id,d_rk2beta_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_x_id,d_rk2beta_x_id,d_beta_x_p_id,d_rk1beta_x_id,d_rk2beta_x_id,d_rk3beta_x_id,d_beta_x_id,d_rk2beta_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2trK_id,d_rk2trK_id,d_trK_p_id,d_rk1trK_id,d_rk2trK_id,d_rk3trK_id,d_trK_id,d_rk2trK_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2Phi_id,d_rk2Phi_id,d_Phi_p_id,d_rk1Phi_id,d_rk2Phi_id,d_rk3Phi_id,d_Phi_id,d_rk2Phi_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_zz_id,d_rk2A_zz_id,d_A_zz_p_id,d_rk1A_zz_id,d_rk2A_zz_id,d_rk3A_zz_id,d_A_zz_id,d_rk2A_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_yz_id,d_rk2A_yz_id,d_A_yz_p_id,d_rk1A_yz_id,d_rk2A_yz_id,d_rk3A_yz_id,d_A_yz_id,d_rk2A_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_yy_id,d_rk2A_yy_id,d_A_yy_p_id,d_rk1A_yy_id,d_rk2A_yy_id,d_rk3A_yy_id,d_A_yy_id,d_rk2A_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xz_id,d_rk2A_xz_id,d_A_xz_p_id,d_rk1A_xz_id,d_rk2A_xz_id,d_rk3A_xz_id,d_A_xz_id,d_rk2A_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xy_id,d_rk2A_xy_id,d_A_xy_p_id,d_rk1A_xy_id,d_rk2A_xy_id,d_rk3A_xy_id,d_A_xy_id,d_rk2A_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xx_id,d_rk2A_xx_id,d_A_xx_p_id,d_rk1A_xx_id,d_rk2A_xx_id,d_rk3A_xx_id,d_A_xx_id,d_rk2A_xx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zy_id,d_rk2gammac_zy_id,d_gammac_zy_p_id,d_rk1gammac_zy_id,d_rk2gammac_zy_id,d_rk3gammac_zy_id,d_gammac_zy_id,d_rk2gammac_zy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zx_id,d_rk2gammac_zx_id,d_gammac_zx_p_id,d_rk1gammac_zx_id,d_rk2gammac_zx_id,d_rk3gammac_zx_id,d_gammac_zx_id,d_rk2gammac_zx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zz_id,d_rk2gammac_zz_id,d_gammac_zz_p_id,d_rk1gammac_zz_id,d_rk2gammac_zz_id,d_rk3gammac_zz_id,d_gammac_zz_id,d_rk2gammac_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yz_id,d_rk2gammac_yz_id,d_gammac_yz_p_id,d_rk1gammac_yz_id,d_rk2gammac_yz_id,d_rk3gammac_yz_id,d_gammac_yz_id,d_rk2gammac_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yx_id,d_rk2gammac_yx_id,d_gammac_yx_p_id,d_rk1gammac_yx_id,d_rk2gammac_yx_id,d_rk3gammac_yx_id,d_gammac_yx_id,d_rk2gammac_yx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yy_id,d_rk2gammac_yy_id,d_gammac_yy_p_id,d_rk1gammac_yy_id,d_rk2gammac_yy_id,d_rk3gammac_yy_id,d_gammac_yy_id,d_rk2gammac_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xz_id,d_rk2gammac_xz_id,d_gammac_xz_p_id,d_rk1gammac_xz_id,d_rk2gammac_xz_id,d_rk3gammac_xz_id,d_gammac_xz_id,d_rk2gammac_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xy_id,d_rk2gammac_xy_id,d_gammac_xy_p_id,d_rk1gammac_xy_id,d_rk2gammac_xy_id,d_rk3gammac_xy_id,d_gammac_xy_id,d_rk2gammac_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xx_id,d_rk2gammac_xx_id,d_gammac_xx_p_id,d_rk1gammac_xx_id,d_rk2gammac_xx_id,d_rk3gammac_xx_id,d_gammac_xx_id,d_rk2gammac_xx_id,refine_operator,tio_mesh1);
	} else {
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_z_id,d_rk2Gam_z_id,d_rk2Gam_z_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_y_id,d_rk2Gam_y_id,d_rk2Gam_y_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2Gam_x_id,d_rk2Gam_x_id,d_rk2Gam_x_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2alpha_id,d_rk2alpha_id,d_rk2alpha_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_z_id,d_rk2beta_z_id,d_rk2beta_z_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_y_id,d_rk2beta_y_id,d_rk2beta_y_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2beta_x_id,d_rk2beta_x_id,d_rk2beta_x_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2trK_id,d_rk2trK_id,d_rk2trK_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2Phi_id,d_rk2Phi_id,d_rk2Phi_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_zz_id,d_rk2A_zz_id,d_rk2A_zz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_yz_id,d_rk2A_yz_id,d_rk2A_yz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_yy_id,d_rk2A_yy_id,d_rk2A_yy_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xz_id,d_rk2A_xz_id,d_rk2A_xz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xy_id,d_rk2A_xy_id,d_rk2A_xy_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2A_xx_id,d_rk2A_xx_id,d_rk2A_xx_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zy_id,d_rk2gammac_zy_id,d_rk2gammac_zy_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zx_id,d_rk2gammac_zx_id,d_rk2gammac_zx_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_zz_id,d_rk2gammac_zz_id,d_rk2gammac_zz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yz_id,d_rk2gammac_yz_id,d_rk2gammac_yz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yx_id,d_rk2gammac_yx_id,d_rk2gammac_yx_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_yy_id,d_rk2gammac_yy_id,d_rk2gammac_yy_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xz_id,d_rk2gammac_xz_id,d_rk2gammac_xz_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xy_id,d_rk2gammac_xy_id,d_rk2gammac_xy_id,refine_operator);
		d_bdry_fill_advance6->registerRefine(d_rk2gammac_xx_id,d_rk2gammac_xx_id,d_rk2gammac_xx_id,refine_operator);
	}
	if (d_refinedTimeStepping) {
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_z_id,d_rk3Gam_z_id,d_Gam_z_p_id,d_rk1Gam_z_id,d_rk2Gam_z_id,d_rk3Gam_z_id,d_Gam_z_id,d_rk3Gam_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_y_id,d_rk3Gam_y_id,d_Gam_y_p_id,d_rk1Gam_y_id,d_rk2Gam_y_id,d_rk3Gam_y_id,d_Gam_y_id,d_rk3Gam_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_x_id,d_rk3Gam_x_id,d_Gam_x_p_id,d_rk1Gam_x_id,d_rk2Gam_x_id,d_rk3Gam_x_id,d_Gam_x_id,d_rk3Gam_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3alpha_id,d_rk3alpha_id,d_alpha_p_id,d_rk1alpha_id,d_rk2alpha_id,d_rk3alpha_id,d_alpha_id,d_rk3alpha_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_z_id,d_rk3beta_z_id,d_beta_z_p_id,d_rk1beta_z_id,d_rk2beta_z_id,d_rk3beta_z_id,d_beta_z_id,d_rk3beta_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_y_id,d_rk3beta_y_id,d_beta_y_p_id,d_rk1beta_y_id,d_rk2beta_y_id,d_rk3beta_y_id,d_beta_y_id,d_rk3beta_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_x_id,d_rk3beta_x_id,d_beta_x_p_id,d_rk1beta_x_id,d_rk2beta_x_id,d_rk3beta_x_id,d_beta_x_id,d_rk3beta_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3trK_id,d_rk3trK_id,d_trK_p_id,d_rk1trK_id,d_rk2trK_id,d_rk3trK_id,d_trK_id,d_rk3trK_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3Phi_id,d_rk3Phi_id,d_Phi_p_id,d_rk1Phi_id,d_rk2Phi_id,d_rk3Phi_id,d_Phi_id,d_rk3Phi_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_zz_id,d_rk3A_zz_id,d_A_zz_p_id,d_rk1A_zz_id,d_rk2A_zz_id,d_rk3A_zz_id,d_A_zz_id,d_rk3A_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_yz_id,d_rk3A_yz_id,d_A_yz_p_id,d_rk1A_yz_id,d_rk2A_yz_id,d_rk3A_yz_id,d_A_yz_id,d_rk3A_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_yy_id,d_rk3A_yy_id,d_A_yy_p_id,d_rk1A_yy_id,d_rk2A_yy_id,d_rk3A_yy_id,d_A_yy_id,d_rk3A_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xz_id,d_rk3A_xz_id,d_A_xz_p_id,d_rk1A_xz_id,d_rk2A_xz_id,d_rk3A_xz_id,d_A_xz_id,d_rk3A_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xy_id,d_rk3A_xy_id,d_A_xy_p_id,d_rk1A_xy_id,d_rk2A_xy_id,d_rk3A_xy_id,d_A_xy_id,d_rk3A_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xx_id,d_rk3A_xx_id,d_A_xx_p_id,d_rk1A_xx_id,d_rk2A_xx_id,d_rk3A_xx_id,d_A_xx_id,d_rk3A_xx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zy_id,d_rk3gammac_zy_id,d_gammac_zy_p_id,d_rk1gammac_zy_id,d_rk2gammac_zy_id,d_rk3gammac_zy_id,d_gammac_zy_id,d_rk3gammac_zy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zx_id,d_rk3gammac_zx_id,d_gammac_zx_p_id,d_rk1gammac_zx_id,d_rk2gammac_zx_id,d_rk3gammac_zx_id,d_gammac_zx_id,d_rk3gammac_zx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zz_id,d_rk3gammac_zz_id,d_gammac_zz_p_id,d_rk1gammac_zz_id,d_rk2gammac_zz_id,d_rk3gammac_zz_id,d_gammac_zz_id,d_rk3gammac_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yz_id,d_rk3gammac_yz_id,d_gammac_yz_p_id,d_rk1gammac_yz_id,d_rk2gammac_yz_id,d_rk3gammac_yz_id,d_gammac_yz_id,d_rk3gammac_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yx_id,d_rk3gammac_yx_id,d_gammac_yx_p_id,d_rk1gammac_yx_id,d_rk2gammac_yx_id,d_rk3gammac_yx_id,d_gammac_yx_id,d_rk3gammac_yx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yy_id,d_rk3gammac_yy_id,d_gammac_yy_p_id,d_rk1gammac_yy_id,d_rk2gammac_yy_id,d_rk3gammac_yy_id,d_gammac_yy_id,d_rk3gammac_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xz_id,d_rk3gammac_xz_id,d_gammac_xz_p_id,d_rk1gammac_xz_id,d_rk2gammac_xz_id,d_rk3gammac_xz_id,d_gammac_xz_id,d_rk3gammac_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xy_id,d_rk3gammac_xy_id,d_gammac_xy_p_id,d_rk1gammac_xy_id,d_rk2gammac_xy_id,d_rk3gammac_xy_id,d_gammac_xy_id,d_rk3gammac_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xx_id,d_rk3gammac_xx_id,d_gammac_xx_p_id,d_rk1gammac_xx_id,d_rk2gammac_xx_id,d_rk3gammac_xx_id,d_gammac_xx_id,d_rk3gammac_xx_id,refine_operator,tio_mesh1);
	} else {
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_z_id,d_rk3Gam_z_id,d_rk3Gam_z_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_y_id,d_rk3Gam_y_id,d_rk3Gam_y_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3Gam_x_id,d_rk3Gam_x_id,d_rk3Gam_x_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3alpha_id,d_rk3alpha_id,d_rk3alpha_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_z_id,d_rk3beta_z_id,d_rk3beta_z_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_y_id,d_rk3beta_y_id,d_rk3beta_y_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3beta_x_id,d_rk3beta_x_id,d_rk3beta_x_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3trK_id,d_rk3trK_id,d_rk3trK_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3Phi_id,d_rk3Phi_id,d_rk3Phi_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_zz_id,d_rk3A_zz_id,d_rk3A_zz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_yz_id,d_rk3A_yz_id,d_rk3A_yz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_yy_id,d_rk3A_yy_id,d_rk3A_yy_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xz_id,d_rk3A_xz_id,d_rk3A_xz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xy_id,d_rk3A_xy_id,d_rk3A_xy_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3A_xx_id,d_rk3A_xx_id,d_rk3A_xx_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zy_id,d_rk3gammac_zy_id,d_rk3gammac_zy_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zx_id,d_rk3gammac_zx_id,d_rk3gammac_zx_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_zz_id,d_rk3gammac_zz_id,d_rk3gammac_zz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yz_id,d_rk3gammac_yz_id,d_rk3gammac_yz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yx_id,d_rk3gammac_yx_id,d_rk3gammac_yx_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_yy_id,d_rk3gammac_yy_id,d_rk3gammac_yy_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xz_id,d_rk3gammac_xz_id,d_rk3gammac_xz_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xy_id,d_rk3gammac_xy_id,d_rk3gammac_xy_id,refine_operator);
		d_bdry_fill_advance11->registerRefine(d_rk3gammac_xx_id,d_rk3gammac_xx_id,d_rk3gammac_xx_id,refine_operator);
	}
	if (d_refinedTimeStepping) {
		d_bdry_fill_advance16->registerRefine(d_Gam_z_id,d_Gam_z_id,d_Gam_z_p_id,d_rk1Gam_z_id,d_rk2Gam_z_id,d_rk3Gam_z_id,d_Gam_z_id,d_Gam_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_Gam_y_id,d_Gam_y_id,d_Gam_y_p_id,d_rk1Gam_y_id,d_rk2Gam_y_id,d_rk3Gam_y_id,d_Gam_y_id,d_Gam_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_Gam_x_id,d_Gam_x_id,d_Gam_x_p_id,d_rk1Gam_x_id,d_rk2Gam_x_id,d_rk3Gam_x_id,d_Gam_x_id,d_Gam_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_alpha_id,d_alpha_id,d_alpha_p_id,d_rk1alpha_id,d_rk2alpha_id,d_rk3alpha_id,d_alpha_id,d_alpha_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_beta_z_id,d_beta_z_id,d_beta_z_p_id,d_rk1beta_z_id,d_rk2beta_z_id,d_rk3beta_z_id,d_beta_z_id,d_beta_z_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_beta_y_id,d_beta_y_id,d_beta_y_p_id,d_rk1beta_y_id,d_rk2beta_y_id,d_rk3beta_y_id,d_beta_y_id,d_beta_y_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_beta_x_id,d_beta_x_id,d_beta_x_p_id,d_rk1beta_x_id,d_rk2beta_x_id,d_rk3beta_x_id,d_beta_x_id,d_beta_x_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_trK_id,d_trK_id,d_trK_p_id,d_rk1trK_id,d_rk2trK_id,d_rk3trK_id,d_trK_id,d_trK_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_Phi_id,d_Phi_id,d_Phi_p_id,d_rk1Phi_id,d_rk2Phi_id,d_rk3Phi_id,d_Phi_id,d_Phi_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_zz_id,d_A_zz_id,d_A_zz_p_id,d_rk1A_zz_id,d_rk2A_zz_id,d_rk3A_zz_id,d_A_zz_id,d_A_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_yz_id,d_A_yz_id,d_A_yz_p_id,d_rk1A_yz_id,d_rk2A_yz_id,d_rk3A_yz_id,d_A_yz_id,d_A_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_yy_id,d_A_yy_id,d_A_yy_p_id,d_rk1A_yy_id,d_rk2A_yy_id,d_rk3A_yy_id,d_A_yy_id,d_A_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_xz_id,d_A_xz_id,d_A_xz_p_id,d_rk1A_xz_id,d_rk2A_xz_id,d_rk3A_xz_id,d_A_xz_id,d_A_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_xy_id,d_A_xy_id,d_A_xy_p_id,d_rk1A_xy_id,d_rk2A_xy_id,d_rk3A_xy_id,d_A_xy_id,d_A_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_A_xx_id,d_A_xx_id,d_A_xx_p_id,d_rk1A_xx_id,d_rk2A_xx_id,d_rk3A_xx_id,d_A_xx_id,d_A_xx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_zy_id,d_gammac_zy_id,d_gammac_zy_p_id,d_rk1gammac_zy_id,d_rk2gammac_zy_id,d_rk3gammac_zy_id,d_gammac_zy_id,d_gammac_zy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_zx_id,d_gammac_zx_id,d_gammac_zx_p_id,d_rk1gammac_zx_id,d_rk2gammac_zx_id,d_rk3gammac_zx_id,d_gammac_zx_id,d_gammac_zx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_zz_id,d_gammac_zz_id,d_gammac_zz_p_id,d_rk1gammac_zz_id,d_rk2gammac_zz_id,d_rk3gammac_zz_id,d_gammac_zz_id,d_gammac_zz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_yz_id,d_gammac_yz_id,d_gammac_yz_p_id,d_rk1gammac_yz_id,d_rk2gammac_yz_id,d_rk3gammac_yz_id,d_gammac_yz_id,d_gammac_yz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_yx_id,d_gammac_yx_id,d_gammac_yx_p_id,d_rk1gammac_yx_id,d_rk2gammac_yx_id,d_rk3gammac_yx_id,d_gammac_yx_id,d_gammac_yx_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_yy_id,d_gammac_yy_id,d_gammac_yy_p_id,d_rk1gammac_yy_id,d_rk2gammac_yy_id,d_rk3gammac_yy_id,d_gammac_yy_id,d_gammac_yy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_xz_id,d_gammac_xz_id,d_gammac_xz_p_id,d_rk1gammac_xz_id,d_rk2gammac_xz_id,d_rk3gammac_xz_id,d_gammac_xz_id,d_gammac_xz_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_xy_id,d_gammac_xy_id,d_gammac_xy_p_id,d_rk1gammac_xy_id,d_rk2gammac_xy_id,d_rk3gammac_xy_id,d_gammac_xy_id,d_gammac_xy_id,refine_operator,tio_mesh1);
		d_bdry_fill_advance16->registerRefine(d_gammac_xx_id,d_gammac_xx_id,d_gammac_xx_p_id,d_rk1gammac_xx_id,d_rk2gammac_xx_id,d_rk3gammac_xx_id,d_gammac_xx_id,d_gammac_xx_id,refine_operator,tio_mesh1);
	} else {
		d_bdry_fill_advance16->registerRefine(d_Gam_z_id,d_Gam_z_id,d_Gam_z_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_Gam_y_id,d_Gam_y_id,d_Gam_y_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_Gam_x_id,d_Gam_x_id,d_Gam_x_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_alpha_id,d_alpha_id,d_alpha_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_beta_z_id,d_beta_z_id,d_beta_z_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_beta_y_id,d_beta_y_id,d_beta_y_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_beta_x_id,d_beta_x_id,d_beta_x_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_trK_id,d_trK_id,d_trK_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_Phi_id,d_Phi_id,d_Phi_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_zz_id,d_A_zz_id,d_A_zz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_yz_id,d_A_yz_id,d_A_yz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_yy_id,d_A_yy_id,d_A_yy_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_xz_id,d_A_xz_id,d_A_xz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_xy_id,d_A_xy_id,d_A_xy_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_A_xx_id,d_A_xx_id,d_A_xx_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_zy_id,d_gammac_zy_id,d_gammac_zy_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_zx_id,d_gammac_zx_id,d_gammac_zx_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_zz_id,d_gammac_zz_id,d_gammac_zz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_yz_id,d_gammac_yz_id,d_gammac_yz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_yx_id,d_gammac_yx_id,d_gammac_yx_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_yy_id,d_gammac_yy_id,d_gammac_yy_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_xz_id,d_gammac_xz_id,d_gammac_xz_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_xy_id,d_gammac_xy_id,d_gammac_xy_id,refine_operator);
		d_bdry_fill_advance16->registerRefine(d_gammac_xx_id,d_gammac_xx_id,d_gammac_xx_id,refine_operator);
	}
	d_bdry_fill_analysis1->registerRefine(d_MomCon_z_id,d_MomCon_z_id,d_MomCon_z_id,refine_operator);
	d_bdry_fill_analysis1->registerRefine(d_MomCon_y_id,d_MomCon_y_id,d_MomCon_y_id,refine_operator);
	d_bdry_fill_analysis1->registerRefine(d_MomCon_x_id,d_MomCon_x_id,d_MomCon_x_id,refine_operator);
	d_bdry_fill_analysis1->registerRefine(d_HamCon_id,d_HamCon_id,d_HamCon_id,refine_operator);
	d_bdry_fill_analysis1->registerRefine(d_Rscalar_id,d_Rscalar_id,d_Rscalar_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_Phi_id,d_Phi_id,d_Phi_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_Phi_id,d_Phi_id,d_Phi_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_xx_id,d_gammac_xx_id,d_gammac_xx_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_xx_id,d_gammac_xx_id,d_gammac_xx_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_xy_id,d_gammac_xy_id,d_gammac_xy_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_xy_id,d_gammac_xy_id,d_gammac_xy_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_xz_id,d_gammac_xz_id,d_gammac_xz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_xz_id,d_gammac_xz_id,d_gammac_xz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_yx_id,d_gammac_yx_id,d_gammac_yx_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_yx_id,d_gammac_yx_id,d_gammac_yx_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_yy_id,d_gammac_yy_id,d_gammac_yy_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_yy_id,d_gammac_yy_id,d_gammac_yy_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_yz_id,d_gammac_yz_id,d_gammac_yz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_yz_id,d_gammac_yz_id,d_gammac_yz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_zx_id,d_gammac_zx_id,d_gammac_zx_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_zx_id,d_gammac_zx_id,d_gammac_zx_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_zy_id,d_gammac_zy_id,d_gammac_zy_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_zy_id,d_gammac_zy_id,d_gammac_zy_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_gammac_zz_id,d_gammac_zz_id,d_gammac_zz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_gammac_zz_id,d_gammac_zz_id,d_gammac_zz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_xx_id,d_A_xx_id,d_A_xx_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_xx_id,d_A_xx_id,d_A_xx_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_xy_id,d_A_xy_id,d_A_xy_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_xy_id,d_A_xy_id,d_A_xy_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_xz_id,d_A_xz_id,d_A_xz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_xz_id,d_A_xz_id,d_A_xz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_yy_id,d_A_yy_id,d_A_yy_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_yy_id,d_A_yy_id,d_A_yy_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_yz_id,d_A_yz_id,d_A_yz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_yz_id,d_A_yz_id,d_A_yz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_A_zz_id,d_A_zz_id,d_A_zz_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_A_zz_id,d_A_zz_id,d_A_zz_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_trK_id,d_trK_id,d_trK_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_trK_id,d_trK_id,d_trK_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_alpha_id,d_alpha_id,d_alpha_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_alpha_id,d_alpha_id,d_alpha_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_beta_x_id,d_beta_x_id,d_beta_x_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_beta_x_id,d_beta_x_id,d_beta_x_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_beta_y_id,d_beta_y_id,d_beta_y_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_beta_y_id,d_beta_y_id,d_beta_y_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_beta_z_id,d_beta_z_id,d_beta_z_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_beta_z_id,d_beta_z_id,d_beta_z_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_Gam_x_id,d_Gam_x_id,d_Gam_x_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_Gam_x_id,d_Gam_x_id,d_Gam_x_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_Gam_y_id,d_Gam_y_id,d_Gam_y_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_Gam_y_id,d_Gam_y_id,d_Gam_y_id,refine_operator);
	d_bdry_fill_init->registerRefine(d_Gam_z_id,d_Gam_z_id,d_Gam_z_id,refine_operator);
	d_bdry_post_coarsen->registerRefine(d_Gam_z_id,d_Gam_z_id,d_Gam_z_id,refine_operator);


	//Register variables to the refineAlgorithm for filling new levels on regridding
	d_fill_new_level->registerRefine(d_Phi_id,d_Phi_id,d_Phi_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_xx_id,d_gammac_xx_id,d_gammac_xx_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_xy_id,d_gammac_xy_id,d_gammac_xy_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_xz_id,d_gammac_xz_id,d_gammac_xz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_yx_id,d_gammac_yx_id,d_gammac_yx_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_yy_id,d_gammac_yy_id,d_gammac_yy_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_yz_id,d_gammac_yz_id,d_gammac_yz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_zx_id,d_gammac_zx_id,d_gammac_zx_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_zy_id,d_gammac_zy_id,d_gammac_zy_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_gammac_zz_id,d_gammac_zz_id,d_gammac_zz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_xx_id,d_A_xx_id,d_A_xx_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_xy_id,d_A_xy_id,d_A_xy_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_xz_id,d_A_xz_id,d_A_xz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_yy_id,d_A_yy_id,d_A_yy_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_yz_id,d_A_yz_id,d_A_yz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_A_zz_id,d_A_zz_id,d_A_zz_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_trK_id,d_trK_id,d_trK_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_alpha_id,d_alpha_id,d_alpha_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_beta_x_id,d_beta_x_id,d_beta_x_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_beta_y_id,d_beta_y_id,d_beta_y_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_beta_z_id,d_beta_z_id,d_beta_z_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_Gam_x_id,d_Gam_x_id,d_Gam_x_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_Gam_y_id,d_Gam_y_id,d_Gam_y_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_Gam_z_id,d_Gam_z_id,d_Gam_z_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_Rscalar_id,d_Rscalar_id,d_Rscalar_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_HamCon_id,d_HamCon_id,d_HamCon_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_MomCon_x_id,d_MomCon_x_id,d_MomCon_x_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_MomCon_y_id,d_MomCon_y_id,d_MomCon_y_id,refine_operator_bound);
	d_fill_new_level->registerRefine(d_MomCon_z_id,d_MomCon_z_id,d_MomCon_z_id,refine_operator_bound);


	//Register variables to the coarsenAlgorithm
	d_coarsen_algorithm->registerCoarsen(d_Phi_id,d_Phi_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_xx_id,d_gammac_xx_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_xy_id,d_gammac_xy_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_xz_id,d_gammac_xz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_yx_id,d_gammac_yx_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_yy_id,d_gammac_yy_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_yz_id,d_gammac_yz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_zx_id,d_gammac_zx_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_zy_id,d_gammac_zy_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_gammac_zz_id,d_gammac_zz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_xx_id,d_A_xx_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_xy_id,d_A_xy_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_xz_id,d_A_xz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_yy_id,d_A_yy_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_yz_id,d_A_yz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_A_zz_id,d_A_zz_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_trK_id,d_trK_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_alpha_id,d_alpha_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_beta_x_id,d_beta_x_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_beta_y_id,d_beta_y_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_beta_z_id,d_beta_z_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_Gam_x_id,d_Gam_x_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_Gam_y_id,d_Gam_y_id,coarsen_operator);
	d_coarsen_algorithm->registerCoarsen(d_Gam_z_id,d_Gam_z_id,coarsen_operator);



    Commons::initialization();
}

/*
 * Destructor.
 */
Problem::~Problem() 
{
} 

/*
 * Initialize the data from a given level.
 */
void Problem::initializeLevelData (
   const std::shared_ptr<hier::PatchHierarchy >& hierarchy , 
   const int level_number ,
   const double init_data_time ,
   const bool can_be_refined ,
   const bool initial_time ,
   const std::shared_ptr<hier::PatchLevel >& old_level ,
   const bool allocate_data )
{
    cout<<"Initializing level "<<level_number<<endl;
    tbox::MemoryUtilities::printMemoryInfo(cout);   
	std::shared_ptr< hier::PatchLevel > level(hierarchy->getPatchLevel(level_number));

	// Allocate storage needed to initialize level and fill data from coarser levels in AMR hierarchy.  
	level->allocatePatchData(d_interior_regridding_value_id, init_data_time);
	level->allocatePatchData(d_nonSync_regridding_tag_id, init_data_time);
	level->allocatePatchData(d_interior_i_id, init_data_time);
	level->allocatePatchData(d_interior_j_id, init_data_time);
	level->allocatePatchData(d_interior_k_id, init_data_time);
	level->allocatePatchData(d_FOV_1_id, init_data_time);
	level->allocatePatchData(d_FOV_xLower_id, init_data_time);
	level->allocatePatchData(d_FOV_xUpper_id, init_data_time);
	level->allocatePatchData(d_FOV_yLower_id, init_data_time);
	level->allocatePatchData(d_FOV_yUpper_id, init_data_time);
	level->allocatePatchData(d_FOV_zLower_id, init_data_time);
	level->allocatePatchData(d_FOV_zUpper_id, init_data_time);
	level->allocatePatchData(d_Phi_id, init_data_time);
	level->allocatePatchData(d_gammac_xx_id, init_data_time);
	level->allocatePatchData(d_gammac_xy_id, init_data_time);
	level->allocatePatchData(d_gammac_xz_id, init_data_time);
	level->allocatePatchData(d_gammac_yx_id, init_data_time);
	level->allocatePatchData(d_gammac_yy_id, init_data_time);
	level->allocatePatchData(d_gammac_yz_id, init_data_time);
	level->allocatePatchData(d_gammac_zx_id, init_data_time);
	level->allocatePatchData(d_gammac_zy_id, init_data_time);
	level->allocatePatchData(d_gammac_zz_id, init_data_time);
	level->allocatePatchData(d_A_xx_id, init_data_time);
	level->allocatePatchData(d_A_xy_id, init_data_time);
	level->allocatePatchData(d_A_xz_id, init_data_time);
	level->allocatePatchData(d_A_yy_id, init_data_time);
	level->allocatePatchData(d_A_yz_id, init_data_time);
	level->allocatePatchData(d_A_zz_id, init_data_time);
	level->allocatePatchData(d_trK_id, init_data_time);
	level->allocatePatchData(d_alpha_id, init_data_time);
	level->allocatePatchData(d_beta_x_id, init_data_time);
	level->allocatePatchData(d_beta_y_id, init_data_time);
	level->allocatePatchData(d_beta_z_id, init_data_time);
	level->allocatePatchData(d_Gam_x_id, init_data_time);
	level->allocatePatchData(d_Gam_y_id, init_data_time);
	level->allocatePatchData(d_Gam_z_id, init_data_time);
	level->allocatePatchData(d_Rscalar_id, init_data_time);
	level->allocatePatchData(d_HamCon_id, init_data_time);
	level->allocatePatchData(d_MomCon_x_id, init_data_time);
	level->allocatePatchData(d_MomCon_y_id, init_data_time);
	level->allocatePatchData(d_MomCon_z_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_xx_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_xy_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_xz_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_yy_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_yx_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_yz_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_zz_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_zx_id, init_data_time);
	level->allocatePatchData(d_rk1gammac_zy_id, init_data_time);
	level->allocatePatchData(d_rk1A_xx_id, init_data_time);
	level->allocatePatchData(d_rk1A_xy_id, init_data_time);
	level->allocatePatchData(d_rk1A_xz_id, init_data_time);
	level->allocatePatchData(d_rk1A_yy_id, init_data_time);
	level->allocatePatchData(d_rk1A_yz_id, init_data_time);
	level->allocatePatchData(d_rk1A_zz_id, init_data_time);
	level->allocatePatchData(d_rk1Phi_id, init_data_time);
	level->allocatePatchData(d_rk1trK_id, init_data_time);
	level->allocatePatchData(d_rk1beta_x_id, init_data_time);
	level->allocatePatchData(d_rk1beta_y_id, init_data_time);
	level->allocatePatchData(d_rk1beta_z_id, init_data_time);
	level->allocatePatchData(d_rk1alpha_id, init_data_time);
	level->allocatePatchData(d_rk1Gam_x_id, init_data_time);
	level->allocatePatchData(d_rk1Gam_y_id, init_data_time);
	level->allocatePatchData(d_rk1Gam_z_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_xx_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_xy_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_xz_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_yy_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_yx_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_yz_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_zz_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_zx_id, init_data_time);
	level->allocatePatchData(d_rk2gammac_zy_id, init_data_time);
	level->allocatePatchData(d_rk2A_xx_id, init_data_time);
	level->allocatePatchData(d_rk2A_xy_id, init_data_time);
	level->allocatePatchData(d_rk2A_xz_id, init_data_time);
	level->allocatePatchData(d_rk2A_yy_id, init_data_time);
	level->allocatePatchData(d_rk2A_yz_id, init_data_time);
	level->allocatePatchData(d_rk2A_zz_id, init_data_time);
	level->allocatePatchData(d_rk2Phi_id, init_data_time);
	level->allocatePatchData(d_rk2trK_id, init_data_time);
	level->allocatePatchData(d_rk2beta_x_id, init_data_time);
	level->allocatePatchData(d_rk2beta_y_id, init_data_time);
	level->allocatePatchData(d_rk2beta_z_id, init_data_time);
	level->allocatePatchData(d_rk2alpha_id, init_data_time);
	level->allocatePatchData(d_rk2Gam_x_id, init_data_time);
	level->allocatePatchData(d_rk2Gam_y_id, init_data_time);
	level->allocatePatchData(d_rk2Gam_z_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_xx_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_xy_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_xz_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_yy_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_yx_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_yz_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_zz_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_zx_id, init_data_time);
	level->allocatePatchData(d_rk3gammac_zy_id, init_data_time);
	level->allocatePatchData(d_rk3A_xx_id, init_data_time);
	level->allocatePatchData(d_rk3A_xy_id, init_data_time);
	level->allocatePatchData(d_rk3A_xz_id, init_data_time);
	level->allocatePatchData(d_rk3A_yy_id, init_data_time);
	level->allocatePatchData(d_rk3A_yz_id, init_data_time);
	level->allocatePatchData(d_rk3A_zz_id, init_data_time);
	level->allocatePatchData(d_rk3Phi_id, init_data_time);
	level->allocatePatchData(d_rk3trK_id, init_data_time);
	level->allocatePatchData(d_rk3beta_x_id, init_data_time);
	level->allocatePatchData(d_rk3beta_y_id, init_data_time);
	level->allocatePatchData(d_rk3beta_z_id, init_data_time);
	level->allocatePatchData(d_rk3alpha_id, init_data_time);
	level->allocatePatchData(d_rk3Gam_x_id, init_data_time);
	level->allocatePatchData(d_rk3Gam_y_id, init_data_time);
	level->allocatePatchData(d_rk3Gam_z_id, init_data_time);
	level->allocatePatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id, init_data_time);
	level->allocatePatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id, init_data_time);
	level->allocatePatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id, init_data_time);
	level->allocatePatchData(d_stalled_1_id, init_data_time);
	level->allocatePatchData(d_Phi_p_id, init_data_time);
	level->allocatePatchData(d_gammac_xx_p_id, init_data_time);
	level->allocatePatchData(d_gammac_xy_p_id, init_data_time);
	level->allocatePatchData(d_gammac_xz_p_id, init_data_time);
	level->allocatePatchData(d_gammac_yx_p_id, init_data_time);
	level->allocatePatchData(d_gammac_yy_p_id, init_data_time);
	level->allocatePatchData(d_gammac_yz_p_id, init_data_time);
	level->allocatePatchData(d_gammac_zx_p_id, init_data_time);
	level->allocatePatchData(d_gammac_zy_p_id, init_data_time);
	level->allocatePatchData(d_gammac_zz_p_id, init_data_time);
	level->allocatePatchData(d_A_xx_p_id, init_data_time);
	level->allocatePatchData(d_A_xy_p_id, init_data_time);
	level->allocatePatchData(d_A_xz_p_id, init_data_time);
	level->allocatePatchData(d_A_yy_p_id, init_data_time);
	level->allocatePatchData(d_A_yz_p_id, init_data_time);
	level->allocatePatchData(d_A_zz_p_id, init_data_time);
	level->allocatePatchData(d_trK_p_id, init_data_time);
	level->allocatePatchData(d_alpha_p_id, init_data_time);
	level->allocatePatchData(d_beta_x_p_id, init_data_time);
	level->allocatePatchData(d_beta_y_p_id, init_data_time);
	level->allocatePatchData(d_beta_z_p_id, init_data_time);
	level->allocatePatchData(d_Gam_x_p_id, init_data_time);
	level->allocatePatchData(d_Gam_y_p_id, init_data_time);
	level->allocatePatchData(d_Gam_z_p_id, init_data_time);
	level->allocatePatchData(d_mask_id, init_data_time);


	//Mapping the current data for new level.
	if (initial_time || level_number == 0) {
		mapDataOnPatch(init_data_time, initial_time, level_number, level);
	}

	//Fill a finer level with the data of the next coarse level.
	if ((level_number > 0) || old_level) {
		d_mapping_fill->createSchedule(level,old_level,level_number-1,hierarchy,this)->fillData(init_data_time, false);
		correctFOVS(level);
	}

	//Fill a finer level with the data of the next coarse level.
	if (!initial_time && ((level_number > 0) || old_level)) {
		d_fill_new_level->createSchedule(level,old_level,level_number-1,hierarchy,this)->fillData(init_data_time, false);
	}

	//Interphase mapping
	if (initial_time || level_number == 0) {
		interphaseMapping(init_data_time, initial_time, level_number, level, 1);
	}


	//Initialize current data for new level.
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr< hier::Patch > patch = *p_it;
		if (initial_time) {
  		    initializeDataOnPatch(*patch, init_data_time, initial_time);
		}

	}
	//Post-initialization Sync.
    	if (initial_time || level_number == 0) {

		//First synchronization from initialization
		d_bdry_fill_init->createSchedule(level,this)->fillData(init_data_time, false);
		double current_time = init_data_time;
		const double level_ratio = level->getRatioToCoarserLevel().max();
		double simPlat_dt = 0;
		for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
			const std::shared_ptr< hier::Patch >& patch = *p_it;
			double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
			double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
			double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
			double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
			double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
			double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
			double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
			double* gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_id).get())->getPointer();
			double* gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_id).get())->getPointer();
			double* gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_id).get())->getPointer();
			double* gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_id).get())->getPointer();
			double* gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_id).get())->getPointer();
			double* gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_id).get())->getPointer();
			double* gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_id).get())->getPointer();
			double* gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_id).get())->getPointer();
			double* gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_id).get())->getPointer();
			double* A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_id).get())->getPointer();
			double* A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_id).get())->getPointer();
			double* A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_id).get())->getPointer();
			double* A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_id).get())->getPointer();
			double* A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_id).get())->getPointer();
			double* A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_id).get())->getPointer();
			double* Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_id).get())->getPointer();
			double* trK = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_id).get())->getPointer();
			double* beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_id).get())->getPointer();
			double* beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_id).get())->getPointer();
			double* beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_id).get())->getPointer();
			double* alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_id).get())->getPointer();
			double* Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_id).get())->getPointer();
			double* Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_id).get())->getPointer();
			double* Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_id).get())->getPointer();

			//Hard region field distance variables
			double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();

			//Get the dimensions of the patch
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast = patch->getBox().upper();

			//Get delta spaces into an array. dx, dy, dz.
			const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
			const double* dx  = patch_geom->getDx();
			int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
			int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
			int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
			for (int k = 0; k < klast; k++) {
				for (int j = 0; j < jlast; j++) {
					for (int i = 0; i < ilast; i++) {
						if ((vector(FOV_xLower, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
						if ((vector(FOV_xUpper, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
						if ((vector(FOV_yLower, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
						if ((vector(FOV_yUpper, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
						if ((vector(FOV_zLower, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
						if ((vector(FOV_zUpper, i, j, k) > 0)) {
							//Region field extrapolations
							if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
								extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
							}
						}
					}
				}
			}
		}
		//Last synchronization from initialization
		d_bdry_fill_init->createSchedule(level,this)->fillData(init_data_time, false);

    	}

    cout<<"Level "<<level_number<<" initialized"<<endl;
    tbox::MemoryUtilities::printMemoryInfo(cout);
}

void Problem::postInit(){
	double current_time = 0;
	for (int ln=0; ln<=d_patch_hierarchy->getFinestLevelNumber(); ++ln ) {
		std::shared_ptr<hier::PatchLevel > level(d_patch_hierarchy->getPatchLevel(ln));
		for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
			const std::shared_ptr<hier::Patch >& patch = *p_it;
	
			double* gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_id).get())->getPointer();
			double* gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_id).get())->getPointer();
			double* gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_id).get())->getPointer();
			double* gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_id).get())->getPointer();
			double* gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_id).get())->getPointer();
			double* gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_id).get())->getPointer();
			double* gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_id).get())->getPointer();
			double* gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_id).get())->getPointer();
			double* gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_id).get())->getPointer();
			double* Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_id).get())->getPointer();
			double* Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_id).get())->getPointer();
			double* Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_id).get())->getPointer();
			double* Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_id).get())->getPointer();
			double* A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_id).get())->getPointer();
			double* A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_id).get())->getPointer();
			double* A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_id).get())->getPointer();
			double* trK = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_id).get())->getPointer();
			double* A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_id).get())->getPointer();
			double* A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_id).get())->getPointer();
			double* A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_id).get())->getPointer();
			double* Rscalar = ((pdat::NodeData<double> *) patch->getPatchData(d_Rscalar_id).get())->getPointer();
			double* HamCon = ((pdat::NodeData<double> *) patch->getPatchData(d_HamCon_id).get())->getPointer();
			double* MomCon_x = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_x_id).get())->getPointer();
			double* MomCon_y = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_y_id).get())->getPointer();
			double* MomCon_z = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_z_id).get())->getPointer();
			double d_C_xxx_o0_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_C_xxx_o0_t8_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_C_xxx_o0_t3_m0_l0, d_C_xxy_o0_t4_m0_l0, d_C_xxz_o0_t4_m0_l0, d_C_xxx_o0_t6_m0_l0, d_C_xxy_o0_t7_m0_l0, d_C_xxz_o0_t7_m0_l0, d_C_xxy_o0_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_C_xxy_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_C_xxy_o0_t3_m0_l0, d_C_xyy_o0_t3_m0_l0, d_C_xyy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_C_xxy_o0_t6_m0_l0, d_C_xyy_o0_t6_m0_l0, d_C_xyz_o0_t7_m0_l0, d_C_xxz_o0_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_C_xxz_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_C_xxz_o0_t3_m0_l0, d_C_xyz_o0_t3_m0_l0, d_C_xyz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_C_xxz_o0_t6_m0_l0, d_C_xyz_o0_t6_m0_l0, d_C_xzz_o0_t6_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_Rp_xx_o0_t1_m0_l0, d_Rp_xx_o0_t2_m0_l0, d_Rp_xx_o0_t3_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, d_MomCon_x_o0_t0_m0_l0, d_MomCon_x_o0_t1_m0_l0, d_MomCon_x_o0_t2_m0_l0, d_MomCon_x_o0_t3_m0_l0, d_MomCon_x_o0_t4_m0_l0, d_MomCon_x_o0_t5_m0_l0, d_MomCon_x_o0_t6_m0_l0, d_MomCon_x_o0_t7_m0_l0, d_MomCon_x_o0_t8_m0_l0, d_MomCon_x_o0_t13_m0_l0, d_MomCon_x_o0_t16_m0_l0, d_MomCon_x_o0_t19_m0_l0, d_MomCon_y_o0_t3_m0_l0, d_MomCon_y_o0_t4_m0_l0, d_MomCon_y_o0_t5_m0_l0, d_MomCon_y_o0_t6_m0_l0, d_MomCon_y_o0_t7_m0_l0, d_MomCon_y_o0_t8_m0_l0, d_MomCon_z_o0_t6_m0_l0, d_MomCon_z_o0_t7_m0_l0, d_MomCon_z_o0_t8_m0_l0, Detgammac, gamma_zz, iDetgammac, gamma_yy, gamma_yz, K_yy, K_yz, gamma_xx, gamma_xy, gamma_xz, Detgamma, K_zz, iDetgamma, gammacu_zz, gammau_xx, gammau_xy, gammau_xz, K_xx, gammacu_yy, K_xy, gammacu_yz, gammacu_zy, K_xz, gammau_yy, gammau_yz, gammacu_xz, gammacu_zx, Am_zx, Am_zz, Am_zy, Au_zz, gammacu_xx, gammacu_xy, m_C_xxx_o0_t8_l0, m_C_xxx_o0_t6_l0, m_C_xxx_o0_t5_l0, m_C_xxx_o0_t3_l0, m_C_xxx_o0_t2_l0, m_C_xxx_o0_t0_l0, C_xxx, m_C_xxz_o0_t8_l0, m_C_xxz_o0_t7_l0, m_C_xxz_o0_t6_l0, m_C_xxz_o0_t5_l0, m_C_xxz_o0_t4_l0, m_C_xxz_o0_t3_l0, m_C_xxz_o0_t2_l0, m_C_xxz_o0_t1_l0, m_C_xxz_o0_t0_l0, C_xxz, m_C_zxz_o0_t8_l0, m_C_zxz_o0_t7_l0, m_C_zxz_o0_t6_l0, m_C_zxz_o0_t5_l0, m_C_zxz_o0_t4_l0, m_C_zxz_o0_t3_l0, m_C_zxz_o0_t2_l0, m_C_zxz_o0_t1_l0, m_C_zxz_o0_t0_l0, C_zxz, m_C_xxy_o0_t8_l0, m_C_xxy_o0_t7_l0, m_C_xxy_o0_t6_l0, m_C_xxy_o0_t5_l0, m_C_xxy_o0_t4_l0, m_C_xxy_o0_t3_l0, m_C_xxy_o0_t2_l0, m_C_xxy_o0_t1_l0, m_C_xxy_o0_t0_l0, C_xxy, gammacu_yx, m_C_yxy_o0_t8_l0, m_C_yxy_o0_t7_l0, m_C_yxy_o0_t6_l0, m_C_yxy_o0_t5_l0, m_C_yxy_o0_t4_l0, m_C_yxy_o0_t3_l0, m_C_yxy_o0_t2_l0, m_C_yxy_o0_t1_l0, m_C_yxy_o0_t0_l0, C_yxy, m_C_yxz_o0_t8_l0, m_C_yxz_o0_t7_l0, m_C_yxz_o0_t6_l0, m_C_yxz_o0_t5_l0, m_C_yxz_o0_t4_l0, m_C_yxz_o0_t3_l0, m_C_yxz_o0_t2_l0, m_C_yxz_o0_t1_l0, m_C_yxz_o0_t0_l0, C_yxz, Cd_xxz, Cd_yxz, Cd_zxz, m_C_yxx_o0_t8_l0, m_C_yxx_o0_t6_l0, m_C_yxx_o0_t5_l0, m_C_yxx_o0_t3_l0, m_C_yxx_o0_t2_l0, m_C_yxx_o0_t0_l0, C_yxx, m_C_xyy_o0_t8_l0, m_C_xyy_o0_t6_l0, m_C_xyy_o0_t5_l0, m_C_xyy_o0_t3_l0, m_C_xyy_o0_t2_l0, m_C_xyy_o0_t0_l0, C_xyy, m_C_zyy_o0_t8_l0, m_C_zyy_o0_t6_l0, m_C_zyy_o0_t5_l0, m_C_zyy_o0_t3_l0, m_C_zyy_o0_t2_l0, m_C_zyy_o0_t0_l0, C_zyy, m_C_yyy_o0_t8_l0, m_C_yyy_o0_t6_l0, m_C_yyy_o0_t5_l0, m_C_yyy_o0_t3_l0, m_C_yyy_o0_t2_l0, m_C_yyy_o0_t0_l0, C_yyy, Cd_xyy, Cd_yyy, Cd_zyy, m_C_xyz_o0_t8_l0, m_C_xyz_o0_t7_l0, m_C_xyz_o0_t6_l0, m_C_xyz_o0_t5_l0, m_C_xyz_o0_t4_l0, m_C_xyz_o0_t3_l0, m_C_xyz_o0_t2_l0, m_C_xyz_o0_t1_l0, m_C_xyz_o0_t0_l0, C_xyz, m_C_zyz_o0_t8_l0, m_C_zyz_o0_t7_l0, m_C_zyz_o0_t6_l0, m_C_zyz_o0_t5_l0, m_C_zyz_o0_t4_l0, m_C_zyz_o0_t3_l0, m_C_zyz_o0_t2_l0, m_C_zyz_o0_t1_l0, m_C_zyz_o0_t0_l0, C_zyz, m_C_yyz_o0_t8_l0, m_C_yyz_o0_t7_l0, m_C_yyz_o0_t6_l0, m_C_yyz_o0_t5_l0, m_C_yyz_o0_t4_l0, m_C_yyz_o0_t3_l0, m_C_yyz_o0_t2_l0, m_C_yyz_o0_t1_l0, m_C_yyz_o0_t0_l0, C_yyz, Cd_xyz, Cd_yyz, m_C_xzz_o0_t8_l0, m_C_xzz_o0_t6_l0, m_C_xzz_o0_t5_l0, m_C_xzz_o0_t3_l0, m_C_xzz_o0_t2_l0, m_C_xzz_o0_t0_l0, C_xzz, m_C_zzz_o0_t8_l0, m_C_zzz_o0_t6_l0, m_C_zzz_o0_t5_l0, m_C_zzz_o0_t3_l0, m_C_zzz_o0_t2_l0, m_C_zzz_o0_t0_l0, C_zzz, m_C_yzz_o0_t8_l0, m_C_yzz_o0_t6_l0, m_C_yzz_o0_t5_l0, m_C_yzz_o0_t3_l0, m_C_yzz_o0_t2_l0, m_C_yzz_o0_t0_l0, C_yzz, Cd_xzz, Cd_yzz, Cd_zzz, Cd_zyz, Am_yy, Am_yx, Am_yz, Au_yz, Ku_yz, m_C_zxx_o0_t8_l0, m_C_zxx_o0_t6_l0, m_C_zxx_o0_t5_l0, m_C_zxx_o0_t3_l0, m_C_zxx_o0_t2_l0, m_C_zxx_o0_t0_l0, C_zxx, Cd_xxx, Cd_yxx, Cd_zxx, m_C_zxy_o0_t8_l0, m_C_zxy_o0_t7_l0, m_C_zxy_o0_t6_l0, m_C_zxy_o0_t5_l0, m_C_zxy_o0_t4_l0, m_C_zxy_o0_t3_l0, m_C_zxy_o0_t2_l0, m_C_zxy_o0_t1_l0, m_C_zxy_o0_t0_l0, C_zxy, Cd_xxy, Cd_yxy, Cd_zxy, m_Rp_xx_o0_t49_l0, m_Rp_xx_o0_t48_l0, m_Rp_xx_o0_t47_l0, m_Rp_xx_o0_t46_l0, m_Rp_xx_o0_t45_l0, m_Rp_xx_o0_t44_l0, m_Rp_xx_o0_t43_l0, m_Rp_xx_o0_t42_l0, m_Rp_xx_o0_t41_l0, m_Rp_xx_o0_t40_l0, m_Rp_xx_o0_t39_l0, m_Rp_xx_o0_t38_l0, m_Rp_xx_o0_t37_l0, m_Rp_xx_o0_t36_l0, m_Rp_xx_o0_t35_l0, m_Rp_xx_o0_t34_l0, m_Rp_xx_o0_t33_l0, m_Rp_xx_o0_t32_l0, m_Rp_xx_o0_t31_l0, m_Rp_xx_o0_t30_l0, m_Rp_xx_o0_t29_l0, m_Rp_xx_o0_t28_l0, m_Rp_xx_o0_t27_l0, m_Rp_xx_o0_t26_l0, m_Rp_xx_o0_t25_l0, m_Rp_xx_o0_t24_l0, m_Rp_xx_o0_t23_l0, m_Rp_xx_o0_t22_l0, m_Rp_xx_o0_t21_l0, m_Rp_xx_o0_t20_l0, m_Rp_xx_o0_t19_l0, m_Rp_xx_o0_t18_l0, m_Rp_xx_o0_t17_l0, m_Rp_xx_o0_t16_l0, m_Rp_xx_o0_t15_l0, m_Rp_xx_o0_t14_l0, m_Rp_xx_o0_t13_l0, m_Rp_xx_o0_t12_l0, m_Rp_xx_o0_t11_l0, m_Rp_xx_o0_t10_l0, m_Rp_xx_o0_t9_l0, m_Rp_xx_o0_t8_l0, m_Rp_xx_o0_t7_l0, m_Rp_xx_o0_t6_l0, m_Rp_xx_o0_t5_l0, m_Rp_xx_o0_t4_l0, m_Rp_xx_o0_t3_l0, m_Rp_xx_o0_t2_l0, m_Rp_xx_o0_t1_l0, m_Rp_xx_o0_t0_l0, Rp_xx, m_Rp_zz_o0_t49_l0, m_Rp_zz_o0_t48_l0, m_Rp_zz_o0_t47_l0, m_Rp_zz_o0_t46_l0, m_Rp_zz_o0_t45_l0, m_Rp_zz_o0_t44_l0, m_Rp_zz_o0_t43_l0, m_Rp_zz_o0_t42_l0, m_Rp_zz_o0_t41_l0, m_Rp_zz_o0_t40_l0, m_Rp_zz_o0_t39_l0, m_Rp_zz_o0_t38_l0, m_Rp_zz_o0_t37_l0, m_Rp_zz_o0_t36_l0, m_Rp_zz_o0_t35_l0, m_Rp_zz_o0_t34_l0, m_Rp_zz_o0_t33_l0, m_Rp_zz_o0_t32_l0, m_Rp_zz_o0_t31_l0, m_Rp_zz_o0_t30_l0, m_Rp_zz_o0_t29_l0, m_Rp_zz_o0_t28_l0, m_Rp_zz_o0_t27_l0, m_Rp_zz_o0_t26_l0, m_Rp_zz_o0_t25_l0, m_Rp_zz_o0_t24_l0, m_Rp_zz_o0_t23_l0, m_Rp_zz_o0_t22_l0, m_Rp_zz_o0_t21_l0, m_Rp_zz_o0_t20_l0, m_Rp_zz_o0_t19_l0, m_Rp_zz_o0_t18_l0, m_Rp_zz_o0_t17_l0, m_Rp_zz_o0_t16_l0, m_Rp_zz_o0_t15_l0, m_Rp_zz_o0_t14_l0, m_Rp_zz_o0_t13_l0, m_Rp_zz_o0_t12_l0, m_Rp_zz_o0_t11_l0, m_Rp_zz_o0_t10_l0, m_Rp_zz_o0_t9_l0, m_Rp_zz_o0_t8_l0, m_Rp_zz_o0_t7_l0, m_Rp_zz_o0_t6_l0, m_Rp_zz_o0_t5_l0, m_Rp_zz_o0_t4_l0, m_Rp_zz_o0_t3_l0, m_Rp_zz_o0_t2_l0, m_Rp_zz_o0_t1_l0, m_Rp_zz_o0_t0_l0, Rp_zz, m_Rp_xy_o0_t49_l0, m_Rp_xy_o0_t48_l0, m_Rp_xy_o0_t47_l0, m_Rp_xy_o0_t46_l0, m_Rp_xy_o0_t45_l0, m_Rp_xy_o0_t44_l0, m_Rp_xy_o0_t43_l0, m_Rp_xy_o0_t42_l0, m_Rp_xy_o0_t41_l0, m_Rp_xy_o0_t40_l0, m_Rp_xy_o0_t39_l0, m_Rp_xy_o0_t38_l0, m_Rp_xy_o0_t37_l0, m_Rp_xy_o0_t36_l0, m_Rp_xy_o0_t35_l0, m_Rp_xy_o0_t34_l0, m_Rp_xy_o0_t33_l0, m_Rp_xy_o0_t32_l0, m_Rp_xy_o0_t31_l0, m_Rp_xy_o0_t30_l0, m_Rp_xy_o0_t29_l0, m_Rp_xy_o0_t28_l0, m_Rp_xy_o0_t27_l0, m_Rp_xy_o0_t26_l0, m_Rp_xy_o0_t25_l0, m_Rp_xy_o0_t24_l0, m_Rp_xy_o0_t23_l0, m_Rp_xy_o0_t22_l0, m_Rp_xy_o0_t21_l0, m_Rp_xy_o0_t20_l0, m_Rp_xy_o0_t19_l0, m_Rp_xy_o0_t18_l0, m_Rp_xy_o0_t17_l0, m_Rp_xy_o0_t16_l0, m_Rp_xy_o0_t15_l0, m_Rp_xy_o0_t14_l0, m_Rp_xy_o0_t13_l0, m_Rp_xy_o0_t12_l0, m_Rp_xy_o0_t11_l0, m_Rp_xy_o0_t10_l0, m_Rp_xy_o0_t9_l0, m_Rp_xy_o0_t8_l0, m_Rp_xy_o0_t7_l0, m_Rp_xy_o0_t6_l0, m_Rp_xy_o0_t5_l0, m_Rp_xy_o0_t4_l0, m_Rp_xy_o0_t3_l0, m_Rp_xy_o0_t2_l0, m_Rp_xy_o0_t1_l0, m_Rp_xy_o0_t0_l0, Rp_xy, m_Rp_xz_o0_t49_l0, m_Rp_xz_o0_t48_l0, m_Rp_xz_o0_t47_l0, m_Rp_xz_o0_t46_l0, m_Rp_xz_o0_t45_l0, m_Rp_xz_o0_t44_l0, m_Rp_xz_o0_t43_l0, m_Rp_xz_o0_t42_l0, m_Rp_xz_o0_t41_l0, m_Rp_xz_o0_t40_l0, m_Rp_xz_o0_t39_l0, m_Rp_xz_o0_t38_l0, m_Rp_xz_o0_t37_l0, m_Rp_xz_o0_t36_l0, m_Rp_xz_o0_t35_l0, m_Rp_xz_o0_t34_l0, m_Rp_xz_o0_t33_l0, m_Rp_xz_o0_t32_l0, m_Rp_xz_o0_t31_l0, m_Rp_xz_o0_t30_l0, m_Rp_xz_o0_t29_l0, m_Rp_xz_o0_t28_l0, m_Rp_xz_o0_t27_l0, m_Rp_xz_o0_t26_l0, m_Rp_xz_o0_t25_l0, m_Rp_xz_o0_t24_l0, m_Rp_xz_o0_t23_l0, m_Rp_xz_o0_t22_l0, m_Rp_xz_o0_t21_l0, m_Rp_xz_o0_t20_l0, m_Rp_xz_o0_t19_l0, m_Rp_xz_o0_t18_l0, m_Rp_xz_o0_t17_l0, m_Rp_xz_o0_t16_l0, m_Rp_xz_o0_t15_l0, m_Rp_xz_o0_t14_l0, m_Rp_xz_o0_t13_l0, m_Rp_xz_o0_t12_l0, m_Rp_xz_o0_t11_l0, m_Rp_xz_o0_t10_l0, m_Rp_xz_o0_t9_l0, m_Rp_xz_o0_t8_l0, m_Rp_xz_o0_t7_l0, m_Rp_xz_o0_t6_l0, m_Rp_xz_o0_t5_l0, m_Rp_xz_o0_t4_l0, m_Rp_xz_o0_t3_l0, m_Rp_xz_o0_t2_l0, m_Rp_xz_o0_t1_l0, m_Rp_xz_o0_t0_l0, Rp_xz, Au_yy, Ku_yy, d_Rc_xx_o0_t15_m0_l0, m_Rc_xx_o0_t11_l0, m_Rc_xx_o0_t10_l0, m_Rc_xx_o0_t9_l0, m_Rc_xx_o0_t8_l0, m_Rc_xx_o0_t7_l0, m_Rc_xx_o0_t6_l0, m_Rc_xx_o0_t5_l0, m_Rc_xx_o0_t4_l0, m_Rc_xx_o0_t3_l0, m_Rc_xx_o0_t2_l0, m_Rc_xx_o0_t1_l0, m_Rc_xx_o0_t0_l0, Rc_xx, R_xx, d_Rc_xy_o0_t15_m0_l0, m_Rc_xy_o0_t14_l0, m_Rc_xy_o0_t13_l0, m_Rc_xy_o0_t12_l0, m_Rc_xy_o0_t11_l0, m_Rc_xy_o0_t10_l0, m_Rc_xy_o0_t9_l0, m_Rc_xy_o0_t8_l0, m_Rc_xy_o0_t7_l0, m_Rc_xy_o0_t6_l0, m_Rc_xy_o0_t5_l0, m_Rc_xy_o0_t4_l0, m_Rc_xy_o0_t3_l0, m_Rc_xy_o0_t2_l0, m_Rc_xy_o0_t1_l0, m_Rc_xy_o0_t0_l0, Rc_xy, d_Rc_yy_o0_t15_m0_l0, m_Rc_yy_o0_t11_l0, m_Rc_yy_o0_t10_l0, m_Rc_yy_o0_t9_l0, m_Rc_yy_o0_t8_l0, m_Rc_yy_o0_t7_l0, m_Rc_yy_o0_t6_l0, m_Rc_yy_o0_t5_l0, m_Rc_yy_o0_t4_l0, m_Rc_yy_o0_t3_l0, m_Rc_yy_o0_t2_l0, m_Rc_yy_o0_t1_l0, m_Rc_yy_o0_t0_l0, Rc_yy, R_xy, gammau_zz, Ku_zz, m_Rp_yy_o0_t49_l0, m_Rp_yy_o0_t48_l0, m_Rp_yy_o0_t47_l0, m_Rp_yy_o0_t46_l0, m_Rp_yy_o0_t45_l0, m_Rp_yy_o0_t44_l0, m_Rp_yy_o0_t43_l0, m_Rp_yy_o0_t42_l0, m_Rp_yy_o0_t41_l0, m_Rp_yy_o0_t40_l0, m_Rp_yy_o0_t39_l0, m_Rp_yy_o0_t38_l0, m_Rp_yy_o0_t37_l0, m_Rp_yy_o0_t36_l0, m_Rp_yy_o0_t35_l0, m_Rp_yy_o0_t34_l0, m_Rp_yy_o0_t33_l0, m_Rp_yy_o0_t32_l0, m_Rp_yy_o0_t31_l0, m_Rp_yy_o0_t30_l0, m_Rp_yy_o0_t29_l0, m_Rp_yy_o0_t28_l0, m_Rp_yy_o0_t27_l0, m_Rp_yy_o0_t26_l0, m_Rp_yy_o0_t25_l0, m_Rp_yy_o0_t24_l0, m_Rp_yy_o0_t23_l0, m_Rp_yy_o0_t22_l0, m_Rp_yy_o0_t21_l0, m_Rp_yy_o0_t20_l0, m_Rp_yy_o0_t19_l0, m_Rp_yy_o0_t18_l0, m_Rp_yy_o0_t17_l0, m_Rp_yy_o0_t16_l0, m_Rp_yy_o0_t15_l0, m_Rp_yy_o0_t14_l0, m_Rp_yy_o0_t13_l0, m_Rp_yy_o0_t12_l0, m_Rp_yy_o0_t11_l0, m_Rp_yy_o0_t10_l0, m_Rp_yy_o0_t9_l0, m_Rp_yy_o0_t8_l0, m_Rp_yy_o0_t7_l0, m_Rp_yy_o0_t6_l0, m_Rp_yy_o0_t5_l0, m_Rp_yy_o0_t4_l0, m_Rp_yy_o0_t3_l0, m_Rp_yy_o0_t2_l0, m_Rp_yy_o0_t1_l0, m_Rp_yy_o0_t0_l0, Rp_yy, m_Rp_yz_o0_t49_l0, m_Rp_yz_o0_t48_l0, m_Rp_yz_o0_t47_l0, m_Rp_yz_o0_t46_l0, m_Rp_yz_o0_t45_l0, m_Rp_yz_o0_t44_l0, m_Rp_yz_o0_t43_l0, m_Rp_yz_o0_t42_l0, m_Rp_yz_o0_t41_l0, m_Rp_yz_o0_t40_l0, m_Rp_yz_o0_t39_l0, m_Rp_yz_o0_t38_l0, m_Rp_yz_o0_t37_l0, m_Rp_yz_o0_t36_l0, m_Rp_yz_o0_t35_l0, m_Rp_yz_o0_t34_l0, m_Rp_yz_o0_t33_l0, m_Rp_yz_o0_t32_l0, m_Rp_yz_o0_t31_l0, m_Rp_yz_o0_t30_l0, m_Rp_yz_o0_t29_l0, m_Rp_yz_o0_t28_l0, m_Rp_yz_o0_t27_l0, m_Rp_yz_o0_t26_l0, m_Rp_yz_o0_t25_l0, m_Rp_yz_o0_t24_l0, m_Rp_yz_o0_t23_l0, m_Rp_yz_o0_t22_l0, m_Rp_yz_o0_t21_l0, m_Rp_yz_o0_t20_l0, m_Rp_yz_o0_t19_l0, m_Rp_yz_o0_t18_l0, m_Rp_yz_o0_t17_l0, m_Rp_yz_o0_t16_l0, m_Rp_yz_o0_t15_l0, m_Rp_yz_o0_t14_l0, m_Rp_yz_o0_t13_l0, m_Rp_yz_o0_t12_l0, m_Rp_yz_o0_t11_l0, m_Rp_yz_o0_t10_l0, m_Rp_yz_o0_t9_l0, m_Rp_yz_o0_t8_l0, m_Rp_yz_o0_t7_l0, m_Rp_yz_o0_t6_l0, m_Rp_yz_o0_t5_l0, m_Rp_yz_o0_t4_l0, m_Rp_yz_o0_t3_l0, m_Rp_yz_o0_t2_l0, m_Rp_yz_o0_t1_l0, m_Rp_yz_o0_t0_l0, Rp_yz, Am_xx, Am_xz, Am_xy, R_yy, Au_xz, Ku_xz, Au_xy, Ku_xy, d_Rc_xz_o0_t15_m0_l0, m_Rc_xz_o0_t14_l0, m_Rc_xz_o0_t13_l0, m_Rc_xz_o0_t12_l0, m_Rc_xz_o0_t11_l0, m_Rc_xz_o0_t10_l0, m_Rc_xz_o0_t9_l0, m_Rc_xz_o0_t8_l0, m_Rc_xz_o0_t7_l0, m_Rc_xz_o0_t6_l0, m_Rc_xz_o0_t5_l0, m_Rc_xz_o0_t4_l0, m_Rc_xz_o0_t3_l0, m_Rc_xz_o0_t2_l0, m_Rc_xz_o0_t1_l0, m_Rc_xz_o0_t0_l0, Rc_xz, d_Rc_yz_o0_t15_m0_l0, m_Rc_yz_o0_t14_l0, m_Rc_yz_o0_t13_l0, m_Rc_yz_o0_t12_l0, m_Rc_yz_o0_t11_l0, m_Rc_yz_o0_t10_l0, m_Rc_yz_o0_t9_l0, m_Rc_yz_o0_t8_l0, m_Rc_yz_o0_t7_l0, m_Rc_yz_o0_t6_l0, m_Rc_yz_o0_t5_l0, m_Rc_yz_o0_t4_l0, m_Rc_yz_o0_t3_l0, m_Rc_yz_o0_t2_l0, m_Rc_yz_o0_t1_l0, m_Rc_yz_o0_t0_l0, Rc_yz, R_yz, d_Rc_zz_o0_t15_m0_l0, m_Rc_zz_o0_t11_l0, m_Rc_zz_o0_t10_l0, m_Rc_zz_o0_t9_l0, m_Rc_zz_o0_t8_l0, m_Rc_zz_o0_t7_l0, m_Rc_zz_o0_t6_l0, m_Rc_zz_o0_t5_l0, m_Rc_zz_o0_t4_l0, m_Rc_zz_o0_t3_l0, m_Rc_zz_o0_t2_l0, m_Rc_zz_o0_t1_l0, m_Rc_zz_o0_t0_l0, Rc_zz, R_zz, R_xz, R, Au_xx, Ku_xx, d_Rscalar_o0_t0_m0_l0, d_HamCon_o0_t0_m0_l0, d_MomCon_x_o0_t9_m0_l0, d_MomCon_y_o0_t9_m0_l0, d_MomCon_z_o0_t9_m0_l0, m_MomCon_z_o0_t21_l0, m_MomCon_z_o0_t20_l0, m_MomCon_z_o0_t19_l0, m_MomCon_z_o0_t18_l0, m_MomCon_z_o0_t17_l0, m_MomCon_z_o0_t16_l0, m_MomCon_z_o0_t15_l0, m_MomCon_z_o0_t14_l0, m_MomCon_z_o0_t13_l0, m_MomCon_z_o0_t12_l0, m_MomCon_z_o0_t11_l0, m_MomCon_z_o0_t10_l0, m_MomCon_z_o0_t8_l0, m_MomCon_z_o0_t7_l0, m_MomCon_z_o0_t6_l0, m_MomCon_z_o0_t5_l0, m_MomCon_z_o0_t4_l0, m_MomCon_z_o0_t3_l0, m_MomCon_z_o0_t2_l0, m_MomCon_z_o0_t1_l0, m_MomCon_z_o0_t0_l0, m_MomCon_y_o0_t21_l0, m_MomCon_y_o0_t20_l0, m_MomCon_y_o0_t19_l0, m_MomCon_y_o0_t18_l0, m_MomCon_y_o0_t17_l0, m_MomCon_y_o0_t16_l0, m_MomCon_y_o0_t15_l0, m_MomCon_y_o0_t14_l0, m_MomCon_y_o0_t13_l0, m_MomCon_y_o0_t12_l0, m_MomCon_y_o0_t11_l0, m_MomCon_y_o0_t10_l0, m_MomCon_y_o0_t8_l0, m_MomCon_y_o0_t7_l0, m_MomCon_y_o0_t6_l0, m_MomCon_y_o0_t5_l0, m_MomCon_y_o0_t4_l0, m_MomCon_y_o0_t3_l0, m_MomCon_y_o0_t2_l0, m_MomCon_y_o0_t1_l0, m_MomCon_y_o0_t0_l0, m_MomCon_x_o0_t21_l0, m_MomCon_x_o0_t20_l0, m_MomCon_x_o0_t19_l0, m_MomCon_x_o0_t18_l0, m_MomCon_x_o0_t17_l0, m_MomCon_x_o0_t16_l0, m_MomCon_x_o0_t15_l0, m_MomCon_x_o0_t14_l0, m_MomCon_x_o0_t13_l0, m_MomCon_x_o0_t12_l0, m_MomCon_x_o0_t11_l0, m_MomCon_x_o0_t10_l0, m_MomCon_x_o0_t8_l0, m_MomCon_x_o0_t7_l0, m_MomCon_x_o0_t6_l0, m_MomCon_x_o0_t5_l0, m_MomCon_x_o0_t4_l0, m_MomCon_x_o0_t3_l0, m_MomCon_x_o0_t2_l0, m_MomCon_x_o0_t1_l0, m_MomCon_x_o0_t0_l0;
	
			//Get the dimensions of the patch
			hier::Box pbox = patch->getBox();
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast = patch->getBox().upper();
	
			//Get delta spaces into an array. dx, dy, dz.
			std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
			const double* dx  = patch_geom->getDx();
	
			//Auxiliary definitions
			int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
			int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
			int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
						if ((i + 2 < ilast && i - 2 >= 0 && j + 2 < jlast && j - 2 >= 0 && k + 2 < klast && k - 2 >= 0)) {
							d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t1_m0_l0 = D1CDO4_i(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t2_m0_l0 = D1CDO4_j(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t3_m0_l0 = D1CDO4_k(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t0_m0_l0 = D1CDO4_i(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t1_m0_l0 = D1CDO4_j(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t2_m0_l0 = D1CDO4_k(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t3_m0_l0 = D1CDO4_i(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t4_m0_l0 = D1CDO4_j(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t5_m0_l0 = D1CDO4_k(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t6_m0_l0 = D1CDO4_i(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t7_m0_l0 = D1CDO4_j(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t8_m0_l0 = D1CDO4_k(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t13_m0_l0 = D1CDO4_i(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t16_m0_l0 = D1CDO4_j(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_x_o0_t19_m0_l0 = D1CDO4_k(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t3_m0_l0 = D1CDO4_i(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t4_m0_l0 = D1CDO4_j(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t5_m0_l0 = D1CDO4_k(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t6_m0_l0 = D1CDO4_i(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t7_m0_l0 = D1CDO4_j(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_y_o0_t8_m0_l0 = D1CDO4_k(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_z_o0_t6_m0_l0 = D1CDO4_i(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_z_o0_t7_m0_l0 = D1CDO4_j(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							d_MomCon_z_o0_t8_m0_l0 = D1CDO4_k(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
							Detgammac = vector(gammac_yy, i, j, k) * vector(gammac_zz, i, j, k) * vector(gammac_xx, i, j, k) + (-vector(gammac_yy, i, j, k) * (vector(gammac_xz, i, j, k) * vector(gammac_xz, i, j, k))) + (-vector(gammac_zz, i, j, k) * (vector(gammac_xy, i, j, k) * vector(gammac_xy, i, j, k))) + (-(vector(gammac_yz, i, j, k) * vector(gammac_yz, i, j, k)) * vector(gammac_xx, i, j, k)) + 2.0 * vector(gammac_yz, i, j, k) * vector(gammac_xy, i, j, k) * vector(gammac_xz, i, j, k);
							gamma_zz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_zz, i, j, k);
							iDetgammac = 1.0 / Detgammac;
							gamma_yy = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_yy, i, j, k);
							gamma_yz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_yz, i, j, k);
							K_yy = vector(A_yy, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_yy * vector(trK, i, j, k);
							K_yz = vector(A_yz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_yz * vector(trK, i, j, k);
							gamma_xx = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xx, i, j, k);
							gamma_xy = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xy, i, j, k);
							gamma_xz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xz, i, j, k);
							Detgamma = gamma_yy * gamma_zz * gamma_xx + (-gamma_yy * (gamma_xz * gamma_xz)) + (-gamma_zz * (gamma_xy * gamma_xy)) + (-(gamma_yz * gamma_yz) * gamma_xx) + 2.0 * gamma_yz * gamma_xy * gamma_xz;
							K_zz = vector(A_zz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_zz * vector(trK, i, j, k);
							iDetgamma = 1.0 / Detgamma;
							gammacu_zz = iDetgammac * (vector(gammac_xx, i, j, k) * vector(gammac_yy, i, j, k) - vector(gammac_xy, i, j, k) * vector(gammac_xy, i, j, k));
							gammau_xx = iDetgamma * (gamma_yy * gamma_zz - gamma_yz * gamma_yz);
							gammau_xy = iDetgamma * ((-gamma_xy * gamma_zz) + gamma_yz * gamma_xz);
							gammau_xz = iDetgamma * (gamma_xy * gamma_yz - gamma_yy * gamma_xz);
							K_xx = vector(A_xx, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xx * vector(trK, i, j, k);
							gammacu_yy = iDetgammac * (vector(gammac_xx, i, j, k) * vector(gammac_zz, i, j, k) - vector(gammac_xz, i, j, k) * vector(gammac_xz, i, j, k));
							K_xy = vector(A_xy, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xy * vector(trK, i, j, k);
							gammacu_yz = iDetgammac * ((-vector(gammac_xx, i, j, k) * vector(gammac_yz, i, j, k)) + vector(gammac_xy, i, j, k) * vector(gammac_xz, i, j, k));
							gammacu_zy = gammacu_yz;
							K_xz = vector(A_xz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xz * vector(trK, i, j, k);
							gammau_yy = iDetgamma * (gamma_xx * gamma_zz - gamma_xz * gamma_xz);
							gammau_yz = iDetgamma * ((-gamma_xx * gamma_yz) + gamma_xy * gamma_xz);
							gammacu_xz = iDetgammac * (vector(gammac_xy, i, j, k) * vector(gammac_yz, i, j, k) - vector(gammac_yy, i, j, k) * vector(gammac_xz, i, j, k));
							gammacu_zx = gammacu_xz;
							Am_zx = gammacu_zx * vector(A_xx, i, j, k) + gammacu_zy * vector(A_xy, i, j, k) + gammacu_zz * vector(A_xz, i, j, k);
							Am_zz = gammacu_zx * vector(A_xz, i, j, k) + gammacu_zy * vector(A_yz, i, j, k) + gammacu_zz * vector(A_zz, i, j, k);
							Am_zy = gammacu_zx * vector(A_xy, i, j, k) + gammacu_zy * vector(A_yy, i, j, k) + gammacu_zz * vector(A_yz, i, j, k);
							Au_zz = gammacu_zx * Am_zx + gammacu_zy * Am_zy + gammacu_zz * Am_zz;
							gammacu_xx = iDetgammac * (vector(gammac_yy, i, j, k) * vector(gammac_zz, i, j, k) - vector(gammac_yz, i, j, k) * vector(gammac_yz, i, j, k));
							gammacu_xy = iDetgammac * ((-vector(gammac_xy, i, j, k) * vector(gammac_zz, i, j, k)) + vector(gammac_yz, i, j, k) * vector(gammac_xz, i, j, k));
							m_C_xxx_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxx_o0_t8_m0_l0;
							m_C_xxx_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxx_o0_t6_m0_l0;
							m_C_xxx_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxx_o0_t5_m0_l0;
							m_C_xxx_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxx_o0_t3_m0_l0;
							m_C_xxx_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxx_o0_t0_m0_l0;
							m_C_xxx_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t0_m0_l0;
							C_xxx = (((((((m_C_xxx_o0_t0_l0 + m_C_xxx_o0_t0_l0) + m_C_xxx_o0_t2_l0) + m_C_xxx_o0_t3_l0) + m_C_xxx_o0_t3_l0) + m_C_xxx_o0_t5_l0) + m_C_xxx_o0_t6_l0) + m_C_xxx_o0_t6_l0) + m_C_xxx_o0_t8_l0;
							m_C_xxz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxz_o0_t8_m0_l0;
							m_C_xxz_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xxz_o0_t7_m0_l0;
							m_C_xxz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxz_o0_t6_m0_l0;
							m_C_xxz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxz_o0_t5_m0_l0;
							m_C_xxz_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xxz_o0_t4_m0_l0;
							m_C_xxz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxz_o0_t3_m0_l0;
							m_C_xxz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t0_m0_l0;
							m_C_xxz_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t8_m0_l0;
							m_C_xxz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t0_m0_l0;
							C_xxz = (((((((m_C_xxz_o0_t0_l0 + m_C_xxz_o0_t1_l0) + m_C_xxz_o0_t2_l0) + m_C_xxz_o0_t3_l0) + m_C_xxz_o0_t4_l0) + m_C_xxz_o0_t5_l0) + m_C_xxz_o0_t6_l0) + m_C_xxz_o0_t7_l0) + m_C_xxz_o0_t8_l0;
							m_C_zxz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxz_o0_t8_m0_l0;
							m_C_zxz_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xxz_o0_t7_m0_l0;
							m_C_zxz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxz_o0_t6_m0_l0;
							m_C_zxz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxz_o0_t5_m0_l0;
							m_C_zxz_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xxz_o0_t4_m0_l0;
							m_C_zxz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxz_o0_t3_m0_l0;
							m_C_zxz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t0_m0_l0;
							m_C_zxz_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t8_m0_l0;
							m_C_zxz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t0_m0_l0;
							C_zxz = (((((((m_C_zxz_o0_t0_l0 + m_C_zxz_o0_t1_l0) + m_C_zxz_o0_t2_l0) + m_C_zxz_o0_t3_l0) + m_C_zxz_o0_t4_l0) + m_C_zxz_o0_t5_l0) + m_C_zxz_o0_t6_l0) + m_C_zxz_o0_t7_l0) + m_C_zxz_o0_t8_l0;
							m_C_xxy_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxy_o0_t8_m0_l0;
							m_C_xxy_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xxy_o0_t7_m0_l0;
							m_C_xxy_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxy_o0_t6_m0_l0;
							m_C_xxy_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxy_o0_t5_m0_l0;
							m_C_xxy_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xxy_o0_t4_m0_l0;
							m_C_xxy_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxy_o0_t3_m0_l0;
							m_C_xxy_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxy_o0_t0_m0_l0;
							m_C_xxy_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t5_m0_l0;
							m_C_xxy_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t0_m0_l0;
							C_xxy = (((((((m_C_xxy_o0_t0_l0 + m_C_xxy_o0_t1_l0) + m_C_xxy_o0_t2_l0) + m_C_xxy_o0_t3_l0) + m_C_xxy_o0_t4_l0) + m_C_xxy_o0_t5_l0) + m_C_xxy_o0_t6_l0) + m_C_xxy_o0_t7_l0) + m_C_xxy_o0_t8_l0;
							gammacu_yx = gammacu_xy;
							m_C_yxy_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxy_o0_t8_m0_l0;
							m_C_yxy_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xxy_o0_t7_m0_l0;
							m_C_yxy_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxy_o0_t6_m0_l0;
							m_C_yxy_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxy_o0_t5_m0_l0;
							m_C_yxy_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xxy_o0_t4_m0_l0;
							m_C_yxy_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxy_o0_t3_m0_l0;
							m_C_yxy_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxy_o0_t0_m0_l0;
							m_C_yxy_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t5_m0_l0;
							m_C_yxy_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t0_m0_l0;
							C_yxy = (((((((m_C_yxy_o0_t0_l0 + m_C_yxy_o0_t1_l0) + m_C_yxy_o0_t2_l0) + m_C_yxy_o0_t3_l0) + m_C_yxy_o0_t4_l0) + m_C_yxy_o0_t5_l0) + m_C_yxy_o0_t6_l0) + m_C_yxy_o0_t7_l0) + m_C_yxy_o0_t8_l0;
							m_C_yxz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxz_o0_t8_m0_l0;
							m_C_yxz_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xxz_o0_t7_m0_l0;
							m_C_yxz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxz_o0_t6_m0_l0;
							m_C_yxz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxz_o0_t5_m0_l0;
							m_C_yxz_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xxz_o0_t4_m0_l0;
							m_C_yxz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxz_o0_t3_m0_l0;
							m_C_yxz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t0_m0_l0;
							m_C_yxz_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t8_m0_l0;
							m_C_yxz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t0_m0_l0;
							C_yxz = (((((((m_C_yxz_o0_t0_l0 + m_C_yxz_o0_t1_l0) + m_C_yxz_o0_t2_l0) + m_C_yxz_o0_t3_l0) + m_C_yxz_o0_t4_l0) + m_C_yxz_o0_t5_l0) + m_C_yxz_o0_t6_l0) + m_C_yxz_o0_t7_l0) + m_C_yxz_o0_t8_l0;
							Cd_xxz = vector(gammac_xx, i, j, k) * C_xxz + vector(gammac_xy, i, j, k) * C_yxz + vector(gammac_xz, i, j, k) * C_zxz;
							Cd_yxz = vector(gammac_yx, i, j, k) * C_xxz + vector(gammac_yy, i, j, k) * C_yxz + vector(gammac_yz, i, j, k) * C_zxz;
							Cd_zxz = vector(gammac_zx, i, j, k) * C_xxz + vector(gammac_zy, i, j, k) * C_yxz + vector(gammac_zz, i, j, k) * C_zxz;
							m_C_yxx_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxx_o0_t8_m0_l0;
							m_C_yxx_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxx_o0_t6_m0_l0;
							m_C_yxx_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxx_o0_t5_m0_l0;
							m_C_yxx_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxx_o0_t3_m0_l0;
							m_C_yxx_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxx_o0_t0_m0_l0;
							m_C_yxx_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t0_m0_l0;
							C_yxx = (((((((m_C_yxx_o0_t0_l0 + m_C_yxx_o0_t0_l0) + m_C_yxx_o0_t2_l0) + m_C_yxx_o0_t3_l0) + m_C_yxx_o0_t3_l0) + m_C_yxx_o0_t5_l0) + m_C_yxx_o0_t6_l0) + m_C_yxx_o0_t6_l0) + m_C_yxx_o0_t8_l0;
							m_C_xyy_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xyy_o0_t8_m0_l0;
							m_C_xyy_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xyy_o0_t6_m0_l0;
							m_C_xyy_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyy_o0_t3_m0_l0;
							m_C_xyy_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyy_o0_t3_m0_l0;
							m_C_xyy_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxy_o0_t3_m0_l0;
							m_C_xyy_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t5_m0_l0;
							C_xyy = (((((((m_C_xyy_o0_t0_l0 + m_C_xyy_o0_t0_l0) + m_C_xyy_o0_t2_l0) + m_C_xyy_o0_t3_l0) + m_C_xyy_o0_t3_l0) + m_C_xyy_o0_t5_l0) + m_C_xyy_o0_t6_l0) + m_C_xyy_o0_t6_l0) + m_C_xyy_o0_t8_l0;
							m_C_zyy_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xyy_o0_t8_m0_l0;
							m_C_zyy_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xyy_o0_t6_m0_l0;
							m_C_zyy_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyy_o0_t3_m0_l0;
							m_C_zyy_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyy_o0_t3_m0_l0;
							m_C_zyy_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxy_o0_t3_m0_l0;
							m_C_zyy_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t5_m0_l0;
							C_zyy = (((((((m_C_zyy_o0_t0_l0 + m_C_zyy_o0_t0_l0) + m_C_zyy_o0_t2_l0) + m_C_zyy_o0_t3_l0) + m_C_zyy_o0_t3_l0) + m_C_zyy_o0_t5_l0) + m_C_zyy_o0_t6_l0) + m_C_zyy_o0_t6_l0) + m_C_zyy_o0_t8_l0;
							m_C_yyy_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xyy_o0_t8_m0_l0;
							m_C_yyy_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xyy_o0_t6_m0_l0;
							m_C_yyy_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyy_o0_t3_m0_l0;
							m_C_yyy_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyy_o0_t3_m0_l0;
							m_C_yyy_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxy_o0_t3_m0_l0;
							m_C_yyy_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t5_m0_l0;
							C_yyy = (((((((m_C_yyy_o0_t0_l0 + m_C_yyy_o0_t0_l0) + m_C_yyy_o0_t2_l0) + m_C_yyy_o0_t3_l0) + m_C_yyy_o0_t3_l0) + m_C_yyy_o0_t5_l0) + m_C_yyy_o0_t6_l0) + m_C_yyy_o0_t6_l0) + m_C_yyy_o0_t8_l0;
							Cd_xyy = vector(gammac_xx, i, j, k) * C_xyy + vector(gammac_xy, i, j, k) * C_yyy + vector(gammac_xz, i, j, k) * C_zyy;
							Cd_yyy = vector(gammac_yx, i, j, k) * C_xyy + vector(gammac_yy, i, j, k) * C_yyy + vector(gammac_yz, i, j, k) * C_zyy;
							Cd_zyy = vector(gammac_zx, i, j, k) * C_xyy + vector(gammac_zy, i, j, k) * C_yyy + vector(gammac_zz, i, j, k) * C_zyy;
							m_C_xyz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xyz_o0_t8_m0_l0;
							m_C_xyz_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xyz_o0_t7_m0_l0;
							m_C_xyz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xyz_o0_t6_m0_l0;
							m_C_xyz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyz_o0_t3_m0_l0;
							m_C_xyz_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xyy_o0_t8_m0_l0;
							m_C_xyz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyz_o0_t3_m0_l0;
							m_C_xyz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t3_m0_l0;
							m_C_xyz_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t8_m0_l0;
							m_C_xyz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t5_m0_l0;
							C_xyz = (((((((m_C_xyz_o0_t0_l0 + m_C_xyz_o0_t1_l0) + m_C_xyz_o0_t2_l0) + m_C_xyz_o0_t3_l0) + m_C_xyz_o0_t4_l0) + m_C_xyz_o0_t5_l0) + m_C_xyz_o0_t6_l0) + m_C_xyz_o0_t7_l0) + m_C_xyz_o0_t8_l0;
							m_C_zyz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xyz_o0_t8_m0_l0;
							m_C_zyz_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xyz_o0_t7_m0_l0;
							m_C_zyz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xyz_o0_t6_m0_l0;
							m_C_zyz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyz_o0_t3_m0_l0;
							m_C_zyz_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xyy_o0_t8_m0_l0;
							m_C_zyz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyz_o0_t3_m0_l0;
							m_C_zyz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t3_m0_l0;
							m_C_zyz_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t8_m0_l0;
							m_C_zyz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t5_m0_l0;
							C_zyz = (((((((m_C_zyz_o0_t0_l0 + m_C_zyz_o0_t1_l0) + m_C_zyz_o0_t2_l0) + m_C_zyz_o0_t3_l0) + m_C_zyz_o0_t4_l0) + m_C_zyz_o0_t5_l0) + m_C_zyz_o0_t6_l0) + m_C_zyz_o0_t7_l0) + m_C_zyz_o0_t8_l0;
							m_C_yyz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xyz_o0_t8_m0_l0;
							m_C_yyz_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xyz_o0_t7_m0_l0;
							m_C_yyz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xyz_o0_t6_m0_l0;
							m_C_yyz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyz_o0_t3_m0_l0;
							m_C_yyz_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xyy_o0_t8_m0_l0;
							m_C_yyz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyz_o0_t3_m0_l0;
							m_C_yyz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t3_m0_l0;
							m_C_yyz_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t8_m0_l0;
							m_C_yyz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t5_m0_l0;
							C_yyz = (((((((m_C_yyz_o0_t0_l0 + m_C_yyz_o0_t1_l0) + m_C_yyz_o0_t2_l0) + m_C_yyz_o0_t3_l0) + m_C_yyz_o0_t4_l0) + m_C_yyz_o0_t5_l0) + m_C_yyz_o0_t6_l0) + m_C_yyz_o0_t7_l0) + m_C_yyz_o0_t8_l0;
							Cd_xyz = vector(gammac_xx, i, j, k) * C_xyz + vector(gammac_xy, i, j, k) * C_yyz + vector(gammac_xz, i, j, k) * C_zyz;
							Cd_yyz = vector(gammac_yx, i, j, k) * C_xyz + vector(gammac_yy, i, j, k) * C_yyz + vector(gammac_yz, i, j, k) * C_zyz;
							m_C_xzz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xzz_o0_t6_m0_l0;
							m_C_xzz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xzz_o0_t6_m0_l0;
							m_C_xzz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyz_o0_t6_m0_l0;
							m_C_xzz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyz_o0_t8_m0_l0;
							m_C_xzz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t6_m0_l0;
							m_C_xzz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t8_m0_l0;
							C_xzz = (((((((m_C_xzz_o0_t0_l0 + m_C_xzz_o0_t0_l0) + m_C_xzz_o0_t2_l0) + m_C_xzz_o0_t3_l0) + m_C_xzz_o0_t3_l0) + m_C_xzz_o0_t5_l0) + m_C_xzz_o0_t6_l0) + m_C_xzz_o0_t6_l0) + m_C_xzz_o0_t8_l0;
							m_C_zzz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xzz_o0_t6_m0_l0;
							m_C_zzz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xzz_o0_t6_m0_l0;
							m_C_zzz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyz_o0_t6_m0_l0;
							m_C_zzz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyz_o0_t8_m0_l0;
							m_C_zzz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t6_m0_l0;
							m_C_zzz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t8_m0_l0;
							C_zzz = (((((((m_C_zzz_o0_t0_l0 + m_C_zzz_o0_t0_l0) + m_C_zzz_o0_t2_l0) + m_C_zzz_o0_t3_l0) + m_C_zzz_o0_t3_l0) + m_C_zzz_o0_t5_l0) + m_C_zzz_o0_t6_l0) + m_C_zzz_o0_t6_l0) + m_C_zzz_o0_t8_l0;
							m_C_yzz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xzz_o0_t6_m0_l0;
							m_C_yzz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xzz_o0_t6_m0_l0;
							m_C_yzz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyz_o0_t6_m0_l0;
							m_C_yzz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyz_o0_t8_m0_l0;
							m_C_yzz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t6_m0_l0;
							m_C_yzz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t8_m0_l0;
							C_yzz = (((((((m_C_yzz_o0_t0_l0 + m_C_yzz_o0_t0_l0) + m_C_yzz_o0_t2_l0) + m_C_yzz_o0_t3_l0) + m_C_yzz_o0_t3_l0) + m_C_yzz_o0_t5_l0) + m_C_yzz_o0_t6_l0) + m_C_yzz_o0_t6_l0) + m_C_yzz_o0_t8_l0;
							Cd_xzz = vector(gammac_xx, i, j, k) * C_xzz + vector(gammac_xy, i, j, k) * C_yzz + vector(gammac_xz, i, j, k) * C_zzz;
							Cd_yzz = vector(gammac_yx, i, j, k) * C_xzz + vector(gammac_yy, i, j, k) * C_yzz + vector(gammac_yz, i, j, k) * C_zzz;
							Cd_zzz = vector(gammac_zx, i, j, k) * C_xzz + vector(gammac_zy, i, j, k) * C_yzz + vector(gammac_zz, i, j, k) * C_zzz;
							Cd_zyz = vector(gammac_zx, i, j, k) * C_xyz + vector(gammac_zy, i, j, k) * C_yyz + vector(gammac_zz, i, j, k) * C_zyz;
							Am_yy = gammacu_yx * vector(A_xy, i, j, k) + gammacu_yy * vector(A_yy, i, j, k) + gammacu_yz * vector(A_yz, i, j, k);
							Am_yx = gammacu_yx * vector(A_xx, i, j, k) + gammacu_yy * vector(A_xy, i, j, k) + gammacu_yz * vector(A_xz, i, j, k);
							Am_yz = gammacu_yx * vector(A_xz, i, j, k) + gammacu_yy * vector(A_yz, i, j, k) + gammacu_yz * vector(A_zz, i, j, k);
							Au_yz = gammacu_yx * Am_zx + gammacu_yy * Am_zy + gammacu_yz * Am_zz;
							Ku_yz = Au_yz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_yz * vector(trK, i, j, k);
							m_C_zxx_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxx_o0_t8_m0_l0;
							m_C_zxx_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxx_o0_t6_m0_l0;
							m_C_zxx_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxx_o0_t5_m0_l0;
							m_C_zxx_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxx_o0_t3_m0_l0;
							m_C_zxx_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxx_o0_t0_m0_l0;
							m_C_zxx_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t0_m0_l0;
							C_zxx = (((((((m_C_zxx_o0_t0_l0 + m_C_zxx_o0_t0_l0) + m_C_zxx_o0_t2_l0) + m_C_zxx_o0_t3_l0) + m_C_zxx_o0_t3_l0) + m_C_zxx_o0_t5_l0) + m_C_zxx_o0_t6_l0) + m_C_zxx_o0_t6_l0) + m_C_zxx_o0_t8_l0;
							Cd_xxx = vector(gammac_xx, i, j, k) * C_xxx + vector(gammac_xy, i, j, k) * C_yxx + vector(gammac_xz, i, j, k) * C_zxx;
							Cd_yxx = vector(gammac_yx, i, j, k) * C_xxx + vector(gammac_yy, i, j, k) * C_yxx + vector(gammac_yz, i, j, k) * C_zxx;
							Cd_zxx = vector(gammac_zx, i, j, k) * C_xxx + vector(gammac_zy, i, j, k) * C_yxx + vector(gammac_zz, i, j, k) * C_zxx;
							m_C_zxy_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxy_o0_t8_m0_l0;
							m_C_zxy_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xxy_o0_t7_m0_l0;
							m_C_zxy_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxy_o0_t6_m0_l0;
							m_C_zxy_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxy_o0_t5_m0_l0;
							m_C_zxy_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xxy_o0_t4_m0_l0;
							m_C_zxy_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxy_o0_t3_m0_l0;
							m_C_zxy_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxy_o0_t0_m0_l0;
							m_C_zxy_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t5_m0_l0;
							m_C_zxy_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t0_m0_l0;
							C_zxy = (((((((m_C_zxy_o0_t0_l0 + m_C_zxy_o0_t1_l0) + m_C_zxy_o0_t2_l0) + m_C_zxy_o0_t3_l0) + m_C_zxy_o0_t4_l0) + m_C_zxy_o0_t5_l0) + m_C_zxy_o0_t6_l0) + m_C_zxy_o0_t7_l0) + m_C_zxy_o0_t8_l0;
							Cd_xxy = vector(gammac_xx, i, j, k) * C_xxy + vector(gammac_xy, i, j, k) * C_yxy + vector(gammac_xz, i, j, k) * C_zxy;
							Cd_yxy = vector(gammac_yx, i, j, k) * C_xxy + vector(gammac_yy, i, j, k) * C_yxy + vector(gammac_yz, i, j, k) * C_zxy;
							Cd_zxy = vector(gammac_zx, i, j, k) * C_xxy + vector(gammac_zy, i, j, k) * C_yxy + vector(gammac_zz, i, j, k) * C_zxy;
							m_Rp_xx_o0_t49_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t48_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t47_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t46_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t45_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t44_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t43_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t42_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t41_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t39_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t38_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t37_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t36_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t35_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t34_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t33_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t32_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t31_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t30_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t29_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t28_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t27_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t26_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t25_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t24_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t23_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t22_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t21_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t20_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t19_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t18_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t17_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t16_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t15_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t14_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t13_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t12_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_xx_o0_t11_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_xx_o0_t10_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_xx_o0_t9_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_xx_o0_t8_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_xx_o0_t7_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_xx_o0_t6_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_xx_o0_t5_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_xx_o0_t4_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_xx_o0_t3_l0 = 2.0 * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xx_o0_t2_l0 = 2.0 * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xx_o0_t1_l0 = 2.0 * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xx_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
							Rp_xx = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xx_o0_t0_l0 + m_Rp_xx_o0_t1_l0) + m_Rp_xx_o0_t2_l0) + m_Rp_xx_o0_t3_l0) + m_Rp_xx_o0_t4_l0) + m_Rp_xx_o0_t5_l0) + m_Rp_xx_o0_t6_l0) + m_Rp_xx_o0_t7_l0) + m_Rp_xx_o0_t8_l0) + m_Rp_xx_o0_t9_l0) + m_Rp_xx_o0_t10_l0) + m_Rp_xx_o0_t11_l0) + m_Rp_xx_o0_t12_l0) + m_Rp_xx_o0_t13_l0) + m_Rp_xx_o0_t14_l0) + m_Rp_xx_o0_t15_l0) + m_Rp_xx_o0_t16_l0) + m_Rp_xx_o0_t17_l0) + m_Rp_xx_o0_t18_l0) + m_Rp_xx_o0_t19_l0) + m_Rp_xx_o0_t20_l0) + m_Rp_xx_o0_t21_l0) + m_Rp_xx_o0_t22_l0) + m_Rp_xx_o0_t23_l0) + m_Rp_xx_o0_t24_l0) + m_Rp_xx_o0_t25_l0) + m_Rp_xx_o0_t26_l0) + m_Rp_xx_o0_t27_l0) + m_Rp_xx_o0_t28_l0) + m_Rp_xx_o0_t29_l0) + m_Rp_xx_o0_t30_l0) + m_Rp_xx_o0_t31_l0) + m_Rp_xx_o0_t32_l0) + m_Rp_xx_o0_t33_l0) + m_Rp_xx_o0_t34_l0) + m_Rp_xx_o0_t35_l0) + m_Rp_xx_o0_t36_l0) + m_Rp_xx_o0_t37_l0) + m_Rp_xx_o0_t38_l0) + m_Rp_xx_o0_t39_l0) + m_Rp_xx_o0_t40_l0) + m_Rp_xx_o0_t41_l0) + m_Rp_xx_o0_t42_l0) + m_Rp_xx_o0_t43_l0) + m_Rp_xx_o0_t44_l0) + m_Rp_xx_o0_t45_l0) + m_Rp_xx_o0_t46_l0) + m_Rp_xx_o0_t47_l0) + m_Rp_xx_o0_t48_l0) + m_Rp_xx_o0_t49_l0;
							m_Rp_zz_o0_t49_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t48_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t47_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t46_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t45_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t44_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t43_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t42_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t41_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t39_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t38_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t37_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t36_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t35_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t34_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t33_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t32_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t31_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t30_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t29_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t28_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t27_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t26_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t25_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t24_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t23_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t22_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t21_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t20_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t19_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t18_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t17_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t16_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t15_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t14_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t13_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t12_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_zz_o0_t11_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_zz_o0_t10_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_zz_o0_t9_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_zz_o0_t8_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_zz_o0_t7_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_zz_o0_t6_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_zz_o0_t5_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_zz_o0_t4_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_zz_o0_t3_l0 = 2.0 * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_zz_o0_t2_l0 = 2.0 * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_zz_o0_t1_l0 = 2.0 * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_zz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
							Rp_zz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_zz_o0_t0_l0 + m_Rp_zz_o0_t1_l0) + m_Rp_zz_o0_t2_l0) + m_Rp_zz_o0_t3_l0) + m_Rp_zz_o0_t4_l0) + m_Rp_zz_o0_t5_l0) + m_Rp_zz_o0_t6_l0) + m_Rp_zz_o0_t7_l0) + m_Rp_zz_o0_t8_l0) + m_Rp_zz_o0_t9_l0) + m_Rp_zz_o0_t10_l0) + m_Rp_zz_o0_t11_l0) + m_Rp_zz_o0_t12_l0) + m_Rp_zz_o0_t13_l0) + m_Rp_zz_o0_t14_l0) + m_Rp_zz_o0_t15_l0) + m_Rp_zz_o0_t16_l0) + m_Rp_zz_o0_t17_l0) + m_Rp_zz_o0_t18_l0) + m_Rp_zz_o0_t19_l0) + m_Rp_zz_o0_t20_l0) + m_Rp_zz_o0_t21_l0) + m_Rp_zz_o0_t22_l0) + m_Rp_zz_o0_t23_l0) + m_Rp_zz_o0_t24_l0) + m_Rp_zz_o0_t25_l0) + m_Rp_zz_o0_t26_l0) + m_Rp_zz_o0_t27_l0) + m_Rp_zz_o0_t28_l0) + m_Rp_zz_o0_t29_l0) + m_Rp_zz_o0_t30_l0) + m_Rp_zz_o0_t31_l0) + m_Rp_zz_o0_t32_l0) + m_Rp_zz_o0_t33_l0) + m_Rp_zz_o0_t34_l0) + m_Rp_zz_o0_t35_l0) + m_Rp_zz_o0_t36_l0) + m_Rp_zz_o0_t37_l0) + m_Rp_zz_o0_t38_l0) + m_Rp_zz_o0_t39_l0) + m_Rp_zz_o0_t40_l0) + m_Rp_zz_o0_t41_l0) + m_Rp_zz_o0_t42_l0) + m_Rp_zz_o0_t43_l0) + m_Rp_zz_o0_t44_l0) + m_Rp_zz_o0_t45_l0) + m_Rp_zz_o0_t46_l0) + m_Rp_zz_o0_t47_l0) + m_Rp_zz_o0_t48_l0) + m_Rp_zz_o0_t49_l0;
							m_Rp_xy_o0_t49_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t48_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t47_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t46_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t45_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t44_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t43_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t42_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t41_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t39_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t38_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t37_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t36_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t35_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t34_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t33_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t32_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t31_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t30_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t29_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t28_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t27_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t26_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t25_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t24_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t23_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t22_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t21_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t20_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t19_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t18_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t17_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t16_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t15_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t14_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t13_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t12_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_xy_o0_t11_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_xy_o0_t10_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_xy_o0_t9_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_xy_o0_t8_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_xy_o0_t7_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_xy_o0_t6_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_xy_o0_t5_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_xy_o0_t4_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_xy_o0_t3_l0 = 2.0 * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xy_o0_t2_l0 = 2.0 * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xy_o0_t1_l0 = 2.0 * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
							Rp_xy = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xy_o0_t0_l0 + m_Rp_xy_o0_t1_l0) + m_Rp_xy_o0_t2_l0) + m_Rp_xy_o0_t3_l0) + m_Rp_xy_o0_t4_l0) + m_Rp_xy_o0_t5_l0) + m_Rp_xy_o0_t6_l0) + m_Rp_xy_o0_t7_l0) + m_Rp_xy_o0_t8_l0) + m_Rp_xy_o0_t9_l0) + m_Rp_xy_o0_t10_l0) + m_Rp_xy_o0_t11_l0) + m_Rp_xy_o0_t12_l0) + m_Rp_xy_o0_t13_l0) + m_Rp_xy_o0_t14_l0) + m_Rp_xy_o0_t15_l0) + m_Rp_xy_o0_t16_l0) + m_Rp_xy_o0_t17_l0) + m_Rp_xy_o0_t18_l0) + m_Rp_xy_o0_t19_l0) + m_Rp_xy_o0_t20_l0) + m_Rp_xy_o0_t21_l0) + m_Rp_xy_o0_t22_l0) + m_Rp_xy_o0_t23_l0) + m_Rp_xy_o0_t24_l0) + m_Rp_xy_o0_t25_l0) + m_Rp_xy_o0_t26_l0) + m_Rp_xy_o0_t27_l0) + m_Rp_xy_o0_t28_l0) + m_Rp_xy_o0_t29_l0) + m_Rp_xy_o0_t30_l0) + m_Rp_xy_o0_t31_l0) + m_Rp_xy_o0_t32_l0) + m_Rp_xy_o0_t33_l0) + m_Rp_xy_o0_t34_l0) + m_Rp_xy_o0_t35_l0) + m_Rp_xy_o0_t36_l0) + m_Rp_xy_o0_t37_l0) + m_Rp_xy_o0_t38_l0) + m_Rp_xy_o0_t39_l0) + m_Rp_xy_o0_t40_l0) + m_Rp_xy_o0_t41_l0) + m_Rp_xy_o0_t42_l0) + m_Rp_xy_o0_t43_l0) + m_Rp_xy_o0_t44_l0) + m_Rp_xy_o0_t45_l0) + m_Rp_xy_o0_t46_l0) + m_Rp_xy_o0_t47_l0) + m_Rp_xy_o0_t48_l0) + m_Rp_xy_o0_t49_l0;
							m_Rp_xz_o0_t49_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t48_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t47_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t46_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t45_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t44_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t43_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t42_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t41_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t39_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t38_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t37_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t36_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t35_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t34_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t33_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t32_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t31_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t30_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t29_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t28_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t27_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t26_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t25_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t24_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t23_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t22_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t21_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t20_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t19_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t18_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t17_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t16_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t15_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t14_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t13_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t12_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_xz_o0_t11_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_xz_o0_t10_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_xz_o0_t9_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_xz_o0_t8_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_xz_o0_t7_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_xz_o0_t6_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_xz_o0_t5_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_xz_o0_t4_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_xz_o0_t3_l0 = 2.0 * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_xz_o0_t2_l0 = 2.0 * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_xz_o0_t1_l0 = 2.0 * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_xz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
							Rp_xz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xz_o0_t0_l0 + m_Rp_xz_o0_t1_l0) + m_Rp_xz_o0_t2_l0) + m_Rp_xz_o0_t3_l0) + m_Rp_xz_o0_t4_l0) + m_Rp_xz_o0_t5_l0) + m_Rp_xz_o0_t6_l0) + m_Rp_xz_o0_t7_l0) + m_Rp_xz_o0_t8_l0) + m_Rp_xz_o0_t9_l0) + m_Rp_xz_o0_t10_l0) + m_Rp_xz_o0_t11_l0) + m_Rp_xz_o0_t12_l0) + m_Rp_xz_o0_t13_l0) + m_Rp_xz_o0_t14_l0) + m_Rp_xz_o0_t15_l0) + m_Rp_xz_o0_t16_l0) + m_Rp_xz_o0_t17_l0) + m_Rp_xz_o0_t18_l0) + m_Rp_xz_o0_t19_l0) + m_Rp_xz_o0_t20_l0) + m_Rp_xz_o0_t21_l0) + m_Rp_xz_o0_t22_l0) + m_Rp_xz_o0_t23_l0) + m_Rp_xz_o0_t24_l0) + m_Rp_xz_o0_t25_l0) + m_Rp_xz_o0_t26_l0) + m_Rp_xz_o0_t27_l0) + m_Rp_xz_o0_t28_l0) + m_Rp_xz_o0_t29_l0) + m_Rp_xz_o0_t30_l0) + m_Rp_xz_o0_t31_l0) + m_Rp_xz_o0_t32_l0) + m_Rp_xz_o0_t33_l0) + m_Rp_xz_o0_t34_l0) + m_Rp_xz_o0_t35_l0) + m_Rp_xz_o0_t36_l0) + m_Rp_xz_o0_t37_l0) + m_Rp_xz_o0_t38_l0) + m_Rp_xz_o0_t39_l0) + m_Rp_xz_o0_t40_l0) + m_Rp_xz_o0_t41_l0) + m_Rp_xz_o0_t42_l0) + m_Rp_xz_o0_t43_l0) + m_Rp_xz_o0_t44_l0) + m_Rp_xz_o0_t45_l0) + m_Rp_xz_o0_t46_l0) + m_Rp_xz_o0_t47_l0) + m_Rp_xz_o0_t48_l0) + m_Rp_xz_o0_t49_l0;
							Au_yy = gammacu_yx * Am_yx + gammacu_yy * Am_yy + gammacu_yz * Am_yz;
							Ku_yy = Au_yy * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_yy * vector(trK, i, j, k);
							d_Rc_xx_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xxz + C_yxx * Cd_yxz + C_zxx * Cd_zxz) + gammacu_zy * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz)) + (gammacu_yx * (C_xxx * Cd_xxy + C_yxx * Cd_yxy + C_zxx * Cd_zxy) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_yz * (C_xxz * Cd_xxy + C_yxz * Cd_yxy + C_zxz * Cd_zxy)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_yxx + C_zxx * Cd_zxx) + gammacu_xy * (C_xxy * Cd_xxx + C_yxy * Cd_yxx + C_zxy * Cd_zxx) + gammacu_xz * (C_xxz * Cd_xxx + C_yxz * Cd_yxx + C_zxz * Cd_zxx)) + (gammacu_zx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_zy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_yx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_yz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_xxy + C_zxx * Cd_xxz) + gammacu_xy * (C_xxx * Cd_xxy + C_yxx * Cd_xyy + C_zxx * Cd_xyz) + gammacu_xz * (C_xxx * Cd_xxz + C_yxx * Cd_xyz + C_zxx * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_zy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_yx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_yz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_xxy + C_zxx * Cd_xxz) + gammacu_xy * (C_xxx * Cd_xxy + C_yxx * Cd_xyy + C_zxx * Cd_xyz) + gammacu_xz * (C_xxx * Cd_xxz + C_yxx * Cd_xyz + C_zxx * Cd_xzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxx + 0.5 * vector(Gam_y, i, j, k) * Cd_xxy + 0.5 * vector(Gam_z, i, j, k) * Cd_xxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxx + 0.5 * vector(Gam_y, i, j, k) * Cd_xxy + 0.5 * vector(Gam_z, i, j, k) * Cd_xxz);
							m_Rc_xx_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
							m_Rc_xx_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
							m_Rc_xx_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
							m_Rc_xx_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xx_o0_t8_m0_l0;
							m_Rc_xx_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xx_o0_t7_m0_l0;
							m_Rc_xx_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xx_o0_t6_m0_l0;
							m_Rc_xx_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xx_o0_t5_m0_l0;
							m_Rc_xx_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xx_o0_t4_m0_l0;
							m_Rc_xx_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xx_o0_t3_m0_l0;
							m_Rc_xx_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xx_o0_t2_m0_l0;
							m_Rc_xx_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xx_o0_t1_m0_l0;
							m_Rc_xx_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xx_o0_t0_m0_l0;
							Rc_xx = ((((((((((((((m_Rc_xx_o0_t0_l0 + m_Rc_xx_o0_t1_l0) + m_Rc_xx_o0_t2_l0) + m_Rc_xx_o0_t3_l0) + m_Rc_xx_o0_t4_l0) + m_Rc_xx_o0_t5_l0) + m_Rc_xx_o0_t6_l0) + m_Rc_xx_o0_t7_l0) + m_Rc_xx_o0_t8_l0) + m_Rc_xx_o0_t9_l0) + m_Rc_xx_o0_t10_l0) + m_Rc_xx_o0_t11_l0) + m_Rc_xx_o0_t9_l0) + m_Rc_xx_o0_t10_l0) + m_Rc_xx_o0_t11_l0) + d_Rc_xx_o0_t15_m0_l0;
							R_xx = Rc_xx + Rp_xx;
							d_Rc_xy_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xyz + C_yxx * Cd_yyz + C_zxx * Cd_zyz) + gammacu_zy * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_zz * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz)) + (gammacu_yx * (C_xxx * Cd_xyy + C_yxx * Cd_yyy + C_zxx * Cd_zyy) + gammacu_yy * (C_xxy * Cd_xyy + C_yxy * Cd_yyy + C_zxy * Cd_zyy) + gammacu_yz * (C_xxz * Cd_xyy + C_yxz * Cd_yyy + C_zxz * Cd_zyy)) + (gammacu_xx * (C_xxx * Cd_xxy + C_yxx * Cd_yxy + C_zxx * Cd_zxy) + gammacu_xy * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_xz * (C_xxz * Cd_xxy + C_yxz * Cd_yxy + C_zxz * Cd_zxy)) + (gammacu_zx * (C_xyz * Cd_xxx + C_yyz * Cd_xxy + C_zyz * Cd_xxz) + gammacu_zy * (C_xyz * Cd_xxy + C_yyz * Cd_xyy + C_zyz * Cd_xyz) + gammacu_zz * (C_xyz * Cd_xxz + C_yyz * Cd_xyz + C_zyz * Cd_xzz)) + (gammacu_yx * (C_xyy * Cd_xxx + C_yyy * Cd_xxy + C_zyy * Cd_xxz) + gammacu_yy * (C_xyy * Cd_xxy + C_yyy * Cd_xyy + C_zyy * Cd_xyz) + gammacu_yz * (C_xyy * Cd_xxz + C_yyy * Cd_xyz + C_zyy * Cd_xzz)) + (gammacu_xx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_xy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_xz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_yxx + C_yxz * Cd_yxy + C_zxz * Cd_yxz) + gammacu_zy * (C_xxz * Cd_yxy + C_yxz * Cd_yyy + C_zxz * Cd_yyz) + gammacu_zz * (C_xxz * Cd_yxz + C_yxz * Cd_yyz + C_zxz * Cd_yzz)) + (gammacu_yx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_yy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_yz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (gammacu_xx * (C_xxx * Cd_yxx + C_yxx * Cd_yxy + C_zxx * Cd_yxz) + gammacu_xy * (C_xxx * Cd_yxy + C_yxx * Cd_yyy + C_zxx * Cd_yyz) + gammacu_xz * (C_xxx * Cd_yxz + C_yxx * Cd_yyz + C_zxx * Cd_yzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxx + 0.5 * vector(Gam_y, i, j, k) * Cd_yxy + 0.5 * vector(Gam_z, i, j, k) * Cd_yxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxy + 0.5 * vector(Gam_y, i, j, k) * Cd_xyy + 0.5 * vector(Gam_z, i, j, k) * Cd_xyz);
							m_Rc_xy_o0_t14_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
							m_Rc_xy_o0_t13_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
							m_Rc_xy_o0_t12_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
							m_Rc_xy_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
							m_Rc_xy_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
							m_Rc_xy_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
							m_Rc_xy_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xy_o0_t8_m0_l0;
							m_Rc_xy_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xy_o0_t7_m0_l0;
							m_Rc_xy_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xy_o0_t6_m0_l0;
							m_Rc_xy_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xy_o0_t5_m0_l0;
							m_Rc_xy_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xy_o0_t4_m0_l0;
							m_Rc_xy_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xy_o0_t3_m0_l0;
							m_Rc_xy_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xy_o0_t2_m0_l0;
							m_Rc_xy_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xy_o0_t1_m0_l0;
							m_Rc_xy_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xy_o0_t0_m0_l0;
							Rc_xy = ((((((((((((((m_Rc_xy_o0_t0_l0 + m_Rc_xy_o0_t1_l0) + m_Rc_xy_o0_t2_l0) + m_Rc_xy_o0_t3_l0) + m_Rc_xy_o0_t4_l0) + m_Rc_xy_o0_t5_l0) + m_Rc_xy_o0_t6_l0) + m_Rc_xy_o0_t7_l0) + m_Rc_xy_o0_t8_l0) + m_Rc_xy_o0_t9_l0) + m_Rc_xy_o0_t10_l0) + m_Rc_xy_o0_t11_l0) + m_Rc_xy_o0_t12_l0) + m_Rc_xy_o0_t13_l0) + m_Rc_xy_o0_t14_l0) + d_Rc_xy_o0_t15_m0_l0;
							d_Rc_yy_o0_t15_m0_l0 = (gammacu_zx * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_zy * (C_xyy * Cd_xyz + C_yyy * Cd_yyz + C_zyy * Cd_zyz) + gammacu_zz * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz)) + (gammacu_yx * (C_xxy * Cd_xyy + C_yxy * Cd_yyy + C_zxy * Cd_zyy) + gammacu_yy * (C_xyy * Cd_xyy + C_yyy * Cd_yyy + C_zyy * Cd_zyy) + gammacu_yz * (C_xyz * Cd_xyy + C_yyz * Cd_yyy + C_zyz * Cd_zyy)) + (gammacu_xx * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_xy * (C_xyy * Cd_xxy + C_yyy * Cd_yxy + C_zyy * Cd_zxy) + gammacu_xz * (C_xyz * Cd_xxy + C_yyz * Cd_yxy + C_zyz * Cd_zxy)) + (gammacu_zx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_zy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_zz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_yx * (C_xyy * Cd_yxx + C_yyy * Cd_yxy + C_zyy * Cd_yxz) + gammacu_yy * (C_xyy * Cd_yxy + C_yyy * Cd_yyy + C_zyy * Cd_yyz) + gammacu_yz * (C_xyy * Cd_yxz + C_yyy * Cd_yyz + C_zyy * Cd_yzz)) + (gammacu_xx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_xy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_xz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (gammacu_zx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_zy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_zz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_yx * (C_xyy * Cd_yxx + C_yyy * Cd_yxy + C_zyy * Cd_yxz) + gammacu_yy * (C_xyy * Cd_yxy + C_yyy * Cd_yyy + C_zyy * Cd_yyz) + gammacu_yz * (C_xyy * Cd_yxz + C_yyy * Cd_yyz + C_zyy * Cd_yzz)) + (gammacu_xx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_xy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_xz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxy + 0.5 * vector(Gam_y, i, j, k) * Cd_yyy + 0.5 * vector(Gam_z, i, j, k) * Cd_yyz) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxy + 0.5 * vector(Gam_y, i, j, k) * Cd_yyy + 0.5 * vector(Gam_z, i, j, k) * Cd_yyz);
							m_Rc_yy_o0_t11_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
							m_Rc_yy_o0_t10_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
							m_Rc_yy_o0_t9_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
							m_Rc_yy_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_yy_o0_t8_m0_l0;
							m_Rc_yy_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_yy_o0_t7_m0_l0;
							m_Rc_yy_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_yy_o0_t6_m0_l0;
							m_Rc_yy_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_yy_o0_t5_m0_l0;
							m_Rc_yy_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_yy_o0_t4_m0_l0;
							m_Rc_yy_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_yy_o0_t3_m0_l0;
							m_Rc_yy_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_yy_o0_t2_m0_l0;
							m_Rc_yy_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_yy_o0_t1_m0_l0;
							m_Rc_yy_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_yy_o0_t0_m0_l0;
							Rc_yy = ((((((((((((((m_Rc_yy_o0_t0_l0 + m_Rc_yy_o0_t1_l0) + m_Rc_yy_o0_t2_l0) + m_Rc_yy_o0_t3_l0) + m_Rc_yy_o0_t4_l0) + m_Rc_yy_o0_t5_l0) + m_Rc_yy_o0_t6_l0) + m_Rc_yy_o0_t7_l0) + m_Rc_yy_o0_t8_l0) + m_Rc_yy_o0_t9_l0) + m_Rc_yy_o0_t10_l0) + m_Rc_yy_o0_t11_l0) + m_Rc_yy_o0_t9_l0) + m_Rc_yy_o0_t10_l0) + m_Rc_yy_o0_t11_l0) + d_Rc_yy_o0_t15_m0_l0;
							R_xy = Rc_xy + Rp_xy;
							gammau_zz = iDetgamma * (gamma_xx * gamma_yy - gamma_xy * gamma_xy);
							Ku_zz = Au_zz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_zz * vector(trK, i, j, k);
							m_Rp_yy_o0_t49_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t48_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t47_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t46_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t45_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t44_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t43_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t42_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t41_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t39_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t38_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t37_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t36_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t35_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t34_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t33_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t32_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t31_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t30_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t29_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t28_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t27_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t26_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t25_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t24_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t23_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t22_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t21_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t20_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t19_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t18_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t17_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t16_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t15_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t14_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t13_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t12_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_yy_o0_t11_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_yy_o0_t10_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_yy_o0_t9_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_yy_o0_t8_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_yy_o0_t7_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_yy_o0_t6_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_yy_o0_t5_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_yy_o0_t4_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_yy_o0_t3_l0 = 2.0 * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yy_o0_t2_l0 = 2.0 * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yy_o0_t1_l0 = 2.0 * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
							Rp_yy = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yy_o0_t0_l0 + m_Rp_yy_o0_t1_l0) + m_Rp_yy_o0_t2_l0) + m_Rp_yy_o0_t3_l0) + m_Rp_yy_o0_t4_l0) + m_Rp_yy_o0_t5_l0) + m_Rp_yy_o0_t6_l0) + m_Rp_yy_o0_t7_l0) + m_Rp_yy_o0_t8_l0) + m_Rp_yy_o0_t9_l0) + m_Rp_yy_o0_t10_l0) + m_Rp_yy_o0_t11_l0) + m_Rp_yy_o0_t12_l0) + m_Rp_yy_o0_t13_l0) + m_Rp_yy_o0_t14_l0) + m_Rp_yy_o0_t15_l0) + m_Rp_yy_o0_t16_l0) + m_Rp_yy_o0_t17_l0) + m_Rp_yy_o0_t18_l0) + m_Rp_yy_o0_t19_l0) + m_Rp_yy_o0_t20_l0) + m_Rp_yy_o0_t21_l0) + m_Rp_yy_o0_t22_l0) + m_Rp_yy_o0_t23_l0) + m_Rp_yy_o0_t24_l0) + m_Rp_yy_o0_t25_l0) + m_Rp_yy_o0_t26_l0) + m_Rp_yy_o0_t27_l0) + m_Rp_yy_o0_t28_l0) + m_Rp_yy_o0_t29_l0) + m_Rp_yy_o0_t30_l0) + m_Rp_yy_o0_t31_l0) + m_Rp_yy_o0_t32_l0) + m_Rp_yy_o0_t33_l0) + m_Rp_yy_o0_t34_l0) + m_Rp_yy_o0_t35_l0) + m_Rp_yy_o0_t36_l0) + m_Rp_yy_o0_t37_l0) + m_Rp_yy_o0_t38_l0) + m_Rp_yy_o0_t39_l0) + m_Rp_yy_o0_t40_l0) + m_Rp_yy_o0_t41_l0) + m_Rp_yy_o0_t42_l0) + m_Rp_yy_o0_t43_l0) + m_Rp_yy_o0_t44_l0) + m_Rp_yy_o0_t45_l0) + m_Rp_yy_o0_t46_l0) + m_Rp_yy_o0_t47_l0) + m_Rp_yy_o0_t48_l0) + m_Rp_yy_o0_t49_l0;
							m_Rp_yz_o0_t49_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t48_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t47_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t46_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t45_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t44_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t43_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t42_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t41_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t39_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t38_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t37_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t36_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t35_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t34_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t33_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t32_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t31_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t30_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t29_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t28_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t27_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t26_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t25_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t24_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t23_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t22_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t21_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t20_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t19_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t18_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t17_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t16_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t15_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t14_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t13_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t12_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
							m_Rp_yz_o0_t11_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
							m_Rp_yz_o0_t10_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
							m_Rp_yz_o0_t9_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
							m_Rp_yz_o0_t8_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
							m_Rp_yz_o0_t7_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
							m_Rp_yz_o0_t6_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
							m_Rp_yz_o0_t5_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
							m_Rp_yz_o0_t4_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
							m_Rp_yz_o0_t3_l0 = 2.0 * C_zyz * d_Rp_xx_o0_t3_m0_l0;
							m_Rp_yz_o0_t2_l0 = 2.0 * C_yyz * d_Rp_xx_o0_t2_m0_l0;
							m_Rp_yz_o0_t1_l0 = 2.0 * C_xyz * d_Rp_xx_o0_t1_m0_l0;
							m_Rp_yz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
							Rp_yz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yz_o0_t0_l0 + m_Rp_yz_o0_t1_l0) + m_Rp_yz_o0_t2_l0) + m_Rp_yz_o0_t3_l0) + m_Rp_yz_o0_t4_l0) + m_Rp_yz_o0_t5_l0) + m_Rp_yz_o0_t6_l0) + m_Rp_yz_o0_t7_l0) + m_Rp_yz_o0_t8_l0) + m_Rp_yz_o0_t9_l0) + m_Rp_yz_o0_t10_l0) + m_Rp_yz_o0_t11_l0) + m_Rp_yz_o0_t12_l0) + m_Rp_yz_o0_t13_l0) + m_Rp_yz_o0_t14_l0) + m_Rp_yz_o0_t15_l0) + m_Rp_yz_o0_t16_l0) + m_Rp_yz_o0_t17_l0) + m_Rp_yz_o0_t18_l0) + m_Rp_yz_o0_t19_l0) + m_Rp_yz_o0_t20_l0) + m_Rp_yz_o0_t21_l0) + m_Rp_yz_o0_t22_l0) + m_Rp_yz_o0_t23_l0) + m_Rp_yz_o0_t24_l0) + m_Rp_yz_o0_t25_l0) + m_Rp_yz_o0_t26_l0) + m_Rp_yz_o0_t27_l0) + m_Rp_yz_o0_t28_l0) + m_Rp_yz_o0_t29_l0) + m_Rp_yz_o0_t30_l0) + m_Rp_yz_o0_t31_l0) + m_Rp_yz_o0_t32_l0) + m_Rp_yz_o0_t33_l0) + m_Rp_yz_o0_t34_l0) + m_Rp_yz_o0_t35_l0) + m_Rp_yz_o0_t36_l0) + m_Rp_yz_o0_t37_l0) + m_Rp_yz_o0_t38_l0) + m_Rp_yz_o0_t39_l0) + m_Rp_yz_o0_t40_l0) + m_Rp_yz_o0_t41_l0) + m_Rp_yz_o0_t42_l0) + m_Rp_yz_o0_t43_l0) + m_Rp_yz_o0_t44_l0) + m_Rp_yz_o0_t45_l0) + m_Rp_yz_o0_t46_l0) + m_Rp_yz_o0_t47_l0) + m_Rp_yz_o0_t48_l0) + m_Rp_yz_o0_t49_l0;
							Am_xx = gammacu_xx * vector(A_xx, i, j, k) + gammacu_xy * vector(A_xy, i, j, k) + gammacu_xz * vector(A_xz, i, j, k);
							Am_xz = gammacu_xx * vector(A_xz, i, j, k) + gammacu_xy * vector(A_yz, i, j, k) + gammacu_xz * vector(A_zz, i, j, k);
							Am_xy = gammacu_xx * vector(A_xy, i, j, k) + gammacu_xy * vector(A_yy, i, j, k) + gammacu_xz * vector(A_yz, i, j, k);
							R_yy = Rc_yy + Rp_yy;
							Au_xz = gammacu_xx * Am_zx + gammacu_xy * Am_zy + gammacu_xz * Am_zz;
							Ku_xz = Au_xz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xz * vector(trK, i, j, k);
							Au_xy = gammacu_xx * Am_yx + gammacu_xy * Am_yy + gammacu_xz * Am_yz;
							Ku_xy = Au_xy * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xy * vector(trK, i, j, k);
							d_Rc_xz_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xzz + C_yxx * Cd_yzz + C_zxx * Cd_zzz) + gammacu_zy * (C_xxy * Cd_xzz + C_yxy * Cd_yzz + C_zxy * Cd_zzz) + gammacu_zz * (C_xxz * Cd_xzz + C_yxz * Cd_yzz + C_zxz * Cd_zzz)) + (gammacu_yx * (C_xxx * Cd_xyz + C_yxx * Cd_yyz + C_zxx * Cd_zyz) + gammacu_yy * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_yz * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz)) + (gammacu_xx * (C_xxx * Cd_xxz + C_yxx * Cd_yxz + C_zxx * Cd_zxz) + gammacu_xy * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_xz * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_xxx + C_yzz * Cd_xxy + C_zzz * Cd_xxz) + gammacu_zy * (C_xzz * Cd_xxy + C_yzz * Cd_xyy + C_zzz * Cd_xyz) + gammacu_zz * (C_xzz * Cd_xxz + C_yzz * Cd_xyz + C_zzz * Cd_xzz)) + (gammacu_yx * (C_xyz * Cd_xxx + C_yyz * Cd_xxy + C_zyz * Cd_xxz) + gammacu_yy * (C_xyz * Cd_xxy + C_yyz * Cd_xyy + C_zyz * Cd_xyz) + gammacu_yz * (C_xyz * Cd_xxz + C_yyz * Cd_xyz + C_zyz * Cd_xzz)) + (gammacu_xx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_xy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_xz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_zy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_zz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (gammacu_yx * (C_xxy * Cd_zxx + C_yxy * Cd_zxy + C_zxy * Cd_zxz) + gammacu_yy * (C_xxy * Cd_zxy + C_yxy * Cd_zyy + C_zxy * Cd_zyz) + gammacu_yz * (C_xxy * Cd_zxz + C_yxy * Cd_zyz + C_zxy * Cd_zzz)) + (gammacu_xx * (C_xxx * Cd_zxx + C_yxx * Cd_zxy + C_zxx * Cd_zxz) + gammacu_xy * (C_xxx * Cd_zxy + C_yxx * Cd_zyy + C_zxx * Cd_zyz) + gammacu_xz * (C_xxx * Cd_zxz + C_yxx * Cd_zyz + C_zxx * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxx + 0.5 * vector(Gam_y, i, j, k) * Cd_zxy + 0.5 * vector(Gam_z, i, j, k) * Cd_zxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxz + 0.5 * vector(Gam_y, i, j, k) * Cd_xyz + 0.5 * vector(Gam_z, i, j, k) * Cd_xzz);
							m_Rc_xz_o0_t14_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
							m_Rc_xz_o0_t13_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
							m_Rc_xz_o0_t12_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
							m_Rc_xz_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
							m_Rc_xz_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
							m_Rc_xz_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
							m_Rc_xz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xz_o0_t8_m0_l0;
							m_Rc_xz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xz_o0_t7_m0_l0;
							m_Rc_xz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xz_o0_t6_m0_l0;
							m_Rc_xz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xz_o0_t5_m0_l0;
							m_Rc_xz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xz_o0_t4_m0_l0;
							m_Rc_xz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xz_o0_t3_m0_l0;
							m_Rc_xz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xz_o0_t2_m0_l0;
							m_Rc_xz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xz_o0_t1_m0_l0;
							m_Rc_xz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xz_o0_t0_m0_l0;
							Rc_xz = ((((((((((((((m_Rc_xz_o0_t0_l0 + m_Rc_xz_o0_t1_l0) + m_Rc_xz_o0_t2_l0) + m_Rc_xz_o0_t3_l0) + m_Rc_xz_o0_t4_l0) + m_Rc_xz_o0_t5_l0) + m_Rc_xz_o0_t6_l0) + m_Rc_xz_o0_t7_l0) + m_Rc_xz_o0_t8_l0) + m_Rc_xz_o0_t9_l0) + m_Rc_xz_o0_t10_l0) + m_Rc_xz_o0_t11_l0) + m_Rc_xz_o0_t12_l0) + m_Rc_xz_o0_t13_l0) + m_Rc_xz_o0_t14_l0) + d_Rc_xz_o0_t15_m0_l0;
							d_Rc_yz_o0_t15_m0_l0 = (gammacu_zx * (C_xxy * Cd_xzz + C_yxy * Cd_yzz + C_zxy * Cd_zzz) + gammacu_zy * (C_xyy * Cd_xzz + C_yyy * Cd_yzz + C_zyy * Cd_zzz) + gammacu_zz * (C_xyz * Cd_xzz + C_yyz * Cd_yzz + C_zyz * Cd_zzz)) + (gammacu_yx * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_yy * (C_xyy * Cd_xyz + C_yyy * Cd_yyz + C_zyy * Cd_zyz) + gammacu_yz * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz)) + (gammacu_xx * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_xy * (C_xyy * Cd_xxz + C_yyy * Cd_yxz + C_zyy * Cd_zxz) + gammacu_xz * (C_xyz * Cd_xxz + C_yyz * Cd_yxz + C_zyz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_yxx + C_yzz * Cd_yxy + C_zzz * Cd_yxz) + gammacu_zy * (C_xzz * Cd_yxy + C_yzz * Cd_yyy + C_zzz * Cd_yyz) + gammacu_zz * (C_xzz * Cd_yxz + C_yzz * Cd_yyz + C_zzz * Cd_yzz)) + (gammacu_yx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_yy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_yz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_xx * (C_xxz * Cd_yxx + C_yxz * Cd_yxy + C_zxz * Cd_yxz) + gammacu_xy * (C_xxz * Cd_yxy + C_yxz * Cd_yyy + C_zxz * Cd_yyz) + gammacu_xz * (C_xxz * Cd_yxz + C_yxz * Cd_yyz + C_zxz * Cd_yzz)) + (gammacu_zx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_zy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_zz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_yx * (C_xyy * Cd_zxx + C_yyy * Cd_zxy + C_zyy * Cd_zxz) + gammacu_yy * (C_xyy * Cd_zxy + C_yyy * Cd_zyy + C_zyy * Cd_zyz) + gammacu_yz * (C_xyy * Cd_zxz + C_yyy * Cd_zyz + C_zyy * Cd_zzz)) + (gammacu_xx * (C_xxy * Cd_zxx + C_yxy * Cd_zxy + C_zxy * Cd_zxz) + gammacu_xy * (C_xxy * Cd_zxy + C_yxy * Cd_zyy + C_zxy * Cd_zyz) + gammacu_xz * (C_xxy * Cd_zxz + C_yxy * Cd_zyz + C_zxy * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxy + 0.5 * vector(Gam_y, i, j, k) * Cd_zyy + 0.5 * vector(Gam_z, i, j, k) * Cd_zyz) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxz + 0.5 * vector(Gam_y, i, j, k) * Cd_yyz + 0.5 * vector(Gam_z, i, j, k) * Cd_yzz);
							m_Rc_yz_o0_t14_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
							m_Rc_yz_o0_t13_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
							m_Rc_yz_o0_t12_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
							m_Rc_yz_o0_t11_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
							m_Rc_yz_o0_t10_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
							m_Rc_yz_o0_t9_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
							m_Rc_yz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_yz_o0_t8_m0_l0;
							m_Rc_yz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_yz_o0_t7_m0_l0;
							m_Rc_yz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_yz_o0_t6_m0_l0;
							m_Rc_yz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_yz_o0_t5_m0_l0;
							m_Rc_yz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_yz_o0_t4_m0_l0;
							m_Rc_yz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_yz_o0_t3_m0_l0;
							m_Rc_yz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_yz_o0_t2_m0_l0;
							m_Rc_yz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_yz_o0_t1_m0_l0;
							m_Rc_yz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_yz_o0_t0_m0_l0;
							Rc_yz = ((((((((((((((m_Rc_yz_o0_t0_l0 + m_Rc_yz_o0_t1_l0) + m_Rc_yz_o0_t2_l0) + m_Rc_yz_o0_t3_l0) + m_Rc_yz_o0_t4_l0) + m_Rc_yz_o0_t5_l0) + m_Rc_yz_o0_t6_l0) + m_Rc_yz_o0_t7_l0) + m_Rc_yz_o0_t8_l0) + m_Rc_yz_o0_t9_l0) + m_Rc_yz_o0_t10_l0) + m_Rc_yz_o0_t11_l0) + m_Rc_yz_o0_t12_l0) + m_Rc_yz_o0_t13_l0) + m_Rc_yz_o0_t14_l0) + d_Rc_yz_o0_t15_m0_l0;
							R_yz = Rc_yz + Rp_yz;
							d_Rc_zz_o0_t15_m0_l0 = (gammacu_zx * (C_xxz * Cd_xzz + C_yxz * Cd_yzz + C_zxz * Cd_zzz) + gammacu_zy * (C_xyz * Cd_xzz + C_yyz * Cd_yzz + C_zyz * Cd_zzz) + gammacu_zz * (C_xzz * Cd_xzz + C_yzz * Cd_yzz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz) + gammacu_yy * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz) + gammacu_yz * (C_xzz * Cd_xyz + C_yzz * Cd_yyz + C_zzz * Cd_zyz)) + (gammacu_xx * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz) + gammacu_xy * (C_xyz * Cd_xxz + C_yyz * Cd_yxz + C_zyz * Cd_zxz) + gammacu_xz * (C_xzz * Cd_xxz + C_yzz * Cd_yxz + C_zzz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_zxx + C_yzz * Cd_zxy + C_zzz * Cd_zxz) + gammacu_zy * (C_xzz * Cd_zxy + C_yzz * Cd_zyy + C_zzz * Cd_zyz) + gammacu_zz * (C_xzz * Cd_zxz + C_yzz * Cd_zyz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_yy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_yz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_xx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_xy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_xz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (gammacu_zx * (C_xzz * Cd_zxx + C_yzz * Cd_zxy + C_zzz * Cd_zxz) + gammacu_zy * (C_xzz * Cd_zxy + C_yzz * Cd_zyy + C_zzz * Cd_zyz) + gammacu_zz * (C_xzz * Cd_zxz + C_yzz * Cd_zyz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_yy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_yz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_xx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_xy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_xz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxz + 0.5 * vector(Gam_y, i, j, k) * Cd_zyz + 0.5 * vector(Gam_z, i, j, k) * Cd_zzz) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxz + 0.5 * vector(Gam_y, i, j, k) * Cd_zyz + 0.5 * vector(Gam_z, i, j, k) * Cd_zzz);
							m_Rc_zz_o0_t11_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
							m_Rc_zz_o0_t10_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
							m_Rc_zz_o0_t9_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
							m_Rc_zz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_zz_o0_t8_m0_l0;
							m_Rc_zz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_zz_o0_t7_m0_l0;
							m_Rc_zz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_zz_o0_t6_m0_l0;
							m_Rc_zz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_zz_o0_t5_m0_l0;
							m_Rc_zz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_zz_o0_t4_m0_l0;
							m_Rc_zz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_zz_o0_t3_m0_l0;
							m_Rc_zz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_zz_o0_t2_m0_l0;
							m_Rc_zz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_zz_o0_t1_m0_l0;
							m_Rc_zz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_zz_o0_t0_m0_l0;
							Rc_zz = ((((((((((((((m_Rc_zz_o0_t0_l0 + m_Rc_zz_o0_t1_l0) + m_Rc_zz_o0_t2_l0) + m_Rc_zz_o0_t3_l0) + m_Rc_zz_o0_t4_l0) + m_Rc_zz_o0_t5_l0) + m_Rc_zz_o0_t6_l0) + m_Rc_zz_o0_t7_l0) + m_Rc_zz_o0_t8_l0) + m_Rc_zz_o0_t9_l0) + m_Rc_zz_o0_t10_l0) + m_Rc_zz_o0_t11_l0) + m_Rc_zz_o0_t9_l0) + m_Rc_zz_o0_t10_l0) + m_Rc_zz_o0_t11_l0) + d_Rc_zz_o0_t15_m0_l0;
							R_zz = Rc_zz + Rp_zz;
							R_xz = Rc_xz + Rp_xz;
							R = gammau_xx * R_xx + gammau_yy * R_yy + gammau_zz * R_zz + 2.0 * (gammau_xy * R_xy + gammau_xz * R_xz + gammau_yz * R_yz);
							Au_xx = gammacu_xx * Am_xx + gammacu_xy * Am_xy + gammacu_xz * Am_xz;
							Ku_xx = Au_xx * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xx * vector(trK, i, j, k);
							d_Rscalar_o0_t0_m0_l0 = R;
							d_HamCon_o0_t0_m0_l0 = R + vector(trK, i, j, k) * vector(trK, i, j, k) - (K_xx * Ku_xx + K_yy * Ku_yy + K_zz * Ku_zz + 2.0 * K_xy * Ku_xy + 2.0 * K_xz * Ku_xz + 2.0 * K_yz * Ku_yz);
							d_MomCon_x_o0_t9_m0_l0 = Cd_xxx * Au_xx + Cd_xyy * Au_yy + Cd_xzz * Au_zz + 2.0 * (Cd_xxy * Au_xy + Cd_xxz * Au_xz + Cd_xyz * Au_yz);
							d_MomCon_y_o0_t9_m0_l0 = Cd_yxx * Au_xx + Cd_yyy * Au_yy + Cd_yzz * Au_zz + 2.0 * (Cd_yxy * Au_xy + Cd_yxz * Au_xz + Cd_yyz * Au_yz);
							d_MomCon_z_o0_t9_m0_l0 = Cd_zxx * Au_xx + Cd_zyy * Au_yy + Cd_zzz * Au_zz + 2.0 * (Cd_zxy * Au_xy + Cd_zxz * Au_xz + Cd_zyz * Au_yz);
							m_MomCon_z_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_z_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_z_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_z_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_z_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_z_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_z_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_z_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_z_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_z_o0_t12_l0 = 6.0 * Am_zz * d_Rp_xx_o0_t3_m0_l0;
							m_MomCon_z_o0_t11_l0 = 6.0 * Am_yz * d_Rp_xx_o0_t2_m0_l0;
							m_MomCon_z_o0_t10_l0 = 6.0 * Am_xz * d_Rp_xx_o0_t1_m0_l0;
							m_MomCon_z_o0_t8_l0 = gammacu_zz * d_MomCon_z_o0_t8_m0_l0;
							m_MomCon_z_o0_t7_l0 = gammacu_zy * d_MomCon_z_o0_t7_m0_l0;
							m_MomCon_z_o0_t6_l0 = gammacu_zx * d_MomCon_z_o0_t6_m0_l0;
							m_MomCon_z_o0_t5_l0 = gammacu_yz * d_MomCon_y_o0_t8_m0_l0;
							m_MomCon_z_o0_t4_l0 = gammacu_yy * d_MomCon_y_o0_t7_m0_l0;
							m_MomCon_z_o0_t3_l0 = gammacu_yx * d_MomCon_y_o0_t6_m0_l0;
							m_MomCon_z_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t8_m0_l0;
							m_MomCon_z_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t7_m0_l0;
							m_MomCon_z_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t6_m0_l0;
							m_MomCon_y_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_y_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_y_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_y_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_y_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_y_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_y_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_y_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_y_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_y_o0_t12_l0 = 6.0 * Am_zy * d_Rp_xx_o0_t3_m0_l0;
							m_MomCon_y_o0_t11_l0 = 6.0 * Am_yy * d_Rp_xx_o0_t2_m0_l0;
							m_MomCon_y_o0_t10_l0 = 6.0 * Am_xy * d_Rp_xx_o0_t1_m0_l0;
							m_MomCon_y_o0_t8_l0 = gammacu_zz * d_MomCon_y_o0_t8_m0_l0;
							m_MomCon_y_o0_t7_l0 = gammacu_zy * d_MomCon_y_o0_t7_m0_l0;
							m_MomCon_y_o0_t6_l0 = gammacu_zx * d_MomCon_y_o0_t6_m0_l0;
							m_MomCon_y_o0_t5_l0 = gammacu_yz * d_MomCon_y_o0_t5_m0_l0;
							m_MomCon_y_o0_t4_l0 = gammacu_yy * d_MomCon_y_o0_t4_m0_l0;
							m_MomCon_y_o0_t3_l0 = gammacu_yx * d_MomCon_y_o0_t3_m0_l0;
							m_MomCon_y_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t5_m0_l0;
							m_MomCon_y_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t4_m0_l0;
							m_MomCon_y_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t3_m0_l0;
							m_MomCon_x_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_x_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_x_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
							m_MomCon_x_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_x_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_x_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
							m_MomCon_x_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_x_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_x_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
							m_MomCon_x_o0_t12_l0 = 6.0 * Am_zx * d_Rp_xx_o0_t3_m0_l0;
							m_MomCon_x_o0_t11_l0 = 6.0 * Am_yx * d_Rp_xx_o0_t2_m0_l0;
							m_MomCon_x_o0_t10_l0 = 6.0 * Am_xx * d_Rp_xx_o0_t1_m0_l0;
							m_MomCon_x_o0_t8_l0 = gammacu_zz * d_MomCon_x_o0_t8_m0_l0;
							m_MomCon_x_o0_t7_l0 = gammacu_zy * d_MomCon_x_o0_t7_m0_l0;
							m_MomCon_x_o0_t6_l0 = gammacu_zx * d_MomCon_x_o0_t6_m0_l0;
							m_MomCon_x_o0_t5_l0 = gammacu_yz * d_MomCon_x_o0_t5_m0_l0;
							m_MomCon_x_o0_t4_l0 = gammacu_yy * d_MomCon_x_o0_t4_m0_l0;
							m_MomCon_x_o0_t3_l0 = gammacu_yx * d_MomCon_x_o0_t3_m0_l0;
							m_MomCon_x_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t2_m0_l0;
							m_MomCon_x_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t1_m0_l0;
							m_MomCon_x_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t0_m0_l0;
							vector(Rscalar, i, j, k) = d_Rscalar_o0_t0_m0_l0;
							vector(HamCon, i, j, k) = d_HamCon_o0_t0_m0_l0;
							vector(MomCon_x, i, j, k) = ((((((((((((((((((((m_MomCon_x_o0_t0_l0 + m_MomCon_x_o0_t1_l0) + m_MomCon_x_o0_t2_l0) + m_MomCon_x_o0_t3_l0) + m_MomCon_x_o0_t4_l0) + m_MomCon_x_o0_t5_l0) + m_MomCon_x_o0_t6_l0) + m_MomCon_x_o0_t7_l0) + m_MomCon_x_o0_t8_l0) + d_MomCon_x_o0_t9_m0_l0) + m_MomCon_x_o0_t10_l0) + m_MomCon_x_o0_t11_l0) + m_MomCon_x_o0_t12_l0) + m_MomCon_x_o0_t13_l0) + m_MomCon_x_o0_t14_l0) + m_MomCon_x_o0_t15_l0) + m_MomCon_x_o0_t16_l0) + m_MomCon_x_o0_t17_l0) + m_MomCon_x_o0_t18_l0) + m_MomCon_x_o0_t19_l0) + m_MomCon_x_o0_t20_l0) + m_MomCon_x_o0_t21_l0;
							vector(MomCon_y, i, j, k) = ((((((((((((((((((((m_MomCon_y_o0_t0_l0 + m_MomCon_y_o0_t1_l0) + m_MomCon_y_o0_t2_l0) + m_MomCon_y_o0_t3_l0) + m_MomCon_y_o0_t4_l0) + m_MomCon_y_o0_t5_l0) + m_MomCon_y_o0_t6_l0) + m_MomCon_y_o0_t7_l0) + m_MomCon_y_o0_t8_l0) + d_MomCon_y_o0_t9_m0_l0) + m_MomCon_y_o0_t10_l0) + m_MomCon_y_o0_t11_l0) + m_MomCon_y_o0_t12_l0) + m_MomCon_y_o0_t13_l0) + m_MomCon_y_o0_t14_l0) + m_MomCon_y_o0_t15_l0) + m_MomCon_y_o0_t16_l0) + m_MomCon_y_o0_t17_l0) + m_MomCon_y_o0_t18_l0) + m_MomCon_y_o0_t19_l0) + m_MomCon_y_o0_t20_l0) + m_MomCon_y_o0_t21_l0;
							vector(MomCon_z, i, j, k) = ((((((((((((((((((((m_MomCon_z_o0_t0_l0 + m_MomCon_z_o0_t1_l0) + m_MomCon_z_o0_t2_l0) + m_MomCon_z_o0_t3_l0) + m_MomCon_z_o0_t4_l0) + m_MomCon_z_o0_t5_l0) + m_MomCon_z_o0_t6_l0) + m_MomCon_z_o0_t7_l0) + m_MomCon_z_o0_t8_l0) + d_MomCon_z_o0_t9_m0_l0) + m_MomCon_z_o0_t10_l0) + m_MomCon_z_o0_t11_l0) + m_MomCon_z_o0_t12_l0) + m_MomCon_z_o0_t13_l0) + m_MomCon_z_o0_t14_l0) + m_MomCon_z_o0_t15_l0) + m_MomCon_z_o0_t16_l0) + m_MomCon_z_o0_t17_l0) + m_MomCon_z_o0_t18_l0) + m_MomCon_z_o0_t19_l0) + m_MomCon_z_o0_t20_l0) + m_MomCon_z_o0_t21_l0;
						}
					}
				}
			}
		}
	}
	
}


void Problem::initializeLevelIntegrator(
   const std::shared_ptr<mesh::GriddingAlgorithmStrategy>& gridding_alg)
{
}

double Problem::getLevelDt(
   const std::shared_ptr<hier::PatchLevel>& level,
   const double dt_time,
   const bool initial_time)
{
  
   TBOX_ASSERT(level);

   if (level->getLevelNumber() == 0) return initial_dt;

    double dt = initial_dt;
    const hier::IntVector ratio = level->getRatioToLevelZero();
    double local_dt = dt;
    for (int i = 0; i < 2; i++) {
        if (local_dt > dt / ratio[i]) {
            local_dt = dt / ratio[i];
        }
    }
    return local_dt;
}

double Problem::getMaxFinerLevelDt(
   const int finer_level_number,
   const double coarse_dt,
   const hier::IntVector& ratio)
{
   NULL_USE(finer_level_number);

   TBOX_ASSERT(ratio.min() > 0);

   return coarse_dt / double(ratio.max());
}

void Problem::standardLevelSynchronization(
   const std::shared_ptr<hier::PatchHierarchy>& hierarchy,
   const int coarsest_level,
   const int finest_level,
   const double sync_time,
   const std::vector<double>& old_times)
{

}

void Problem::synchronizeNewLevels(
   const std::shared_ptr<hier::PatchHierarchy>& hierarchy,
   const int coarsest_level,
   const int finest_level,
   const double sync_time,
   const bool initial_time)
{

    //Not needed, but not absolutely sure
    /*for (int fine_ln = finest_level; fine_ln > coarsest_level; --fine_ln) {
        const int coarse_ln = fine_ln - 1;
        std::shared_ptr<hier::PatchLevel> fine_level(hierarchy->getPatchLevel(fine_ln));
        d_bdry_fill_init->createSchedule(fine_level, coarse_ln, hierarchy, this)->fillData(sync_time, true);
    }*/
}

void Problem::resetTimeDependentData(
   const std::shared_ptr<hier::PatchLevel>& level,
   const double new_time,
   const bool can_be_refined)
{
   TBOX_ASSERT(level);
   level->setTime(new_time);
}

void Problem::resetDataToPreadvanceState(
   const std::shared_ptr<hier::PatchLevel>& level)
{
    //cout<<"resetDataToPreadvanceState"<<endl;
}

/*
 * Map data on a patch. This mapping is done only at the begining of the simulation.
 */
void Problem::mapDataOnPatch(const double time, const bool initial_time, const int ln, const std::shared_ptr< hier::PatchLevel >& level)
{
	(void) time;
	const tbox::SAMRAI_MPI& mpi(tbox::SAMRAI_MPI::getSAMRAIWorld());
   	if (initial_time || ln == 0) {

		// Mapping		
		int i, iterm, previousMapi, iWallAcc;
		bool interiorMapi;
		double iMapStart, iMapEnd;
		int j, jterm, previousMapj, jWallAcc;
		bool interiorMapj;
		double jMapStart, jMapEnd;
		int k, kterm, previousMapk, kWallAcc;
		bool interiorMapk;
		double kMapStart, kMapEnd;
		int minBlock[3], maxBlock[3], unionsI, facePointI, ie1, ie2, ie3, proc, pcounter, working, finished, pred;
		double maxDistance, e1, e2, e3;
		bool done, modif, workingArray[mpi.getSize()], finishedArray[mpi.getSize()], workingGlobal, finishedGlobal, workingPatchArray[level->getLocalNumberOfPatches()], finishedPatchArray[level->getLocalNumberOfPatches()], workingPatchGlobal, finishedPatchGlobal;
		int nodes = mpi.getSize();
		int patches = level->getLocalNumberOfPatches();

		double SQRT3INV = 1.0/sqrt(3.0);

		if (ln == 0) {
			//FOV initialization
			for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
				const std::shared_ptr< hier::Patch >& patch = *p_it;

				//Get the dimensions of the patch
				hier::Box pbox = patch->getBox();
				double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
				double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
				double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
				double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
				double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
				double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
				double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
				const hier::Index boxfirst = patch->getBox().lower();
				const hier::Index boxlast  = patch->getBox().upper();

				//Get delta spaces into an array. dx, dy, dz.
				const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
				const double* dx  = patch_geom->getDx();

				int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
				int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
				int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

				for (i = 0; i < ilast; i++) {
					for (j = 0; j < jlast; j++) {
						for (k = 0; k < klast; k++) {
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
			d_mapping_fill->createSchedule(level, level)->fillData(initial_time, true);

			//Region: mainI
			for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
				const std::shared_ptr< hier::Patch >& patch = *p_it;

				//Get the dimensions of the patch
				hier::Box pbox = patch->getBox();
				double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
				double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
				double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
				double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
				double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
				double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
				double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
				double* interior_i = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_i_id).get())->getPointer();
				double* interior_j = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_j_id).get())->getPointer();
				double* interior_k = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_k_id).get())->getPointer();
				double* interior = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
				int* nonSync = ((pdat::NodeData<int> *) patch->getPatchData(d_nonSync_regridding_tag_id).get())->getPointer();
				const hier::Index boxfirst = patch->getBox().lower();
				const hier::Index boxlast  = patch->getBox().upper();

				//Get delta spaces into an array. dx, dy, dz.
				const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
				const double* dx  = patch_geom->getDx();

				int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
				int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
				int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

				iMapStart = 0;
				iMapEnd = d_grid_geometry->getPhysicalDomain().front().numberCells()[0];
				jMapStart = 0;
				jMapEnd = d_grid_geometry->getPhysicalDomain().front().numberCells()[1];
				kMapStart = 0;
				kMapEnd = d_grid_geometry->getPhysicalDomain().front().numberCells()[2];
				for (i = iMapStart; i <= iMapEnd; i++) {
					for (j = jMapStart; j <= jMapEnd; j++) {
						for (k = kMapStart; k <= kMapEnd; k++) {
							if (i >= boxfirst(0) - d_ghost_width && i <= boxlast(0) + d_ghost_width && j >= boxfirst(1) - d_ghost_width && j <= boxlast(1) + d_ghost_width && k >= boxfirst(2) - d_ghost_width && k <= boxlast(2) + d_ghost_width) {
								vector(FOV_1, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 100;
								vector(FOV_xLower, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
								vector(FOV_xUpper, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
								vector(FOV_yLower, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
								vector(FOV_yUpper, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
								vector(FOV_zLower, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
								vector(FOV_zUpper, i - boxfirst(0) + d_ghost_width, j - boxfirst(1) + d_ghost_width, k - boxfirst(2) + d_ghost_width) = 0;
							}
						}
					}
				}
				//Check stencil
				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							vector(interior_i, i, j, k) = 0;
							vector(interior_j, i, j, k) = 0;
							vector(interior_k, i, j, k) = 0;
						}
					}
				}
				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							if (vector(FOV_1, i, j, k) > 0) {
								setStencilLimits(patch, i, j, k, d_FOV_1_id);
							}
						}
					}
				}
			}
			d_mapping_fill->createSchedule(level, level)->fillData(initial_time, true);
			for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
				const std::shared_ptr< hier::Patch >& patch = *p_it;

				//Get the dimensions of the patch
				hier::Box pbox = patch->getBox();
				double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
				double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
				double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
				double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
				double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
				double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
				double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
				double* interior_i = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_i_id).get())->getPointer();
				double* interior_j = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_j_id).get())->getPointer();
				double* interior_k = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_k_id).get())->getPointer();
				double* interior = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
				int* nonSync = ((pdat::NodeData<int> *) patch->getPatchData(d_nonSync_regridding_tag_id).get())->getPointer();
				const hier::Index boxfirst = patch->getBox().lower();
				const hier::Index boxlast  = patch->getBox().upper();

				//Get delta spaces into an array. dx, dy, dz.
				const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
				const double* dx  = patch_geom->getDx();

				int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
				int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
				int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							if ((abs(vector(interior_i, i, j, k)) > 1 || abs(vector(interior_j, i, j, k)) > 1 || abs(vector(interior_k, i, j, k)) > 1) && (i < d_ghost_width || i >= ilast - d_ghost_width || j < d_ghost_width || j >= jlast - d_ghost_width || k < d_ghost_width || k >= klast - d_ghost_width)) {
								checkStencil(patch, i, j, k, d_FOV_1_id);
							}
						}
					}
				}
				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							if (vector(interior_i, i, j, k) != 0 || vector(interior_j, i, j, k) != 0 || vector(interior_k, i, j, k) != 0) {
								vector(FOV_1, i, j, k) = 100;
								vector(FOV_xLower, i, j, k) = 0;
								vector(FOV_xUpper, i, j, k) = 0;
								vector(FOV_yLower, i, j, k) = 0;
								vector(FOV_yUpper, i, j, k) = 0;
								vector(FOV_zLower, i, j, k) = 0;
								vector(FOV_zUpper, i, j, k) = 0;
							}
						}
					}
				}
			}
			d_mapping_fill->createSchedule(level, level)->fillData(initial_time, true);

		}
		//Boundaries Mapping
		for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
			const std::shared_ptr< hier::Patch >& patch = *p_it;

			//Get the dimensions of the patch
			hier::Box pbox = patch->getBox();
			double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
			double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
			double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
			double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
			double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
			double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
			double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast  = patch->getBox().upper();

			//Get delta spaces into an array. dx, dy, dz.
			const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
			const double* dx  = patch_geom->getDx();

			int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
			int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
			int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

			//z-Upper
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(2, 1)) {
				for (k = klast - d_ghost_width; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							vector(FOV_zUpper, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
						}
					}
				}
			}
			//z-Lower
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(2, 0)) {
				for (k = 0; k < d_ghost_width; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							vector(FOV_zLower, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
			//y-Upper
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(1, 1)) {
				for (k = 0; k < klast; k++) {
					for (j = jlast - d_ghost_width; j < jlast; j++) {
						for (i = 0; i < ilast; i++) {
							vector(FOV_yUpper, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
			//y-Lower
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(1, 0)) {
				for (k = 0; k < klast; k++) {
					for (j = 0; j < d_ghost_width; j++) {
						for (i = 0; i < ilast; i++) {
							vector(FOV_yLower, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
			//x-Upper
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(0, 1)) {
				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = ilast - d_ghost_width; i < ilast; i++) {
							vector(FOV_xUpper, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xLower, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
			//x-Lower
			if (patch->getPatchGeometry()->getTouchesRegularBoundary(0, 0)) {
				for (k = 0; k < klast; k++) {
					for (j = 0; j < jlast; j++) {
						for (i = 0; i < d_ghost_width; i++) {
							vector(FOV_xLower, i, j, k) = 100;
							vector(FOV_1, i, j, k) = 0;
							vector(FOV_xUpper, i, j, k) = 0;
							vector(FOV_yLower, i, j, k) = 0;
							vector(FOV_yUpper, i, j, k) = 0;
							vector(FOV_zLower, i, j, k) = 0;
							vector(FOV_zUpper, i, j, k) = 0;
						}
					}
				}
			}
		}
		d_mapping_fill->createSchedule(level, level)->fillData(initial_time, true);




   	}
}


/*
 * Sets the limit for the checkstencil routine
 */
void Problem::setStencilLimits(std::shared_ptr< hier::Patch > patch, int i, int j, int k, int v) const {
	double* FOV = ((pdat::NodeData<double> *) patch->getPatchData(v).get())->getPointer();
	double* interior_i = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_i_id).get())->getPointer();
	double* interior_j = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_j_id).get())->getPointer();
	double* interior_k = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_k_id).get())->getPointer();
	//Get the dimensions of the patch
	const hier::Index boxfirst = patch->getBox().lower();
	const hier::Index boxlast  = patch->getBox().upper();
	//Auxiliary definitions
	int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
	int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
	int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

	int iStart, iEnd, currentGhosti, otherSideShifti, jStart, jEnd, currentGhostj, otherSideShiftj, kStart, kEnd, currentGhostk, otherSideShiftk, shift;

	currentGhosti = d_ghost_width - 1;
	otherSideShifti = 0;
	currentGhostj = d_ghost_width - 1;
	otherSideShiftj = 0;
	currentGhostk = d_ghost_width - 1;
	otherSideShiftk = 0;
	//Checking width
	if ((i + 1 < ilast && vector(FOV, i + 1, j, k) == 0) ||  (i - 1 >= 0 && vector(FOV, i - 1, j, k) == 0)) {
		if (i + 1 < ilast && vector(FOV, i + 1, j, k) > 0) {
			bool stop_counting = false;
			for(int iti = i + 1; iti <= i + d_ghost_width - 1 && currentGhosti > 0; iti++) {
				if (iti < ilast  && vector(FOV, iti, j, k) > 0 && stop_counting == false) {
					currentGhosti--;
				} else {
					//First not interior point found
					if (iti < ilast  && vector(FOV, iti, j, k) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (iti >= ilast - 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (0, 1)) {
						stop_counting = true;
						//Calculate the number of cells the limit cannot grow
						if (iti + currentGhosti/2 >= ilast - 3) {
							otherSideShifti = (iti  + currentGhosti/2) - (ilast - 3);
						}
					}
				}
			}
		}
		if (i - 1 >= 0 && vector(FOV, i - 1, j, k) > 0) {
			bool stop_counting = false;
			for(int iti = i - 1; iti >= i - d_ghost_width + 1 && currentGhosti > 0; iti--) {
				if (iti >= 0  && vector(FOV, iti, j, k) > 0) {
					currentGhosti--;
				} else {
					//First not interior point found
					if (iti >= 0 && vector(FOV, iti, j, k) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (iti < 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (0, 0)) {
						stop_counting = true;
						//calculate the number of cells the limit cannot grow
						if (iti  -  ((currentGhosti) - currentGhosti/2) < 3) {
							otherSideShifti = 3 - (iti  - ((currentGhosti) - currentGhosti/2));
						}
					}
				}
			}
		}
		if (currentGhosti > 0) {
			if (i + 1 < ilast && vector(FOV, i + 1, j, k) > 0) {
				shift = 0;
				if(patch->getPatchGeometry()->getTouchesRegularBoundary (0, 0)) {
					while(i - ((currentGhosti) - currentGhosti/2) + shift < 3) {
						shift++;
					}
				}
				iStart = (currentGhosti - currentGhosti/2) - shift - otherSideShifti;
				iEnd = 0;
			} else {
				if (i - 1 >= 0 && vector(FOV, i - 1, j, k) > 0) {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (0, 1)) {
						while(i + currentGhosti/2 + shift >= ilast - 3) {
							shift--;
						}
					}
					iStart = 0;
					iEnd = currentGhosti/2 + shift + otherSideShifti;
				} else {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (0, 0)) {
						while(i - ((currentGhosti) - currentGhosti/2) + shift < 3) {
							shift++;
						}
					}
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (0, 1)) {
						while(i + currentGhosti/2 + shift >= ilast - 3) {
							shift--;
						}
					}
					iStart = (currentGhosti - currentGhosti/2) - shift;
					iEnd = currentGhosti/2 + shift;
				}
			}
		} else {
			iStart = 0;
			iEnd = 0;
		}
	} else {
		iStart = 0;
		iEnd = 0;
	}
	if ((j + 1 < jlast && vector(FOV, i, j + 1, k) == 0) ||  (j - 1 >= 0 && vector(FOV, i, j - 1, k) == 0)) {
		if (j + 1 < jlast && vector(FOV, i, j + 1, k) > 0) {
			bool stop_counting = false;
			for(int itj = j + 1; itj <= j + d_ghost_width - 1 && currentGhostj > 0; itj++) {
				if (itj < jlast  && vector(FOV, i, itj, k) > 0 && stop_counting == false) {
					currentGhostj--;
				} else {
					//First not interior point found
					if (itj < jlast  && vector(FOV, i, itj, k) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (itj >= jlast - 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (1, 1)) {
						stop_counting = true;
						//Calculate the number of cells the limit cannot grow
						if (itj + currentGhostj/2 >= jlast - 3) {
							otherSideShiftj = (itj  + currentGhostj/2) - (jlast - 3);
						}
					}
				}
			}
		}
		if (j - 1 >= 0 && vector(FOV, i, j - 1, k) > 0) {
			bool stop_counting = false;
			for(int itj = j - 1; itj >= j - d_ghost_width + 1 && currentGhostj > 0; itj--) {
				if (itj >= 0  && vector(FOV, i, itj, k) > 0) {
					currentGhostj--;
				} else {
					//First not interior point found
					if (itj >= 0 && vector(FOV, i, itj, k) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (itj < 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (1, 0)) {
						stop_counting = true;
						//calculate the number of cells the limit cannot grow
						if (itj  -  ((currentGhostj) - currentGhostj/2) < 3) {
							otherSideShiftj = 3 - (itj  - ((currentGhostj) - currentGhostj/2));
						}
					}
				}
			}
		}
		if (currentGhostj > 0) {
			if (j + 1 < jlast && vector(FOV, i, j + 1, k) > 0) {
				shift = 0;
				if(patch->getPatchGeometry()->getTouchesRegularBoundary (1, 0)) {
					while(j - ((currentGhostj) - currentGhostj/2) + shift < 3) {
						shift++;
					}
				}
				jStart = (currentGhostj - currentGhostj/2) - shift - otherSideShiftj;
				jEnd = 0;
			} else {
				if (j - 1 >= 0 && vector(FOV, i, j - 1, k) > 0) {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (1, 1)) {
						while(j + currentGhostj/2 + shift >= jlast - 3) {
							shift--;
						}
					}
					jStart = 0;
					jEnd = currentGhostj/2 + shift + otherSideShiftj;
				} else {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (1, 0)) {
						while(j - ((currentGhostj) - currentGhostj/2) + shift < 3) {
							shift++;
						}
					}
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (1, 1)) {
						while(j + currentGhostj/2 + shift >= jlast - 3) {
							shift--;
						}
					}
					jStart = (currentGhostj - currentGhostj/2) - shift;
					jEnd = currentGhostj/2 + shift;
				}
			}
		} else {
			jStart = 0;
			jEnd = 0;
		}
	} else {
		jStart = 0;
		jEnd = 0;
	}
	if ((k + 1 < klast && vector(FOV, i, j, k + 1) == 0) ||  (k - 1 >= 0 && vector(FOV, i, j, k - 1) == 0)) {
		if (k + 1 < klast && vector(FOV, i, j, k + 1) > 0) {
			bool stop_counting = false;
			for(int itk = k + 1; itk <= k + d_ghost_width - 1 && currentGhostk > 0; itk++) {
				if (itk < klast  && vector(FOV, i, j, itk) > 0 && stop_counting == false) {
					currentGhostk--;
				} else {
					//First not interior point found
					if (itk < klast  && vector(FOV, i, j, itk) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (itk >= klast - 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (2, 1)) {
						stop_counting = true;
						//Calculate the number of cells the limit cannot grow
						if (itk + currentGhostk/2 >= klast - 3) {
							otherSideShiftk = (itk  + currentGhostk/2) - (klast - 3);
						}
					}
				}
			}
		}
		if (k - 1 >= 0 && vector(FOV, i, j, k - 1) > 0) {
			bool stop_counting = false;
			for(int itk = k - 1; itk >= k - d_ghost_width + 1 && currentGhostk > 0; itk--) {
				if (itk >= 0  && vector(FOV, i, j, itk) > 0) {
					currentGhostk--;
				} else {
					//First not interior point found
					if (itk >= 0 && vector(FOV, i, j, itk) == 0) {
						stop_counting = true;
					}
					//Physical boundary reach
					if (itk < 3 && patch->getPatchGeometry()->getTouchesRegularBoundary (2, 0)) {
						stop_counting = true;
						//calculate the number of cells the limit cannot grow
						if (itk  -  ((currentGhostk) - currentGhostk/2) < 3) {
							otherSideShiftk = 3 - (itk  - ((currentGhostk) - currentGhostk/2));
						}
					}
				}
			}
		}
		if (currentGhostk > 0) {
			if (k + 1 < klast && vector(FOV, i, j, k + 1) > 0) {
				shift = 0;
				if(patch->getPatchGeometry()->getTouchesRegularBoundary (2, 0)) {
					while(k - ((currentGhostk) - currentGhostk/2) + shift < 3) {
						shift++;
					}
				}
				kStart = (currentGhostk - currentGhostk/2) - shift - otherSideShiftk;
				kEnd = 0;
			} else {
				if (k - 1 >= 0 && vector(FOV, i, j, k - 1) > 0) {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (2, 1)) {
						while(k + currentGhostk/2 + shift >= klast - 3) {
							shift--;
						}
					}
					kStart = 0;
					kEnd = currentGhostk/2 + shift + otherSideShiftk;
				} else {
					shift = 0;
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (2, 0)) {
						while(k - ((currentGhostk) - currentGhostk/2) + shift < 3) {
							shift++;
						}
					}
					if(patch->getPatchGeometry()->getTouchesRegularBoundary (2, 1)) {
						while(k + currentGhostk/2 + shift >= klast - 3) {
							shift--;
						}
					}
					kStart = (currentGhostk - currentGhostk/2) - shift;
					kEnd = currentGhostk/2 + shift;
				}
			}
		} else {
			kStart = 0;
			kEnd = 0;
		}
	} else {
		kStart = 0;
		kEnd = 0;
	}
	//Assigning stencil limits
	for(int iti = i - iStart; iti <= i + iEnd; iti++) {
		for(int itj = j - jStart; itj <= j + jEnd; itj++) {
			for(int itk = k - kStart; itk <= k + kEnd; itk++) {
				if(iti >= 0 && iti < ilast && itj >= 0 && itj < jlast && itk >= 0 && itk < klast && vector(FOV, iti, itj, itk) == 0) {
					if (i - iti < 0) {
						vector(interior_i, iti, itj, itk) = - (iStart + 1) - (i - iti);
					} else {
						vector(interior_i, iti, itj, itk) = (iStart + 1) - (i - iti);
					}
					if (j - itj < 0) {
						vector(interior_j, iti, itj, itk) = - (jStart + 1) - (j - itj);
					} else {
						vector(interior_j, iti, itj, itk) = (jStart + 1) - (j - itj);
					}
					if (k - itk < 0) {
						vector(interior_k, iti, itj, itk) = - (kStart + 1) - (k - itk);
					} else {
						vector(interior_k, iti, itj, itk) = (kStart + 1) - (k - itk);
					}
				}
			}
		}
	}
}

/*
 * Checks if the point has a stencil width
 */
void Problem::checkStencil(std::shared_ptr< hier::Patch > patch, int i, int j, int k, int v) const {
	double* FOV = ((pdat::NodeData<double> *) patch->getPatchData(v).get())->getPointer();
	double* interior_i = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_i_id).get())->getPointer();
	double* interior_j = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_j_id).get())->getPointer();
	double* interior_k = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_k_id).get())->getPointer();
	//Get the dimensions of the patch
	const hier::Index boxfirst = patch->getBox().lower();
	const hier::Index boxlast  = patch->getBox().upper();
	//Auxiliary definitions
	int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
	int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
	int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

	int i_i = vector(interior_i, i, j, k);
	int iStart = MAX(0, i_i) - 1;
	int iEnd = MAX(0, -i_i) - 1;
	int i_j = vector(interior_j, i, j, k);
	int jStart = MAX(0, i_j) - 1;
	int jEnd = MAX(0, -i_j) - 1;
	int i_k = vector(interior_k, i, j, k);
	int kStart = MAX(0, i_k) - 1;
	int kEnd = MAX(0, -i_k) - 1;

	for(int iti = i - iStart; iti <= i + iEnd; iti++) {
		for(int itj = j - jStart; itj <= j + jEnd; itj++) {
			for(int itk = k - kStart; itk <= k + kEnd; itk++) {
				if(iti >= 0 && iti < ilast && itj >= 0 && itj < jlast && itk >= 0 && itk < klast && vector(FOV, iti, itj, itk) == 0) {
					vector(interior_i, iti, itj, itk) = i_i  - (i - iti);
					vector(interior_j, iti, itj, itk) = i_j  - (j - itj);
					vector(interior_k, iti, itj, itk) = i_k  - (k - itk);
				}
			}
		}
	}
}


// Point class for the floodfill algorithm
class Point {
private:
public:
	int i, j, k;
};

void Problem::floodfill(std::shared_ptr< hier::Patch > patch, int i, int j, int k, int pred, int seg) const {

	double* FOV;
	switch(seg) {
		case 1:
			FOV = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		break;
	}
	int* nonSync = ((pdat::NodeData<int> *) patch->getPatchData(d_nonSync_regridding_tag_id).get())->getPointer();
	double* interior = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
	//Get the dimensions of the patch
	const hier::Index boxfirst = patch->getBox().lower();
	const hier::Index boxlast  = patch->getBox().upper();
	//Auxiliary definitions
	int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
	int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
	int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

	stack<Point> mystack;

	Point p;
	p.i = i;
	p.j = j;
	p.k = k;

	mystack.push(p);
	while(mystack.size() > 0) {
		p = mystack.top();
		mystack.pop();
		if (vector(nonSync, p.i, p.j, p.k) == 0) {
			vector(nonSync, p.i, p.j, p.k) = pred;
			vector(interior, p.i, p.j, p.k) = pred;
			if (pred == 2) {
				vector(FOV, p.i, p.j, p.k) = 100;
			}
			if (p.i - 1 >= 0 && vector(nonSync, p.i - 1, p.j, p.k) == 0) {
				Point np;
				np.i = p.i-1;
				np.j = p.j;
				np.k = p.k;
				mystack.push(np);
			}
			if (p.i + 1 < ilast && vector(nonSync, p.i + 1, p.j, p.k) == 0) {
				Point np;
				np.i = p.i+1;
				np.j = p.j;
				np.k = p.k;
				mystack.push(np);
			}
			if (p.j - 1 >= 0 && vector(nonSync, p.i, p.j - 1, p.k) == 0) {
				Point np;
				np.i = p.i;
				np.j = p.j-1;
				np.k = p.k;
				mystack.push(np);
			}
			if (p.j + 1 < jlast && vector(nonSync, p.i, p.j + 1, p.k) == 0) {
				Point np;
				np.i = p.i;
				np.j = p.j+1;
				np.k = p.k;
				mystack.push(np);
			}
			if (p.k - 1 >= 0 && vector(nonSync, p.i, p.j, p.k - 1) == 0) {
				Point np;
				np.i = p.i;
				np.j = p.j;
				np.k = p.k-1;
				mystack.push(np);
			}
			if (p.k + 1 < klast && vector(nonSync, p.i, p.j, p.k + 1) == 0) {
				Point np;
				np.i = p.i;
				np.j = p.j;
				np.k = p.k+1;
				mystack.push(np);
			}
		}
	}
}


/*
 * FOV correction for AMR
 */
void Problem::correctFOVS(const std::shared_ptr< hier::PatchLevel >& level) {
	int i, j, k;
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr< hier::Patch >& patch = *p_it;

		//Get the dimensions of the patch
		hier::Box pbox = patch->getBox();
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast  = patch->getBox().upper();

		//Get delta spaces into an array. dx, dy, dz.
		const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();

		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

		for (i = 0; i < ilast; i++) {
			for (j = 0; j < jlast; j++) {
				for (k = 0; k < klast; k++) {
					if (vector(FOV_xLower, i, j, k) > 0) {
						vector(FOV_xLower, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
					if (vector(FOV_xUpper, i, j, k) > 0) {
						vector(FOV_xUpper, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
					if (vector(FOV_yLower, i, j, k) > 0) {
						vector(FOV_yLower, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
					if (vector(FOV_yUpper, i, j, k) > 0) {
						vector(FOV_yUpper, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
					if (vector(FOV_zLower, i, j, k) > 0) {
						vector(FOV_zLower, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
					if (vector(FOV_zUpper, i, j, k) > 0) {
						vector(FOV_zUpper, i, j, k) = 100;
						vector(FOV_1, i, j, k) = 0;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
					}
					if (vector(FOV_1, i, j, k) > 0) {
						vector(FOV_1, i, j, k) = 100;
						vector(FOV_xLower, i, j, k) = 0;
						vector(FOV_xUpper, i, j, k) = 0;
						vector(FOV_yLower, i, j, k) = 0;
						vector(FOV_yUpper, i, j, k) = 0;
						vector(FOV_zLower, i, j, k) = 0;
						vector(FOV_zUpper, i, j, k) = 0;
					}
				}
			}
		}
	}
}




void Problem::interphaseMapping(const double time ,const bool initial_time,const int ln, const std::shared_ptr< hier::PatchLevel >& level, const int remesh) {
	const tbox::SAMRAI_MPI& mpi(tbox::SAMRAI_MPI::getSAMRAIWorld());
	if (remesh == 1) {
		//Update extrapolation variables
		//Calculation of hard region distance variables
		for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
			const std::shared_ptr< hier::Patch >& patch = *p_it;

			//Get the dimensions of the patch
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast  = patch->getBox().upper();
			const hier::IntVector ratio = level->getRatioToCoarserLevel();
			double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
			double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
			double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
			double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
			double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
			double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
			double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
			double* stalled_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_stalled_1_id).get())->getPointer();
			//Hard region field distance variables
			double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();

			int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
			int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
			int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
			for (int i = 0; i < ilast; i++) {
				for (int j = 0; j < jlast; j++) {
					for (int k = 0; k < klast; k++) {
						vector(stalled_1, i, j, k) = checkStalled(patch, i, j, k, d_FOV_1_id);
						vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = 0;
						vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = 0;
						vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = 0;
					}
				}
			}
		}
		d_mapping_fill->createSchedule(level, level)->fillData(time, true);
		for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
			const std::shared_ptr< hier::Patch >& patch = *p_it;

			//Get the dimensions of the patch
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast  = patch->getBox().upper();
			const hier::IntVector ratio = level->getRatioToCoarserLevel();
			double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
			double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
			double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
			double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
			double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
			double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
			double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
			double* stalled_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_stalled_1_id).get())->getPointer();
			//Hard region field distance variables
			double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
			double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();

			int reGrid_i;
			if (ratio(0) == 0) reGrid_i = 1;
			else           reGrid_i = ratio(0);
			int reGrid_j;
			if (ratio(1) == 0) reGrid_j = 1;
			else           reGrid_j = ratio(1);
			int reGrid_k;
			if (ratio(2) == 0) reGrid_k = 1;
			else           reGrid_k = ratio(2);

			int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
			int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
			int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
			int dist_i_tmp, dist_i_tmp_p, dist_i_tmp_m, dist_i_tmp_r;
			int dist_j_tmp, dist_j_tmp_p, dist_j_tmp_m, dist_j_tmp_r;
			int dist_k_tmp, dist_k_tmp_p, dist_k_tmp_m, dist_k_tmp_r;
			int dist_r, dist_r_tmp;

			for (int i = 0; i < ilast; i++) {
				for (int j = 0; j < jlast; j++) {
					for (int k = 0; k < klast; k++) {
						if (vector(FOV_zUpper, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
						if (vector(FOV_zLower, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
						if (vector(FOV_yUpper, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
						if (vector(FOV_yLower, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
						if (vector(FOV_xUpper, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
						if (vector(FOV_xLower, i, j, k) > 0) {
							dist_i_tmp = 999;
							dist_i_tmp_p = 999;
							dist_i_tmp_m = 999;
							dist_i_tmp_r = 999;
							dist_j_tmp = 999;
							dist_j_tmp_p = 999;
							dist_j_tmp_m = 999;
							dist_j_tmp_r = 999;
							dist_k_tmp = 999;
							dist_k_tmp_p = 999;
							dist_k_tmp_m = 999;
							dist_k_tmp_r = 999;
							dist_r = 999;
							for (int Dist_i = -3 * reGrid_i; Dist_i <= 3 * reGrid_i; Dist_i++) {
								for (int Dist_j = -3 * reGrid_j; Dist_j <= 3 * reGrid_j; Dist_j++) {
									for (int Dist_k = -3 * reGrid_k; Dist_k <= 3 * reGrid_k; Dist_k++) {
										if (i + Dist_i >= 0 && i + Dist_i < ilast && j + Dist_j >= 0 && j + Dist_j < jlast && k + Dist_k >= 0 && k + Dist_k < klast && (!vector(stalled_1, i + Dist_i, j + Dist_j, k + Dist_k))) {
											if (Dist_i < 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_m)) {
												dist_i_tmp_m = -Dist_i;
											}
											if (Dist_i > 0 && Dist_j == 0 && Dist_k == 0 && fabs(Dist_i) < fabs(dist_i_tmp_p)) {
												dist_i_tmp_p = -Dist_i;
											}
											if (Dist_j < 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_m)) {
												dist_j_tmp_m = -Dist_j;
											}
											if (Dist_j > 0 && Dist_i == 0 && Dist_k == 0 && fabs(Dist_j) < fabs(dist_j_tmp_p)) {
												dist_j_tmp_p = -Dist_j;
											}
											if (Dist_k < 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_m)) {
												dist_k_tmp_m = -Dist_k;
											}
											if (Dist_k > 0 && Dist_i == 0 && Dist_j == 0 && fabs(Dist_k) < fabs(dist_k_tmp_p)) {
												dist_k_tmp_p = -Dist_k;
											}
											dist_r_tmp = Dist_i * Dist_i + Dist_j * Dist_j + Dist_k * Dist_k;
											if (dist_r_tmp < dist_r) {
												dist_r = dist_r_tmp;
												dist_i_tmp_r = -Dist_i;
												dist_j_tmp_r = -Dist_j;
												dist_k_tmp_r = -Dist_k;
											}
										}
									}
								}
							}
							if (fabs(dist_i_tmp_m) == fabs(dist_i_tmp_p) && dist_i_tmp_m < 999) {
								dist_i_tmp = 0;
								bool enough = true;
								for (int Dist_i = 0; Dist_i <= 2 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_p + Dist_i < ilast && (!vector(stalled_1, i - dist_i_tmp_p + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_p;
								}
								enough = true;
								for (int Dist_i = -2; Dist_i <= 0 && enough; Dist_i++) {
									if (!(i - dist_i_tmp_m + Dist_i >= 0 && (!vector(stalled_1, i - dist_i_tmp_m + Dist_i, j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_i_tmp = dist_i_tmp_m;
								}
							} else if (fabs(dist_i_tmp_m) < fabs(dist_i_tmp_p)) {
								dist_i_tmp = dist_i_tmp_m;
							} else {
								dist_i_tmp = dist_i_tmp_p;
							}
							if (fabs(dist_j_tmp_m) == fabs(dist_j_tmp_p) && dist_j_tmp_m < 999) {
								dist_j_tmp = 0;
								bool enough = true;
								for (int Dist_j = 0; Dist_j <= 2 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_p + Dist_j < jlast && (!vector(stalled_1, i, j - dist_j_tmp_p + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_p;
								}
								enough = true;
								for (int Dist_j = -2; Dist_j <= 0 && enough; Dist_j++) {
									if (!(j - dist_j_tmp_m + Dist_j >= 0 && (!vector(stalled_1, i, j - dist_j_tmp_m + Dist_j, k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_j_tmp = dist_j_tmp_m;
								}
							} else if (fabs(dist_j_tmp_m) < fabs(dist_j_tmp_p)) {
								dist_j_tmp = dist_j_tmp_m;
							} else {
								dist_j_tmp = dist_j_tmp_p;
							}
							if (fabs(dist_k_tmp_m) == fabs(dist_k_tmp_p) && dist_k_tmp_m < 999) {
								dist_k_tmp = 0;
								bool enough = true;
								for (int Dist_k = 0; Dist_k <= 2 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_p + Dist_k < klast && (!vector(stalled_1, i, j, k - dist_k_tmp_p + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_p;
								}
								enough = true;
								for (int Dist_k = -2; Dist_k <= 0 && enough; Dist_k++) {
									if (!(k - dist_k_tmp_m + Dist_k >= 0 && (!vector(stalled_1, i, j, k - dist_k_tmp_m + Dist_k)))) {
										enough = false;
									}
								}
								if (enough) {
									dist_k_tmp = dist_k_tmp_m;
								}
							} else if (fabs(dist_k_tmp_m) < fabs(dist_k_tmp_p)) {
								dist_k_tmp = dist_k_tmp_m;
							} else {
								dist_k_tmp = dist_k_tmp_p;
							}
							if (dist_i_tmp == 999 && dist_j_tmp == 999 && dist_k_tmp == 999) {
								dist_i_tmp = dist_i_tmp_r;
								dist_j_tmp = dist_j_tmp_r;
								dist_k_tmp = dist_k_tmp_r;
							}
							if (dist_i_tmp != 999 && ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_i_tmp) < fabs(vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_i_tmp;
							}
							if (dist_j_tmp != 999 && ((vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_j_tmp) < fabs(vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_j_tmp;
							}
							if (dist_k_tmp != 999 && ((vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) == 0) || (fabs(dist_k_tmp) < fabs(vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k))))) {
								vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) = dist_k_tmp;
							}
						}
					}
				}
			}
		}
		d_mapping_fill->createSchedule(level, level)->fillData(initial_time, true);
	}
}


/*
 * Checks if the point has to be stalled
 */
bool Problem::checkStalled(std::shared_ptr< hier::Patch > patch, int i, int j, int k, int v) const {
	double* FOV = ((pdat::NodeData<double> *) patch->getPatchData(v).get())->getPointer();
	double* interior = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
	//Get the dimensions of the patch
	const hier::Index boxfirst = patch->getBox().lower();
	const hier::Index boxlast  = patch->getBox().upper();
	//Auxiliary definitions
	int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
	int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
	int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;

	int stencilAcc, stencilAccMax_i, stencilAccMax_j, stencilAccMax_k;
	bool notEnoughStencil = false;
	int FOV_threshold = 0;
	if (vector(FOV, i, j, k) <= FOV_threshold) {
		notEnoughStencil = true;
	} else {
		stencilAcc = 0;
		stencilAccMax_i = 0;
		for (int it1 = MAX(i-d_regionMinThickness, 0); it1 <= MIN(i+d_regionMinThickness, ilast - 1); it1++) {
			if (vector(FOV, it1, j, k) > FOV_threshold) {
				stencilAcc++;
			} else {
				stencilAccMax_i = MAX(stencilAccMax_i, stencilAcc);
				stencilAcc = 0;
			}
		}
		stencilAccMax_i = MAX(stencilAccMax_i, stencilAcc);
		stencilAcc = 0;
		stencilAccMax_j = 0;
		for (int jt1 = MAX(j-d_regionMinThickness, 0); jt1 <= MIN(j+d_regionMinThickness, jlast - 1); jt1++) {
			if (vector(FOV, i, jt1, k) > FOV_threshold) {
				stencilAcc++;
			} else {
				stencilAccMax_j = MAX(stencilAccMax_j, stencilAcc);
				stencilAcc = 0;
			}
		}
		stencilAccMax_j = MAX(stencilAccMax_j, stencilAcc);
		stencilAcc = 0;
		stencilAccMax_k = 0;
		for (int kt1 = MAX(k-d_regionMinThickness, 0); kt1 <= MIN(k+d_regionMinThickness, klast - 1); kt1++) {
			if (vector(FOV, i, j, kt1) > FOV_threshold) {
				stencilAcc++;
			} else {
				stencilAccMax_k = MAX(stencilAccMax_k, stencilAcc);
				stencilAcc = 0;
			}
		}
		stencilAccMax_k = MAX(stencilAccMax_k, stencilAcc);
		if ((stencilAccMax_i < d_regionMinThickness) || (stencilAccMax_j < d_regionMinThickness) || (stencilAccMax_k < d_regionMinThickness)) {
			notEnoughStencil = true;
		}
	}
	return notEnoughStencil;
}






/*
 * Initialize data on a patch. This initialization is done only at the begining of the simulation.
 */
void Problem::initializeDataOnPatch(hier::Patch& patch, 
                                    const double time,
                                    const bool initial_time)
{
	(void) time;
   	if (initial_time) {
		// Initial conditions		
		//Get fields, auxiliary fields and local variables that are going to be used.
		double* Phi = ((pdat::NodeData<double> *) patch.getPatchData(d_Phi_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_Phi_id).get())->fillAll(0);
		double* gammac_xx = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xx_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xx_id).get())->fillAll(0);
		double* gammac_xy = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xy_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xy_id).get())->fillAll(0);
		double* gammac_xz = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_xz_id).get())->fillAll(0);
		double* gammac_yx = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yx_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yx_id).get())->fillAll(0);
		double* gammac_yy = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yy_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yy_id).get())->fillAll(0);
		double* gammac_yz = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_yz_id).get())->fillAll(0);
		double* gammac_zx = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zx_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zx_id).get())->fillAll(0);
		double* gammac_zy = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zy_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zy_id).get())->fillAll(0);
		double* gammac_zz = ((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_gammac_zz_id).get())->fillAll(0);
		double* A_xx = ((pdat::NodeData<double> *) patch.getPatchData(d_A_xx_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_xx_id).get())->fillAll(0);
		double* A_xy = ((pdat::NodeData<double> *) patch.getPatchData(d_A_xy_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_xy_id).get())->fillAll(0);
		double* A_xz = ((pdat::NodeData<double> *) patch.getPatchData(d_A_xz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_xz_id).get())->fillAll(0);
		double* A_yy = ((pdat::NodeData<double> *) patch.getPatchData(d_A_yy_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_yy_id).get())->fillAll(0);
		double* A_yz = ((pdat::NodeData<double> *) patch.getPatchData(d_A_yz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_yz_id).get())->fillAll(0);
		double* A_zz = ((pdat::NodeData<double> *) patch.getPatchData(d_A_zz_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_A_zz_id).get())->fillAll(0);
		double* trK = ((pdat::NodeData<double> *) patch.getPatchData(d_trK_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_trK_id).get())->fillAll(0);
		double* alpha = ((pdat::NodeData<double> *) patch.getPatchData(d_alpha_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_alpha_id).get())->fillAll(0);
		double* beta_x = ((pdat::NodeData<double> *) patch.getPatchData(d_beta_x_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_beta_x_id).get())->fillAll(0);
		double* beta_y = ((pdat::NodeData<double> *) patch.getPatchData(d_beta_y_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_beta_y_id).get())->fillAll(0);
		double* beta_z = ((pdat::NodeData<double> *) patch.getPatchData(d_beta_z_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_beta_z_id).get())->fillAll(0);
		double* Gam_x = ((pdat::NodeData<double> *) patch.getPatchData(d_Gam_x_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_Gam_x_id).get())->fillAll(0);
		double* Gam_y = ((pdat::NodeData<double> *) patch.getPatchData(d_Gam_y_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_Gam_y_id).get())->fillAll(0);
		double* Gam_z = ((pdat::NodeData<double> *) patch.getPatchData(d_Gam_z_id).get())->getPointer();
		((pdat::NodeData<double> *) patch.getPatchData(d_Gam_z_id).get())->fillAll(0);
		double qfunction;
		
		//Get the dimensions of the patch
		hier::Box pbox = patch.getBox();
		double* FOV_1 = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch.getPatchData(d_FOV_zUpper_id).get())->getPointer();
		const hier::Index boxfirst = patch.getBox().lower();
		const hier::Index boxlast  = patch.getBox().upper();
		
		//Get delta spaces into an array. dx, dy, dz.
		const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch.getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
		
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		SAMRAI_External_Data::external_loadData(1, Phi, dx, d_grid_geometry->getXLower()[0], d_grid_geometry->getXLower()[1], d_grid_geometry->getXLower()[2], boxfirst[0], boxfirst[1], boxfirst[2], d_ghost_width, ilast, jlast, klast);
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if (vector(FOV_1, i, j, k) > 0) {
						qfunction = a0 * ((xcoord(i) + xc) * (xcoord(i) + xc) + (ycoord(j) + yc) * (ycoord(j) + yc)) * exp((-((xcoord(i) + xc) * (xcoord(i) + xc) + (ycoord(j) + yc) * (ycoord(j) + yc)) / (lambda_r * lambda_r)) - (zcoord(k) * zcoord(k)) / (lambda_z * lambda_z));
						vector(gammac_xx, i, j, k) = 1.0 / ((xcoord(i) + xc) * (xcoord(i) + xc) + (ycoord(j) + yc) * (ycoord(j) + yc)) * (exp(2.0 * qfunction) * ((xcoord(i) + xc) * (xcoord(i) + xc)) + (ycoord(j) + yc) * (ycoord(j) + yc));
						vector(gammac_xy, i, j, k) = xcoord(i) * ycoord(j) / (xcoord(i) * xcoord(i) + ycoord(j) * ycoord(j)) * (exp(2.0 * qfunction) - 1.0);
						vector(gammac_xz, i, j, k) = 0.0;
						vector(gammac_yx, i, j, k) = vector(gammac_xy, i, j, k);
						vector(gammac_yy, i, j, k) = 1.0 / ((xcoord(i) + xc) * (xcoord(i) + xc) + (ycoord(j) + yc) * (ycoord(j) + yc)) * (exp(2.0 * qfunction) * ((ycoord(j) + yc) * (ycoord(j) + yc)) + (xcoord(i) + xc) * (xcoord(i) + xc));
						vector(gammac_yz, i, j, k) = 0.0;
						vector(gammac_zx, i, j, k) = vector(gammac_xz, i, j, k);
						vector(gammac_zy, i, j, k) = vector(gammac_yz, i, j, k);
						vector(gammac_zz, i, j, k) = exp(2.0 * qfunction);
						vector(A_xx, i, j, k) = 0.0;
						vector(A_xy, i, j, k) = 0.0;
						vector(A_xz, i, j, k) = 0.0;
						vector(A_yy, i, j, k) = 0.0;
						vector(A_yz, i, j, k) = 0.0;
						vector(A_zz, i, j, k) = 0.0;
						vector(trK, i, j, k) = 0.0;
						vector(alpha, i, j, k) = 1.0;
						vector(beta_x, i, j, k) = 0.0;
						vector(beta_y, i, j, k) = 0.0;
						vector(beta_z, i, j, k) = 0.0;
						vector(Gam_x, i, j, k) = 0.0;
						vector(Gam_y, i, j, k) = 0.0;
						vector(Gam_z, i, j, k) = 0.0;
						if (lessEq((xcoord(i) * xcoord(i) + ycoord(j) * ycoord(j)), (rc * rc))) {
							vector(gammac_xx, i, j, k) = 1.0;
							vector(gammac_yy, i, j, k) = 1.0;
							vector(gammac_xy, i, j, k) = 0.0;
							vector(gammac_xz, i, j, k) = 0.0;
							vector(gammac_yx, i, j, k) = vector(gammac_xy, i, j, k);
							vector(gammac_yz, i, j, k) = 0.0;
							vector(gammac_zx, i, j, k) = vector(gammac_xz, i, j, k);
							vector(gammac_zy, i, j, k) = vector(gammac_yz, i, j, k);
							vector(gammac_zz, i, j, k) = 1.0;
							vector(A_xx, i, j, k) = 0.0;
							vector(A_xy, i, j, k) = 0.0;
							vector(A_xz, i, j, k) = 0.0;
							vector(A_yy, i, j, k) = 0.0;
							vector(A_yz, i, j, k) = 0.0;
							vector(A_zz, i, j, k) = 0.0;
							vector(trK, i, j, k) = 0.0;
							vector(alpha, i, j, k) = 1.0;
							vector(beta_x, i, j, k) = 0.0;
							vector(beta_y, i, j, k) = 0.0;
							vector(beta_z, i, j, k) = 0.0;
							vector(Gam_x, i, j, k) = 0.0;
							vector(Gam_y, i, j, k) = 0.0;
							vector(Gam_z, i, j, k) = 0.0;
						}
					}
		
				}
			}
		}
		

   	}
}



/*
 * Gets the coarser patch that contains the box
 */
const std::shared_ptr<hier::Patch >& Problem::getCoarserPatch(
	const std::shared_ptr< hier::PatchLevel >& level,
	const hier::Box interior, 
	const hier::IntVector ratio)
{
	const hier::Box& coarsenBox = hier::Box::coarsen(interior, ratio);
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr< hier::Patch >& patch = *p_it;
		const hier::Box& interior_C = patch->getBox();
		if (interior_C.intersects(coarsenBox)) {
			return patch;		
		}
	}
    return NULL;
}

/*
 * Reset the hierarchy-dependent internal information.
 */
void Problem::resetHierarchyConfiguration (
   const std::shared_ptr<hier::PatchHierarchy >& new_hierarchy ,
   int coarsest_level ,
   int finest_level )
{
	int finest_hiera_level = new_hierarchy->getFinestLevelNumber();

   	//  If we have added or removed a level, resize the schedule arrays

	d_bdry_sched_advance1.resize(finest_hiera_level+1);
	d_bdry_sched_advance6.resize(finest_hiera_level+1);
	d_bdry_sched_advance11.resize(finest_hiera_level+1);
	d_bdry_sched_advance16.resize(finest_hiera_level+1);
	d_bdry_sched_analysis1.resize(finest_hiera_level+1);
	d_coarsen_schedule.resize(finest_hiera_level+1);
	d_bdry_sched_postCoarsen.resize(finest_hiera_level+1);
	//  Build coarsen and refine communication schedules.
	for (int ln = coarsest_level; ln <= finest_hiera_level; ln++) {
		std::shared_ptr< hier::PatchLevel > level(new_hierarchy->getPatchLevel(ln));
		d_bdry_sched_advance1[ln] = d_bdry_fill_advance1->createSchedule(level,ln-1,new_hierarchy,this);
		d_bdry_sched_advance6[ln] = d_bdry_fill_advance6->createSchedule(level,ln-1,new_hierarchy,this);
		d_bdry_sched_advance11[ln] = d_bdry_fill_advance11->createSchedule(level,ln-1,new_hierarchy,this);
		d_bdry_sched_advance16[ln] = d_bdry_fill_advance16->createSchedule(level,ln-1,new_hierarchy,this);
		d_bdry_sched_analysis1[ln] = d_bdry_fill_analysis1->createSchedule(level,this);
		d_bdry_sched_postCoarsen[ln] = d_bdry_post_coarsen->createSchedule(level);
		// coarsen schedule only for levels > 0
		if (ln > 0) {
			std::shared_ptr< hier::PatchLevel > coarser_level(new_hierarchy->getPatchLevel(ln-1));
			d_coarsen_schedule[ln] = d_coarsen_algorithm->createSchedule(coarser_level, level, NULL);
		}
	}

}



/*
 * This method sets the physical boundary conditions.
 */
void Problem::setPhysicalBoundaryConditions(
   hier::Patch& patch,
   const double fill_time,
   const hier::IntVector& ghost_width_to_fill)
{
	//Boundary must not be implemented in this method
}

/*
 * Set up external plotter to plot internal data from this class.
 * Register variables appropriate for plotting.
 */
int Problem::setupPlotterMesh(appu::VisItDataWriter &plotter) const {
	if (!d_patch_hierarchy) {
		TBOX_ERROR(d_object_name << ": No hierarchy inn"
			<< " Problem::setupPlottern"
			<< "The hierarchy must be set before callingn"
			<< "this function.n");
	}
	plotter.registerPlotQuantity("FOV_1","SCALAR",d_FOV_1_id);
	hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
	for (set<string>::const_iterator it = d_full_mesh_writer_variables.begin() ; it != d_full_mesh_writer_variables.end(); ++it) {
		string var_to_register = *it;
		if (!(vdb->checkVariableExists(var_to_register))) {
			TBOX_ERROR(d_object_name << ": Variable selected for 3D write not found:" <<  var_to_register);
		}
		int var_id = vdb->getVariable(var_to_register)->getInstanceIdentifier();
		plotter.registerPlotQuantity(var_to_register,"SCALAR",var_id);
	}
	return 0;
}
/*
 * Set up external plotter to plot sliced data from this class.
 * Register variables appropriate for plotting.
 */
int Problem::setupSlicePlotter(vector<std::shared_ptr<SlicerDataWriter> > &plotters) const {
	if (!d_patch_hierarchy) {
	TBOX_ERROR(d_object_name << ": No hierarchy in\n"
		<< " Problem::setupSlicePlotter\n"
		<< "The hierarchy must be set before calling\n"
		<< "this function.\n");
	}
	int i = 0;
	for (vector<std::shared_ptr<SlicerDataWriter> >::const_iterator it = plotters.begin(); it != plotters.end(); ++it) {
		std::shared_ptr<SlicerDataWriter> plotter = *it;
		plotter->registerPlotQuantity("FOV_1","SCALAR",d_FOV_1_id);
		hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
		set<string> variables = d_sliceVariables[i];
		for (set<string>::const_iterator it2 = variables.begin() ; it2 != variables.end(); ++it2) {
			string var_to_register = *it2;
			if (!(vdb->checkVariableExists(var_to_register))) {
				TBOX_ERROR(d_object_name << ": Variable selected for Slice not found:" <<  var_to_register);
			}
			int var_id = vdb->getVariable(var_to_register)->getInstanceIdentifier();
			plotter->registerPlotQuantity(var_to_register,"SCALAR",var_id);
		}
		i++;
	}

	return 0;
}

/*
 * Set up external plotter to plot spherical data from this class.
 * Register variables appropriate for plotting.
 */
int Problem::setupSpherePlotter(vector<std::shared_ptr<SphereDataWriter> > &plotters) const {
	if (!d_patch_hierarchy) {
	TBOX_ERROR(d_object_name << ": No hierarchy in\n"
		<< " Problem::setupSpherePlotter\n"
		<< "The hierarchy must be set before calling\n"
		<< "this function.\n");
	}
	int i = 0;
	for (vector<std::shared_ptr<SphereDataWriter> >::const_iterator it = plotters.begin(); it != plotters.end(); ++it) {
		std::shared_ptr<SphereDataWriter> plotter = *it;
		plotter->registerPlotQuantity("FOV_1","SCALAR",d_FOV_1_id);
		hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
		set<string> variables = d_sphereVariables[i];
		for (set<string>::const_iterator it2 = variables.begin() ; it2 != variables.end(); ++it2) {
			string var_to_register = *it2;
			if (!(vdb->checkVariableExists(var_to_register))) {
				TBOX_ERROR(d_object_name << ": Variable selected for Sphere not found:" <<  var_to_register);
			}
			int var_id = vdb->getVariable(var_to_register)->getInstanceIdentifier();
			plotter->registerPlotQuantity(var_to_register,"SCALAR",var_id);
		}
		i++;
	}

	return 0;
}
/*
 * Set up external plotter to plot integration data from this class.
 * Register variables appropriate for plotting.
 */
int Problem::setupIntegralPlotter(vector<std::shared_ptr<IntegrateDataWriter> > &plotters) const {
	if (!d_patch_hierarchy) {
		TBOX_ERROR(d_object_name << ": No hierarchy inn"
		<< " Problem::setupIntegralPlottern"
		<< "The hierarchy must be set before callingn"
		<< "this function.n");
	}
	int i = 0;
	for (vector<std::shared_ptr<IntegrateDataWriter> >::const_iterator it = plotters.begin(); it != plotters.end(); ++it) {
		std::shared_ptr<IntegrateDataWriter> plotter = *it;
		hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
		set<string> variables = d_integralVariables[i];
		for (set<string>::const_iterator it2 = variables.begin() ; it2 != variables.end(); ++it2) {
			string var_to_register = *it2;
			if (!(vdb->checkVariableExists(var_to_register))) {
				TBOX_ERROR(d_object_name << ": Variable selected for Integration not found:" <<  var_to_register);
			}
			int var_id = vdb->getVariable(var_to_register)->getInstanceIdentifier();
			plotter->registerPlotQuantity(var_to_register,"SCALAR",var_id);
		}
		i++;
	}
	return 0;
}
/*
 * Set up external plotter to plot point data from this class.
 * Register variables appropriate for plotting.
 */
int Problem::setupPointPlotter(vector<std::shared_ptr<PointDataWriter> > &plotters) const {
	int i = 0;
	for (vector<std::shared_ptr<PointDataWriter> >::const_iterator it = plotters.begin(); it != plotters.end(); ++it) {
		std::shared_ptr<PointDataWriter> plotter = *it;
		hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
		set<string> variables = d_pointVariables[i];
		for (set<string>::const_iterator it2 = variables.begin() ; it2 != variables.end(); ++it2) {
			string var_to_register = *it2;
			if (!(vdb->checkVariableExists(var_to_register))) {
				TBOX_ERROR(d_object_name << ": Variable selected for Point not found:" <<  var_to_register);
			}
			int var_id = vdb->getVariable(var_to_register)->getInstanceIdentifier();
			plotter->registerPlotQuantity(var_to_register,"SCALAR",var_id);
		}
		i++;
	}
	return 0;
}


/*
 * Perform a single step from the discretization schema algorithm   
 */
double Problem::advanceLevel(
   const std::shared_ptr<hier::PatchLevel>& level,
   const std::shared_ptr<hier::PatchHierarchy>& hierarchy,
   const double current_time,
   const double new_time,
   const bool first_step,
   const bool last_step,
   const bool regrid_advance)
{
	const tbox::SAMRAI_MPI& mpi(tbox::SAMRAI_MPI::getSAMRAIWorld());

	const int ln = level->getLevelNumber();
	const double simPlat_dt = new_time - current_time;
	const double level_ratio = level->getRatioToCoarserLevel().max();
	if (first_step) {
		bo_substep_iteration[ln] = 0;
	}
	else {
		bo_substep_iteration[ln] = bo_substep_iteration[ln] + 1;
	}
	time_interpolate_operator_mesh1->setRatio(level_ratio);
	time_interpolate_operator_mesh1->setStep(0);
	time_interpolate_operator_mesh1->setTimeSubstepNumber(bo_substep_iteration[ln]);

	if (d_refinedTimeStepping && first_step && ln > 0) {
		current_iteration[ln] = (current_iteration[ln - 1] - 1) * hierarchy->getRatioToCoarserLevel(ln).max() + 1;
	} else {
		current_iteration[ln] = current_iteration[ln] + 1;
	}
	int previous_iteration = current_iteration[ln] - 1;
	int outputCycle = current_iteration[ln];
	int maxLevels = hierarchy->getMaxNumberOfLevels();
	if (maxLevels > ln + 1) {
		int currentLevelNumber = ln;
		while (currentLevelNumber < maxLevels - 1) {
			int ratio = hierarchy->getRatioToCoarserLevel(currentLevelNumber + 1).max();
			outputCycle = outputCycle * ratio;
			previous_iteration = previous_iteration * ratio;
			currentLevelNumber++;
		}
	}

	t_step->start();
  	// Shifting time
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch > patch = *p_it;
		std::shared_ptr< pdat::NodeData<double> > A_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > A_xx_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xx_p_id)));
		std::shared_ptr< pdat::NodeData<double> > A_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > A_yy_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_yy_p_id)));
		std::shared_ptr< pdat::NodeData<double> > A_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > A_zz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_zz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > A_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > A_xy_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xy_p_id)));
		std::shared_ptr< pdat::NodeData<double> > A_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > A_yz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_yz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xy_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xy_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_xx_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_xx_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yy_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yy_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yx_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_yx_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_yx_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zy_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zy_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zy_p_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zx_id)));
		std::shared_ptr< pdat::NodeData<double> > gammac_zx_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_gammac_zx_p_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_x_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_x_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_x_p_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_y_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_y_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_y_p_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_z_id)));
		std::shared_ptr< pdat::NodeData<double> > beta_z_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_beta_z_p_id)));
		std::shared_ptr< pdat::NodeData<double> > trK(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_trK_id)));
		std::shared_ptr< pdat::NodeData<double> > trK_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_trK_p_id)));
		std::shared_ptr< pdat::NodeData<double> > Phi(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Phi_id)));
		std::shared_ptr< pdat::NodeData<double> > Phi_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Phi_p_id)));
		std::shared_ptr< pdat::NodeData<double> > alpha(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_alpha_id)));
		std::shared_ptr< pdat::NodeData<double> > alpha_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_alpha_p_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_z_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_z_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_z_p_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_x_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_x_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_x_p_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_y_id)));
		std::shared_ptr< pdat::NodeData<double> > Gam_y_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_Gam_y_p_id)));
		std::shared_ptr< pdat::NodeData<double> > A_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > A_xz_p(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_A_xz_p_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_yx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_yx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_zy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_zy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1gammac_zx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1gammac_zx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1beta_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1beta_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1beta_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1beta_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1beta_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1beta_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1trK(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1trK_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1Phi(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1Phi_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1alpha(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1alpha_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1Gam_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1Gam_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1Gam_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1Gam_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1Gam_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1Gam_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk1A_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk1A_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_yx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_yx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_zy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_zy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2gammac_zx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2gammac_zx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2beta_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2beta_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2beta_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2beta_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2beta_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2beta_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2trK(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2trK_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2Phi(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2Phi_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2alpha(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2alpha_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2Gam_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2Gam_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2Gam_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2Gam_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2Gam_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2Gam_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk2A_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk2A_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_xz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_xy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_xy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_yz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_yz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_xx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_xx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_yy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_yy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_zz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_zz_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_yx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_yx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_zy(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_zy_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3gammac_zx(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3gammac_zx_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3beta_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3beta_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3beta_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3beta_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3beta_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3beta_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3trK(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3trK_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3Phi(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3Phi_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3alpha(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3alpha_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3Gam_z(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3Gam_z_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3Gam_x(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3Gam_x_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3Gam_y(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3Gam_y_id)));
		std::shared_ptr< pdat::NodeData<double> > rk3A_xz(SAMRAI_SHARED_PTR_CAST<pdat::NodeData<double>, hier::PatchData>(patch->getPatchData(d_rk3A_xz_id)));
		A_xz_p->copy(*A_xz);
		Gam_y_p->copy(*Gam_y);
		Gam_x_p->copy(*Gam_x);
		Gam_z_p->copy(*Gam_z);
		alpha_p->copy(*alpha);
		Phi_p->copy(*Phi);
		trK_p->copy(*trK);
		beta_z_p->copy(*beta_z);
		beta_y_p->copy(*beta_y);
		beta_x_p->copy(*beta_x);
		gammac_zx_p->copy(*gammac_zx);
		gammac_zy_p->copy(*gammac_zy);
		gammac_yx_p->copy(*gammac_yx);
		gammac_zz_p->copy(*gammac_zz);
		gammac_yy_p->copy(*gammac_yy);
		gammac_xx_p->copy(*gammac_xx);
		gammac_yz_p->copy(*gammac_yz);
		gammac_xy_p->copy(*gammac_xy);
		gammac_xz_p->copy(*gammac_xz);
		A_yz_p->copy(*A_yz);
		A_xy_p->copy(*A_xy);
		A_zz_p->copy(*A_zz);
		A_yy_p->copy(*A_yy);
		A_xx_p->copy(*A_xx);
		A_xx_p->setTime(current_time);
		A_yy_p->setTime(current_time);
		A_zz_p->setTime(current_time);
		A_xy_p->setTime(current_time);
		A_yz_p->setTime(current_time);
		gammac_xz_p->setTime(current_time);
		gammac_xy_p->setTime(current_time);
		gammac_yz_p->setTime(current_time);
		gammac_xx_p->setTime(current_time);
		gammac_yy_p->setTime(current_time);
		gammac_zz_p->setTime(current_time);
		gammac_yx_p->setTime(current_time);
		gammac_zy_p->setTime(current_time);
		gammac_zx_p->setTime(current_time);
		beta_x_p->setTime(current_time);
		beta_y_p->setTime(current_time);
		beta_z_p->setTime(current_time);
		trK_p->setTime(current_time);
		Phi_p->setTime(current_time);
		alpha_p->setTime(current_time);
		Gam_z_p->setTime(current_time);
		Gam_x_p->setTime(current_time);
		Gam_y_p->setTime(current_time);
		A_xz_p->setTime(current_time);
		rk1A_xx->setTime(current_time + simPlat_dt * 0.5);
		rk1A_yy->setTime(current_time + simPlat_dt * 0.5);
		rk1A_zz->setTime(current_time + simPlat_dt * 0.5);
		rk1A_xy->setTime(current_time + simPlat_dt * 0.5);
		rk1A_yz->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_xz->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_xy->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_yz->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_xx->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_yy->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_zz->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_yx->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_zy->setTime(current_time + simPlat_dt * 0.5);
		rk1gammac_zx->setTime(current_time + simPlat_dt * 0.5);
		rk1beta_x->setTime(current_time + simPlat_dt * 0.5);
		rk1beta_y->setTime(current_time + simPlat_dt * 0.5);
		rk1beta_z->setTime(current_time + simPlat_dt * 0.5);
		rk1trK->setTime(current_time + simPlat_dt * 0.5);
		rk1Phi->setTime(current_time + simPlat_dt * 0.5);
		rk1alpha->setTime(current_time + simPlat_dt * 0.5);
		rk1Gam_z->setTime(current_time + simPlat_dt * 0.5);
		rk1Gam_x->setTime(current_time + simPlat_dt * 0.5);
		rk1Gam_y->setTime(current_time + simPlat_dt * 0.5);
		rk1A_xz->setTime(current_time + simPlat_dt * 0.5);
		rk2A_xx->setTime(current_time + simPlat_dt * 0.5);
		rk2A_yy->setTime(current_time + simPlat_dt * 0.5);
		rk2A_zz->setTime(current_time + simPlat_dt * 0.5);
		rk2A_xy->setTime(current_time + simPlat_dt * 0.5);
		rk2A_yz->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_xz->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_xy->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_yz->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_xx->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_yy->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_zz->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_yx->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_zy->setTime(current_time + simPlat_dt * 0.5);
		rk2gammac_zx->setTime(current_time + simPlat_dt * 0.5);
		rk2beta_x->setTime(current_time + simPlat_dt * 0.5);
		rk2beta_y->setTime(current_time + simPlat_dt * 0.5);
		rk2beta_z->setTime(current_time + simPlat_dt * 0.5);
		rk2trK->setTime(current_time + simPlat_dt * 0.5);
		rk2Phi->setTime(current_time + simPlat_dt * 0.5);
		rk2alpha->setTime(current_time + simPlat_dt * 0.5);
		rk2Gam_z->setTime(current_time + simPlat_dt * 0.5);
		rk2Gam_x->setTime(current_time + simPlat_dt * 0.5);
		rk2Gam_y->setTime(current_time + simPlat_dt * 0.5);
		rk2A_xz->setTime(current_time + simPlat_dt * 0.5);
		rk3A_xx->setTime(current_time + simPlat_dt);
		rk3A_yy->setTime(current_time + simPlat_dt);
		rk3A_zz->setTime(current_time + simPlat_dt);
		rk3A_xy->setTime(current_time + simPlat_dt);
		rk3A_yz->setTime(current_time + simPlat_dt);
		rk3gammac_xz->setTime(current_time + simPlat_dt);
		rk3gammac_xy->setTime(current_time + simPlat_dt);
		rk3gammac_yz->setTime(current_time + simPlat_dt);
		rk3gammac_xx->setTime(current_time + simPlat_dt);
		rk3gammac_yy->setTime(current_time + simPlat_dt);
		rk3gammac_zz->setTime(current_time + simPlat_dt);
		rk3gammac_yx->setTime(current_time + simPlat_dt);
		rk3gammac_zy->setTime(current_time + simPlat_dt);
		rk3gammac_zx->setTime(current_time + simPlat_dt);
		rk3beta_x->setTime(current_time + simPlat_dt);
		rk3beta_y->setTime(current_time + simPlat_dt);
		rk3beta_z->setTime(current_time + simPlat_dt);
		rk3trK->setTime(current_time + simPlat_dt);
		rk3Phi->setTime(current_time + simPlat_dt);
		rk3alpha->setTime(current_time + simPlat_dt);
		rk3Gam_z->setTime(current_time + simPlat_dt);
		rk3Gam_x->setTime(current_time + simPlat_dt);
		rk3Gam_y->setTime(current_time + simPlat_dt);
		rk3A_xz->setTime(current_time + simPlat_dt);
		A_xx->setTime(current_time + simPlat_dt);
		A_yy->setTime(current_time + simPlat_dt);
		A_zz->setTime(current_time + simPlat_dt);
		A_xy->setTime(current_time + simPlat_dt);
		A_yz->setTime(current_time + simPlat_dt);
		gammac_xz->setTime(current_time + simPlat_dt);
		gammac_xy->setTime(current_time + simPlat_dt);
		gammac_yz->setTime(current_time + simPlat_dt);
		gammac_xx->setTime(current_time + simPlat_dt);
		gammac_yy->setTime(current_time + simPlat_dt);
		gammac_zz->setTime(current_time + simPlat_dt);
		gammac_yx->setTime(current_time + simPlat_dt);
		gammac_zy->setTime(current_time + simPlat_dt);
		gammac_zx->setTime(current_time + simPlat_dt);
		beta_x->setTime(current_time + simPlat_dt);
		beta_y->setTime(current_time + simPlat_dt);
		beta_z->setTime(current_time + simPlat_dt);
		trK->setTime(current_time + simPlat_dt);
		Phi->setTime(current_time + simPlat_dt);
		alpha->setTime(current_time + simPlat_dt);
		Gam_z->setTime(current_time + simPlat_dt);
		Gam_x->setTime(current_time + simPlat_dt);
		Gam_y->setTime(current_time + simPlat_dt);
		A_xz->setTime(current_time + simPlat_dt);
	}
  	// Evolution
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		double* beta_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_p_id).get())->getPointer();
		double* beta_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_p_id).get())->getPointer();
		double* beta_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_p_id).get())->getPointer();
		double* gammac_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_p_id).get())->getPointer();
		double* gammac_yx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_p_id).get())->getPointer();
		double* gammac_zx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_p_id).get())->getPointer();
		double* gammac_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_p_id).get())->getPointer();
		double* gammac_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_p_id).get())->getPointer();
		double* gammac_zy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_p_id).get())->getPointer();
		double* gammac_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_p_id).get())->getPointer();
		double* gammac_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_p_id).get())->getPointer();
		double* gammac_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_p_id).get())->getPointer();
		double* alpha_p = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_p_id).get())->getPointer();
		double* Phi_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_p_id).get())->getPointer();
		double* Gam_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_p_id).get())->getPointer();
		double* Gam_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_p_id).get())->getPointer();
		double* Gam_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_p_id).get())->getPointer();
		double* A_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_p_id).get())->getPointer();
		double* A_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_p_id).get())->getPointer();
		double* A_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_p_id).get())->getPointer();
		double* A_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_p_id).get())->getPointer();
		double* A_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_p_id).get())->getPointer();
		double* A_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_p_id).get())->getPointer();
		double* trK_p = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_p_id).get())->getPointer();
		double* rk1gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xx_id).get())->getPointer();
		double* rk1gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xy_id).get())->getPointer();
		double* rk1gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xz_id).get())->getPointer();
		double* rk1gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yy_id).get())->getPointer();
		double* rk1gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yx_id).get())->getPointer();
		double* rk1gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yz_id).get())->getPointer();
		double* rk1gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zz_id).get())->getPointer();
		double* rk1gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zx_id).get())->getPointer();
		double* rk1gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zy_id).get())->getPointer();
		double* rk1A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xx_id).get())->getPointer();
		double* rk1A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xy_id).get())->getPointer();
		double* rk1A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xz_id).get())->getPointer();
		double* rk1A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yy_id).get())->getPointer();
		double* rk1A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yz_id).get())->getPointer();
		double* rk1A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_zz_id).get())->getPointer();
		double* rk1Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Phi_id).get())->getPointer();
		double* rk1trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1trK_id).get())->getPointer();
		double* rk1beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_x_id).get())->getPointer();
		double* rk1beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_y_id).get())->getPointer();
		double* rk1beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_z_id).get())->getPointer();
		double* rk1alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1alpha_id).get())->getPointer();
		double* rk1Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_x_id).get())->getPointer();
		double* rk1Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_y_id).get())->getPointer();
		double* rk1Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_z_id).get())->getPointer();
		double d_div_beta_o0_t0_m0_l0, d_gammac_xy_o2_t0_m0_l0, d_gammac_xz_o2_t0_m0_l0, d_Gam_x_o0_t0_m0_l0, d_Gam_x_o0_t3_m0_l0, d_Gam_x_o0_t6_m0_l0, d_Gam_x_o0_t1_m0_l0, d_Gam_x_o0_t4_m0_l0, d_Gam_x_o0_t7_m0_l0, d_Gam_x_o0_t2_m0_l0, d_Gam_x_o0_t5_m0_l0, d_Gam_x_o0_t8_m0_l0, d_gammac_xx_o2_t1_m0_l0, d_div_beta_o0_t1_m0_l0, d_gammac_xz_o2_t1_m0_l0, d_Gam_y_o0_t0_m0_l0, d_Gam_y_o0_t3_m0_l0, d_Gam_y_o0_t6_m0_l0, d_Gam_x_o0_t10_m0_l0, d_Gam_x_o0_t13_m0_l0, d_Gam_x_o0_t16_m0_l0, d_Gam_y_o0_t2_m0_l0, d_Gam_y_o0_t5_m0_l0, d_Gam_y_o0_t8_m0_l0, d_gammac_xx_o2_t2_m0_l0, d_gammac_xy_o2_t2_m0_l0, d_div_beta_o0_t2_m0_l0, d_Gam_z_o0_t0_m0_l0, d_Gam_z_o0_t3_m0_l0, d_Gam_z_o0_t6_m0_l0, d_Gam_z_o0_t1_m0_l0, d_Gam_z_o0_t4_m0_l0, d_Gam_z_o0_t7_m0_l0, d_Gam_x_o0_t11_m0_l0, d_Gam_x_o0_t14_m0_l0, d_Gam_x_o0_t17_m0_l0, d_C_xxx_o0_t0_m0_l0, d_gammac_xx_o0_t0_m0_l0, d_gammac_xx_o1_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_gammac_xx_o0_t1_m0_l0, d_gammac_xx_o1_t1_m0_l0, d_C_xxx_o0_t8_m0_l0, d_gammac_xx_o0_t2_m0_l0, d_gammac_xx_o1_t2_m0_l0, d_C_xxx_o0_t3_m0_l0, d_gammac_yx_o0_t0_m0_l0, d_gammac_yx_o1_t0_m0_l0, d_C_xxy_o0_t4_m0_l0, d_gammac_yx_o0_t1_m0_l0, d_gammac_yx_o1_t1_m0_l0, d_C_xxz_o0_t4_m0_l0, d_gammac_yx_o0_t2_m0_l0, d_gammac_yx_o1_t2_m0_l0, d_C_xxx_o0_t6_m0_l0, d_gammac_zx_o0_t0_m0_l0, d_gammac_zx_o1_t0_m0_l0, d_C_xxy_o0_t7_m0_l0, d_gammac_zx_o0_t1_m0_l0, d_gammac_zx_o1_t1_m0_l0, d_C_xxz_o0_t7_m0_l0, d_gammac_zx_o0_t2_m0_l0, d_gammac_zx_o1_t2_m0_l0, d_C_xxy_o0_t0_m0_l0, d_gammac_xy_o0_t0_m0_l0, d_gammac_xy_o1_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_gammac_xy_o0_t1_m0_l0, d_gammac_xy_o1_t1_m0_l0, d_C_xxy_o0_t8_m0_l0, d_gammac_xy_o0_t2_m0_l0, d_gammac_xy_o1_t2_m0_l0, d_C_xxy_o0_t3_m0_l0, d_gammac_yy_o0_t0_m0_l0, d_gammac_yy_o1_t0_m0_l0, d_C_xyy_o0_t3_m0_l0, d_gammac_yy_o0_t1_m0_l0, d_gammac_yy_o1_t1_m0_l0, d_C_xyy_o0_t8_m0_l0, d_gammac_yy_o0_t2_m0_l0, d_gammac_yy_o1_t2_m0_l0, d_C_xxy_o0_t6_m0_l0, d_gammac_zy_o0_t0_m0_l0, d_gammac_zy_o1_t0_m0_l0, d_C_xyy_o0_t6_m0_l0, d_gammac_zy_o0_t1_m0_l0, d_gammac_zy_o1_t1_m0_l0, d_C_xyz_o0_t7_m0_l0, d_gammac_zy_o0_t2_m0_l0, d_gammac_zy_o1_t2_m0_l0, d_C_xxz_o0_t0_m0_l0, d_gammac_xz_o0_t0_m0_l0, d_gammac_xz_o1_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_gammac_xz_o0_t1_m0_l0, d_gammac_xz_o1_t1_m0_l0, d_C_xxz_o0_t8_m0_l0, d_gammac_xz_o0_t2_m0_l0, d_gammac_xz_o1_t2_m0_l0, d_C_xxz_o0_t3_m0_l0, d_gammac_yz_o0_t0_m0_l0, d_gammac_yz_o1_t0_m0_l0, d_C_xyz_o0_t3_m0_l0, d_gammac_yz_o0_t1_m0_l0, d_gammac_yz_o1_t1_m0_l0, d_C_xyz_o0_t8_m0_l0, d_gammac_yz_o0_t2_m0_l0, d_gammac_yz_o1_t2_m0_l0, d_C_xxz_o0_t6_m0_l0, d_gammac_zz_o0_t0_m0_l0, d_gammac_zz_o1_t0_m0_l0, d_C_xyz_o0_t6_m0_l0, d_gammac_zz_o0_t1_m0_l0, d_gammac_zz_o1_t1_m0_l0, d_C_xzz_o0_t6_m0_l0, d_gammac_zz_o0_t2_m0_l0, d_gammac_zz_o1_t2_m0_l0, d_dalpha_xx_o0_t1_m0_l0, d_alpha_o0_t0_m0_l0, d_alpha_o1_t0_m0_l0, d_dalpha_xx_o0_t2_m0_l0, d_alpha_o0_t1_m0_l0, d_alpha_o1_t1_m0_l0, d_dalpha_xx_o0_t3_m0_l0, d_alpha_o0_t2_m0_l0, d_alpha_o1_t2_m0_l0, d_dalpha_xx_o0_t0_m0_l0, d_dalpha_xy_o0_t0_m0_l0, d_dalpha_yy_o0_t0_m0_l0, d_dalpha_xz_o0_t0_m0_l0, d_dalpha_yz_o0_t0_m0_l0, d_dalpha_zz_o0_t0_m0_l0, d_dalpha_xx_o0_t4_m0_l0, d_Phi_o0_t0_m0_l0, d_Phi_o1_t0_m0_l0, d_dalpha_xx_o0_t9_m0_l0, d_Phi_o0_t1_m0_l0, d_Phi_o1_t1_m0_l0, d_dalpha_xx_o0_t12_m0_l0, d_Phi_o0_t2_m0_l0, d_Phi_o1_t2_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_A_xx_o0_t0_m0_l0, d_A_xx_o1_t0_m0_l0, d_A_xx_o0_t1_m0_l0, d_A_xx_o1_t1_m0_l0, d_A_xx_o0_t2_m0_l0, d_A_xx_o1_t2_m0_l0, d_A_xy_o0_t0_m0_l0, d_A_xy_o1_t0_m0_l0, d_A_xy_o0_t1_m0_l0, d_A_xy_o1_t1_m0_l0, d_A_xy_o0_t2_m0_l0, d_A_xy_o1_t2_m0_l0, d_A_xz_o0_t0_m0_l0, d_A_xz_o1_t0_m0_l0, d_A_xz_o0_t1_m0_l0, d_A_xz_o1_t1_m0_l0, d_A_xz_o0_t2_m0_l0, d_A_xz_o1_t2_m0_l0, d_A_yy_o0_t0_m0_l0, d_A_yy_o1_t0_m0_l0, d_A_yy_o0_t1_m0_l0, d_A_yy_o1_t1_m0_l0, d_A_yy_o0_t2_m0_l0, d_A_yy_o1_t2_m0_l0, d_A_yz_o0_t0_m0_l0, d_A_yz_o1_t0_m0_l0, d_A_yz_o0_t1_m0_l0, d_A_yz_o1_t1_m0_l0, d_A_yz_o0_t2_m0_l0, d_A_yz_o1_t2_m0_l0, d_A_zz_o0_t0_m0_l0, d_A_zz_o1_t0_m0_l0, d_A_zz_o0_t1_m0_l0, d_A_zz_o1_t1_m0_l0, d_A_zz_o0_t2_m0_l0, d_A_zz_o1_t2_m0_l0, d_trK_o0_t0_m0_l0, d_trK_o1_t0_m0_l0, d_Gam_x_o0_t27_m0_l0, d_trK_o0_t1_m0_l0, d_trK_o1_t1_m0_l0, d_Gam_x_o0_t28_m0_l0, d_trK_o0_t2_m0_l0, d_trK_o1_t2_m0_l0, d_Gam_x_o0_t29_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, div_beta_p, Detgammac_p, gamma_zz_p, iDetgammac_p, gamma_yy_p, gamma_yz_p, gamma_xx_p, gamma_xy_p, gamma_xz_p, Detgamma_p, iDetgamma_p, gammacu_zz_p, gammau_xx_p, gammau_xy_p, gammau_xz_p, gammacu_yy_p, gammacu_yz_p, gammacu_zy_p, gammau_yx_p, gammau_yy_p, gammau_yz_p, gammacu_xz_p, gammacu_zx_p, Am_zx_p, Am_zz_p, Am_zy_p, Au_zz_p, gammacu_xx_p, gammacu_xy_p, m_C_xxx_o0_t8_l0_p, m_C_xxx_o0_t6_l0_p, m_C_xxx_o0_t5_l0_p, m_C_xxx_o0_t3_l0_p, m_C_xxx_o0_t2_l0_p, m_C_xxx_o0_t0_l0_p, C_xxx_p, m_C_xxz_o0_t8_l0_p, m_C_xxz_o0_t7_l0_p, m_C_xxz_o0_t6_l0_p, m_C_xxz_o0_t5_l0_p, m_C_xxz_o0_t4_l0_p, m_C_xxz_o0_t3_l0_p, m_C_xxz_o0_t2_l0_p, m_C_xxz_o0_t1_l0_p, m_C_xxz_o0_t0_l0_p, C_xxz_p, m_C_zxz_o0_t8_l0_p, m_C_zxz_o0_t7_l0_p, m_C_zxz_o0_t6_l0_p, m_C_zxz_o0_t5_l0_p, m_C_zxz_o0_t4_l0_p, m_C_zxz_o0_t3_l0_p, m_C_zxz_o0_t2_l0_p, m_C_zxz_o0_t1_l0_p, m_C_zxz_o0_t0_l0_p, C_zxz_p, m_C_xxy_o0_t8_l0_p, m_C_xxy_o0_t7_l0_p, m_C_xxy_o0_t6_l0_p, m_C_xxy_o0_t5_l0_p, m_C_xxy_o0_t4_l0_p, m_C_xxy_o0_t3_l0_p, m_C_xxy_o0_t2_l0_p, m_C_xxy_o0_t1_l0_p, m_C_xxy_o0_t0_l0_p, C_xxy_p, gammacu_yx_p, m_C_yxy_o0_t8_l0_p, m_C_yxy_o0_t7_l0_p, m_C_yxy_o0_t6_l0_p, m_C_yxy_o0_t5_l0_p, m_C_yxy_o0_t4_l0_p, m_C_yxy_o0_t3_l0_p, m_C_yxy_o0_t2_l0_p, m_C_yxy_o0_t1_l0_p, m_C_yxy_o0_t0_l0_p, C_yxy_p, m_C_yxz_o0_t8_l0_p, m_C_yxz_o0_t7_l0_p, m_C_yxz_o0_t6_l0_p, m_C_yxz_o0_t5_l0_p, m_C_yxz_o0_t4_l0_p, m_C_yxz_o0_t3_l0_p, m_C_yxz_o0_t2_l0_p, m_C_yxz_o0_t1_l0_p, m_C_yxz_o0_t0_l0_p, C_yxz_p, Cd_xxz_p, Cd_yxz_p, Cd_zxz_p, m_C_yxx_o0_t8_l0_p, m_C_yxx_o0_t6_l0_p, m_C_yxx_o0_t5_l0_p, m_C_yxx_o0_t3_l0_p, m_C_yxx_o0_t2_l0_p, m_C_yxx_o0_t0_l0_p, C_yxx_p, m_C_xyy_o0_t8_l0_p, m_C_xyy_o0_t6_l0_p, m_C_xyy_o0_t5_l0_p, m_C_xyy_o0_t3_l0_p, m_C_xyy_o0_t2_l0_p, m_C_xyy_o0_t0_l0_p, C_xyy_p, m_C_zyy_o0_t8_l0_p, m_C_zyy_o0_t6_l0_p, m_C_zyy_o0_t5_l0_p, m_C_zyy_o0_t3_l0_p, m_C_zyy_o0_t2_l0_p, m_C_zyy_o0_t0_l0_p, C_zyy_p, m_C_yyy_o0_t8_l0_p, m_C_yyy_o0_t6_l0_p, m_C_yyy_o0_t5_l0_p, m_C_yyy_o0_t3_l0_p, m_C_yyy_o0_t2_l0_p, m_C_yyy_o0_t0_l0_p, C_yyy_p, Cd_xyy_p, Cd_yyy_p, Cd_zyy_p, m_C_xyz_o0_t8_l0_p, m_C_xyz_o0_t7_l0_p, m_C_xyz_o0_t6_l0_p, m_C_xyz_o0_t5_l0_p, m_C_xyz_o0_t4_l0_p, m_C_xyz_o0_t3_l0_p, m_C_xyz_o0_t2_l0_p, m_C_xyz_o0_t1_l0_p, m_C_xyz_o0_t0_l0_p, C_xyz_p, m_C_zyz_o0_t8_l0_p, m_C_zyz_o0_t7_l0_p, m_C_zyz_o0_t6_l0_p, m_C_zyz_o0_t5_l0_p, m_C_zyz_o0_t4_l0_p, m_C_zyz_o0_t3_l0_p, m_C_zyz_o0_t2_l0_p, m_C_zyz_o0_t1_l0_p, m_C_zyz_o0_t0_l0_p, C_zyz_p, m_C_yyz_o0_t8_l0_p, m_C_yyz_o0_t7_l0_p, m_C_yyz_o0_t6_l0_p, m_C_yyz_o0_t5_l0_p, m_C_yyz_o0_t4_l0_p, m_C_yyz_o0_t3_l0_p, m_C_yyz_o0_t2_l0_p, m_C_yyz_o0_t1_l0_p, m_C_yyz_o0_t0_l0_p, C_yyz_p, Cd_xyz_p, Cd_yyz_p, m_C_xzz_o0_t8_l0_p, m_C_xzz_o0_t6_l0_p, m_C_xzz_o0_t5_l0_p, m_C_xzz_o0_t3_l0_p, m_C_xzz_o0_t2_l0_p, m_C_xzz_o0_t0_l0_p, C_xzz_p, m_C_zzz_o0_t8_l0_p, m_C_zzz_o0_t6_l0_p, m_C_zzz_o0_t5_l0_p, m_C_zzz_o0_t3_l0_p, m_C_zzz_o0_t2_l0_p, m_C_zzz_o0_t0_l0_p, C_zzz_p, m_C_yzz_o0_t8_l0_p, m_C_yzz_o0_t6_l0_p, m_C_yzz_o0_t5_l0_p, m_C_yzz_o0_t3_l0_p, m_C_yzz_o0_t2_l0_p, m_C_yzz_o0_t0_l0_p, C_yzz_p, Cd_xzz_p, Cd_yzz_p, Cd_zzz_p, Cd_zyz_p, Am_yy_p, Am_yx_p, Am_yz_p, Au_yz_p, m_C_zxx_o0_t8_l0_p, m_C_zxx_o0_t6_l0_p, m_C_zxx_o0_t5_l0_p, m_C_zxx_o0_t3_l0_p, m_C_zxx_o0_t2_l0_p, m_C_zxx_o0_t0_l0_p, C_zxx_p, Cd_xxx_p, Cd_yxx_p, Cd_zxx_p, m_C_zxy_o0_t8_l0_p, m_C_zxy_o0_t7_l0_p, m_C_zxy_o0_t6_l0_p, m_C_zxy_o0_t5_l0_p, m_C_zxy_o0_t4_l0_p, m_C_zxy_o0_t3_l0_p, m_C_zxy_o0_t2_l0_p, m_C_zxy_o0_t1_l0_p, m_C_zxy_o0_t0_l0_p, C_zxy_p, Cd_xxy_p, Cd_yxy_p, Cd_zxy_p, Au_yy_p, falpha_p, d_Rc_xx_o0_t15_m0_l0_p, m_Rc_xx_o0_t11_l0_p, m_Rc_xx_o0_t10_l0_p, m_Rc_xx_o0_t9_l0_p, m_Rc_xx_o0_t8_l0_p, m_Rc_xx_o0_t7_l0_p, m_Rc_xx_o0_t6_l0_p, m_Rc_xx_o0_t5_l0_p, m_Rc_xx_o0_t4_l0_p, m_Rc_xx_o0_t3_l0_p, m_Rc_xx_o0_t2_l0_p, m_Rc_xx_o0_t1_l0_p, m_Rc_xx_o0_t0_l0_p, Rc_xx_p, gammau_zy_p, d_Rc_xy_o0_t15_m0_l0_p, m_Rc_xy_o0_t14_l0_p, m_Rc_xy_o0_t13_l0_p, m_Rc_xy_o0_t12_l0_p, m_Rc_xy_o0_t11_l0_p, m_Rc_xy_o0_t10_l0_p, m_Rc_xy_o0_t9_l0_p, m_Rc_xy_o0_t8_l0_p, m_Rc_xy_o0_t7_l0_p, m_Rc_xy_o0_t6_l0_p, m_Rc_xy_o0_t5_l0_p, m_Rc_xy_o0_t4_l0_p, m_Rc_xy_o0_t3_l0_p, m_Rc_xy_o0_t2_l0_p, m_Rc_xy_o0_t1_l0_p, m_Rc_xy_o0_t0_l0_p, Rc_xy_p, d_Rc_yy_o0_t15_m0_l0_p, m_Rc_yy_o0_t11_l0_p, m_Rc_yy_o0_t10_l0_p, m_Rc_yy_o0_t9_l0_p, m_Rc_yy_o0_t8_l0_p, m_Rc_yy_o0_t7_l0_p, m_Rc_yy_o0_t6_l0_p, m_Rc_yy_o0_t5_l0_p, m_Rc_yy_o0_t4_l0_p, m_Rc_yy_o0_t3_l0_p, m_Rc_yy_o0_t2_l0_p, m_Rc_yy_o0_t1_l0_p, m_Rc_yy_o0_t0_l0_p, Rc_yy_p, gammau_zz_p, Am_xx_p, Am_xz_p, Am_xy_p, Au_xz_p, Au_xy_p, d_Rc_xz_o0_t15_m0_l0_p, m_Rc_xz_o0_t14_l0_p, m_Rc_xz_o0_t13_l0_p, m_Rc_xz_o0_t12_l0_p, m_Rc_xz_o0_t11_l0_p, m_Rc_xz_o0_t10_l0_p, m_Rc_xz_o0_t9_l0_p, m_Rc_xz_o0_t8_l0_p, m_Rc_xz_o0_t7_l0_p, m_Rc_xz_o0_t6_l0_p, m_Rc_xz_o0_t5_l0_p, m_Rc_xz_o0_t4_l0_p, m_Rc_xz_o0_t3_l0_p, m_Rc_xz_o0_t2_l0_p, m_Rc_xz_o0_t1_l0_p, m_Rc_xz_o0_t0_l0_p, Rc_xz_p, d_Rc_yz_o0_t15_m0_l0_p, m_Rc_yz_o0_t14_l0_p, m_Rc_yz_o0_t13_l0_p, m_Rc_yz_o0_t12_l0_p, m_Rc_yz_o0_t11_l0_p, m_Rc_yz_o0_t10_l0_p, m_Rc_yz_o0_t9_l0_p, m_Rc_yz_o0_t8_l0_p, m_Rc_yz_o0_t7_l0_p, m_Rc_yz_o0_t6_l0_p, m_Rc_yz_o0_t5_l0_p, m_Rc_yz_o0_t4_l0_p, m_Rc_yz_o0_t3_l0_p, m_Rc_yz_o0_t2_l0_p, m_Rc_yz_o0_t1_l0_p, m_Rc_yz_o0_t0_l0_p, Rc_yz_p, d_Rc_zz_o0_t15_m0_l0_p, m_Rc_zz_o0_t11_l0_p, m_Rc_zz_o0_t10_l0_p, m_Rc_zz_o0_t9_l0_p, m_Rc_zz_o0_t8_l0_p, m_Rc_zz_o0_t7_l0_p, m_Rc_zz_o0_t6_l0_p, m_Rc_zz_o0_t5_l0_p, m_Rc_zz_o0_t4_l0_p, m_Rc_zz_o0_t3_l0_p, m_Rc_zz_o0_t2_l0_p, m_Rc_zz_o0_t1_l0_p, m_Rc_zz_o0_t0_l0_p, Rc_zz_p, Au_xx_p, gammau_zx_p, m_dalpha_xx_o0_t14_l0_p, m_dalpha_xx_o0_t13_l0_p, m_dalpha_xx_o0_t12_l0_p, m_dalpha_xx_o0_t11_l0_p, m_dalpha_xx_o0_t10_l0_p, m_dalpha_xx_o0_t9_l0_p, m_dalpha_xx_o0_t8_l0_p, m_dalpha_xx_o0_t7_l0_p, m_dalpha_xx_o0_t6_l0_p, m_dalpha_xx_o0_t4_l0_p, m_dalpha_xx_o0_t3_l0_p, m_dalpha_xx_o0_t2_l0_p, m_dalpha_xx_o0_t1_l0_p, dalpha_xx_p, m_dalpha_xz_o0_t14_l0_p, m_dalpha_xz_o0_t13_l0_p, m_dalpha_xz_o0_t12_l0_p, m_dalpha_xz_o0_t11_l0_p, m_dalpha_xz_o0_t10_l0_p, m_dalpha_xz_o0_t9_l0_p, m_dalpha_xz_o0_t8_l0_p, m_dalpha_xz_o0_t7_l0_p, m_dalpha_xz_o0_t6_l0_p, m_dalpha_xz_o0_t5_l0_p, m_dalpha_xz_o0_t4_l0_p, m_dalpha_xz_o0_t3_l0_p, m_dalpha_xz_o0_t2_l0_p, m_dalpha_xz_o0_t1_l0_p, dalpha_xz_p, m_dalpha_xy_o0_t14_l0_p, m_dalpha_xy_o0_t13_l0_p, m_dalpha_xy_o0_t12_l0_p, m_dalpha_xy_o0_t11_l0_p, m_dalpha_xy_o0_t10_l0_p, m_dalpha_xy_o0_t9_l0_p, m_dalpha_xy_o0_t8_l0_p, m_dalpha_xy_o0_t7_l0_p, m_dalpha_xy_o0_t6_l0_p, m_dalpha_xy_o0_t5_l0_p, m_dalpha_xy_o0_t4_l0_p, m_dalpha_xy_o0_t3_l0_p, m_dalpha_xy_o0_t2_l0_p, m_dalpha_xy_o0_t1_l0_p, dalpha_xy_p, m_Rp_xx_o0_t49_l0_p, m_Rp_xx_o0_t48_l0_p, m_Rp_xx_o0_t47_l0_p, m_Rp_xx_o0_t46_l0_p, m_Rp_xx_o0_t45_l0_p, m_Rp_xx_o0_t44_l0_p, m_Rp_xx_o0_t43_l0_p, m_Rp_xx_o0_t42_l0_p, m_Rp_xx_o0_t41_l0_p, m_Rp_xx_o0_t40_l0_p, m_Rp_xx_o0_t39_l0_p, m_Rp_xx_o0_t38_l0_p, m_Rp_xx_o0_t37_l0_p, m_Rp_xx_o0_t36_l0_p, m_Rp_xx_o0_t35_l0_p, m_Rp_xx_o0_t34_l0_p, m_Rp_xx_o0_t33_l0_p, m_Rp_xx_o0_t32_l0_p, m_Rp_xx_o0_t31_l0_p, m_Rp_xx_o0_t30_l0_p, m_Rp_xx_o0_t29_l0_p, m_Rp_xx_o0_t28_l0_p, m_Rp_xx_o0_t27_l0_p, m_Rp_xx_o0_t26_l0_p, m_Rp_xx_o0_t25_l0_p, m_Rp_xx_o0_t24_l0_p, m_Rp_xx_o0_t23_l0_p, m_Rp_xx_o0_t22_l0_p, m_Rp_xx_o0_t21_l0_p, m_Rp_xx_o0_t20_l0_p, m_Rp_xx_o0_t19_l0_p, m_Rp_xx_o0_t18_l0_p, m_Rp_xx_o0_t17_l0_p, m_Rp_xx_o0_t16_l0_p, m_Rp_xx_o0_t15_l0_p, m_Rp_xx_o0_t14_l0_p, m_Rp_xx_o0_t13_l0_p, m_Rp_xx_o0_t12_l0_p, m_Rp_xx_o0_t11_l0_p, m_Rp_xx_o0_t10_l0_p, m_Rp_xx_o0_t9_l0_p, m_Rp_xx_o0_t8_l0_p, m_Rp_xx_o0_t7_l0_p, m_Rp_xx_o0_t6_l0_p, m_Rp_xx_o0_t5_l0_p, m_Rp_xx_o0_t4_l0_p, m_Rp_xx_o0_t3_l0_p, m_Rp_xx_o0_t2_l0_p, m_Rp_xx_o0_t1_l0_p, m_Rp_xx_o0_t0_l0_p, Rp_xx_p, m_Rp_zz_o0_t49_l0_p, m_Rp_zz_o0_t48_l0_p, m_Rp_zz_o0_t47_l0_p, m_Rp_zz_o0_t46_l0_p, m_Rp_zz_o0_t45_l0_p, m_Rp_zz_o0_t44_l0_p, m_Rp_zz_o0_t43_l0_p, m_Rp_zz_o0_t42_l0_p, m_Rp_zz_o0_t41_l0_p, m_Rp_zz_o0_t40_l0_p, m_Rp_zz_o0_t39_l0_p, m_Rp_zz_o0_t38_l0_p, m_Rp_zz_o0_t37_l0_p, m_Rp_zz_o0_t36_l0_p, m_Rp_zz_o0_t35_l0_p, m_Rp_zz_o0_t34_l0_p, m_Rp_zz_o0_t33_l0_p, m_Rp_zz_o0_t32_l0_p, m_Rp_zz_o0_t31_l0_p, m_Rp_zz_o0_t30_l0_p, m_Rp_zz_o0_t29_l0_p, m_Rp_zz_o0_t28_l0_p, m_Rp_zz_o0_t27_l0_p, m_Rp_zz_o0_t26_l0_p, m_Rp_zz_o0_t25_l0_p, m_Rp_zz_o0_t24_l0_p, m_Rp_zz_o0_t23_l0_p, m_Rp_zz_o0_t22_l0_p, m_Rp_zz_o0_t21_l0_p, m_Rp_zz_o0_t20_l0_p, m_Rp_zz_o0_t19_l0_p, m_Rp_zz_o0_t18_l0_p, m_Rp_zz_o0_t17_l0_p, m_Rp_zz_o0_t16_l0_p, m_Rp_zz_o0_t15_l0_p, m_Rp_zz_o0_t14_l0_p, m_Rp_zz_o0_t13_l0_p, m_Rp_zz_o0_t12_l0_p, m_Rp_zz_o0_t11_l0_p, m_Rp_zz_o0_t10_l0_p, m_Rp_zz_o0_t9_l0_p, m_Rp_zz_o0_t8_l0_p, m_Rp_zz_o0_t7_l0_p, m_Rp_zz_o0_t6_l0_p, m_Rp_zz_o0_t5_l0_p, m_Rp_zz_o0_t4_l0_p, m_Rp_zz_o0_t3_l0_p, m_Rp_zz_o0_t2_l0_p, m_Rp_zz_o0_t1_l0_p, m_Rp_zz_o0_t0_l0_p, Rp_zz_p, R_zz_p, R_xx_p, m_Rp_xy_o0_t49_l0_p, m_Rp_xy_o0_t48_l0_p, m_Rp_xy_o0_t47_l0_p, m_Rp_xy_o0_t46_l0_p, m_Rp_xy_o0_t45_l0_p, m_Rp_xy_o0_t44_l0_p, m_Rp_xy_o0_t43_l0_p, m_Rp_xy_o0_t42_l0_p, m_Rp_xy_o0_t41_l0_p, m_Rp_xy_o0_t40_l0_p, m_Rp_xy_o0_t39_l0_p, m_Rp_xy_o0_t38_l0_p, m_Rp_xy_o0_t37_l0_p, m_Rp_xy_o0_t36_l0_p, m_Rp_xy_o0_t35_l0_p, m_Rp_xy_o0_t34_l0_p, m_Rp_xy_o0_t33_l0_p, m_Rp_xy_o0_t32_l0_p, m_Rp_xy_o0_t31_l0_p, m_Rp_xy_o0_t30_l0_p, m_Rp_xy_o0_t29_l0_p, m_Rp_xy_o0_t28_l0_p, m_Rp_xy_o0_t27_l0_p, m_Rp_xy_o0_t26_l0_p, m_Rp_xy_o0_t25_l0_p, m_Rp_xy_o0_t24_l0_p, m_Rp_xy_o0_t23_l0_p, m_Rp_xy_o0_t22_l0_p, m_Rp_xy_o0_t21_l0_p, m_Rp_xy_o0_t20_l0_p, m_Rp_xy_o0_t19_l0_p, m_Rp_xy_o0_t18_l0_p, m_Rp_xy_o0_t17_l0_p, m_Rp_xy_o0_t16_l0_p, m_Rp_xy_o0_t15_l0_p, m_Rp_xy_o0_t14_l0_p, m_Rp_xy_o0_t13_l0_p, m_Rp_xy_o0_t12_l0_p, m_Rp_xy_o0_t11_l0_p, m_Rp_xy_o0_t10_l0_p, m_Rp_xy_o0_t9_l0_p, m_Rp_xy_o0_t8_l0_p, m_Rp_xy_o0_t7_l0_p, m_Rp_xy_o0_t6_l0_p, m_Rp_xy_o0_t5_l0_p, m_Rp_xy_o0_t4_l0_p, m_Rp_xy_o0_t3_l0_p, m_Rp_xy_o0_t2_l0_p, m_Rp_xy_o0_t1_l0_p, m_Rp_xy_o0_t0_l0_p, Rp_xy_p, R_xy_p, m_Rp_xz_o0_t49_l0_p, m_Rp_xz_o0_t48_l0_p, m_Rp_xz_o0_t47_l0_p, m_Rp_xz_o0_t46_l0_p, m_Rp_xz_o0_t45_l0_p, m_Rp_xz_o0_t44_l0_p, m_Rp_xz_o0_t43_l0_p, m_Rp_xz_o0_t42_l0_p, m_Rp_xz_o0_t41_l0_p, m_Rp_xz_o0_t40_l0_p, m_Rp_xz_o0_t39_l0_p, m_Rp_xz_o0_t38_l0_p, m_Rp_xz_o0_t37_l0_p, m_Rp_xz_o0_t36_l0_p, m_Rp_xz_o0_t35_l0_p, m_Rp_xz_o0_t34_l0_p, m_Rp_xz_o0_t33_l0_p, m_Rp_xz_o0_t32_l0_p, m_Rp_xz_o0_t31_l0_p, m_Rp_xz_o0_t30_l0_p, m_Rp_xz_o0_t29_l0_p, m_Rp_xz_o0_t28_l0_p, m_Rp_xz_o0_t27_l0_p, m_Rp_xz_o0_t26_l0_p, m_Rp_xz_o0_t25_l0_p, m_Rp_xz_o0_t24_l0_p, m_Rp_xz_o0_t23_l0_p, m_Rp_xz_o0_t22_l0_p, m_Rp_xz_o0_t21_l0_p, m_Rp_xz_o0_t20_l0_p, m_Rp_xz_o0_t19_l0_p, m_Rp_xz_o0_t18_l0_p, m_Rp_xz_o0_t17_l0_p, m_Rp_xz_o0_t16_l0_p, m_Rp_xz_o0_t15_l0_p, m_Rp_xz_o0_t14_l0_p, m_Rp_xz_o0_t13_l0_p, m_Rp_xz_o0_t12_l0_p, m_Rp_xz_o0_t11_l0_p, m_Rp_xz_o0_t10_l0_p, m_Rp_xz_o0_t9_l0_p, m_Rp_xz_o0_t8_l0_p, m_Rp_xz_o0_t7_l0_p, m_Rp_xz_o0_t6_l0_p, m_Rp_xz_o0_t5_l0_p, m_Rp_xz_o0_t4_l0_p, m_Rp_xz_o0_t3_l0_p, m_Rp_xz_o0_t2_l0_p, m_Rp_xz_o0_t1_l0_p, m_Rp_xz_o0_t0_l0_p, Rp_xz_p, R_xz_p, m_Rp_yy_o0_t49_l0_p, m_Rp_yy_o0_t48_l0_p, m_Rp_yy_o0_t47_l0_p, m_Rp_yy_o0_t46_l0_p, m_Rp_yy_o0_t45_l0_p, m_Rp_yy_o0_t44_l0_p, m_Rp_yy_o0_t43_l0_p, m_Rp_yy_o0_t42_l0_p, m_Rp_yy_o0_t41_l0_p, m_Rp_yy_o0_t40_l0_p, m_Rp_yy_o0_t39_l0_p, m_Rp_yy_o0_t38_l0_p, m_Rp_yy_o0_t37_l0_p, m_Rp_yy_o0_t36_l0_p, m_Rp_yy_o0_t35_l0_p, m_Rp_yy_o0_t34_l0_p, m_Rp_yy_o0_t33_l0_p, m_Rp_yy_o0_t32_l0_p, m_Rp_yy_o0_t31_l0_p, m_Rp_yy_o0_t30_l0_p, m_Rp_yy_o0_t29_l0_p, m_Rp_yy_o0_t28_l0_p, m_Rp_yy_o0_t27_l0_p, m_Rp_yy_o0_t26_l0_p, m_Rp_yy_o0_t25_l0_p, m_Rp_yy_o0_t24_l0_p, m_Rp_yy_o0_t23_l0_p, m_Rp_yy_o0_t22_l0_p, m_Rp_yy_o0_t21_l0_p, m_Rp_yy_o0_t20_l0_p, m_Rp_yy_o0_t19_l0_p, m_Rp_yy_o0_t18_l0_p, m_Rp_yy_o0_t17_l0_p, m_Rp_yy_o0_t16_l0_p, m_Rp_yy_o0_t15_l0_p, m_Rp_yy_o0_t14_l0_p, m_Rp_yy_o0_t13_l0_p, m_Rp_yy_o0_t12_l0_p, m_Rp_yy_o0_t11_l0_p, m_Rp_yy_o0_t10_l0_p, m_Rp_yy_o0_t9_l0_p, m_Rp_yy_o0_t8_l0_p, m_Rp_yy_o0_t7_l0_p, m_Rp_yy_o0_t6_l0_p, m_Rp_yy_o0_t5_l0_p, m_Rp_yy_o0_t4_l0_p, m_Rp_yy_o0_t3_l0_p, m_Rp_yy_o0_t2_l0_p, m_Rp_yy_o0_t1_l0_p, m_Rp_yy_o0_t0_l0_p, Rp_yy_p, R_yy_p, m_Rp_yz_o0_t49_l0_p, m_Rp_yz_o0_t48_l0_p, m_Rp_yz_o0_t47_l0_p, m_Rp_yz_o0_t46_l0_p, m_Rp_yz_o0_t45_l0_p, m_Rp_yz_o0_t44_l0_p, m_Rp_yz_o0_t43_l0_p, m_Rp_yz_o0_t42_l0_p, m_Rp_yz_o0_t41_l0_p, m_Rp_yz_o0_t40_l0_p, m_Rp_yz_o0_t39_l0_p, m_Rp_yz_o0_t38_l0_p, m_Rp_yz_o0_t37_l0_p, m_Rp_yz_o0_t36_l0_p, m_Rp_yz_o0_t35_l0_p, m_Rp_yz_o0_t34_l0_p, m_Rp_yz_o0_t33_l0_p, m_Rp_yz_o0_t32_l0_p, m_Rp_yz_o0_t31_l0_p, m_Rp_yz_o0_t30_l0_p, m_Rp_yz_o0_t29_l0_p, m_Rp_yz_o0_t28_l0_p, m_Rp_yz_o0_t27_l0_p, m_Rp_yz_o0_t26_l0_p, m_Rp_yz_o0_t25_l0_p, m_Rp_yz_o0_t24_l0_p, m_Rp_yz_o0_t23_l0_p, m_Rp_yz_o0_t22_l0_p, m_Rp_yz_o0_t21_l0_p, m_Rp_yz_o0_t20_l0_p, m_Rp_yz_o0_t19_l0_p, m_Rp_yz_o0_t18_l0_p, m_Rp_yz_o0_t17_l0_p, m_Rp_yz_o0_t16_l0_p, m_Rp_yz_o0_t15_l0_p, m_Rp_yz_o0_t14_l0_p, m_Rp_yz_o0_t13_l0_p, m_Rp_yz_o0_t12_l0_p, m_Rp_yz_o0_t11_l0_p, m_Rp_yz_o0_t10_l0_p, m_Rp_yz_o0_t9_l0_p, m_Rp_yz_o0_t8_l0_p, m_Rp_yz_o0_t7_l0_p, m_Rp_yz_o0_t6_l0_p, m_Rp_yz_o0_t5_l0_p, m_Rp_yz_o0_t4_l0_p, m_Rp_yz_o0_t3_l0_p, m_Rp_yz_o0_t2_l0_p, m_Rp_yz_o0_t1_l0_p, m_Rp_yz_o0_t0_l0_p, Rp_yz_p, R_yz_p, R_p, m_dalpha_yz_o0_t14_l0_p, m_dalpha_yz_o0_t13_l0_p, m_dalpha_yz_o0_t12_l0_p, m_dalpha_yz_o0_t11_l0_p, m_dalpha_yz_o0_t10_l0_p, m_dalpha_yz_o0_t9_l0_p, m_dalpha_yz_o0_t8_l0_p, m_dalpha_yz_o0_t7_l0_p, m_dalpha_yz_o0_t6_l0_p, m_dalpha_yz_o0_t5_l0_p, m_dalpha_yz_o0_t4_l0_p, m_dalpha_yz_o0_t3_l0_p, m_dalpha_yz_o0_t2_l0_p, m_dalpha_yz_o0_t1_l0_p, dalpha_yz_p, m_dalpha_yy_o0_t14_l0_p, m_dalpha_yy_o0_t13_l0_p, m_dalpha_yy_o0_t12_l0_p, m_dalpha_yy_o0_t11_l0_p, m_dalpha_yy_o0_t10_l0_p, m_dalpha_yy_o0_t9_l0_p, m_dalpha_yy_o0_t8_l0_p, m_dalpha_yy_o0_t7_l0_p, m_dalpha_yy_o0_t6_l0_p, m_dalpha_yy_o0_t4_l0_p, m_dalpha_yy_o0_t3_l0_p, m_dalpha_yy_o0_t2_l0_p, m_dalpha_yy_o0_t1_l0_p, dalpha_yy_p, m_dalpha_zz_o0_t14_l0_p, m_dalpha_zz_o0_t13_l0_p, m_dalpha_zz_o0_t12_l0_p, m_dalpha_zz_o0_t11_l0_p, m_dalpha_zz_o0_t10_l0_p, m_dalpha_zz_o0_t9_l0_p, m_dalpha_zz_o0_t8_l0_p, m_dalpha_zz_o0_t7_l0_p, m_dalpha_zz_o0_t6_l0_p, m_dalpha_zz_o0_t4_l0_p, m_dalpha_zz_o0_t3_l0_p, m_dalpha_zz_o0_t2_l0_p, m_dalpha_zz_o0_t1_l0_p, dalpha_zz_p, trdalpha_p, Psi1TF_yz_p, Psi1TF_yy_p, Psi1TF_xy_p, Psi1TF_xx_p, Psi1TF_xz_p, Psi1TF_zz_p, d_gammac_xx_o2_t3_m0_l0, d_gammac_xy_o2_t6_m0_l0, d_gammac_xz_o2_t6_m0_l0, d_gammac_yy_o2_t3_m0_l0, d_gammac_yx_o2_t6_m0_l0, d_gammac_yz_o2_t6_m0_l0, d_gammac_zz_o2_t3_m0_l0, d_gammac_zx_o2_t6_m0_l0, d_gammac_zy_o2_t6_m0_l0, d_A_xx_o2_t3_m0_l0, d_A_xy_o2_t6_m0_l0, d_A_xz_o2_t6_m0_l0, d_A_yy_o2_t3_m0_l0, d_A_yz_o2_t6_m0_l0, d_A_zz_o2_t3_m0_l0, d_Phi_o2_t0_m0_l0, d_trK_o2_t0_m0_l0, d_beta_x_o0_t0_m0_l0, d_alpha_o2_t0_m0_l0, d_Gam_x_o0_t33_m0_l0, d_Gam_y_o0_t33_m0_l0, d_Gam_z_o0_t33_m0_l0, m_Gam_z_o0_t32_l0, m_Gam_z_o0_t31_l0, m_Gam_z_o0_t30_l0, m_Gam_z_o0_t29_l0, m_Gam_z_o0_t28_l0, m_Gam_z_o0_t27_l0, m_Gam_z_o0_t26_l0, m_Gam_z_o0_t25_l0, m_Gam_z_o0_t24_l0, m_Gam_z_o0_t23_l0, m_Gam_z_o0_t22_l0, m_Gam_z_o0_t21_l0, m_Gam_z_o0_t20_l0, m_Gam_z_o0_t19_l0, m_Gam_z_o0_t18_l0, m_Gam_z_o0_t17_l0, m_Gam_z_o0_t16_l0, m_Gam_z_o0_t15_l0, m_Gam_z_o0_t14_l0, m_Gam_z_o0_t13_l0, m_Gam_z_o0_t12_l0, m_Gam_z_o0_t11_l0, m_Gam_z_o0_t10_l0, m_Gam_z_o0_t9_l0, m_Gam_z_o0_t8_l0, m_Gam_z_o0_t7_l0, m_Gam_z_o0_t6_l0, m_Gam_z_o0_t5_l0, m_Gam_z_o0_t4_l0, m_Gam_z_o0_t3_l0, m_Gam_z_o0_t2_l0, m_Gam_z_o0_t1_l0, m_Gam_z_o0_t0_l0, m_Gam_y_o0_t32_l0, m_Gam_y_o0_t31_l0, m_Gam_y_o0_t30_l0, m_Gam_y_o0_t29_l0, m_Gam_y_o0_t28_l0, m_Gam_y_o0_t27_l0, m_Gam_y_o0_t26_l0, m_Gam_y_o0_t25_l0, m_Gam_y_o0_t24_l0, m_Gam_y_o0_t23_l0, m_Gam_y_o0_t22_l0, m_Gam_y_o0_t21_l0, m_Gam_y_o0_t20_l0, m_Gam_y_o0_t19_l0, m_Gam_y_o0_t18_l0, m_Gam_y_o0_t17_l0, m_Gam_y_o0_t16_l0, m_Gam_y_o0_t15_l0, m_Gam_y_o0_t14_l0, m_Gam_y_o0_t13_l0, m_Gam_y_o0_t12_l0, m_Gam_y_o0_t11_l0, m_Gam_y_o0_t10_l0, m_Gam_y_o0_t9_l0, m_Gam_y_o0_t8_l0, m_Gam_y_o0_t7_l0, m_Gam_y_o0_t6_l0, m_Gam_y_o0_t5_l0, m_Gam_y_o0_t4_l0, m_Gam_y_o0_t3_l0, m_Gam_y_o0_t2_l0, m_Gam_y_o0_t1_l0, m_Gam_y_o0_t0_l0, m_Gam_x_o0_t32_l0, m_Gam_x_o0_t31_l0, m_Gam_x_o0_t30_l0, m_Gam_x_o0_t29_l0, m_Gam_x_o0_t28_l0, m_Gam_x_o0_t27_l0, m_Gam_x_o0_t26_l0, m_Gam_x_o0_t25_l0, m_Gam_x_o0_t24_l0, m_Gam_x_o0_t23_l0, m_Gam_x_o0_t22_l0, m_Gam_x_o0_t21_l0, m_Gam_x_o0_t20_l0, m_Gam_x_o0_t19_l0, m_Gam_x_o0_t18_l0, m_Gam_x_o0_t17_l0, m_Gam_x_o0_t16_l0, m_Gam_x_o0_t15_l0, m_Gam_x_o0_t14_l0, m_Gam_x_o0_t13_l0, m_Gam_x_o0_t12_l0, m_Gam_x_o0_t11_l0, m_Gam_x_o0_t10_l0, m_Gam_x_o0_t9_l0, m_Gam_x_o0_t8_l0, m_Gam_x_o0_t7_l0, m_Gam_x_o0_t6_l0, m_Gam_x_o0_t5_l0, m_Gam_x_o0_t4_l0, m_Gam_x_o0_t3_l0, m_Gam_x_o0_t2_l0, m_Gam_x_o0_t1_l0, m_Gam_x_o0_t0_l0, m_alpha_o1_t2_l0, m_alpha_o1_t1_l0, m_alpha_o1_t0_l0, m_alpha_o0_t2_l0, m_alpha_o0_t1_l0, m_alpha_o0_t0_l0, m_trK_o1_t2_l0, m_trK_o1_t1_l0, m_trK_o1_t0_l0, m_trK_o0_t2_l0, m_trK_o0_t1_l0, m_trK_o0_t0_l0, m_Phi_o1_t2_l0, m_Phi_o1_t1_l0, m_Phi_o1_t0_l0, m_Phi_o0_t2_l0, m_Phi_o0_t1_l0, m_Phi_o0_t0_l0, m_A_zz_o2_t2_l0, m_A_zz_o2_t1_l0, m_A_zz_o2_t0_l0, m_A_zz_o1_t2_l0, m_A_zz_o1_t1_l0, m_A_zz_o1_t0_l0, m_A_zz_o0_t2_l0, m_A_zz_o0_t1_l0, m_A_zz_o0_t0_l0, m_A_yz_o2_t5_l0, m_A_yz_o2_t4_l0, m_A_yz_o2_t3_l0, m_A_yz_o2_t2_l0, m_A_yz_o2_t1_l0, m_A_yz_o2_t0_l0, m_A_yz_o1_t2_l0, m_A_yz_o1_t1_l0, m_A_yz_o1_t0_l0, m_A_yz_o0_t2_l0, m_A_yz_o0_t1_l0, m_A_yz_o0_t0_l0, m_A_yy_o2_t2_l0, m_A_yy_o2_t1_l0, m_A_yy_o2_t0_l0, m_A_yy_o1_t2_l0, m_A_yy_o1_t1_l0, m_A_yy_o1_t0_l0, m_A_yy_o0_t2_l0, m_A_yy_o0_t1_l0, m_A_yy_o0_t0_l0, m_A_xz_o2_t5_l0, m_A_xz_o2_t4_l0, m_A_xz_o2_t3_l0, m_A_xz_o2_t2_l0, m_A_xz_o2_t1_l0, m_A_xz_o2_t0_l0, m_A_xz_o1_t2_l0, m_A_xz_o1_t1_l0, m_A_xz_o1_t0_l0, m_A_xz_o0_t2_l0, m_A_xz_o0_t1_l0, m_A_xz_o0_t0_l0, m_A_xy_o2_t5_l0, m_A_xy_o2_t4_l0, m_A_xy_o2_t3_l0, m_A_xy_o2_t2_l0, m_A_xy_o2_t1_l0, m_A_xy_o2_t0_l0, m_A_xy_o1_t2_l0, m_A_xy_o1_t1_l0, m_A_xy_o1_t0_l0, m_A_xy_o0_t2_l0, m_A_xy_o0_t1_l0, m_A_xy_o0_t0_l0, m_A_xx_o2_t2_l0, m_A_xx_o2_t1_l0, m_A_xx_o2_t0_l0, m_A_xx_o1_t2_l0, m_A_xx_o1_t1_l0, m_A_xx_o1_t0_l0, m_A_xx_o0_t2_l0, m_A_xx_o0_t1_l0, m_A_xx_o0_t0_l0, m_gammac_zy_o1_t2_l0, m_gammac_zy_o1_t1_l0, m_gammac_zy_o1_t0_l0, m_gammac_zy_o0_t2_l0, m_gammac_zy_o0_t1_l0, m_gammac_zy_o0_t0_l0, m_gammac_zx_o1_t2_l0, m_gammac_zx_o1_t1_l0, m_gammac_zx_o1_t0_l0, m_gammac_zx_o0_t2_l0, m_gammac_zx_o0_t1_l0, m_gammac_zx_o0_t0_l0, m_gammac_zz_o2_t2_l0, m_gammac_zz_o2_t1_l0, m_gammac_zz_o2_t0_l0, m_gammac_zz_o1_t2_l0, m_gammac_zz_o1_t1_l0, m_gammac_zz_o1_t0_l0, m_gammac_zz_o0_t2_l0, m_gammac_zz_o0_t1_l0, m_gammac_zz_o0_t0_l0, m_gammac_yz_o2_t5_l0, m_gammac_yz_o2_t4_l0, m_gammac_yz_o2_t3_l0, m_gammac_yz_o2_t2_l0, m_gammac_yz_o2_t1_l0, m_gammac_yz_o2_t0_l0, m_gammac_yz_o1_t2_l0, m_gammac_yz_o1_t1_l0, m_gammac_yz_o1_t0_l0, m_gammac_yz_o0_t2_l0, m_gammac_yz_o0_t1_l0, m_gammac_yz_o0_t0_l0, m_gammac_yx_o1_t2_l0, m_gammac_yx_o1_t1_l0, m_gammac_yx_o1_t0_l0, m_gammac_yx_o0_t2_l0, m_gammac_yx_o0_t1_l0, m_gammac_yx_o0_t0_l0, m_gammac_yy_o2_t2_l0, m_gammac_yy_o2_t1_l0, m_gammac_yy_o2_t0_l0, m_gammac_yy_o1_t2_l0, m_gammac_yy_o1_t1_l0, m_gammac_yy_o1_t0_l0, m_gammac_yy_o0_t2_l0, m_gammac_yy_o0_t1_l0, m_gammac_yy_o0_t0_l0, m_gammac_xz_o2_t5_l0, m_gammac_xz_o2_t4_l0, m_gammac_xz_o2_t3_l0, m_gammac_xz_o2_t2_l0, m_gammac_xz_o2_t1_l0, m_gammac_xz_o2_t0_l0, m_gammac_xz_o1_t2_l0, m_gammac_xz_o1_t1_l0, m_gammac_xz_o1_t0_l0, m_gammac_xz_o0_t2_l0, m_gammac_xz_o0_t1_l0, m_gammac_xz_o0_t0_l0, m_gammac_xy_o2_t5_l0, m_gammac_xy_o2_t4_l0, m_gammac_xy_o2_t3_l0, m_gammac_xy_o2_t2_l0, m_gammac_xy_o2_t1_l0, m_gammac_xy_o2_t0_l0, m_gammac_xy_o1_t2_l0, m_gammac_xy_o1_t1_l0, m_gammac_xy_o1_t0_l0, m_gammac_xy_o0_t2_l0, m_gammac_xy_o0_t1_l0, m_gammac_xy_o0_t0_l0, m_gammac_xx_o2_t2_l0, m_gammac_xx_o2_t1_l0, m_gammac_xx_o2_t0_l0, m_gammac_xx_o1_t2_l0, m_gammac_xx_o1_t1_l0, m_gammac_xx_o1_t0_l0, m_gammac_xx_o0_t2_l0, m_gammac_xx_o0_t1_l0, m_gammac_xx_o0_t0_l0, RHS_gammac_xx, RHS_gammac_xy, RHS_gammac_xz, RHS_gammac_yy, RHS_gammac_yx, RHS_gammac_yz, RHS_gammac_zz, RHS_gammac_zx, RHS_gammac_zy, RHS_A_xx, RHS_A_xy, RHS_A_xz, RHS_A_yy, RHS_A_yz, RHS_A_zz, RHS_Phi, RHS_trK, RHS_beta_x, RHS_beta_y, RHS_beta_z, RHS_alpha, RHS_Gam_x, RHS_Gam_y, RHS_Gam_z;
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((i + 3 < ilast && i - 3 >= 0 && j + 3 < jlast && j - 3 >= 0 && k + 3 < klast && k - 3 >= 0)) {
						d_div_beta_o0_t0_m0_l0 = D1CDO4_i(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t0_m0_l0 = D1CDO4_j(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t0_m0_l0 = D1CDO4_k(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t0_m0_l0 = D2CDO4_i(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t3_m0_l0 = D1CDO4crossed_ij(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t6_m0_l0 = D1CDO4crossed_ik(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t1_m0_l0 = D1CDO4crossed_ji(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t4_m0_l0 = D2CDO4_j(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t7_m0_l0 = D1CDO4crossed_jk(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t2_m0_l0 = D1CDO4crossed_ki(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t5_m0_l0 = D1CDO4crossed_kj(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t8_m0_l0 = D2CDO4_k(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t1_m0_l0 = D1CDO4_i(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t1_m0_l0 = D1CDO4_j(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t1_m0_l0 = D1CDO4_k(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t0_m0_l0 = D2CDO4_i(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t3_m0_l0 = D1CDO4crossed_ij(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t6_m0_l0 = D1CDO4crossed_ik(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t10_m0_l0 = D1CDO4crossed_ji(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t13_m0_l0 = D2CDO4_j(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t16_m0_l0 = D1CDO4crossed_jk(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t2_m0_l0 = D1CDO4crossed_ki(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t5_m0_l0 = D1CDO4crossed_kj(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t8_m0_l0 = D2CDO4_k(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t2_m0_l0 = D1CDO4_i(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t2_m0_l0 = D1CDO4_j(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t2_m0_l0 = D1CDO4_k(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t0_m0_l0 = D2CDO4_i(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t3_m0_l0 = D1CDO4crossed_ij(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t6_m0_l0 = D1CDO4crossed_ik(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t1_m0_l0 = D1CDO4crossed_ji(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t4_m0_l0 = D2CDO4_j(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t7_m0_l0 = D1CDO4crossed_jk(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t11_m0_l0 = D1CDO4crossed_ki(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t14_m0_l0 = D1CDO4crossed_kj(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t17_m0_l0 = D2CDO4_k(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t0_m0_l0 = lieforward_i(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t0_m0_l0 = liebackward_i(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t1_m0_l0 = lieforward_j(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t1_m0_l0 = liebackward_j(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t2_m0_l0 = lieforward_k(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t2_m0_l0 = liebackward_k(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t0_m0_l0 = lieforward_i(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t0_m0_l0 = liebackward_i(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t1_m0_l0 = lieforward_j(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t1_m0_l0 = liebackward_j(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t2_m0_l0 = lieforward_k(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t2_m0_l0 = liebackward_k(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t0_m0_l0 = lieforward_i(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t0_m0_l0 = liebackward_i(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t1_m0_l0 = lieforward_j(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t1_m0_l0 = liebackward_j(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t2_m0_l0 = lieforward_k(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t2_m0_l0 = liebackward_k(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t0_m0_l0 = lieforward_i(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t0_m0_l0 = liebackward_i(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t1_m0_l0 = lieforward_j(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t1_m0_l0 = liebackward_j(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t2_m0_l0 = lieforward_k(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t2_m0_l0 = liebackward_k(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t0_m0_l0 = lieforward_i(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t0_m0_l0 = liebackward_i(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t1_m0_l0 = lieforward_j(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t1_m0_l0 = liebackward_j(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t2_m0_l0 = lieforward_k(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t2_m0_l0 = liebackward_k(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t0_m0_l0 = lieforward_i(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t0_m0_l0 = liebackward_i(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t1_m0_l0 = lieforward_j(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t1_m0_l0 = liebackward_j(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t2_m0_l0 = lieforward_k(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t2_m0_l0 = liebackward_k(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t0_m0_l0 = lieforward_i(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t0_m0_l0 = liebackward_i(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t1_m0_l0 = lieforward_j(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t1_m0_l0 = liebackward_j(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t2_m0_l0 = lieforward_k(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t2_m0_l0 = liebackward_k(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t0_m0_l0 = lieforward_i(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t0_m0_l0 = liebackward_i(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t1_m0_l0 = lieforward_j(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t1_m0_l0 = liebackward_j(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t2_m0_l0 = lieforward_k(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t2_m0_l0 = liebackward_k(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t0_m0_l0 = lieforward_i(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t0_m0_l0 = liebackward_i(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t1_m0_l0 = lieforward_j(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t1_m0_l0 = liebackward_j(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t2_m0_l0 = lieforward_k(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t2_m0_l0 = liebackward_k(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t1_m0_l0 = D1CDO4_i(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t0_m0_l0 = lieforward_i(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t0_m0_l0 = liebackward_i(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t2_m0_l0 = D1CDO4_j(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t1_m0_l0 = lieforward_j(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t1_m0_l0 = liebackward_j(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t3_m0_l0 = D1CDO4_k(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t2_m0_l0 = lieforward_k(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t2_m0_l0 = liebackward_k(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t0_m0_l0 = D2CDO4_i(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xy_o0_t0_m0_l0 = D1CDO4crossed_ji(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yy_o0_t0_m0_l0 = D2CDO4_j(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xz_o0_t0_m0_l0 = D1CDO4crossed_ki(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yz_o0_t0_m0_l0 = D1CDO4crossed_kj(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_zz_o0_t0_m0_l0 = D2CDO4_k(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t4_m0_l0 = D1CDO4_i(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t0_m0_l0 = lieforward_i(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t0_m0_l0 = liebackward_i(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t9_m0_l0 = D1CDO4_j(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t1_m0_l0 = lieforward_j(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t1_m0_l0 = liebackward_j(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t12_m0_l0 = D1CDO4_k(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t2_m0_l0 = lieforward_k(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t2_m0_l0 = liebackward_k(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t0_m0_l0 = lieforward_i(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t0_m0_l0 = liebackward_i(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t1_m0_l0 = lieforward_j(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t1_m0_l0 = liebackward_j(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t2_m0_l0 = lieforward_k(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t2_m0_l0 = liebackward_k(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t0_m0_l0 = lieforward_i(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t0_m0_l0 = liebackward_i(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t1_m0_l0 = lieforward_j(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t1_m0_l0 = liebackward_j(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t2_m0_l0 = lieforward_k(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t2_m0_l0 = liebackward_k(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t0_m0_l0 = lieforward_i(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t0_m0_l0 = liebackward_i(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t1_m0_l0 = lieforward_j(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t1_m0_l0 = liebackward_j(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t2_m0_l0 = lieforward_k(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t2_m0_l0 = liebackward_k(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t0_m0_l0 = lieforward_i(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t0_m0_l0 = liebackward_i(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t1_m0_l0 = lieforward_j(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t1_m0_l0 = liebackward_j(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t2_m0_l0 = lieforward_k(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t2_m0_l0 = liebackward_k(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t0_m0_l0 = lieforward_i(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t0_m0_l0 = liebackward_i(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t1_m0_l0 = lieforward_j(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t1_m0_l0 = liebackward_j(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t2_m0_l0 = lieforward_k(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t2_m0_l0 = liebackward_k(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t0_m0_l0 = lieforward_i(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t0_m0_l0 = liebackward_i(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t1_m0_l0 = lieforward_j(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t1_m0_l0 = liebackward_j(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t2_m0_l0 = lieforward_k(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t2_m0_l0 = liebackward_k(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t0_m0_l0 = lieforward_i(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t0_m0_l0 = liebackward_i(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t27_m0_l0 = D1CDO4_i(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t1_m0_l0 = lieforward_j(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t1_m0_l0 = liebackward_j(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t28_m0_l0 = D1CDO4_j(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t2_m0_l0 = lieforward_k(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t2_m0_l0 = liebackward_k(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t29_m0_l0 = D1CDO4_k(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast);
						div_beta_p = (d_div_beta_o0_t0_m0_l0 + d_div_beta_o0_t1_m0_l0) + d_div_beta_o0_t2_m0_l0;
						Detgammac_p = vector(gammac_yy_p, i, j, k) * vector(gammac_zz_p, i, j, k) * vector(gammac_xx_p, i, j, k) + (-vector(gammac_yy_p, i, j, k) * (vector(gammac_xz_p, i, j, k) * vector(gammac_xz_p, i, j, k))) + (-vector(gammac_zz_p, i, j, k) * (vector(gammac_xy_p, i, j, k) * vector(gammac_xy_p, i, j, k))) + (-(vector(gammac_yz_p, i, j, k) * vector(gammac_yz_p, i, j, k)) * vector(gammac_xx_p, i, j, k)) + 2.0 * vector(gammac_yz_p, i, j, k) * vector(gammac_xy_p, i, j, k) * vector(gammac_xz_p, i, j, k);
						gamma_zz_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_zz_p, i, j, k);
						iDetgammac_p = 1.0 / Detgammac_p;
						gamma_yy_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_yy_p, i, j, k);
						gamma_yz_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_yz_p, i, j, k);
						gamma_xx_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_xx_p, i, j, k);
						gamma_xy_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_xy_p, i, j, k);
						gamma_xz_p = exp(4.0 * vector(Phi_p, i, j, k)) * vector(gammac_xz_p, i, j, k);
						Detgamma_p = gamma_yy_p * gamma_zz_p * gamma_xx_p + (-gamma_yy_p * (gamma_xz_p * gamma_xz_p)) + (-gamma_zz_p * (gamma_xy_p * gamma_xy_p)) + (-(gamma_yz_p * gamma_yz_p) * gamma_xx_p) + 2.0 * gamma_yz_p * gamma_xy_p * gamma_xz_p;
						iDetgamma_p = 1.0 / Detgamma_p;
						gammacu_zz_p = iDetgammac_p * (vector(gammac_xx_p, i, j, k) * vector(gammac_yy_p, i, j, k) - vector(gammac_xy_p, i, j, k) * vector(gammac_xy_p, i, j, k));
						gammau_xx_p = iDetgamma_p * (gamma_yy_p * gamma_zz_p - gamma_yz_p * gamma_yz_p);
						gammau_xy_p = iDetgamma_p * ((-gamma_xy_p * gamma_zz_p) + gamma_yz_p * gamma_xz_p);
						gammau_xz_p = iDetgamma_p * (gamma_xy_p * gamma_yz_p - gamma_yy_p * gamma_xz_p);
						gammacu_yy_p = iDetgammac_p * (vector(gammac_xx_p, i, j, k) * vector(gammac_zz_p, i, j, k) - vector(gammac_xz_p, i, j, k) * vector(gammac_xz_p, i, j, k));
						gammacu_yz_p = iDetgammac_p * ((-vector(gammac_xx_p, i, j, k) * vector(gammac_yz_p, i, j, k)) + vector(gammac_xy_p, i, j, k) * vector(gammac_xz_p, i, j, k));
						gammacu_zy_p = gammacu_yz_p;
						gammau_yx_p = gammau_xy_p;
						gammau_yy_p = iDetgamma_p * (gamma_xx_p * gamma_zz_p - gamma_xz_p * gamma_xz_p);
						gammau_yz_p = iDetgamma_p * ((-gamma_xx_p * gamma_yz_p) + gamma_xy_p * gamma_xz_p);
						gammacu_xz_p = iDetgammac_p * (vector(gammac_xy_p, i, j, k) * vector(gammac_yz_p, i, j, k) - vector(gammac_yy_p, i, j, k) * vector(gammac_xz_p, i, j, k));
						gammacu_zx_p = gammacu_xz_p;
						Am_zx_p = gammacu_zx_p * vector(A_xx_p, i, j, k) + gammacu_zy_p * vector(A_xy_p, i, j, k) + gammacu_zz_p * vector(A_xz_p, i, j, k);
						Am_zz_p = gammacu_zx_p * vector(A_xz_p, i, j, k) + gammacu_zy_p * vector(A_yz_p, i, j, k) + gammacu_zz_p * vector(A_zz_p, i, j, k);
						Am_zy_p = gammacu_zx_p * vector(A_xy_p, i, j, k) + gammacu_zy_p * vector(A_yy_p, i, j, k) + gammacu_zz_p * vector(A_yz_p, i, j, k);
						Au_zz_p = gammacu_zx_p * Am_zx_p + gammacu_zy_p * Am_zy_p + gammacu_zz_p * Am_zz_p;
						gammacu_xx_p = iDetgammac_p * (vector(gammac_yy_p, i, j, k) * vector(gammac_zz_p, i, j, k) - vector(gammac_yz_p, i, j, k) * vector(gammac_yz_p, i, j, k));
						gammacu_xy_p = iDetgammac_p * ((-vector(gammac_xy_p, i, j, k) * vector(gammac_zz_p, i, j, k)) + vector(gammac_yz_p, i, j, k) * vector(gammac_xz_p, i, j, k));
						m_C_xxx_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xxx_o0_t8_m0_l0;
						m_C_xxx_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xxx_o0_t6_m0_l0;
						m_C_xxx_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xxx_o0_t5_m0_l0;
						m_C_xxx_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xxx_o0_t3_m0_l0;
						m_C_xxx_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxx_o0_t0_m0_l0;
						m_C_xxx_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxx_o0_t0_m0_l0;
						C_xxx_p = (((((((m_C_xxx_o0_t0_l0_p + m_C_xxx_o0_t0_l0_p) + m_C_xxx_o0_t2_l0_p) + m_C_xxx_o0_t3_l0_p) + m_C_xxx_o0_t3_l0_p) + m_C_xxx_o0_t5_l0_p) + m_C_xxx_o0_t6_l0_p) + m_C_xxx_o0_t6_l0_p) + m_C_xxx_o0_t8_l0_p;
						m_C_xxz_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xxz_o0_t8_m0_l0;
						m_C_xxz_o0_t7_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xxz_o0_t7_m0_l0;
						m_C_xxz_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xxz_o0_t6_m0_l0;
						m_C_xxz_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xxz_o0_t5_m0_l0;
						m_C_xxz_o0_t4_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xxz_o0_t4_m0_l0;
						m_C_xxz_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xxz_o0_t3_m0_l0;
						m_C_xxz_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxz_o0_t0_m0_l0;
						m_C_xxz_o0_t1_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxx_o0_t8_m0_l0;
						m_C_xxz_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxz_o0_t0_m0_l0;
						C_xxz_p = (((((((m_C_xxz_o0_t0_l0_p + m_C_xxz_o0_t1_l0_p) + m_C_xxz_o0_t2_l0_p) + m_C_xxz_o0_t3_l0_p) + m_C_xxz_o0_t4_l0_p) + m_C_xxz_o0_t5_l0_p) + m_C_xxz_o0_t6_l0_p) + m_C_xxz_o0_t7_l0_p) + m_C_xxz_o0_t8_l0_p;
						m_C_zxz_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xxz_o0_t8_m0_l0;
						m_C_zxz_o0_t7_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xxz_o0_t7_m0_l0;
						m_C_zxz_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xxz_o0_t6_m0_l0;
						m_C_zxz_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xxz_o0_t5_m0_l0;
						m_C_zxz_o0_t4_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xxz_o0_t4_m0_l0;
						m_C_zxz_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xxz_o0_t3_m0_l0;
						m_C_zxz_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxz_o0_t0_m0_l0;
						m_C_zxz_o0_t1_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxx_o0_t8_m0_l0;
						m_C_zxz_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxz_o0_t0_m0_l0;
						C_zxz_p = (((((((m_C_zxz_o0_t0_l0_p + m_C_zxz_o0_t1_l0_p) + m_C_zxz_o0_t2_l0_p) + m_C_zxz_o0_t3_l0_p) + m_C_zxz_o0_t4_l0_p) + m_C_zxz_o0_t5_l0_p) + m_C_zxz_o0_t6_l0_p) + m_C_zxz_o0_t7_l0_p) + m_C_zxz_o0_t8_l0_p;
						m_C_xxy_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xxy_o0_t8_m0_l0;
						m_C_xxy_o0_t7_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xxy_o0_t7_m0_l0;
						m_C_xxy_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xxy_o0_t6_m0_l0;
						m_C_xxy_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xxy_o0_t5_m0_l0;
						m_C_xxy_o0_t4_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xxy_o0_t4_m0_l0;
						m_C_xxy_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xxy_o0_t3_m0_l0;
						m_C_xxy_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxy_o0_t0_m0_l0;
						m_C_xxy_o0_t1_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxx_o0_t5_m0_l0;
						m_C_xxy_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxy_o0_t0_m0_l0;
						C_xxy_p = (((((((m_C_xxy_o0_t0_l0_p + m_C_xxy_o0_t1_l0_p) + m_C_xxy_o0_t2_l0_p) + m_C_xxy_o0_t3_l0_p) + m_C_xxy_o0_t4_l0_p) + m_C_xxy_o0_t5_l0_p) + m_C_xxy_o0_t6_l0_p) + m_C_xxy_o0_t7_l0_p) + m_C_xxy_o0_t8_l0_p;
						gammacu_yx_p = gammacu_xy_p;
						m_C_yxy_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xxy_o0_t8_m0_l0;
						m_C_yxy_o0_t7_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xxy_o0_t7_m0_l0;
						m_C_yxy_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xxy_o0_t6_m0_l0;
						m_C_yxy_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xxy_o0_t5_m0_l0;
						m_C_yxy_o0_t4_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xxy_o0_t4_m0_l0;
						m_C_yxy_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xxy_o0_t3_m0_l0;
						m_C_yxy_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxy_o0_t0_m0_l0;
						m_C_yxy_o0_t1_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxx_o0_t5_m0_l0;
						m_C_yxy_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxy_o0_t0_m0_l0;
						C_yxy_p = (((((((m_C_yxy_o0_t0_l0_p + m_C_yxy_o0_t1_l0_p) + m_C_yxy_o0_t2_l0_p) + m_C_yxy_o0_t3_l0_p) + m_C_yxy_o0_t4_l0_p) + m_C_yxy_o0_t5_l0_p) + m_C_yxy_o0_t6_l0_p) + m_C_yxy_o0_t7_l0_p) + m_C_yxy_o0_t8_l0_p;
						m_C_yxz_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xxz_o0_t8_m0_l0;
						m_C_yxz_o0_t7_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xxz_o0_t7_m0_l0;
						m_C_yxz_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xxz_o0_t6_m0_l0;
						m_C_yxz_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xxz_o0_t5_m0_l0;
						m_C_yxz_o0_t4_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xxz_o0_t4_m0_l0;
						m_C_yxz_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xxz_o0_t3_m0_l0;
						m_C_yxz_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxz_o0_t0_m0_l0;
						m_C_yxz_o0_t1_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxx_o0_t8_m0_l0;
						m_C_yxz_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxz_o0_t0_m0_l0;
						C_yxz_p = (((((((m_C_yxz_o0_t0_l0_p + m_C_yxz_o0_t1_l0_p) + m_C_yxz_o0_t2_l0_p) + m_C_yxz_o0_t3_l0_p) + m_C_yxz_o0_t4_l0_p) + m_C_yxz_o0_t5_l0_p) + m_C_yxz_o0_t6_l0_p) + m_C_yxz_o0_t7_l0_p) + m_C_yxz_o0_t8_l0_p;
						Cd_xxz_p = vector(gammac_xx_p, i, j, k) * C_xxz_p + vector(gammac_xy_p, i, j, k) * C_yxz_p + vector(gammac_xz_p, i, j, k) * C_zxz_p;
						Cd_yxz_p = vector(gammac_yx_p, i, j, k) * C_xxz_p + vector(gammac_yy_p, i, j, k) * C_yxz_p + vector(gammac_yz_p, i, j, k) * C_zxz_p;
						Cd_zxz_p = vector(gammac_zx_p, i, j, k) * C_xxz_p + vector(gammac_zy_p, i, j, k) * C_yxz_p + vector(gammac_zz_p, i, j, k) * C_zxz_p;
						m_C_yxx_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xxx_o0_t8_m0_l0;
						m_C_yxx_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xxx_o0_t6_m0_l0;
						m_C_yxx_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xxx_o0_t5_m0_l0;
						m_C_yxx_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xxx_o0_t3_m0_l0;
						m_C_yxx_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxx_o0_t0_m0_l0;
						m_C_yxx_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxx_o0_t0_m0_l0;
						C_yxx_p = (((((((m_C_yxx_o0_t0_l0_p + m_C_yxx_o0_t0_l0_p) + m_C_yxx_o0_t2_l0_p) + m_C_yxx_o0_t3_l0_p) + m_C_yxx_o0_t3_l0_p) + m_C_yxx_o0_t5_l0_p) + m_C_yxx_o0_t6_l0_p) + m_C_yxx_o0_t6_l0_p) + m_C_yxx_o0_t8_l0_p;
						m_C_xyy_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xyy_o0_t8_m0_l0;
						m_C_xyy_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xyy_o0_t6_m0_l0;
						m_C_xyy_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_xyy_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_xyy_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxy_o0_t3_m0_l0;
						m_C_xyy_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxy_o0_t5_m0_l0;
						C_xyy_p = (((((((m_C_xyy_o0_t0_l0_p + m_C_xyy_o0_t0_l0_p) + m_C_xyy_o0_t2_l0_p) + m_C_xyy_o0_t3_l0_p) + m_C_xyy_o0_t3_l0_p) + m_C_xyy_o0_t5_l0_p) + m_C_xyy_o0_t6_l0_p) + m_C_xyy_o0_t6_l0_p) + m_C_xyy_o0_t8_l0_p;
						m_C_zyy_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xyy_o0_t8_m0_l0;
						m_C_zyy_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xyy_o0_t6_m0_l0;
						m_C_zyy_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_zyy_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_zyy_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxy_o0_t3_m0_l0;
						m_C_zyy_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxy_o0_t5_m0_l0;
						C_zyy_p = (((((((m_C_zyy_o0_t0_l0_p + m_C_zyy_o0_t0_l0_p) + m_C_zyy_o0_t2_l0_p) + m_C_zyy_o0_t3_l0_p) + m_C_zyy_o0_t3_l0_p) + m_C_zyy_o0_t5_l0_p) + m_C_zyy_o0_t6_l0_p) + m_C_zyy_o0_t6_l0_p) + m_C_zyy_o0_t8_l0_p;
						m_C_yyy_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xyy_o0_t8_m0_l0;
						m_C_yyy_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xyy_o0_t6_m0_l0;
						m_C_yyy_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_yyy_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xyy_o0_t3_m0_l0;
						m_C_yyy_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxy_o0_t3_m0_l0;
						m_C_yyy_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxy_o0_t5_m0_l0;
						C_yyy_p = (((((((m_C_yyy_o0_t0_l0_p + m_C_yyy_o0_t0_l0_p) + m_C_yyy_o0_t2_l0_p) + m_C_yyy_o0_t3_l0_p) + m_C_yyy_o0_t3_l0_p) + m_C_yyy_o0_t5_l0_p) + m_C_yyy_o0_t6_l0_p) + m_C_yyy_o0_t6_l0_p) + m_C_yyy_o0_t8_l0_p;
						Cd_xyy_p = vector(gammac_xx_p, i, j, k) * C_xyy_p + vector(gammac_xy_p, i, j, k) * C_yyy_p + vector(gammac_xz_p, i, j, k) * C_zyy_p;
						Cd_yyy_p = vector(gammac_yx_p, i, j, k) * C_xyy_p + vector(gammac_yy_p, i, j, k) * C_yyy_p + vector(gammac_yz_p, i, j, k) * C_zyy_p;
						Cd_zyy_p = vector(gammac_zx_p, i, j, k) * C_xyy_p + vector(gammac_zy_p, i, j, k) * C_yyy_p + vector(gammac_zz_p, i, j, k) * C_zyy_p;
						m_C_xyz_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xyz_o0_t8_m0_l0;
						m_C_xyz_o0_t7_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xyz_o0_t7_m0_l0;
						m_C_xyz_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xyz_o0_t6_m0_l0;
						m_C_xyz_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_xyz_o0_t4_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xyy_o0_t8_m0_l0;
						m_C_xyz_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_xyz_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxz_o0_t3_m0_l0;
						m_C_xyz_o0_t1_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxy_o0_t8_m0_l0;
						m_C_xyz_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxz_o0_t5_m0_l0;
						C_xyz_p = (((((((m_C_xyz_o0_t0_l0_p + m_C_xyz_o0_t1_l0_p) + m_C_xyz_o0_t2_l0_p) + m_C_xyz_o0_t3_l0_p) + m_C_xyz_o0_t4_l0_p) + m_C_xyz_o0_t5_l0_p) + m_C_xyz_o0_t6_l0_p) + m_C_xyz_o0_t7_l0_p) + m_C_xyz_o0_t8_l0_p;
						m_C_zyz_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xyz_o0_t8_m0_l0;
						m_C_zyz_o0_t7_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xyz_o0_t7_m0_l0;
						m_C_zyz_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xyz_o0_t6_m0_l0;
						m_C_zyz_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_zyz_o0_t4_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xyy_o0_t8_m0_l0;
						m_C_zyz_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_zyz_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxz_o0_t3_m0_l0;
						m_C_zyz_o0_t1_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxy_o0_t8_m0_l0;
						m_C_zyz_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxz_o0_t5_m0_l0;
						C_zyz_p = (((((((m_C_zyz_o0_t0_l0_p + m_C_zyz_o0_t1_l0_p) + m_C_zyz_o0_t2_l0_p) + m_C_zyz_o0_t3_l0_p) + m_C_zyz_o0_t4_l0_p) + m_C_zyz_o0_t5_l0_p) + m_C_zyz_o0_t6_l0_p) + m_C_zyz_o0_t7_l0_p) + m_C_zyz_o0_t8_l0_p;
						m_C_yyz_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xyz_o0_t8_m0_l0;
						m_C_yyz_o0_t7_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xyz_o0_t7_m0_l0;
						m_C_yyz_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xyz_o0_t6_m0_l0;
						m_C_yyz_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_yyz_o0_t4_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xyy_o0_t8_m0_l0;
						m_C_yyz_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xyz_o0_t3_m0_l0;
						m_C_yyz_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxz_o0_t3_m0_l0;
						m_C_yyz_o0_t1_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxy_o0_t8_m0_l0;
						m_C_yyz_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxz_o0_t5_m0_l0;
						C_yyz_p = (((((((m_C_yyz_o0_t0_l0_p + m_C_yyz_o0_t1_l0_p) + m_C_yyz_o0_t2_l0_p) + m_C_yyz_o0_t3_l0_p) + m_C_yyz_o0_t4_l0_p) + m_C_yyz_o0_t5_l0_p) + m_C_yyz_o0_t6_l0_p) + m_C_yyz_o0_t7_l0_p) + m_C_yyz_o0_t8_l0_p;
						Cd_xyz_p = vector(gammac_xx_p, i, j, k) * C_xyz_p + vector(gammac_xy_p, i, j, k) * C_yyz_p + vector(gammac_xz_p, i, j, k) * C_zyz_p;
						Cd_yyz_p = vector(gammac_yx_p, i, j, k) * C_xyz_p + vector(gammac_yy_p, i, j, k) * C_yyz_p + vector(gammac_yz_p, i, j, k) * C_zyz_p;
						m_C_xzz_o0_t8_l0_p = (-0.5000000000000) * gammacu_xz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_xzz_o0_t6_l0_p = 0.5000000000000 * gammacu_xz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_xzz_o0_t5_l0_p = (-0.5000000000000) * gammacu_xy_p * d_C_xyz_o0_t6_m0_l0;
						m_C_xzz_o0_t3_l0_p = 0.5000000000000 * gammacu_xy_p * d_C_xyz_o0_t8_m0_l0;
						m_C_xzz_o0_t2_l0_p = (-0.5000000000000) * gammacu_xx_p * d_C_xxz_o0_t6_m0_l0;
						m_C_xzz_o0_t0_l0_p = 0.5000000000000 * gammacu_xx_p * d_C_xxz_o0_t8_m0_l0;
						C_xzz_p = (((((((m_C_xzz_o0_t0_l0_p + m_C_xzz_o0_t0_l0_p) + m_C_xzz_o0_t2_l0_p) + m_C_xzz_o0_t3_l0_p) + m_C_xzz_o0_t3_l0_p) + m_C_xzz_o0_t5_l0_p) + m_C_xzz_o0_t6_l0_p) + m_C_xzz_o0_t6_l0_p) + m_C_xzz_o0_t8_l0_p;
						m_C_zzz_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_zzz_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_zzz_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xyz_o0_t6_m0_l0;
						m_C_zzz_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xyz_o0_t8_m0_l0;
						m_C_zzz_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxz_o0_t6_m0_l0;
						m_C_zzz_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxz_o0_t8_m0_l0;
						C_zzz_p = (((((((m_C_zzz_o0_t0_l0_p + m_C_zzz_o0_t0_l0_p) + m_C_zzz_o0_t2_l0_p) + m_C_zzz_o0_t3_l0_p) + m_C_zzz_o0_t3_l0_p) + m_C_zzz_o0_t5_l0_p) + m_C_zzz_o0_t6_l0_p) + m_C_zzz_o0_t6_l0_p) + m_C_zzz_o0_t8_l0_p;
						m_C_yzz_o0_t8_l0_p = (-0.5000000000000) * gammacu_yz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_yzz_o0_t6_l0_p = 0.5000000000000 * gammacu_yz_p * d_C_xzz_o0_t6_m0_l0;
						m_C_yzz_o0_t5_l0_p = (-0.5000000000000) * gammacu_yy_p * d_C_xyz_o0_t6_m0_l0;
						m_C_yzz_o0_t3_l0_p = 0.5000000000000 * gammacu_yy_p * d_C_xyz_o0_t8_m0_l0;
						m_C_yzz_o0_t2_l0_p = (-0.5000000000000) * gammacu_yx_p * d_C_xxz_o0_t6_m0_l0;
						m_C_yzz_o0_t0_l0_p = 0.5000000000000 * gammacu_yx_p * d_C_xxz_o0_t8_m0_l0;
						C_yzz_p = (((((((m_C_yzz_o0_t0_l0_p + m_C_yzz_o0_t0_l0_p) + m_C_yzz_o0_t2_l0_p) + m_C_yzz_o0_t3_l0_p) + m_C_yzz_o0_t3_l0_p) + m_C_yzz_o0_t5_l0_p) + m_C_yzz_o0_t6_l0_p) + m_C_yzz_o0_t6_l0_p) + m_C_yzz_o0_t8_l0_p;
						Cd_xzz_p = vector(gammac_xx_p, i, j, k) * C_xzz_p + vector(gammac_xy_p, i, j, k) * C_yzz_p + vector(gammac_xz_p, i, j, k) * C_zzz_p;
						Cd_yzz_p = vector(gammac_yx_p, i, j, k) * C_xzz_p + vector(gammac_yy_p, i, j, k) * C_yzz_p + vector(gammac_yz_p, i, j, k) * C_zzz_p;
						Cd_zzz_p = vector(gammac_zx_p, i, j, k) * C_xzz_p + vector(gammac_zy_p, i, j, k) * C_yzz_p + vector(gammac_zz_p, i, j, k) * C_zzz_p;
						Cd_zyz_p = vector(gammac_zx_p, i, j, k) * C_xyz_p + vector(gammac_zy_p, i, j, k) * C_yyz_p + vector(gammac_zz_p, i, j, k) * C_zyz_p;
						Am_yy_p = gammacu_yx_p * vector(A_xy_p, i, j, k) + gammacu_yy_p * vector(A_yy_p, i, j, k) + gammacu_yz_p * vector(A_yz_p, i, j, k);
						Am_yx_p = gammacu_yx_p * vector(A_xx_p, i, j, k) + gammacu_yy_p * vector(A_xy_p, i, j, k) + gammacu_yz_p * vector(A_xz_p, i, j, k);
						Am_yz_p = gammacu_yx_p * vector(A_xz_p, i, j, k) + gammacu_yy_p * vector(A_yz_p, i, j, k) + gammacu_yz_p * vector(A_zz_p, i, j, k);
						Au_yz_p = gammacu_yx_p * Am_zx_p + gammacu_yy_p * Am_zy_p + gammacu_yz_p * Am_zz_p;
						m_C_zxx_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xxx_o0_t8_m0_l0;
						m_C_zxx_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xxx_o0_t6_m0_l0;
						m_C_zxx_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xxx_o0_t5_m0_l0;
						m_C_zxx_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xxx_o0_t3_m0_l0;
						m_C_zxx_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxx_o0_t0_m0_l0;
						m_C_zxx_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxx_o0_t0_m0_l0;
						C_zxx_p = (((((((m_C_zxx_o0_t0_l0_p + m_C_zxx_o0_t0_l0_p) + m_C_zxx_o0_t2_l0_p) + m_C_zxx_o0_t3_l0_p) + m_C_zxx_o0_t3_l0_p) + m_C_zxx_o0_t5_l0_p) + m_C_zxx_o0_t6_l0_p) + m_C_zxx_o0_t6_l0_p) + m_C_zxx_o0_t8_l0_p;
						Cd_xxx_p = vector(gammac_xx_p, i, j, k) * C_xxx_p + vector(gammac_xy_p, i, j, k) * C_yxx_p + vector(gammac_xz_p, i, j, k) * C_zxx_p;
						Cd_yxx_p = vector(gammac_yx_p, i, j, k) * C_xxx_p + vector(gammac_yy_p, i, j, k) * C_yxx_p + vector(gammac_yz_p, i, j, k) * C_zxx_p;
						Cd_zxx_p = vector(gammac_zx_p, i, j, k) * C_xxx_p + vector(gammac_zy_p, i, j, k) * C_yxx_p + vector(gammac_zz_p, i, j, k) * C_zxx_p;
						m_C_zxy_o0_t8_l0_p = (-0.5000000000000) * gammacu_zz_p * d_C_xxy_o0_t8_m0_l0;
						m_C_zxy_o0_t7_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xxy_o0_t7_m0_l0;
						m_C_zxy_o0_t6_l0_p = 0.5000000000000 * gammacu_zz_p * d_C_xxy_o0_t6_m0_l0;
						m_C_zxy_o0_t5_l0_p = (-0.5000000000000) * gammacu_zy_p * d_C_xxy_o0_t5_m0_l0;
						m_C_zxy_o0_t4_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xxy_o0_t4_m0_l0;
						m_C_zxy_o0_t3_l0_p = 0.5000000000000 * gammacu_zy_p * d_C_xxy_o0_t3_m0_l0;
						m_C_zxy_o0_t2_l0_p = (-0.5000000000000) * gammacu_zx_p * d_C_xxy_o0_t0_m0_l0;
						m_C_zxy_o0_t1_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxx_o0_t5_m0_l0;
						m_C_zxy_o0_t0_l0_p = 0.5000000000000 * gammacu_zx_p * d_C_xxy_o0_t0_m0_l0;
						C_zxy_p = (((((((m_C_zxy_o0_t0_l0_p + m_C_zxy_o0_t1_l0_p) + m_C_zxy_o0_t2_l0_p) + m_C_zxy_o0_t3_l0_p) + m_C_zxy_o0_t4_l0_p) + m_C_zxy_o0_t5_l0_p) + m_C_zxy_o0_t6_l0_p) + m_C_zxy_o0_t7_l0_p) + m_C_zxy_o0_t8_l0_p;
						Cd_xxy_p = vector(gammac_xx_p, i, j, k) * C_xxy_p + vector(gammac_xy_p, i, j, k) * C_yxy_p + vector(gammac_xz_p, i, j, k) * C_zxy_p;
						Cd_yxy_p = vector(gammac_yx_p, i, j, k) * C_xxy_p + vector(gammac_yy_p, i, j, k) * C_yxy_p + vector(gammac_yz_p, i, j, k) * C_zxy_p;
						Cd_zxy_p = vector(gammac_zx_p, i, j, k) * C_xxy_p + vector(gammac_zy_p, i, j, k) * C_yxy_p + vector(gammac_zz_p, i, j, k) * C_zxy_p;
						Au_yy_p = gammacu_yx_p * Am_yx_p + gammacu_yy_p * Am_yy_p + gammacu_yz_p * Am_yz_p;
						falpha_p = 1.0 + 1.0 / (vector(alpha_p, i, j, k) * vector(alpha_p, i, j, k));
						d_Rc_xx_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxx_p * Cd_xxz_p + C_yxx_p * Cd_yxz_p + C_zxx_p * Cd_zxz_p) + gammacu_zy_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_yxz_p + C_zxy_p * Cd_zxz_p) + gammacu_zz_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_yxz_p + C_zxz_p * Cd_zxz_p)) + (gammacu_yx_p * (C_xxx_p * Cd_xxy_p + C_yxx_p * Cd_yxy_p + C_zxx_p * Cd_zxy_p) + gammacu_yy_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_zxy_p) + gammacu_yz_p * (C_xxz_p * Cd_xxy_p + C_yxz_p * Cd_yxy_p + C_zxz_p * Cd_zxy_p)) + (gammacu_xx_p * (C_xxx_p * Cd_xxx_p + C_yxx_p * Cd_yxx_p + C_zxx_p * Cd_zxx_p) + gammacu_xy_p * (C_xxy_p * Cd_xxx_p + C_yxy_p * Cd_yxx_p + C_zxy_p * Cd_zxx_p) + gammacu_xz_p * (C_xxz_p * Cd_xxx_p + C_yxz_p * Cd_yxx_p + C_zxz_p * Cd_zxx_p)) + (gammacu_zx_p * (C_xxz_p * Cd_xxx_p + C_yxz_p * Cd_xxy_p + C_zxz_p * Cd_xxz_p) + gammacu_zy_p * (C_xxz_p * Cd_xxy_p + C_yxz_p * Cd_xyy_p + C_zxz_p * Cd_xyz_p) + gammacu_zz_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_xyz_p + C_zxz_p * Cd_xzz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_xxx_p + C_yxy_p * Cd_xxy_p + C_zxy_p * Cd_xxz_p) + gammacu_yy_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_xyy_p + C_zxy_p * Cd_xyz_p) + gammacu_yz_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_xyz_p + C_zxy_p * Cd_xzz_p)) + (gammacu_xx_p * (C_xxx_p * Cd_xxx_p + C_yxx_p * Cd_xxy_p + C_zxx_p * Cd_xxz_p) + gammacu_xy_p * (C_xxx_p * Cd_xxy_p + C_yxx_p * Cd_xyy_p + C_zxx_p * Cd_xyz_p) + gammacu_xz_p * (C_xxx_p * Cd_xxz_p + C_yxx_p * Cd_xyz_p + C_zxx_p * Cd_xzz_p)) + (gammacu_zx_p * (C_xxz_p * Cd_xxx_p + C_yxz_p * Cd_xxy_p + C_zxz_p * Cd_xxz_p) + gammacu_zy_p * (C_xxz_p * Cd_xxy_p + C_yxz_p * Cd_xyy_p + C_zxz_p * Cd_xyz_p) + gammacu_zz_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_xyz_p + C_zxz_p * Cd_xzz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_xxx_p + C_yxy_p * Cd_xxy_p + C_zxy_p * Cd_xxz_p) + gammacu_yy_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_xyy_p + C_zxy_p * Cd_xyz_p) + gammacu_yz_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_xyz_p + C_zxy_p * Cd_xzz_p)) + (gammacu_xx_p * (C_xxx_p * Cd_xxx_p + C_yxx_p * Cd_xxy_p + C_zxx_p * Cd_xxz_p) + gammacu_xy_p * (C_xxx_p * Cd_xxy_p + C_yxx_p * Cd_xyy_p + C_zxx_p * Cd_xyz_p) + gammacu_xz_p * (C_xxx_p * Cd_xxz_p + C_yxx_p * Cd_xyz_p + C_zxx_p * Cd_xzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_xxx_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_xxy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_xxz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_xxx_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_xxy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_xxz_p);
						m_Rc_xx_o0_t11_l0_p = 0.5 * vector(gammac_zx_p, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Rc_xx_o0_t10_l0_p = 0.5 * vector(gammac_yx_p, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Rc_xx_o0_t9_l0_p = 0.5 * vector(gammac_xx_p, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Rc_xx_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_xx_o0_t8_m0_l0;
						m_Rc_xx_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_xx_o0_t7_m0_l0;
						m_Rc_xx_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_xx_o0_t6_m0_l0;
						m_Rc_xx_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_xx_o0_t5_m0_l0;
						m_Rc_xx_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_xx_o0_t4_m0_l0;
						m_Rc_xx_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_xx_o0_t3_m0_l0;
						m_Rc_xx_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_xx_o0_t2_m0_l0;
						m_Rc_xx_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_xx_o0_t1_m0_l0;
						m_Rc_xx_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_xx_o0_t0_m0_l0;
						Rc_xx_p = ((((((((((((((m_Rc_xx_o0_t0_l0_p + m_Rc_xx_o0_t1_l0_p) + m_Rc_xx_o0_t2_l0_p) + m_Rc_xx_o0_t3_l0_p) + m_Rc_xx_o0_t4_l0_p) + m_Rc_xx_o0_t5_l0_p) + m_Rc_xx_o0_t6_l0_p) + m_Rc_xx_o0_t7_l0_p) + m_Rc_xx_o0_t8_l0_p) + m_Rc_xx_o0_t9_l0_p) + m_Rc_xx_o0_t10_l0_p) + m_Rc_xx_o0_t11_l0_p) + m_Rc_xx_o0_t9_l0_p) + m_Rc_xx_o0_t10_l0_p) + m_Rc_xx_o0_t11_l0_p) + d_Rc_xx_o0_t15_m0_l0_p;
						gammau_zy_p = gammau_yz_p;
						d_Rc_xy_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxx_p * Cd_xyz_p + C_yxx_p * Cd_yyz_p + C_zxx_p * Cd_zyz_p) + gammacu_zy_p * (C_xxy_p * Cd_xyz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_zyz_p) + gammacu_zz_p * (C_xxz_p * Cd_xyz_p + C_yxz_p * Cd_yyz_p + C_zxz_p * Cd_zyz_p)) + (gammacu_yx_p * (C_xxx_p * Cd_xyy_p + C_yxx_p * Cd_yyy_p + C_zxx_p * Cd_zyy_p) + gammacu_yy_p * (C_xxy_p * Cd_xyy_p + C_yxy_p * Cd_yyy_p + C_zxy_p * Cd_zyy_p) + gammacu_yz_p * (C_xxz_p * Cd_xyy_p + C_yxz_p * Cd_yyy_p + C_zxz_p * Cd_zyy_p)) + (gammacu_xx_p * (C_xxx_p * Cd_xxy_p + C_yxx_p * Cd_yxy_p + C_zxx_p * Cd_zxy_p) + gammacu_xy_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_zxy_p) + gammacu_xz_p * (C_xxz_p * Cd_xxy_p + C_yxz_p * Cd_yxy_p + C_zxz_p * Cd_zxy_p)) + (gammacu_zx_p * (C_xyz_p * Cd_xxx_p + C_yyz_p * Cd_xxy_p + C_zyz_p * Cd_xxz_p) + gammacu_zy_p * (C_xyz_p * Cd_xxy_p + C_yyz_p * Cd_xyy_p + C_zyz_p * Cd_xyz_p) + gammacu_zz_p * (C_xyz_p * Cd_xxz_p + C_yyz_p * Cd_xyz_p + C_zyz_p * Cd_xzz_p)) + (gammacu_yx_p * (C_xyy_p * Cd_xxx_p + C_yyy_p * Cd_xxy_p + C_zyy_p * Cd_xxz_p) + gammacu_yy_p * (C_xyy_p * Cd_xxy_p + C_yyy_p * Cd_xyy_p + C_zyy_p * Cd_xyz_p) + gammacu_yz_p * (C_xyy_p * Cd_xxz_p + C_yyy_p * Cd_xyz_p + C_zyy_p * Cd_xzz_p)) + (gammacu_xx_p * (C_xxy_p * Cd_xxx_p + C_yxy_p * Cd_xxy_p + C_zxy_p * Cd_xxz_p) + gammacu_xy_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_xyy_p + C_zxy_p * Cd_xyz_p) + gammacu_xz_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_xyz_p + C_zxy_p * Cd_xzz_p)) + (gammacu_zx_p * (C_xxz_p * Cd_yxx_p + C_yxz_p * Cd_yxy_p + C_zxz_p * Cd_yxz_p) + gammacu_zy_p * (C_xxz_p * Cd_yxy_p + C_yxz_p * Cd_yyy_p + C_zxz_p * Cd_yyz_p) + gammacu_zz_p * (C_xxz_p * Cd_yxz_p + C_yxz_p * Cd_yyz_p + C_zxz_p * Cd_yzz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_yxx_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_yxz_p) + gammacu_yy_p * (C_xxy_p * Cd_yxy_p + C_yxy_p * Cd_yyy_p + C_zxy_p * Cd_yyz_p) + gammacu_yz_p * (C_xxy_p * Cd_yxz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_yzz_p)) + (gammacu_xx_p * (C_xxx_p * Cd_yxx_p + C_yxx_p * Cd_yxy_p + C_zxx_p * Cd_yxz_p) + gammacu_xy_p * (C_xxx_p * Cd_yxy_p + C_yxx_p * Cd_yyy_p + C_zxx_p * Cd_yyz_p) + gammacu_xz_p * (C_xxx_p * Cd_yxz_p + C_yxx_p * Cd_yyz_p + C_zxx_p * Cd_yzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_yxx_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_yxy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_yxz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_xxy_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_xyy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_xyz_p);
						m_Rc_xy_o0_t14_l0_p = 0.5 * vector(gammac_zy_p, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Rc_xy_o0_t13_l0_p = 0.5 * vector(gammac_yy_p, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Rc_xy_o0_t12_l0_p = 0.5 * vector(gammac_xy_p, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Rc_xy_o0_t11_l0_p = 0.5 * vector(gammac_zx_p, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Rc_xy_o0_t10_l0_p = 0.5 * vector(gammac_yx_p, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Rc_xy_o0_t9_l0_p = 0.5 * vector(gammac_xx_p, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Rc_xy_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_xy_o0_t8_m0_l0;
						m_Rc_xy_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_xy_o0_t7_m0_l0;
						m_Rc_xy_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_xy_o0_t6_m0_l0;
						m_Rc_xy_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_xy_o0_t5_m0_l0;
						m_Rc_xy_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_xy_o0_t4_m0_l0;
						m_Rc_xy_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_xy_o0_t3_m0_l0;
						m_Rc_xy_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_xy_o0_t2_m0_l0;
						m_Rc_xy_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_xy_o0_t1_m0_l0;
						m_Rc_xy_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_xy_o0_t0_m0_l0;
						Rc_xy_p = ((((((((((((((m_Rc_xy_o0_t0_l0_p + m_Rc_xy_o0_t1_l0_p) + m_Rc_xy_o0_t2_l0_p) + m_Rc_xy_o0_t3_l0_p) + m_Rc_xy_o0_t4_l0_p) + m_Rc_xy_o0_t5_l0_p) + m_Rc_xy_o0_t6_l0_p) + m_Rc_xy_o0_t7_l0_p) + m_Rc_xy_o0_t8_l0_p) + m_Rc_xy_o0_t9_l0_p) + m_Rc_xy_o0_t10_l0_p) + m_Rc_xy_o0_t11_l0_p) + m_Rc_xy_o0_t12_l0_p) + m_Rc_xy_o0_t13_l0_p) + m_Rc_xy_o0_t14_l0_p) + d_Rc_xy_o0_t15_m0_l0_p;
						d_Rc_yy_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxy_p * Cd_xyz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_zyz_p) + gammacu_zy_p * (C_xyy_p * Cd_xyz_p + C_yyy_p * Cd_yyz_p + C_zyy_p * Cd_zyz_p) + gammacu_zz_p * (C_xyz_p * Cd_xyz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_zyz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_xyy_p + C_yxy_p * Cd_yyy_p + C_zxy_p * Cd_zyy_p) + gammacu_yy_p * (C_xyy_p * Cd_xyy_p + C_yyy_p * Cd_yyy_p + C_zyy_p * Cd_zyy_p) + gammacu_yz_p * (C_xyz_p * Cd_xyy_p + C_yyz_p * Cd_yyy_p + C_zyz_p * Cd_zyy_p)) + (gammacu_xx_p * (C_xxy_p * Cd_xxy_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_zxy_p) + gammacu_xy_p * (C_xyy_p * Cd_xxy_p + C_yyy_p * Cd_yxy_p + C_zyy_p * Cd_zxy_p) + gammacu_xz_p * (C_xyz_p * Cd_xxy_p + C_yyz_p * Cd_yxy_p + C_zyz_p * Cd_zxy_p)) + (gammacu_zx_p * (C_xyz_p * Cd_yxx_p + C_yyz_p * Cd_yxy_p + C_zyz_p * Cd_yxz_p) + gammacu_zy_p * (C_xyz_p * Cd_yxy_p + C_yyz_p * Cd_yyy_p + C_zyz_p * Cd_yyz_p) + gammacu_zz_p * (C_xyz_p * Cd_yxz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_yzz_p)) + (gammacu_yx_p * (C_xyy_p * Cd_yxx_p + C_yyy_p * Cd_yxy_p + C_zyy_p * Cd_yxz_p) + gammacu_yy_p * (C_xyy_p * Cd_yxy_p + C_yyy_p * Cd_yyy_p + C_zyy_p * Cd_yyz_p) + gammacu_yz_p * (C_xyy_p * Cd_yxz_p + C_yyy_p * Cd_yyz_p + C_zyy_p * Cd_yzz_p)) + (gammacu_xx_p * (C_xxy_p * Cd_yxx_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_yxz_p) + gammacu_xy_p * (C_xxy_p * Cd_yxy_p + C_yxy_p * Cd_yyy_p + C_zxy_p * Cd_yyz_p) + gammacu_xz_p * (C_xxy_p * Cd_yxz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_yzz_p)) + (gammacu_zx_p * (C_xyz_p * Cd_yxx_p + C_yyz_p * Cd_yxy_p + C_zyz_p * Cd_yxz_p) + gammacu_zy_p * (C_xyz_p * Cd_yxy_p + C_yyz_p * Cd_yyy_p + C_zyz_p * Cd_yyz_p) + gammacu_zz_p * (C_xyz_p * Cd_yxz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_yzz_p)) + (gammacu_yx_p * (C_xyy_p * Cd_yxx_p + C_yyy_p * Cd_yxy_p + C_zyy_p * Cd_yxz_p) + gammacu_yy_p * (C_xyy_p * Cd_yxy_p + C_yyy_p * Cd_yyy_p + C_zyy_p * Cd_yyz_p) + gammacu_yz_p * (C_xyy_p * Cd_yxz_p + C_yyy_p * Cd_yyz_p + C_zyy_p * Cd_yzz_p)) + (gammacu_xx_p * (C_xxy_p * Cd_yxx_p + C_yxy_p * Cd_yxy_p + C_zxy_p * Cd_yxz_p) + gammacu_xy_p * (C_xxy_p * Cd_yxy_p + C_yxy_p * Cd_yyy_p + C_zxy_p * Cd_yyz_p) + gammacu_xz_p * (C_xxy_p * Cd_yxz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_yzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_yxy_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_yyy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_yyz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_yxy_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_yyy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_yyz_p);
						m_Rc_yy_o0_t11_l0_p = 0.5 * vector(gammac_zy_p, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Rc_yy_o0_t10_l0_p = 0.5 * vector(gammac_yy_p, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Rc_yy_o0_t9_l0_p = 0.5 * vector(gammac_xy_p, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Rc_yy_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_yy_o0_t8_m0_l0;
						m_Rc_yy_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_yy_o0_t7_m0_l0;
						m_Rc_yy_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_yy_o0_t6_m0_l0;
						m_Rc_yy_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_yy_o0_t5_m0_l0;
						m_Rc_yy_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_yy_o0_t4_m0_l0;
						m_Rc_yy_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_yy_o0_t3_m0_l0;
						m_Rc_yy_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_yy_o0_t2_m0_l0;
						m_Rc_yy_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_yy_o0_t1_m0_l0;
						m_Rc_yy_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_yy_o0_t0_m0_l0;
						Rc_yy_p = ((((((((((((((m_Rc_yy_o0_t0_l0_p + m_Rc_yy_o0_t1_l0_p) + m_Rc_yy_o0_t2_l0_p) + m_Rc_yy_o0_t3_l0_p) + m_Rc_yy_o0_t4_l0_p) + m_Rc_yy_o0_t5_l0_p) + m_Rc_yy_o0_t6_l0_p) + m_Rc_yy_o0_t7_l0_p) + m_Rc_yy_o0_t8_l0_p) + m_Rc_yy_o0_t9_l0_p) + m_Rc_yy_o0_t10_l0_p) + m_Rc_yy_o0_t11_l0_p) + m_Rc_yy_o0_t9_l0_p) + m_Rc_yy_o0_t10_l0_p) + m_Rc_yy_o0_t11_l0_p) + d_Rc_yy_o0_t15_m0_l0_p;
						gammau_zz_p = iDetgamma_p * (gamma_xx_p * gamma_yy_p - gamma_xy_p * gamma_xy_p);
						Am_xx_p = gammacu_xx_p * vector(A_xx_p, i, j, k) + gammacu_xy_p * vector(A_xy_p, i, j, k) + gammacu_xz_p * vector(A_xz_p, i, j, k);
						Am_xz_p = gammacu_xx_p * vector(A_xz_p, i, j, k) + gammacu_xy_p * vector(A_yz_p, i, j, k) + gammacu_xz_p * vector(A_zz_p, i, j, k);
						Am_xy_p = gammacu_xx_p * vector(A_xy_p, i, j, k) + gammacu_xy_p * vector(A_yy_p, i, j, k) + gammacu_xz_p * vector(A_yz_p, i, j, k);
						Au_xz_p = gammacu_xx_p * Am_zx_p + gammacu_xy_p * Am_zy_p + gammacu_xz_p * Am_zz_p;
						Au_xy_p = gammacu_xx_p * Am_yx_p + gammacu_xy_p * Am_yy_p + gammacu_xz_p * Am_yz_p;
						d_Rc_xz_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxx_p * Cd_xzz_p + C_yxx_p * Cd_yzz_p + C_zxx_p * Cd_zzz_p) + gammacu_zy_p * (C_xxy_p * Cd_xzz_p + C_yxy_p * Cd_yzz_p + C_zxy_p * Cd_zzz_p) + gammacu_zz_p * (C_xxz_p * Cd_xzz_p + C_yxz_p * Cd_yzz_p + C_zxz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xxx_p * Cd_xyz_p + C_yxx_p * Cd_yyz_p + C_zxx_p * Cd_zyz_p) + gammacu_yy_p * (C_xxy_p * Cd_xyz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_zyz_p) + gammacu_yz_p * (C_xxz_p * Cd_xyz_p + C_yxz_p * Cd_yyz_p + C_zxz_p * Cd_zyz_p)) + (gammacu_xx_p * (C_xxx_p * Cd_xxz_p + C_yxx_p * Cd_yxz_p + C_zxx_p * Cd_zxz_p) + gammacu_xy_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_yxz_p + C_zxy_p * Cd_zxz_p) + gammacu_xz_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_yxz_p + C_zxz_p * Cd_zxz_p)) + (gammacu_zx_p * (C_xzz_p * Cd_xxx_p + C_yzz_p * Cd_xxy_p + C_zzz_p * Cd_xxz_p) + gammacu_zy_p * (C_xzz_p * Cd_xxy_p + C_yzz_p * Cd_xyy_p + C_zzz_p * Cd_xyz_p) + gammacu_zz_p * (C_xzz_p * Cd_xxz_p + C_yzz_p * Cd_xyz_p + C_zzz_p * Cd_xzz_p)) + (gammacu_yx_p * (C_xyz_p * Cd_xxx_p + C_yyz_p * Cd_xxy_p + C_zyz_p * Cd_xxz_p) + gammacu_yy_p * (C_xyz_p * Cd_xxy_p + C_yyz_p * Cd_xyy_p + C_zyz_p * Cd_xyz_p) + gammacu_yz_p * (C_xyz_p * Cd_xxz_p + C_yyz_p * Cd_xyz_p + C_zyz_p * Cd_xzz_p)) + (gammacu_xx_p * (C_xxz_p * Cd_xxx_p + C_yxz_p * Cd_xxy_p + C_zxz_p * Cd_xxz_p) + gammacu_xy_p * (C_xxz_p * Cd_xxy_p + C_yxz_p * Cd_xyy_p + C_zxz_p * Cd_xyz_p) + gammacu_xz_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_xyz_p + C_zxz_p * Cd_xzz_p)) + (gammacu_zx_p * (C_xxz_p * Cd_zxx_p + C_yxz_p * Cd_zxy_p + C_zxz_p * Cd_zxz_p) + gammacu_zy_p * (C_xxz_p * Cd_zxy_p + C_yxz_p * Cd_zyy_p + C_zxz_p * Cd_zyz_p) + gammacu_zz_p * (C_xxz_p * Cd_zxz_p + C_yxz_p * Cd_zyz_p + C_zxz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_zxx_p + C_yxy_p * Cd_zxy_p + C_zxy_p * Cd_zxz_p) + gammacu_yy_p * (C_xxy_p * Cd_zxy_p + C_yxy_p * Cd_zyy_p + C_zxy_p * Cd_zyz_p) + gammacu_yz_p * (C_xxy_p * Cd_zxz_p + C_yxy_p * Cd_zyz_p + C_zxy_p * Cd_zzz_p)) + (gammacu_xx_p * (C_xxx_p * Cd_zxx_p + C_yxx_p * Cd_zxy_p + C_zxx_p * Cd_zxz_p) + gammacu_xy_p * (C_xxx_p * Cd_zxy_p + C_yxx_p * Cd_zyy_p + C_zxx_p * Cd_zyz_p) + gammacu_xz_p * (C_xxx_p * Cd_zxz_p + C_yxx_p * Cd_zyz_p + C_zxx_p * Cd_zzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_zxx_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_zxy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_zxz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_xxz_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_xyz_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_xzz_p);
						m_Rc_xz_o0_t14_l0_p = 0.5 * vector(gammac_zz_p, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Rc_xz_o0_t13_l0_p = 0.5 * vector(gammac_yz_p, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Rc_xz_o0_t12_l0_p = 0.5 * vector(gammac_xz_p, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Rc_xz_o0_t11_l0_p = 0.5 * vector(gammac_zx_p, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Rc_xz_o0_t10_l0_p = 0.5 * vector(gammac_yx_p, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Rc_xz_o0_t9_l0_p = 0.5 * vector(gammac_xx_p, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Rc_xz_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_xz_o0_t8_m0_l0;
						m_Rc_xz_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_xz_o0_t7_m0_l0;
						m_Rc_xz_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_xz_o0_t6_m0_l0;
						m_Rc_xz_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_xz_o0_t5_m0_l0;
						m_Rc_xz_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_xz_o0_t4_m0_l0;
						m_Rc_xz_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_xz_o0_t3_m0_l0;
						m_Rc_xz_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_xz_o0_t2_m0_l0;
						m_Rc_xz_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_xz_o0_t1_m0_l0;
						m_Rc_xz_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_xz_o0_t0_m0_l0;
						Rc_xz_p = ((((((((((((((m_Rc_xz_o0_t0_l0_p + m_Rc_xz_o0_t1_l0_p) + m_Rc_xz_o0_t2_l0_p) + m_Rc_xz_o0_t3_l0_p) + m_Rc_xz_o0_t4_l0_p) + m_Rc_xz_o0_t5_l0_p) + m_Rc_xz_o0_t6_l0_p) + m_Rc_xz_o0_t7_l0_p) + m_Rc_xz_o0_t8_l0_p) + m_Rc_xz_o0_t9_l0_p) + m_Rc_xz_o0_t10_l0_p) + m_Rc_xz_o0_t11_l0_p) + m_Rc_xz_o0_t12_l0_p) + m_Rc_xz_o0_t13_l0_p) + m_Rc_xz_o0_t14_l0_p) + d_Rc_xz_o0_t15_m0_l0_p;
						d_Rc_yz_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxy_p * Cd_xzz_p + C_yxy_p * Cd_yzz_p + C_zxy_p * Cd_zzz_p) + gammacu_zy_p * (C_xyy_p * Cd_xzz_p + C_yyy_p * Cd_yzz_p + C_zyy_p * Cd_zzz_p) + gammacu_zz_p * (C_xyz_p * Cd_xzz_p + C_yyz_p * Cd_yzz_p + C_zyz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xxy_p * Cd_xyz_p + C_yxy_p * Cd_yyz_p + C_zxy_p * Cd_zyz_p) + gammacu_yy_p * (C_xyy_p * Cd_xyz_p + C_yyy_p * Cd_yyz_p + C_zyy_p * Cd_zyz_p) + gammacu_yz_p * (C_xyz_p * Cd_xyz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_zyz_p)) + (gammacu_xx_p * (C_xxy_p * Cd_xxz_p + C_yxy_p * Cd_yxz_p + C_zxy_p * Cd_zxz_p) + gammacu_xy_p * (C_xyy_p * Cd_xxz_p + C_yyy_p * Cd_yxz_p + C_zyy_p * Cd_zxz_p) + gammacu_xz_p * (C_xyz_p * Cd_xxz_p + C_yyz_p * Cd_yxz_p + C_zyz_p * Cd_zxz_p)) + (gammacu_zx_p * (C_xzz_p * Cd_yxx_p + C_yzz_p * Cd_yxy_p + C_zzz_p * Cd_yxz_p) + gammacu_zy_p * (C_xzz_p * Cd_yxy_p + C_yzz_p * Cd_yyy_p + C_zzz_p * Cd_yyz_p) + gammacu_zz_p * (C_xzz_p * Cd_yxz_p + C_yzz_p * Cd_yyz_p + C_zzz_p * Cd_yzz_p)) + (gammacu_yx_p * (C_xyz_p * Cd_yxx_p + C_yyz_p * Cd_yxy_p + C_zyz_p * Cd_yxz_p) + gammacu_yy_p * (C_xyz_p * Cd_yxy_p + C_yyz_p * Cd_yyy_p + C_zyz_p * Cd_yyz_p) + gammacu_yz_p * (C_xyz_p * Cd_yxz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_yzz_p)) + (gammacu_xx_p * (C_xxz_p * Cd_yxx_p + C_yxz_p * Cd_yxy_p + C_zxz_p * Cd_yxz_p) + gammacu_xy_p * (C_xxz_p * Cd_yxy_p + C_yxz_p * Cd_yyy_p + C_zxz_p * Cd_yyz_p) + gammacu_xz_p * (C_xxz_p * Cd_yxz_p + C_yxz_p * Cd_yyz_p + C_zxz_p * Cd_yzz_p)) + (gammacu_zx_p * (C_xyz_p * Cd_zxx_p + C_yyz_p * Cd_zxy_p + C_zyz_p * Cd_zxz_p) + gammacu_zy_p * (C_xyz_p * Cd_zxy_p + C_yyz_p * Cd_zyy_p + C_zyz_p * Cd_zyz_p) + gammacu_zz_p * (C_xyz_p * Cd_zxz_p + C_yyz_p * Cd_zyz_p + C_zyz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xyy_p * Cd_zxx_p + C_yyy_p * Cd_zxy_p + C_zyy_p * Cd_zxz_p) + gammacu_yy_p * (C_xyy_p * Cd_zxy_p + C_yyy_p * Cd_zyy_p + C_zyy_p * Cd_zyz_p) + gammacu_yz_p * (C_xyy_p * Cd_zxz_p + C_yyy_p * Cd_zyz_p + C_zyy_p * Cd_zzz_p)) + (gammacu_xx_p * (C_xxy_p * Cd_zxx_p + C_yxy_p * Cd_zxy_p + C_zxy_p * Cd_zxz_p) + gammacu_xy_p * (C_xxy_p * Cd_zxy_p + C_yxy_p * Cd_zyy_p + C_zxy_p * Cd_zyz_p) + gammacu_xz_p * (C_xxy_p * Cd_zxz_p + C_yxy_p * Cd_zyz_p + C_zxy_p * Cd_zzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_zxy_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_zyy_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_zyz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_yxz_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_yyz_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_yzz_p);
						m_Rc_yz_o0_t14_l0_p = 0.5 * vector(gammac_zz_p, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Rc_yz_o0_t13_l0_p = 0.5 * vector(gammac_yz_p, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Rc_yz_o0_t12_l0_p = 0.5 * vector(gammac_xz_p, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Rc_yz_o0_t11_l0_p = 0.5 * vector(gammac_zy_p, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Rc_yz_o0_t10_l0_p = 0.5 * vector(gammac_yy_p, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Rc_yz_o0_t9_l0_p = 0.5 * vector(gammac_xy_p, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Rc_yz_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_yz_o0_t8_m0_l0;
						m_Rc_yz_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_yz_o0_t7_m0_l0;
						m_Rc_yz_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_yz_o0_t6_m0_l0;
						m_Rc_yz_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_yz_o0_t5_m0_l0;
						m_Rc_yz_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_yz_o0_t4_m0_l0;
						m_Rc_yz_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_yz_o0_t3_m0_l0;
						m_Rc_yz_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_yz_o0_t2_m0_l0;
						m_Rc_yz_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_yz_o0_t1_m0_l0;
						m_Rc_yz_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_yz_o0_t0_m0_l0;
						Rc_yz_p = ((((((((((((((m_Rc_yz_o0_t0_l0_p + m_Rc_yz_o0_t1_l0_p) + m_Rc_yz_o0_t2_l0_p) + m_Rc_yz_o0_t3_l0_p) + m_Rc_yz_o0_t4_l0_p) + m_Rc_yz_o0_t5_l0_p) + m_Rc_yz_o0_t6_l0_p) + m_Rc_yz_o0_t7_l0_p) + m_Rc_yz_o0_t8_l0_p) + m_Rc_yz_o0_t9_l0_p) + m_Rc_yz_o0_t10_l0_p) + m_Rc_yz_o0_t11_l0_p) + m_Rc_yz_o0_t12_l0_p) + m_Rc_yz_o0_t13_l0_p) + m_Rc_yz_o0_t14_l0_p) + d_Rc_yz_o0_t15_m0_l0_p;
						d_Rc_zz_o0_t15_m0_l0_p = (gammacu_zx_p * (C_xxz_p * Cd_xzz_p + C_yxz_p * Cd_yzz_p + C_zxz_p * Cd_zzz_p) + gammacu_zy_p * (C_xyz_p * Cd_xzz_p + C_yyz_p * Cd_yzz_p + C_zyz_p * Cd_zzz_p) + gammacu_zz_p * (C_xzz_p * Cd_xzz_p + C_yzz_p * Cd_yzz_p + C_zzz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xxz_p * Cd_xyz_p + C_yxz_p * Cd_yyz_p + C_zxz_p * Cd_zyz_p) + gammacu_yy_p * (C_xyz_p * Cd_xyz_p + C_yyz_p * Cd_yyz_p + C_zyz_p * Cd_zyz_p) + gammacu_yz_p * (C_xzz_p * Cd_xyz_p + C_yzz_p * Cd_yyz_p + C_zzz_p * Cd_zyz_p)) + (gammacu_xx_p * (C_xxz_p * Cd_xxz_p + C_yxz_p * Cd_yxz_p + C_zxz_p * Cd_zxz_p) + gammacu_xy_p * (C_xyz_p * Cd_xxz_p + C_yyz_p * Cd_yxz_p + C_zyz_p * Cd_zxz_p) + gammacu_xz_p * (C_xzz_p * Cd_xxz_p + C_yzz_p * Cd_yxz_p + C_zzz_p * Cd_zxz_p)) + (gammacu_zx_p * (C_xzz_p * Cd_zxx_p + C_yzz_p * Cd_zxy_p + C_zzz_p * Cd_zxz_p) + gammacu_zy_p * (C_xzz_p * Cd_zxy_p + C_yzz_p * Cd_zyy_p + C_zzz_p * Cd_zyz_p) + gammacu_zz_p * (C_xzz_p * Cd_zxz_p + C_yzz_p * Cd_zyz_p + C_zzz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xyz_p * Cd_zxx_p + C_yyz_p * Cd_zxy_p + C_zyz_p * Cd_zxz_p) + gammacu_yy_p * (C_xyz_p * Cd_zxy_p + C_yyz_p * Cd_zyy_p + C_zyz_p * Cd_zyz_p) + gammacu_yz_p * (C_xyz_p * Cd_zxz_p + C_yyz_p * Cd_zyz_p + C_zyz_p * Cd_zzz_p)) + (gammacu_xx_p * (C_xxz_p * Cd_zxx_p + C_yxz_p * Cd_zxy_p + C_zxz_p * Cd_zxz_p) + gammacu_xy_p * (C_xxz_p * Cd_zxy_p + C_yxz_p * Cd_zyy_p + C_zxz_p * Cd_zyz_p) + gammacu_xz_p * (C_xxz_p * Cd_zxz_p + C_yxz_p * Cd_zyz_p + C_zxz_p * Cd_zzz_p)) + (gammacu_zx_p * (C_xzz_p * Cd_zxx_p + C_yzz_p * Cd_zxy_p + C_zzz_p * Cd_zxz_p) + gammacu_zy_p * (C_xzz_p * Cd_zxy_p + C_yzz_p * Cd_zyy_p + C_zzz_p * Cd_zyz_p) + gammacu_zz_p * (C_xzz_p * Cd_zxz_p + C_yzz_p * Cd_zyz_p + C_zzz_p * Cd_zzz_p)) + (gammacu_yx_p * (C_xyz_p * Cd_zxx_p + C_yyz_p * Cd_zxy_p + C_zyz_p * Cd_zxz_p) + gammacu_yy_p * (C_xyz_p * Cd_zxy_p + C_yyz_p * Cd_zyy_p + C_zyz_p * Cd_zyz_p) + gammacu_yz_p * (C_xyz_p * Cd_zxz_p + C_yyz_p * Cd_zyz_p + C_zyz_p * Cd_zzz_p)) + (gammacu_xx_p * (C_xxz_p * Cd_zxx_p + C_yxz_p * Cd_zxy_p + C_zxz_p * Cd_zxz_p) + gammacu_xy_p * (C_xxz_p * Cd_zxy_p + C_yxz_p * Cd_zyy_p + C_zxz_p * Cd_zyz_p) + gammacu_xz_p * (C_xxz_p * Cd_zxz_p + C_yxz_p * Cd_zyz_p + C_zxz_p * Cd_zzz_p)) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_zxz_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_zyz_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_zzz_p) + (0.5 * vector(Gam_x_p, i, j, k) * Cd_zxz_p + 0.5 * vector(Gam_y_p, i, j, k) * Cd_zyz_p + 0.5 * vector(Gam_z_p, i, j, k) * Cd_zzz_p);
						m_Rc_zz_o0_t11_l0_p = 0.5 * vector(gammac_zz_p, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Rc_zz_o0_t10_l0_p = 0.5 * vector(gammac_yz_p, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Rc_zz_o0_t9_l0_p = 0.5 * vector(gammac_xz_p, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Rc_zz_o0_t8_l0_p = (-0.5) * gammacu_zz_p * d_Rc_zz_o0_t8_m0_l0;
						m_Rc_zz_o0_t7_l0_p = (-0.5) * gammacu_zy_p * d_Rc_zz_o0_t7_m0_l0;
						m_Rc_zz_o0_t6_l0_p = (-0.5) * gammacu_zx_p * d_Rc_zz_o0_t6_m0_l0;
						m_Rc_zz_o0_t5_l0_p = (-0.5) * gammacu_yz_p * d_Rc_zz_o0_t5_m0_l0;
						m_Rc_zz_o0_t4_l0_p = (-0.5) * gammacu_yy_p * d_Rc_zz_o0_t4_m0_l0;
						m_Rc_zz_o0_t3_l0_p = (-0.5) * gammacu_yx_p * d_Rc_zz_o0_t3_m0_l0;
						m_Rc_zz_o0_t2_l0_p = (-0.5) * gammacu_xz_p * d_Rc_zz_o0_t2_m0_l0;
						m_Rc_zz_o0_t1_l0_p = (-0.5) * gammacu_xy_p * d_Rc_zz_o0_t1_m0_l0;
						m_Rc_zz_o0_t0_l0_p = (-0.5) * gammacu_xx_p * d_Rc_zz_o0_t0_m0_l0;
						Rc_zz_p = ((((((((((((((m_Rc_zz_o0_t0_l0_p + m_Rc_zz_o0_t1_l0_p) + m_Rc_zz_o0_t2_l0_p) + m_Rc_zz_o0_t3_l0_p) + m_Rc_zz_o0_t4_l0_p) + m_Rc_zz_o0_t5_l0_p) + m_Rc_zz_o0_t6_l0_p) + m_Rc_zz_o0_t7_l0_p) + m_Rc_zz_o0_t8_l0_p) + m_Rc_zz_o0_t9_l0_p) + m_Rc_zz_o0_t10_l0_p) + m_Rc_zz_o0_t11_l0_p) + m_Rc_zz_o0_t9_l0_p) + m_Rc_zz_o0_t10_l0_p) + m_Rc_zz_o0_t11_l0_p) + d_Rc_zz_o0_t15_m0_l0_p;
						Au_xx_p = gammacu_xx_p * Am_xx_p + gammacu_xy_p * Am_xy_p + gammacu_xz_p * Am_xz_p;
						gammau_zx_p = gammau_xz_p;
						m_dalpha_xx_o0_t14_l0_p = 2.0 * gamma_xx_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xx_o0_t13_l0_p = 2.0 * gamma_xx_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xx_o0_t12_l0_p = 2.0 * gamma_xx_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xx_o0_t11_l0_p = 2.0 * gamma_xx_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xx_o0_t10_l0_p = 2.0 * gamma_xx_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xx_o0_t9_l0_p = 2.0 * gamma_xx_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xx_o0_t8_l0_p = 2.0 * gamma_xx_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xx_o0_t7_l0_p = 2.0 * gamma_xx_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xx_o0_t6_l0_p = 2.0 * gamma_xx_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xx_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xx_o0_t3_l0_p = (-1.0) * C_zxx_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xx_o0_t2_l0_p = (-1.0) * C_yxx_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xx_o0_t1_l0_p = (-1.0) * C_xxx_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_xx_p = (((((((((((((d_dalpha_xx_o0_t0_m0_l0 + m_dalpha_xx_o0_t1_l0_p) + m_dalpha_xx_o0_t2_l0_p) + m_dalpha_xx_o0_t3_l0_p) + m_dalpha_xx_o0_t4_l0_p) + m_dalpha_xx_o0_t4_l0_p) + m_dalpha_xx_o0_t6_l0_p) + m_dalpha_xx_o0_t7_l0_p) + m_dalpha_xx_o0_t8_l0_p) + m_dalpha_xx_o0_t9_l0_p) + m_dalpha_xx_o0_t10_l0_p) + m_dalpha_xx_o0_t11_l0_p) + m_dalpha_xx_o0_t12_l0_p) + m_dalpha_xx_o0_t13_l0_p) + m_dalpha_xx_o0_t14_l0_p;
						m_dalpha_xz_o0_t14_l0_p = 2.0 * gamma_xz_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xz_o0_t13_l0_p = 2.0 * gamma_xz_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xz_o0_t12_l0_p = 2.0 * gamma_xz_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xz_o0_t11_l0_p = 2.0 * gamma_xz_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xz_o0_t10_l0_p = 2.0 * gamma_xz_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xz_o0_t9_l0_p = 2.0 * gamma_xz_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xz_o0_t8_l0_p = 2.0 * gamma_xz_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xz_o0_t7_l0_p = 2.0 * gamma_xz_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xz_o0_t6_l0_p = 2.0 * gamma_xz_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xz_o0_t5_l0_p = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xz_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xz_o0_t3_l0_p = (-1.0) * C_zxz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xz_o0_t2_l0_p = (-1.0) * C_yxz_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xz_o0_t1_l0_p = (-1.0) * C_xxz_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_xz_p = (((((((((((((d_dalpha_xz_o0_t0_m0_l0 + m_dalpha_xz_o0_t1_l0_p) + m_dalpha_xz_o0_t2_l0_p) + m_dalpha_xz_o0_t3_l0_p) + m_dalpha_xz_o0_t4_l0_p) + m_dalpha_xz_o0_t5_l0_p) + m_dalpha_xz_o0_t6_l0_p) + m_dalpha_xz_o0_t7_l0_p) + m_dalpha_xz_o0_t8_l0_p) + m_dalpha_xz_o0_t9_l0_p) + m_dalpha_xz_o0_t10_l0_p) + m_dalpha_xz_o0_t11_l0_p) + m_dalpha_xz_o0_t12_l0_p) + m_dalpha_xz_o0_t13_l0_p) + m_dalpha_xz_o0_t14_l0_p;
						m_dalpha_xy_o0_t14_l0_p = 2.0 * gamma_xy_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xy_o0_t13_l0_p = 2.0 * gamma_xy_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xy_o0_t12_l0_p = 2.0 * gamma_xy_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xy_o0_t11_l0_p = 2.0 * gamma_xy_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xy_o0_t10_l0_p = 2.0 * gamma_xy_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xy_o0_t9_l0_p = 2.0 * gamma_xy_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xy_o0_t8_l0_p = 2.0 * gamma_xy_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xy_o0_t7_l0_p = 2.0 * gamma_xy_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xy_o0_t6_l0_p = 2.0 * gamma_xy_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xy_o0_t5_l0_p = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xy_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_xy_o0_t3_l0_p = (-1.0) * C_zxy_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_xy_o0_t2_l0_p = (-1.0) * C_yxy_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_xy_o0_t1_l0_p = (-1.0) * C_xxy_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_xy_p = (((((((((((((d_dalpha_xy_o0_t0_m0_l0 + m_dalpha_xy_o0_t1_l0_p) + m_dalpha_xy_o0_t2_l0_p) + m_dalpha_xy_o0_t3_l0_p) + m_dalpha_xy_o0_t4_l0_p) + m_dalpha_xy_o0_t5_l0_p) + m_dalpha_xy_o0_t6_l0_p) + m_dalpha_xy_o0_t7_l0_p) + m_dalpha_xy_o0_t8_l0_p) + m_dalpha_xy_o0_t9_l0_p) + m_dalpha_xy_o0_t10_l0_p) + m_dalpha_xy_o0_t11_l0_p) + m_dalpha_xy_o0_t12_l0_p) + m_dalpha_xy_o0_t13_l0_p) + m_dalpha_xy_o0_t14_l0_p;
						m_Rp_xx_o0_t49_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t48_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t47_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t46_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t45_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t44_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t43_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t42_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t41_l0_p = (-4.0) * vector(gammac_xx_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t39_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t38_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t37_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t36_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t35_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t34_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t33_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t32_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t31_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t30_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t29_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t28_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t27_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t26_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t25_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t24_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t23_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t22_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t21_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t20_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t19_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t18_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t17_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t16_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t15_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t14_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t13_l0_p = 2.0 * vector(gammac_xx_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t12_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t11_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_xx_o0_t10_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_xx_o0_t9_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t8_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_xx_o0_t7_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_xx_o0_t6_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_xx_o0_t5_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_xx_o0_t4_l0_p = (-2.0) * vector(gammac_xx_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_xx_o0_t3_l0_p = 2.0 * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xx_o0_t2_l0_p = 2.0 * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xx_o0_t1_l0_p = 2.0 * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xx_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
						Rp_xx_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xx_o0_t0_l0_p + m_Rp_xx_o0_t1_l0_p) + m_Rp_xx_o0_t2_l0_p) + m_Rp_xx_o0_t3_l0_p) + m_Rp_xx_o0_t4_l0_p) + m_Rp_xx_o0_t5_l0_p) + m_Rp_xx_o0_t6_l0_p) + m_Rp_xx_o0_t7_l0_p) + m_Rp_xx_o0_t8_l0_p) + m_Rp_xx_o0_t9_l0_p) + m_Rp_xx_o0_t10_l0_p) + m_Rp_xx_o0_t11_l0_p) + m_Rp_xx_o0_t12_l0_p) + m_Rp_xx_o0_t13_l0_p) + m_Rp_xx_o0_t14_l0_p) + m_Rp_xx_o0_t15_l0_p) + m_Rp_xx_o0_t16_l0_p) + m_Rp_xx_o0_t17_l0_p) + m_Rp_xx_o0_t18_l0_p) + m_Rp_xx_o0_t19_l0_p) + m_Rp_xx_o0_t20_l0_p) + m_Rp_xx_o0_t21_l0_p) + m_Rp_xx_o0_t22_l0_p) + m_Rp_xx_o0_t23_l0_p) + m_Rp_xx_o0_t24_l0_p) + m_Rp_xx_o0_t25_l0_p) + m_Rp_xx_o0_t26_l0_p) + m_Rp_xx_o0_t27_l0_p) + m_Rp_xx_o0_t28_l0_p) + m_Rp_xx_o0_t29_l0_p) + m_Rp_xx_o0_t30_l0_p) + m_Rp_xx_o0_t31_l0_p) + m_Rp_xx_o0_t32_l0_p) + m_Rp_xx_o0_t33_l0_p) + m_Rp_xx_o0_t34_l0_p) + m_Rp_xx_o0_t35_l0_p) + m_Rp_xx_o0_t36_l0_p) + m_Rp_xx_o0_t37_l0_p) + m_Rp_xx_o0_t38_l0_p) + m_Rp_xx_o0_t39_l0_p) + m_Rp_xx_o0_t40_l0_p) + m_Rp_xx_o0_t41_l0_p) + m_Rp_xx_o0_t42_l0_p) + m_Rp_xx_o0_t43_l0_p) + m_Rp_xx_o0_t44_l0_p) + m_Rp_xx_o0_t45_l0_p) + m_Rp_xx_o0_t46_l0_p) + m_Rp_xx_o0_t47_l0_p) + m_Rp_xx_o0_t48_l0_p) + m_Rp_xx_o0_t49_l0_p;
						m_Rp_zz_o0_t49_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t48_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t47_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t46_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t45_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t44_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t43_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t42_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t41_l0_p = (-4.0) * vector(gammac_zz_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t39_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t38_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t37_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t36_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t35_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t34_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t33_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t32_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t31_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t30_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t29_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t28_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t27_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t26_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t25_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t24_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t23_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t22_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t21_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t20_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t19_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t18_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t17_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t16_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t15_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t14_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t13_l0_p = 2.0 * vector(gammac_zz_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t12_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t11_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_zz_o0_t10_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_zz_o0_t9_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t8_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_zz_o0_t7_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_zz_o0_t6_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_zz_o0_t5_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_zz_o0_t4_l0_p = (-2.0) * vector(gammac_zz_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_zz_o0_t3_l0_p = 2.0 * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_zz_o0_t2_l0_p = 2.0 * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_zz_o0_t1_l0_p = 2.0 * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_zz_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
						Rp_zz_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_zz_o0_t0_l0_p + m_Rp_zz_o0_t1_l0_p) + m_Rp_zz_o0_t2_l0_p) + m_Rp_zz_o0_t3_l0_p) + m_Rp_zz_o0_t4_l0_p) + m_Rp_zz_o0_t5_l0_p) + m_Rp_zz_o0_t6_l0_p) + m_Rp_zz_o0_t7_l0_p) + m_Rp_zz_o0_t8_l0_p) + m_Rp_zz_o0_t9_l0_p) + m_Rp_zz_o0_t10_l0_p) + m_Rp_zz_o0_t11_l0_p) + m_Rp_zz_o0_t12_l0_p) + m_Rp_zz_o0_t13_l0_p) + m_Rp_zz_o0_t14_l0_p) + m_Rp_zz_o0_t15_l0_p) + m_Rp_zz_o0_t16_l0_p) + m_Rp_zz_o0_t17_l0_p) + m_Rp_zz_o0_t18_l0_p) + m_Rp_zz_o0_t19_l0_p) + m_Rp_zz_o0_t20_l0_p) + m_Rp_zz_o0_t21_l0_p) + m_Rp_zz_o0_t22_l0_p) + m_Rp_zz_o0_t23_l0_p) + m_Rp_zz_o0_t24_l0_p) + m_Rp_zz_o0_t25_l0_p) + m_Rp_zz_o0_t26_l0_p) + m_Rp_zz_o0_t27_l0_p) + m_Rp_zz_o0_t28_l0_p) + m_Rp_zz_o0_t29_l0_p) + m_Rp_zz_o0_t30_l0_p) + m_Rp_zz_o0_t31_l0_p) + m_Rp_zz_o0_t32_l0_p) + m_Rp_zz_o0_t33_l0_p) + m_Rp_zz_o0_t34_l0_p) + m_Rp_zz_o0_t35_l0_p) + m_Rp_zz_o0_t36_l0_p) + m_Rp_zz_o0_t37_l0_p) + m_Rp_zz_o0_t38_l0_p) + m_Rp_zz_o0_t39_l0_p) + m_Rp_zz_o0_t40_l0_p) + m_Rp_zz_o0_t41_l0_p) + m_Rp_zz_o0_t42_l0_p) + m_Rp_zz_o0_t43_l0_p) + m_Rp_zz_o0_t44_l0_p) + m_Rp_zz_o0_t45_l0_p) + m_Rp_zz_o0_t46_l0_p) + m_Rp_zz_o0_t47_l0_p) + m_Rp_zz_o0_t48_l0_p) + m_Rp_zz_o0_t49_l0_p;
						R_zz_p = Rc_zz_p + Rp_zz_p;
						R_xx_p = Rc_xx_p + Rp_xx_p;
						m_Rp_xy_o0_t49_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t48_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t47_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t46_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t45_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t44_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t43_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t42_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t41_l0_p = (-4.0) * vector(gammac_xy_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t39_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t38_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t37_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t36_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t35_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t34_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t33_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t32_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t31_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t30_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t29_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t28_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t27_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t26_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t25_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t24_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t23_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t22_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t21_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t20_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t19_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t18_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t17_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t16_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t15_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t14_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t13_l0_p = 2.0 * vector(gammac_xy_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t12_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t11_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_xy_o0_t10_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_xy_o0_t9_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t8_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_xy_o0_t7_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_xy_o0_t6_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_xy_o0_t5_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_xy_o0_t4_l0_p = (-2.0) * vector(gammac_xy_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_xy_o0_t3_l0_p = 2.0 * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xy_o0_t2_l0_p = 2.0 * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xy_o0_t1_l0_p = 2.0 * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xy_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
						Rp_xy_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xy_o0_t0_l0_p + m_Rp_xy_o0_t1_l0_p) + m_Rp_xy_o0_t2_l0_p) + m_Rp_xy_o0_t3_l0_p) + m_Rp_xy_o0_t4_l0_p) + m_Rp_xy_o0_t5_l0_p) + m_Rp_xy_o0_t6_l0_p) + m_Rp_xy_o0_t7_l0_p) + m_Rp_xy_o0_t8_l0_p) + m_Rp_xy_o0_t9_l0_p) + m_Rp_xy_o0_t10_l0_p) + m_Rp_xy_o0_t11_l0_p) + m_Rp_xy_o0_t12_l0_p) + m_Rp_xy_o0_t13_l0_p) + m_Rp_xy_o0_t14_l0_p) + m_Rp_xy_o0_t15_l0_p) + m_Rp_xy_o0_t16_l0_p) + m_Rp_xy_o0_t17_l0_p) + m_Rp_xy_o0_t18_l0_p) + m_Rp_xy_o0_t19_l0_p) + m_Rp_xy_o0_t20_l0_p) + m_Rp_xy_o0_t21_l0_p) + m_Rp_xy_o0_t22_l0_p) + m_Rp_xy_o0_t23_l0_p) + m_Rp_xy_o0_t24_l0_p) + m_Rp_xy_o0_t25_l0_p) + m_Rp_xy_o0_t26_l0_p) + m_Rp_xy_o0_t27_l0_p) + m_Rp_xy_o0_t28_l0_p) + m_Rp_xy_o0_t29_l0_p) + m_Rp_xy_o0_t30_l0_p) + m_Rp_xy_o0_t31_l0_p) + m_Rp_xy_o0_t32_l0_p) + m_Rp_xy_o0_t33_l0_p) + m_Rp_xy_o0_t34_l0_p) + m_Rp_xy_o0_t35_l0_p) + m_Rp_xy_o0_t36_l0_p) + m_Rp_xy_o0_t37_l0_p) + m_Rp_xy_o0_t38_l0_p) + m_Rp_xy_o0_t39_l0_p) + m_Rp_xy_o0_t40_l0_p) + m_Rp_xy_o0_t41_l0_p) + m_Rp_xy_o0_t42_l0_p) + m_Rp_xy_o0_t43_l0_p) + m_Rp_xy_o0_t44_l0_p) + m_Rp_xy_o0_t45_l0_p) + m_Rp_xy_o0_t46_l0_p) + m_Rp_xy_o0_t47_l0_p) + m_Rp_xy_o0_t48_l0_p) + m_Rp_xy_o0_t49_l0_p;
						R_xy_p = Rc_xy_p + Rp_xy_p;
						m_Rp_xz_o0_t49_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t48_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t47_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t46_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t45_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t44_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t43_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t42_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t41_l0_p = (-4.0) * vector(gammac_xz_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t39_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t38_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t37_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t36_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t35_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t34_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t33_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t32_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t31_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t30_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t29_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t28_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t27_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t26_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t25_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t24_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t23_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t22_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t21_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t20_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t19_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t18_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t17_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t16_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t15_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t14_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t13_l0_p = 2.0 * vector(gammac_xz_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t12_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t11_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_xz_o0_t10_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_xz_o0_t9_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t8_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_xz_o0_t7_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_xz_o0_t6_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_xz_o0_t5_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_xz_o0_t4_l0_p = (-2.0) * vector(gammac_xz_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_xz_o0_t3_l0_p = 2.0 * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_xz_o0_t2_l0_p = 2.0 * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_xz_o0_t1_l0_p = 2.0 * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_xz_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
						Rp_xz_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xz_o0_t0_l0_p + m_Rp_xz_o0_t1_l0_p) + m_Rp_xz_o0_t2_l0_p) + m_Rp_xz_o0_t3_l0_p) + m_Rp_xz_o0_t4_l0_p) + m_Rp_xz_o0_t5_l0_p) + m_Rp_xz_o0_t6_l0_p) + m_Rp_xz_o0_t7_l0_p) + m_Rp_xz_o0_t8_l0_p) + m_Rp_xz_o0_t9_l0_p) + m_Rp_xz_o0_t10_l0_p) + m_Rp_xz_o0_t11_l0_p) + m_Rp_xz_o0_t12_l0_p) + m_Rp_xz_o0_t13_l0_p) + m_Rp_xz_o0_t14_l0_p) + m_Rp_xz_o0_t15_l0_p) + m_Rp_xz_o0_t16_l0_p) + m_Rp_xz_o0_t17_l0_p) + m_Rp_xz_o0_t18_l0_p) + m_Rp_xz_o0_t19_l0_p) + m_Rp_xz_o0_t20_l0_p) + m_Rp_xz_o0_t21_l0_p) + m_Rp_xz_o0_t22_l0_p) + m_Rp_xz_o0_t23_l0_p) + m_Rp_xz_o0_t24_l0_p) + m_Rp_xz_o0_t25_l0_p) + m_Rp_xz_o0_t26_l0_p) + m_Rp_xz_o0_t27_l0_p) + m_Rp_xz_o0_t28_l0_p) + m_Rp_xz_o0_t29_l0_p) + m_Rp_xz_o0_t30_l0_p) + m_Rp_xz_o0_t31_l0_p) + m_Rp_xz_o0_t32_l0_p) + m_Rp_xz_o0_t33_l0_p) + m_Rp_xz_o0_t34_l0_p) + m_Rp_xz_o0_t35_l0_p) + m_Rp_xz_o0_t36_l0_p) + m_Rp_xz_o0_t37_l0_p) + m_Rp_xz_o0_t38_l0_p) + m_Rp_xz_o0_t39_l0_p) + m_Rp_xz_o0_t40_l0_p) + m_Rp_xz_o0_t41_l0_p) + m_Rp_xz_o0_t42_l0_p) + m_Rp_xz_o0_t43_l0_p) + m_Rp_xz_o0_t44_l0_p) + m_Rp_xz_o0_t45_l0_p) + m_Rp_xz_o0_t46_l0_p) + m_Rp_xz_o0_t47_l0_p) + m_Rp_xz_o0_t48_l0_p) + m_Rp_xz_o0_t49_l0_p;
						R_xz_p = Rc_xz_p + Rp_xz_p;
						m_Rp_yy_o0_t49_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t48_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t47_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t46_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t45_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t44_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t43_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t42_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t41_l0_p = (-4.0) * vector(gammac_yy_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t39_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t38_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t37_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t36_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t35_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t34_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t33_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t32_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t31_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t30_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t29_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t28_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t27_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t26_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t25_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t24_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t23_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t22_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t21_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t20_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t19_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t18_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t17_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t16_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t15_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t14_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t13_l0_p = 2.0 * vector(gammac_yy_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t12_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t11_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_yy_o0_t10_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_yy_o0_t9_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t8_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_yy_o0_t7_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_yy_o0_t6_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_yy_o0_t5_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_yy_o0_t4_l0_p = (-2.0) * vector(gammac_yy_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_yy_o0_t3_l0_p = 2.0 * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yy_o0_t2_l0_p = 2.0 * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yy_o0_t1_l0_p = 2.0 * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yy_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
						Rp_yy_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yy_o0_t0_l0_p + m_Rp_yy_o0_t1_l0_p) + m_Rp_yy_o0_t2_l0_p) + m_Rp_yy_o0_t3_l0_p) + m_Rp_yy_o0_t4_l0_p) + m_Rp_yy_o0_t5_l0_p) + m_Rp_yy_o0_t6_l0_p) + m_Rp_yy_o0_t7_l0_p) + m_Rp_yy_o0_t8_l0_p) + m_Rp_yy_o0_t9_l0_p) + m_Rp_yy_o0_t10_l0_p) + m_Rp_yy_o0_t11_l0_p) + m_Rp_yy_o0_t12_l0_p) + m_Rp_yy_o0_t13_l0_p) + m_Rp_yy_o0_t14_l0_p) + m_Rp_yy_o0_t15_l0_p) + m_Rp_yy_o0_t16_l0_p) + m_Rp_yy_o0_t17_l0_p) + m_Rp_yy_o0_t18_l0_p) + m_Rp_yy_o0_t19_l0_p) + m_Rp_yy_o0_t20_l0_p) + m_Rp_yy_o0_t21_l0_p) + m_Rp_yy_o0_t22_l0_p) + m_Rp_yy_o0_t23_l0_p) + m_Rp_yy_o0_t24_l0_p) + m_Rp_yy_o0_t25_l0_p) + m_Rp_yy_o0_t26_l0_p) + m_Rp_yy_o0_t27_l0_p) + m_Rp_yy_o0_t28_l0_p) + m_Rp_yy_o0_t29_l0_p) + m_Rp_yy_o0_t30_l0_p) + m_Rp_yy_o0_t31_l0_p) + m_Rp_yy_o0_t32_l0_p) + m_Rp_yy_o0_t33_l0_p) + m_Rp_yy_o0_t34_l0_p) + m_Rp_yy_o0_t35_l0_p) + m_Rp_yy_o0_t36_l0_p) + m_Rp_yy_o0_t37_l0_p) + m_Rp_yy_o0_t38_l0_p) + m_Rp_yy_o0_t39_l0_p) + m_Rp_yy_o0_t40_l0_p) + m_Rp_yy_o0_t41_l0_p) + m_Rp_yy_o0_t42_l0_p) + m_Rp_yy_o0_t43_l0_p) + m_Rp_yy_o0_t44_l0_p) + m_Rp_yy_o0_t45_l0_p) + m_Rp_yy_o0_t46_l0_p) + m_Rp_yy_o0_t47_l0_p) + m_Rp_yy_o0_t48_l0_p) + m_Rp_yy_o0_t49_l0_p;
						R_yy_p = Rc_yy_p + Rp_yy_p;
						m_Rp_yz_o0_t49_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t48_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_zy_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t47_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_zx_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t46_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_yz_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t45_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t44_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_yx_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t43_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_xz_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t42_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_xy_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t41_l0_p = (-4.0) * vector(gammac_yz_p, i, j, k) * gammacu_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t40_l0_p = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t39_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zz_p * C_zzz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t38_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zz_p * C_yzz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t37_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zz_p * C_xzz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t36_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zy_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t35_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zy_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t34_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zy_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t33_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zx_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t32_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zx_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t31_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_zx_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t30_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yz_p * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t29_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yz_p * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t28_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yz_p * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t27_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yy_p * C_zyy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t26_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yy_p * C_yyy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t25_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yy_p * C_xyy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t24_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yx_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t23_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yx_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t22_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_yx_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t21_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xz_p * C_zxz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t20_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xz_p * C_yxz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t19_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xz_p * C_xxz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t18_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xy_p * C_zxy_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t17_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xy_p * C_yxy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t16_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xy_p * C_xxy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t15_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xx_p * C_zxx_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t14_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xx_p * C_yxx_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t13_l0_p = 2.0 * vector(gammac_yz_p, i, j, k) * gammacu_xx_p * C_xxx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t12_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_zz_p * d_Rp_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t11_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_zy_p * d_Rp_xx_o0_t11_m0_l0;
						m_Rp_yz_o0_t10_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_zx_p * d_Rp_xx_o0_t10_m0_l0;
						m_Rp_yz_o0_t9_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_yz_p * d_Rp_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t8_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_yy_p * d_Rp_xx_o0_t8_m0_l0;
						m_Rp_yz_o0_t7_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_yx_p * d_Rp_xx_o0_t7_m0_l0;
						m_Rp_yz_o0_t6_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_xz_p * d_Rp_xx_o0_t6_m0_l0;
						m_Rp_yz_o0_t5_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_xy_p * d_Rp_xx_o0_t5_m0_l0;
						m_Rp_yz_o0_t4_l0_p = (-2.0) * vector(gammac_yz_p, i, j, k) * gammacu_xx_p * d_Rp_xx_o0_t0_m0_l0;
						m_Rp_yz_o0_t3_l0_p = 2.0 * C_zyz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Rp_yz_o0_t2_l0_p = 2.0 * C_yyz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Rp_yz_o0_t1_l0_p = 2.0 * C_xyz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Rp_yz_o0_t0_l0_p = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
						Rp_yz_p = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yz_o0_t0_l0_p + m_Rp_yz_o0_t1_l0_p) + m_Rp_yz_o0_t2_l0_p) + m_Rp_yz_o0_t3_l0_p) + m_Rp_yz_o0_t4_l0_p) + m_Rp_yz_o0_t5_l0_p) + m_Rp_yz_o0_t6_l0_p) + m_Rp_yz_o0_t7_l0_p) + m_Rp_yz_o0_t8_l0_p) + m_Rp_yz_o0_t9_l0_p) + m_Rp_yz_o0_t10_l0_p) + m_Rp_yz_o0_t11_l0_p) + m_Rp_yz_o0_t12_l0_p) + m_Rp_yz_o0_t13_l0_p) + m_Rp_yz_o0_t14_l0_p) + m_Rp_yz_o0_t15_l0_p) + m_Rp_yz_o0_t16_l0_p) + m_Rp_yz_o0_t17_l0_p) + m_Rp_yz_o0_t18_l0_p) + m_Rp_yz_o0_t19_l0_p) + m_Rp_yz_o0_t20_l0_p) + m_Rp_yz_o0_t21_l0_p) + m_Rp_yz_o0_t22_l0_p) + m_Rp_yz_o0_t23_l0_p) + m_Rp_yz_o0_t24_l0_p) + m_Rp_yz_o0_t25_l0_p) + m_Rp_yz_o0_t26_l0_p) + m_Rp_yz_o0_t27_l0_p) + m_Rp_yz_o0_t28_l0_p) + m_Rp_yz_o0_t29_l0_p) + m_Rp_yz_o0_t30_l0_p) + m_Rp_yz_o0_t31_l0_p) + m_Rp_yz_o0_t32_l0_p) + m_Rp_yz_o0_t33_l0_p) + m_Rp_yz_o0_t34_l0_p) + m_Rp_yz_o0_t35_l0_p) + m_Rp_yz_o0_t36_l0_p) + m_Rp_yz_o0_t37_l0_p) + m_Rp_yz_o0_t38_l0_p) + m_Rp_yz_o0_t39_l0_p) + m_Rp_yz_o0_t40_l0_p) + m_Rp_yz_o0_t41_l0_p) + m_Rp_yz_o0_t42_l0_p) + m_Rp_yz_o0_t43_l0_p) + m_Rp_yz_o0_t44_l0_p) + m_Rp_yz_o0_t45_l0_p) + m_Rp_yz_o0_t46_l0_p) + m_Rp_yz_o0_t47_l0_p) + m_Rp_yz_o0_t48_l0_p) + m_Rp_yz_o0_t49_l0_p;
						R_yz_p = Rc_yz_p + Rp_yz_p;
						R_p = gammau_xx_p * R_xx_p + gammau_yy_p * R_yy_p + gammau_zz_p * R_zz_p + 2.0 * (gammau_xy_p * R_xy_p + gammau_xz_p * R_xz_p + gammau_yz_p * R_yz_p);
						m_dalpha_yz_o0_t14_l0_p = 2.0 * gamma_yz_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yz_o0_t13_l0_p = 2.0 * gamma_yz_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yz_o0_t12_l0_p = 2.0 * gamma_yz_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yz_o0_t11_l0_p = 2.0 * gamma_yz_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yz_o0_t10_l0_p = 2.0 * gamma_yz_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yz_o0_t9_l0_p = 2.0 * gamma_yz_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yz_o0_t8_l0_p = 2.0 * gamma_yz_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yz_o0_t7_l0_p = 2.0 * gamma_yz_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yz_o0_t6_l0_p = 2.0 * gamma_yz_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yz_o0_t5_l0_p = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yz_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yz_o0_t3_l0_p = (-1.0) * C_zyz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yz_o0_t2_l0_p = (-1.0) * C_yyz_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yz_o0_t1_l0_p = (-1.0) * C_xyz_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_yz_p = (((((((((((((d_dalpha_yz_o0_t0_m0_l0 + m_dalpha_yz_o0_t1_l0_p) + m_dalpha_yz_o0_t2_l0_p) + m_dalpha_yz_o0_t3_l0_p) + m_dalpha_yz_o0_t4_l0_p) + m_dalpha_yz_o0_t5_l0_p) + m_dalpha_yz_o0_t6_l0_p) + m_dalpha_yz_o0_t7_l0_p) + m_dalpha_yz_o0_t8_l0_p) + m_dalpha_yz_o0_t9_l0_p) + m_dalpha_yz_o0_t10_l0_p) + m_dalpha_yz_o0_t11_l0_p) + m_dalpha_yz_o0_t12_l0_p) + m_dalpha_yz_o0_t13_l0_p) + m_dalpha_yz_o0_t14_l0_p;
						m_dalpha_yy_o0_t14_l0_p = 2.0 * gamma_yy_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yy_o0_t13_l0_p = 2.0 * gamma_yy_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yy_o0_t12_l0_p = 2.0 * gamma_yy_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yy_o0_t11_l0_p = 2.0 * gamma_yy_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yy_o0_t10_l0_p = 2.0 * gamma_yy_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yy_o0_t9_l0_p = 2.0 * gamma_yy_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yy_o0_t8_l0_p = 2.0 * gamma_yy_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yy_o0_t7_l0_p = 2.0 * gamma_yy_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yy_o0_t6_l0_p = 2.0 * gamma_yy_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_yy_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yy_o0_t3_l0_p = (-1.0) * C_zyy_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_yy_o0_t2_l0_p = (-1.0) * C_yyy_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_yy_o0_t1_l0_p = (-1.0) * C_xyy_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_yy_p = (((((((((((((d_dalpha_yy_o0_t0_m0_l0 + m_dalpha_yy_o0_t1_l0_p) + m_dalpha_yy_o0_t2_l0_p) + m_dalpha_yy_o0_t3_l0_p) + m_dalpha_yy_o0_t4_l0_p) + m_dalpha_yy_o0_t4_l0_p) + m_dalpha_yy_o0_t6_l0_p) + m_dalpha_yy_o0_t7_l0_p) + m_dalpha_yy_o0_t8_l0_p) + m_dalpha_yy_o0_t9_l0_p) + m_dalpha_yy_o0_t10_l0_p) + m_dalpha_yy_o0_t11_l0_p) + m_dalpha_yy_o0_t12_l0_p) + m_dalpha_yy_o0_t13_l0_p) + m_dalpha_yy_o0_t14_l0_p;
						m_dalpha_zz_o0_t14_l0_p = 2.0 * gamma_zz_p * gammau_zz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_zz_o0_t13_l0_p = 2.0 * gamma_zz_p * gammau_yz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_zz_o0_t12_l0_p = 2.0 * gamma_zz_p * gammau_xz_p * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_zz_o0_t11_l0_p = 2.0 * gamma_zz_p * gammau_zy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_zz_o0_t10_l0_p = 2.0 * gamma_zz_p * gammau_yy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_zz_o0_t9_l0_p = 2.0 * gamma_zz_p * gammau_xy_p * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_zz_o0_t8_l0_p = 2.0 * gamma_zz_p * gammau_zx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_zz_o0_t7_l0_p = 2.0 * gamma_zz_p * gammau_yx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_zz_o0_t6_l0_p = 2.0 * gamma_zz_p * gammau_xx_p * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						m_dalpha_zz_o0_t4_l0_p = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_zz_o0_t3_l0_p = (-1.0) * C_zzz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_dalpha_zz_o0_t2_l0_p = (-1.0) * C_yzz_p * d_dalpha_xx_o0_t2_m0_l0;
						m_dalpha_zz_o0_t1_l0_p = (-1.0) * C_xzz_p * d_dalpha_xx_o0_t1_m0_l0;
						dalpha_zz_p = (((((((((((((d_dalpha_zz_o0_t0_m0_l0 + m_dalpha_zz_o0_t1_l0_p) + m_dalpha_zz_o0_t2_l0_p) + m_dalpha_zz_o0_t3_l0_p) + m_dalpha_zz_o0_t4_l0_p) + m_dalpha_zz_o0_t4_l0_p) + m_dalpha_zz_o0_t6_l0_p) + m_dalpha_zz_o0_t7_l0_p) + m_dalpha_zz_o0_t8_l0_p) + m_dalpha_zz_o0_t9_l0_p) + m_dalpha_zz_o0_t10_l0_p) + m_dalpha_zz_o0_t11_l0_p) + m_dalpha_zz_o0_t12_l0_p) + m_dalpha_zz_o0_t13_l0_p) + m_dalpha_zz_o0_t14_l0_p;
						trdalpha_p = gammau_xx_p * dalpha_xx_p + 2.0 * gammau_xy_p * dalpha_xy_p + 2.0 * gammau_xz_p * dalpha_xz_p + gammau_yy_p * dalpha_yy_p + 2.0 * gammau_yz_p * dalpha_yz_p + gammau_zz_p * dalpha_zz_p;
						Psi1TF_yz_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_yz_p) + vector(alpha_p, i, j, k) * R_yz_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						Psi1TF_yy_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_yy_p) + vector(alpha_p, i, j, k) * R_yy_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						Psi1TF_xy_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_xy_p) + vector(alpha_p, i, j, k) * R_xy_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						Psi1TF_xx_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_xx_p) + vector(alpha_p, i, j, k) * R_xx_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						Psi1TF_xz_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_xz_p) + vector(alpha_p, i, j, k) * R_xz_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						Psi1TF_zz_p = exp(-4.0 * vector(Phi_p, i, j, k)) * ((-dalpha_zz_p) + vector(alpha_p, i, j, k) * R_zz_p + 1.0 / 3.0 * trdalpha_p - 1.0 / 3.0 * vector(alpha_p, i, j, k) * R_p);
						d_gammac_xx_o2_t3_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_xx_p, i, j, k) + (-0.6666666666666667) * vector(gammac_xx_p, i, j, k) * div_beta_p;
						d_gammac_xy_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_xy_p, i, j, k) + (-0.6666666666666667) * vector(gammac_xy_p, i, j, k) * div_beta_p;
						d_gammac_xz_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_xz_p, i, j, k) + (-0.6666666666666667) * vector(gammac_xz_p, i, j, k) * div_beta_p;
						d_gammac_yy_o2_t3_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_yy_p, i, j, k) + (-0.6666666666666667) * vector(gammac_yy_p, i, j, k) * div_beta_p;
						d_gammac_yx_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_xy_p, i, j, k) + (-0.6666666666666667) * vector(gammac_yx_p, i, j, k) * div_beta_p;
						d_gammac_yz_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_yz_p, i, j, k) + (-0.6666666666666667) * vector(gammac_yz_p, i, j, k) * div_beta_p;
						d_gammac_zz_o2_t3_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_zz_p, i, j, k) + (-0.6666666666666667) * vector(gammac_zz_p, i, j, k) * div_beta_p;
						d_gammac_zx_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_xz_p, i, j, k) + (-0.6666666666666667) * vector(gammac_zx_p, i, j, k) * div_beta_p;
						d_gammac_zy_o2_t6_m0_l0 = (-2.0) * vector(alpha_p, i, j, k) * vector(A_yz_p, i, j, k) + (-0.6666666666666667) * vector(gammac_zy_p, i, j, k) * div_beta_p;
						d_A_xx_o2_t3_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_xx_p, i, j, k) - 2.0 * (vector(A_xx_p, i, j, k) * Am_xx_p + vector(A_xy_p, i, j, k) * Am_yx_p + vector(A_xz_p, i, j, k) * Am_zx_p)) + Psi1TF_xx_p + (-0.6666666666666667) * vector(A_xx_p, i, j, k) * div_beta_p;
						d_A_xy_o2_t6_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_xy_p, i, j, k) - 2.0 * (vector(A_xx_p, i, j, k) * Am_xy_p + vector(A_xy_p, i, j, k) * Am_yy_p + vector(A_xz_p, i, j, k) * Am_zy_p)) + Psi1TF_xy_p + (-0.6666666666666667) * vector(A_xy_p, i, j, k) * div_beta_p;
						d_A_xz_o2_t6_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_xz_p, i, j, k) - 2.0 * (vector(A_xx_p, i, j, k) * Am_xz_p + vector(A_xy_p, i, j, k) * Am_yz_p + vector(A_xz_p, i, j, k) * Am_zz_p)) + Psi1TF_xz_p + (-0.6666666666666667) * vector(A_xz_p, i, j, k) * div_beta_p;
						d_A_yy_o2_t3_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_yy_p, i, j, k) - 2.0 * (vector(A_xy_p, i, j, k) * Am_xy_p + vector(A_yy_p, i, j, k) * Am_yy_p + vector(A_yz_p, i, j, k) * Am_zy_p)) + Psi1TF_yy_p + (-0.6666666666666667) * vector(A_yy_p, i, j, k) * div_beta_p;
						d_A_yz_o2_t6_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_yz_p, i, j, k) - 2.0 * (vector(A_xy_p, i, j, k) * Am_xz_p + vector(A_yy_p, i, j, k) * Am_yz_p + vector(A_yz_p, i, j, k) * Am_zz_p)) + Psi1TF_yz_p + (-0.6666666666666667) * vector(A_yz_p, i, j, k) * div_beta_p;
						d_A_zz_o2_t3_m0_l0 = vector(alpha_p, i, j, k) * (vector(trK_p, i, j, k) * vector(A_zz_p, i, j, k) - 2.0 * (vector(A_xz_p, i, j, k) * Am_xz_p + vector(A_yz_p, i, j, k) * Am_yz_p + vector(A_zz_p, i, j, k) * Am_zz_p)) + Psi1TF_zz_p + (-0.6666666666666667) * vector(A_zz_p, i, j, k) * div_beta_p;
						d_Phi_o2_t0_m0_l0 = (-0.16666666666666666) * vector(alpha_p, i, j, k) * vector(trK_p, i, j, k) + 0.1666666666666666 * div_beta_p;
						d_trK_o2_t0_m0_l0 = 0.166666666666666 * div_beta_p + vector(alpha_p, i, j, k) * (vector(A_xx_p, i, j, k) * Au_xx_p + vector(A_yy_p, i, j, k) * Au_yy_p + vector(A_zz_p, i, j, k) * Au_zz_p + 2.0 * (vector(A_xy_p, i, j, k) * Au_xy_p + vector(A_xz_p, i, j, k) * Au_xz_p + vector(A_yz_p, i, j, k) * Au_yz_p) + 0.3333333333333 * (vector(trK_p, i, j, k) * vector(trK_p, i, j, k))) + (-(gammau_xx_p * dalpha_xx_p + gammau_yy_p * dalpha_yy_p + gammau_zz_p * dalpha_zz_p + 2.0 * gammau_xy_p * dalpha_xy_p + 2.0 * gammau_xz_p * dalpha_xz_p + 2.0 * gammau_yz_p * dalpha_yz_p));
						d_beta_x_o0_t0_m0_l0 = 0.0;
						d_alpha_o2_t0_m0_l0 = (-vector(alpha_p, i, j, k) * vector(alpha_p, i, j, k) * falpha_p * vector(trK_p, i, j, k)) + 0.166666666666 * div_beta_p;
						d_Gam_x_o0_t33_m0_l0 = 2.0 * vector(alpha_p, i, j, k) * (C_xxx_p * Au_xx_p + C_xyy_p * Au_yy_p + C_xzz_p * Au_zz_p + 2.0 * C_xxy_p * Au_xy_p + 2.0 * C_xxz_p * Au_xz_p + 2.0 * C_xyz_p * Au_yz_p) + 0.666666666666 * vector(Gam_x_p, i, j, k) * div_beta_p;
						d_Gam_y_o0_t33_m0_l0 = 2.0 * vector(alpha_p, i, j, k) * (C_yxx_p * Au_xx_p + C_yyy_p * Au_yy_p + C_yzz_p * Au_zz_p + 2.0 * C_yxy_p * Au_xy_p + 2.0 * C_yxz_p * Au_xz_p + 2.0 * C_yyz_p * Au_yz_p) + 0.666666666666 * vector(Gam_y_p, i, j, k) * div_beta_p;
						d_Gam_z_o0_t33_m0_l0 = 2.0 * vector(alpha_p, i, j, k) * (C_zxx_p * Au_xx_p + C_zyy_p * Au_yy_p + C_zzz_p * Au_zz_p + 2.0 * C_zxy_p * Au_xy_p + 2.0 * C_zxz_p * Au_xz_p + 2.0 * C_zyz_p * Au_yz_p) + 0.666666666666 * vector(Gam_z_p, i, j, k) * div_beta_p;
						m_Gam_z_o0_t32_l0 = (-2.0) * Au_zz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_z_o0_t31_l0 = (-2.0) * Au_yz_p * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_z_o0_t30_l0 = (-2.0) * Au_xz_p * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_z_o0_t29_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_zz_p * d_Gam_x_o0_t29_m0_l0;
						m_Gam_z_o0_t28_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_zy_p * d_Gam_x_o0_t28_m0_l0;
						m_Gam_z_o0_t27_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_zx_p * d_Gam_x_o0_t27_m0_l0;
						m_Gam_z_o0_t26_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_zz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_z_o0_t25_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_yz_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_z_o0_t24_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_xz_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_z_o0_t23_l0 = (-1.0) * vector(Gam_z_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_Gam_z_o0_t22_l0 = (-1.0) * vector(Gam_y_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_Gam_z_o0_t21_l0 = (-1.0) * vector(Gam_x_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_Gam_z_o0_t20_l0 = vector(beta_z_p, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Gam_z_o0_t19_l0 = vector(beta_y_p, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Gam_z_o0_t18_l0 = vector(beta_x_p, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Gam_z_o0_t17_l0 = 0.3333333333333 * gammacu_zz_p * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t16_l0 = 0.3333333333333 * gammacu_zz_p * d_Gam_x_o0_t16_m0_l0;
						m_Gam_z_o0_t15_l0 = 0.3333333333333 * gammacu_zz_p * d_Gam_x_o0_t6_m0_l0;
						m_Gam_z_o0_t14_l0 = 0.3333333333333 * gammacu_zy_p * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t13_l0 = 0.3333333333333 * gammacu_zy_p * d_Gam_x_o0_t13_m0_l0;
						m_Gam_z_o0_t12_l0 = 0.3333333333333 * gammacu_zy_p * d_Gam_x_o0_t3_m0_l0;
						m_Gam_z_o0_t11_l0 = 0.3333333333333 * gammacu_zx_p * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t10_l0 = 0.3333333333333 * gammacu_zx_p * d_Gam_x_o0_t10_m0_l0;
						m_Gam_z_o0_t9_l0 = 0.3333333333333 * gammacu_zx_p * d_Gam_x_o0_t0_m0_l0;
						m_Gam_z_o0_t8_l0 = gammacu_zz_p * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t7_l0 = gammacu_zy_p * d_Gam_z_o0_t7_m0_l0;
						m_Gam_z_o0_t6_l0 = gammacu_zx_p * d_Gam_z_o0_t6_m0_l0;
						m_Gam_z_o0_t5_l0 = gammacu_yz_p * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t4_l0 = gammacu_yy_p * d_Gam_z_o0_t4_m0_l0;
						m_Gam_z_o0_t3_l0 = gammacu_yx_p * d_Gam_z_o0_t3_m0_l0;
						m_Gam_z_o0_t2_l0 = gammacu_xz_p * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t1_l0 = gammacu_xy_p * d_Gam_z_o0_t1_m0_l0;
						m_Gam_z_o0_t0_l0 = gammacu_xx_p * d_Gam_z_o0_t0_m0_l0;
						m_Gam_y_o0_t32_l0 = (-2.0) * Au_yz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_y_o0_t31_l0 = (-2.0) * Au_yy_p * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_y_o0_t30_l0 = (-2.0) * Au_xy_p * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_y_o0_t29_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_yz_p * d_Gam_x_o0_t29_m0_l0;
						m_Gam_y_o0_t28_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_yy_p * d_Gam_x_o0_t28_m0_l0;
						m_Gam_y_o0_t27_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_yx_p * d_Gam_x_o0_t27_m0_l0;
						m_Gam_y_o0_t26_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_yz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_y_o0_t25_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_yy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_y_o0_t24_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_xy_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_y_o0_t23_l0 = (-1.0) * vector(Gam_z_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_Gam_y_o0_t22_l0 = (-1.0) * vector(Gam_y_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_Gam_y_o0_t21_l0 = (-1.0) * vector(Gam_x_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_Gam_y_o0_t20_l0 = vector(beta_z_p, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Gam_y_o0_t19_l0 = vector(beta_y_p, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Gam_y_o0_t18_l0 = vector(beta_x_p, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Gam_y_o0_t17_l0 = 0.3333333333333 * gammacu_yz_p * d_Gam_x_o0_t17_m0_l0;
						m_Gam_y_o0_t16_l0 = 0.3333333333333 * gammacu_yz_p * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t15_l0 = 0.3333333333333 * gammacu_yz_p * d_Gam_x_o0_t6_m0_l0;
						m_Gam_y_o0_t14_l0 = 0.3333333333333 * gammacu_yy_p * d_Gam_x_o0_t14_m0_l0;
						m_Gam_y_o0_t13_l0 = 0.3333333333333 * gammacu_yy_p * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t12_l0 = 0.3333333333333 * gammacu_yy_p * d_Gam_x_o0_t3_m0_l0;
						m_Gam_y_o0_t11_l0 = 0.3333333333333 * gammacu_yx_p * d_Gam_x_o0_t11_m0_l0;
						m_Gam_y_o0_t10_l0 = 0.3333333333333 * gammacu_yx_p * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t9_l0 = 0.3333333333333 * gammacu_yx_p * d_Gam_x_o0_t0_m0_l0;
						m_Gam_y_o0_t8_l0 = gammacu_zz_p * d_Gam_y_o0_t8_m0_l0;
						m_Gam_y_o0_t7_l0 = gammacu_zy_p * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t6_l0 = gammacu_zx_p * d_Gam_y_o0_t6_m0_l0;
						m_Gam_y_o0_t5_l0 = gammacu_yz_p * d_Gam_y_o0_t5_m0_l0;
						m_Gam_y_o0_t4_l0 = gammacu_yy_p * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t3_l0 = gammacu_yx_p * d_Gam_y_o0_t3_m0_l0;
						m_Gam_y_o0_t2_l0 = gammacu_xz_p * d_Gam_y_o0_t2_m0_l0;
						m_Gam_y_o0_t1_l0 = gammacu_xy_p * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t0_l0 = gammacu_xx_p * d_Gam_y_o0_t0_m0_l0;
						m_Gam_x_o0_t32_l0 = (-2.0) * Au_xz_p * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_x_o0_t31_l0 = (-2.0) * Au_xy_p * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_x_o0_t30_l0 = (-2.0) * Au_xx_p * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_x_o0_t29_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_xz_p * d_Gam_x_o0_t29_m0_l0;
						m_Gam_x_o0_t28_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_xy_p * d_Gam_x_o0_t28_m0_l0;
						m_Gam_x_o0_t27_l0 = (-2.0) * vector(alpha_p, i, j, k) * 0.666666666666 * gammacu_xx_p * d_Gam_x_o0_t27_m0_l0;
						m_Gam_x_o0_t26_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_xz_p * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_x_o0_t25_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_xy_p * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t24_l0 = 2.0 * vector(alpha_p, i, j, k) * 6.0 * Au_xx_p * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_x_o0_t23_l0 = (-1.0) * vector(Gam_z_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_Gam_x_o0_t22_l0 = (-1.0) * vector(Gam_y_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_Gam_x_o0_t21_l0 = (-1.0) * vector(Gam_x_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_Gam_x_o0_t20_l0 = vector(beta_z_p, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Gam_x_o0_t19_l0 = vector(beta_y_p, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Gam_x_o0_t18_l0 = vector(beta_x_p, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t17_l0 = 0.3333333333333 * gammacu_xz_p * d_Gam_x_o0_t17_m0_l0;
						m_Gam_x_o0_t16_l0 = 0.3333333333333 * gammacu_xz_p * d_Gam_x_o0_t16_m0_l0;
						m_Gam_x_o0_t15_l0 = 0.3333333333333 * gammacu_xz_p * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t14_l0 = 0.3333333333333 * gammacu_xy_p * d_Gam_x_o0_t14_m0_l0;
						m_Gam_x_o0_t13_l0 = 0.3333333333333 * gammacu_xy_p * d_Gam_x_o0_t13_m0_l0;
						m_Gam_x_o0_t12_l0 = 0.3333333333333 * gammacu_xy_p * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t11_l0 = 0.3333333333333 * gammacu_xx_p * d_Gam_x_o0_t11_m0_l0;
						m_Gam_x_o0_t10_l0 = 0.3333333333333 * gammacu_xx_p * d_Gam_x_o0_t10_m0_l0;
						m_Gam_x_o0_t9_l0 = 0.3333333333333 * gammacu_xx_p * d_Gam_x_o0_t0_m0_l0;
						m_Gam_x_o0_t8_l0 = gammacu_zz_p * d_Gam_x_o0_t8_m0_l0;
						m_Gam_x_o0_t7_l0 = gammacu_zy_p * d_Gam_x_o0_t7_m0_l0;
						m_Gam_x_o0_t6_l0 = gammacu_zx_p * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t5_l0 = gammacu_yz_p * d_Gam_x_o0_t5_m0_l0;
						m_Gam_x_o0_t4_l0 = gammacu_yy_p * d_Gam_x_o0_t4_m0_l0;
						m_Gam_x_o0_t3_l0 = gammacu_yx_p * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t2_l0 = gammacu_xz_p * d_Gam_x_o0_t2_m0_l0;
						m_Gam_x_o0_t1_l0 = gammacu_xy_p * d_Gam_x_o0_t1_m0_l0;
						m_Gam_x_o0_t0_l0 = gammacu_xx_p * d_Gam_x_o0_t0_m0_l0;
						m_alpha_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_alpha_o1_t2_m0_l0;
						m_alpha_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_alpha_o1_t1_m0_l0;
						m_alpha_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_alpha_o1_t0_m0_l0;
						m_alpha_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_alpha_o0_t2_m0_l0;
						m_alpha_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_alpha_o0_t1_m0_l0;
						m_alpha_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_alpha_o0_t0_m0_l0;
						m_trK_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_trK_o1_t2_m0_l0;
						m_trK_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_trK_o1_t1_m0_l0;
						m_trK_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_trK_o1_t0_m0_l0;
						m_trK_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_trK_o0_t2_m0_l0;
						m_trK_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_trK_o0_t1_m0_l0;
						m_trK_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_trK_o0_t0_m0_l0;
						m_Phi_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_Phi_o1_t2_m0_l0;
						m_Phi_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_Phi_o1_t1_m0_l0;
						m_Phi_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_Phi_o1_t0_m0_l0;
						m_Phi_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_Phi_o0_t2_m0_l0;
						m_Phi_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_Phi_o0_t1_m0_l0;
						m_Phi_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_Phi_o0_t0_m0_l0;
						m_A_zz_o2_t2_l0 = 2.0 * vector(A_zz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_zz_o2_t1_l0 = 2.0 * vector(A_yz_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_zz_o2_t0_l0 = 2.0 * vector(A_xz_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_zz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_zz_o1_t2_m0_l0;
						m_A_zz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_zz_o1_t1_m0_l0;
						m_A_zz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_zz_o1_t0_m0_l0;
						m_A_zz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_zz_o0_t2_m0_l0;
						m_A_zz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_zz_o0_t1_m0_l0;
						m_A_zz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_zz_o0_t0_m0_l0;
						m_A_yz_o2_t5_l0 = vector(A_zz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yz_o2_t4_l0 = vector(A_yz_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yz_o2_t3_l0 = vector(A_xz_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yz_o2_t2_l0 = vector(A_yz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_yz_o2_t1_l0 = vector(A_yy_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_yz_o2_t0_l0 = vector(A_xy_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_yz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_yz_o1_t2_m0_l0;
						m_A_yz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_yz_o1_t1_m0_l0;
						m_A_yz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_yz_o1_t0_m0_l0;
						m_A_yz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_yz_o0_t2_m0_l0;
						m_A_yz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_yz_o0_t1_m0_l0;
						m_A_yz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_yz_o0_t0_m0_l0;
						m_A_yy_o2_t2_l0 = 2.0 * vector(A_yz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yy_o2_t1_l0 = 2.0 * vector(A_yy_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yy_o2_t0_l0 = 2.0 * vector(A_xy_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yy_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_yy_o1_t2_m0_l0;
						m_A_yy_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_yy_o1_t1_m0_l0;
						m_A_yy_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_yy_o1_t0_m0_l0;
						m_A_yy_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_yy_o0_t2_m0_l0;
						m_A_yy_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_yy_o0_t1_m0_l0;
						m_A_yy_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_yy_o0_t0_m0_l0;
						m_A_xz_o2_t5_l0 = vector(A_zz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xz_o2_t4_l0 = vector(A_yz_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xz_o2_t3_l0 = vector(A_xz_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xz_o2_t2_l0 = vector(A_xz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_xz_o2_t1_l0 = vector(A_xy_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_xz_o2_t0_l0 = vector(A_xx_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_xz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_xz_o1_t2_m0_l0;
						m_A_xz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_xz_o1_t1_m0_l0;
						m_A_xz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_xz_o1_t0_m0_l0;
						m_A_xz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_xz_o0_t2_m0_l0;
						m_A_xz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_xz_o0_t1_m0_l0;
						m_A_xz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_xz_o0_t0_m0_l0;
						m_A_xy_o2_t5_l0 = vector(A_yz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xy_o2_t4_l0 = vector(A_yy_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xy_o2_t3_l0 = vector(A_xy_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xy_o2_t2_l0 = vector(A_xz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_xy_o2_t1_l0 = vector(A_xy_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_xy_o2_t0_l0 = vector(A_xx_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_xy_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_xy_o1_t2_m0_l0;
						m_A_xy_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_xy_o1_t1_m0_l0;
						m_A_xy_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_xy_o1_t0_m0_l0;
						m_A_xy_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_xy_o0_t2_m0_l0;
						m_A_xy_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_xy_o0_t1_m0_l0;
						m_A_xy_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_xy_o0_t0_m0_l0;
						m_A_xx_o2_t2_l0 = 2.0 * vector(A_xz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xx_o2_t1_l0 = 2.0 * vector(A_xy_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xx_o2_t0_l0 = 2.0 * vector(A_xx_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xx_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_A_xx_o1_t2_m0_l0;
						m_A_xx_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_A_xx_o1_t1_m0_l0;
						m_A_xx_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_A_xx_o1_t0_m0_l0;
						m_A_xx_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_A_xx_o0_t2_m0_l0;
						m_A_xx_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_A_xx_o0_t1_m0_l0;
						m_A_xx_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_A_xx_o0_t0_m0_l0;
						m_gammac_zy_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zy_o1_t2_m0_l0;
						m_gammac_zy_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zy_o1_t1_m0_l0;
						m_gammac_zy_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zy_o1_t0_m0_l0;
						m_gammac_zy_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zy_o0_t2_m0_l0;
						m_gammac_zy_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zy_o0_t1_m0_l0;
						m_gammac_zy_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zy_o0_t0_m0_l0;
						m_gammac_zx_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zx_o1_t2_m0_l0;
						m_gammac_zx_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zx_o1_t1_m0_l0;
						m_gammac_zx_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zx_o1_t0_m0_l0;
						m_gammac_zx_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zx_o0_t2_m0_l0;
						m_gammac_zx_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zx_o0_t1_m0_l0;
						m_gammac_zx_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zx_o0_t0_m0_l0;
						m_gammac_zz_o2_t2_l0 = 2.0 * vector(gammac_zz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_zz_o2_t1_l0 = 2.0 * vector(gammac_zy_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_zz_o2_t0_l0 = 2.0 * vector(gammac_zx_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_zz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zz_o1_t2_m0_l0;
						m_gammac_zz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zz_o1_t1_m0_l0;
						m_gammac_zz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zz_o1_t0_m0_l0;
						m_gammac_zz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_zz_o0_t2_m0_l0;
						m_gammac_zz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_zz_o0_t1_m0_l0;
						m_gammac_zz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_zz_o0_t0_m0_l0;
						m_gammac_yz_o2_t5_l0 = vector(gammac_zz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yz_o2_t4_l0 = vector(gammac_zy_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yz_o2_t3_l0 = vector(gammac_zx_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yz_o2_t2_l0 = vector(gammac_yz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_yz_o2_t1_l0 = vector(gammac_yy_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_yz_o2_t0_l0 = vector(gammac_yx_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_yz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yz_o1_t2_m0_l0;
						m_gammac_yz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yz_o1_t1_m0_l0;
						m_gammac_yz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yz_o1_t0_m0_l0;
						m_gammac_yz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yz_o0_t2_m0_l0;
						m_gammac_yz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yz_o0_t1_m0_l0;
						m_gammac_yz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yz_o0_t0_m0_l0;
						m_gammac_yx_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yx_o1_t2_m0_l0;
						m_gammac_yx_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yx_o1_t1_m0_l0;
						m_gammac_yx_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yx_o1_t0_m0_l0;
						m_gammac_yx_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yx_o0_t2_m0_l0;
						m_gammac_yx_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yx_o0_t1_m0_l0;
						m_gammac_yx_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yx_o0_t0_m0_l0;
						m_gammac_yy_o2_t2_l0 = 2.0 * vector(gammac_yz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yy_o2_t1_l0 = 2.0 * vector(gammac_yy_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yy_o2_t0_l0 = 2.0 * vector(gammac_yx_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yy_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yy_o1_t2_m0_l0;
						m_gammac_yy_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yy_o1_t1_m0_l0;
						m_gammac_yy_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yy_o1_t0_m0_l0;
						m_gammac_yy_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_yy_o0_t2_m0_l0;
						m_gammac_yy_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_yy_o0_t1_m0_l0;
						m_gammac_yy_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_yy_o0_t0_m0_l0;
						m_gammac_xz_o2_t5_l0 = vector(gammac_zz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xz_o2_t4_l0 = vector(gammac_zy_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xz_o2_t3_l0 = vector(gammac_zx_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xz_o2_t2_l0 = vector(gammac_xz_p, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_xz_o2_t1_l0 = vector(gammac_xy_p, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_xz_o2_t0_l0 = vector(gammac_xx_p, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_xz_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xz_o1_t2_m0_l0;
						m_gammac_xz_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xz_o1_t1_m0_l0;
						m_gammac_xz_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xz_o1_t0_m0_l0;
						m_gammac_xz_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xz_o0_t2_m0_l0;
						m_gammac_xz_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xz_o0_t1_m0_l0;
						m_gammac_xz_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xz_o0_t0_m0_l0;
						m_gammac_xy_o2_t5_l0 = vector(gammac_yz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xy_o2_t4_l0 = vector(gammac_yy_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xy_o2_t3_l0 = vector(gammac_yx_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xy_o2_t2_l0 = vector(gammac_xz_p, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_xy_o2_t1_l0 = vector(gammac_xy_p, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_xy_o2_t0_l0 = vector(gammac_xx_p, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_xy_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xy_o1_t2_m0_l0;
						m_gammac_xy_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xy_o1_t1_m0_l0;
						m_gammac_xy_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xy_o1_t0_m0_l0;
						m_gammac_xy_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xy_o0_t2_m0_l0;
						m_gammac_xy_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xy_o0_t1_m0_l0;
						m_gammac_xy_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xy_o0_t0_m0_l0;
						m_gammac_xx_o2_t2_l0 = 2.0 * vector(gammac_xz_p, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xx_o2_t1_l0 = 2.0 * vector(gammac_xy_p, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xx_o2_t0_l0 = 2.0 * vector(gammac_xx_p, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xx_o1_t2_l0 = MIN(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xx_o1_t2_m0_l0;
						m_gammac_xx_o1_t1_l0 = MIN(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xx_o1_t1_m0_l0;
						m_gammac_xx_o1_t0_l0 = MIN(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xx_o1_t0_m0_l0;
						m_gammac_xx_o0_t2_l0 = MAX(0.0, vector(beta_z_p, i, j, k)) * d_gammac_xx_o0_t2_m0_l0;
						m_gammac_xx_o0_t1_l0 = MAX(0.0, vector(beta_y_p, i, j, k)) * d_gammac_xx_o0_t1_m0_l0;
						m_gammac_xx_o0_t0_l0 = MAX(0.0, vector(beta_x_p, i, j, k)) * d_gammac_xx_o0_t0_m0_l0;
						RHS_gammac_xx = ((((((((m_gammac_xx_o0_t0_l0 + m_gammac_xx_o0_t1_l0) + m_gammac_xx_o0_t2_l0) + m_gammac_xx_o1_t0_l0) + m_gammac_xx_o1_t1_l0) + m_gammac_xx_o1_t2_l0) + m_gammac_xx_o2_t0_l0) + m_gammac_xx_o2_t1_l0) + m_gammac_xx_o2_t2_l0) + d_gammac_xx_o2_t3_m0_l0;
						RHS_gammac_xy = (((((((((((m_gammac_xy_o0_t0_l0 + m_gammac_xy_o0_t1_l0) + m_gammac_xy_o0_t2_l0) + m_gammac_xy_o1_t0_l0) + m_gammac_xy_o1_t1_l0) + m_gammac_xy_o1_t2_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + d_gammac_xy_o2_t6_m0_l0;
						RHS_gammac_xz = (((((((((((m_gammac_xz_o0_t0_l0 + m_gammac_xz_o0_t1_l0) + m_gammac_xz_o0_t2_l0) + m_gammac_xz_o1_t0_l0) + m_gammac_xz_o1_t1_l0) + m_gammac_xz_o1_t2_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + d_gammac_xz_o2_t6_m0_l0;
						RHS_gammac_yy = ((((((((m_gammac_yy_o0_t0_l0 + m_gammac_yy_o0_t1_l0) + m_gammac_yy_o0_t2_l0) + m_gammac_yy_o1_t0_l0) + m_gammac_yy_o1_t1_l0) + m_gammac_yy_o1_t2_l0) + m_gammac_yy_o2_t0_l0) + m_gammac_yy_o2_t1_l0) + m_gammac_yy_o2_t2_l0) + d_gammac_yy_o2_t3_m0_l0;
						RHS_gammac_yx = (((((((((((m_gammac_yx_o0_t0_l0 + m_gammac_yx_o0_t1_l0) + m_gammac_yx_o0_t2_l0) + m_gammac_yx_o1_t0_l0) + m_gammac_yx_o1_t1_l0) + m_gammac_yx_o1_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + d_gammac_yx_o2_t6_m0_l0;
						RHS_gammac_yz = (((((((((((m_gammac_yz_o0_t0_l0 + m_gammac_yz_o0_t1_l0) + m_gammac_yz_o0_t2_l0) + m_gammac_yz_o1_t0_l0) + m_gammac_yz_o1_t1_l0) + m_gammac_yz_o1_t2_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + d_gammac_yz_o2_t6_m0_l0;
						RHS_gammac_zz = ((((((((m_gammac_zz_o0_t0_l0 + m_gammac_zz_o0_t1_l0) + m_gammac_zz_o0_t2_l0) + m_gammac_zz_o1_t0_l0) + m_gammac_zz_o1_t1_l0) + m_gammac_zz_o1_t2_l0) + m_gammac_zz_o2_t0_l0) + m_gammac_zz_o2_t1_l0) + m_gammac_zz_o2_t2_l0) + d_gammac_zz_o2_t3_m0_l0;
						RHS_gammac_zx = (((((((((((m_gammac_zx_o0_t0_l0 + m_gammac_zx_o0_t1_l0) + m_gammac_zx_o0_t2_l0) + m_gammac_zx_o1_t0_l0) + m_gammac_zx_o1_t1_l0) + m_gammac_zx_o1_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + d_gammac_zx_o2_t6_m0_l0;
						RHS_gammac_zy = (((((((((((m_gammac_zy_o0_t0_l0 + m_gammac_zy_o0_t1_l0) + m_gammac_zy_o0_t2_l0) + m_gammac_zy_o1_t0_l0) + m_gammac_zy_o1_t1_l0) + m_gammac_zy_o1_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + d_gammac_zy_o2_t6_m0_l0;
						RHS_A_xx = ((((((((m_A_xx_o0_t0_l0 + m_A_xx_o0_t1_l0) + m_A_xx_o0_t2_l0) + m_A_xx_o1_t0_l0) + m_A_xx_o1_t1_l0) + m_A_xx_o1_t2_l0) + m_A_xx_o2_t0_l0) + m_A_xx_o2_t1_l0) + m_A_xx_o2_t2_l0) + d_A_xx_o2_t3_m0_l0;
						RHS_A_xy = (((((((((((m_A_xy_o0_t0_l0 + m_A_xy_o0_t1_l0) + m_A_xy_o0_t2_l0) + m_A_xy_o1_t0_l0) + m_A_xy_o1_t1_l0) + m_A_xy_o1_t2_l0) + m_A_xy_o2_t0_l0) + m_A_xy_o2_t1_l0) + m_A_xy_o2_t2_l0) + m_A_xy_o2_t3_l0) + m_A_xy_o2_t4_l0) + m_A_xy_o2_t5_l0) + d_A_xy_o2_t6_m0_l0;
						RHS_A_xz = (((((((((((m_A_xz_o0_t0_l0 + m_A_xz_o0_t1_l0) + m_A_xz_o0_t2_l0) + m_A_xz_o1_t0_l0) + m_A_xz_o1_t1_l0) + m_A_xz_o1_t2_l0) + m_A_xz_o2_t0_l0) + m_A_xz_o2_t1_l0) + m_A_xz_o2_t2_l0) + m_A_xz_o2_t3_l0) + m_A_xz_o2_t4_l0) + m_A_xz_o2_t5_l0) + d_A_xz_o2_t6_m0_l0;
						RHS_A_yy = ((((((((m_A_yy_o0_t0_l0 + m_A_yy_o0_t1_l0) + m_A_yy_o0_t2_l0) + m_A_yy_o1_t0_l0) + m_A_yy_o1_t1_l0) + m_A_yy_o1_t2_l0) + m_A_yy_o2_t0_l0) + m_A_yy_o2_t1_l0) + m_A_yy_o2_t2_l0) + d_A_yy_o2_t3_m0_l0;
						RHS_A_yz = (((((((((((m_A_yz_o0_t0_l0 + m_A_yz_o0_t1_l0) + m_A_yz_o0_t2_l0) + m_A_yz_o1_t0_l0) + m_A_yz_o1_t1_l0) + m_A_yz_o1_t2_l0) + m_A_yz_o2_t0_l0) + m_A_yz_o2_t1_l0) + m_A_yz_o2_t2_l0) + m_A_yz_o2_t3_l0) + m_A_yz_o2_t4_l0) + m_A_yz_o2_t5_l0) + d_A_yz_o2_t6_m0_l0;
						RHS_A_zz = ((((((((m_A_zz_o0_t0_l0 + m_A_zz_o0_t1_l0) + m_A_zz_o0_t2_l0) + m_A_zz_o1_t0_l0) + m_A_zz_o1_t1_l0) + m_A_zz_o1_t2_l0) + m_A_zz_o2_t0_l0) + m_A_zz_o2_t1_l0) + m_A_zz_o2_t2_l0) + d_A_zz_o2_t3_m0_l0;
						RHS_Phi = (((((m_Phi_o0_t0_l0 + m_Phi_o0_t1_l0) + m_Phi_o0_t2_l0) + m_Phi_o1_t0_l0) + m_Phi_o1_t1_l0) + m_Phi_o1_t2_l0) + d_Phi_o2_t0_m0_l0;
						RHS_trK = (((((m_trK_o0_t0_l0 + m_trK_o0_t1_l0) + m_trK_o0_t2_l0) + m_trK_o1_t0_l0) + m_trK_o1_t1_l0) + m_trK_o1_t2_l0) + d_trK_o2_t0_m0_l0;
						RHS_beta_x = d_beta_x_o0_t0_m0_l0;
						RHS_beta_y = d_beta_x_o0_t0_m0_l0;
						RHS_beta_z = d_beta_x_o0_t0_m0_l0;
						RHS_alpha = (((((m_alpha_o0_t0_l0 + m_alpha_o0_t1_l0) + m_alpha_o0_t2_l0) + m_alpha_o1_t0_l0) + m_alpha_o1_t1_l0) + m_alpha_o1_t2_l0) + d_alpha_o2_t0_m0_l0;
						RHS_Gam_x = ((((((((((((((((((((((((((((((((m_Gam_x_o0_t0_l0 + m_Gam_x_o0_t1_l0) + m_Gam_x_o0_t2_l0) + m_Gam_x_o0_t3_l0) + m_Gam_x_o0_t4_l0) + m_Gam_x_o0_t5_l0) + m_Gam_x_o0_t6_l0) + m_Gam_x_o0_t7_l0) + m_Gam_x_o0_t8_l0) + m_Gam_x_o0_t9_l0) + m_Gam_x_o0_t10_l0) + m_Gam_x_o0_t11_l0) + m_Gam_x_o0_t12_l0) + m_Gam_x_o0_t13_l0) + m_Gam_x_o0_t14_l0) + m_Gam_x_o0_t15_l0) + m_Gam_x_o0_t16_l0) + m_Gam_x_o0_t17_l0) + m_Gam_x_o0_t18_l0) + m_Gam_x_o0_t19_l0) + m_Gam_x_o0_t20_l0) + m_Gam_x_o0_t21_l0) + m_Gam_x_o0_t22_l0) + m_Gam_x_o0_t23_l0) + m_Gam_x_o0_t24_l0) + m_Gam_x_o0_t25_l0) + m_Gam_x_o0_t26_l0) + m_Gam_x_o0_t27_l0) + m_Gam_x_o0_t28_l0) + m_Gam_x_o0_t29_l0) + m_Gam_x_o0_t30_l0) + m_Gam_x_o0_t31_l0) + m_Gam_x_o0_t32_l0) + d_Gam_x_o0_t33_m0_l0;
						RHS_Gam_y = ((((((((((((((((((((((((((((((((m_Gam_y_o0_t0_l0 + m_Gam_y_o0_t1_l0) + m_Gam_y_o0_t2_l0) + m_Gam_y_o0_t3_l0) + m_Gam_y_o0_t4_l0) + m_Gam_y_o0_t5_l0) + m_Gam_y_o0_t6_l0) + m_Gam_y_o0_t7_l0) + m_Gam_y_o0_t8_l0) + m_Gam_y_o0_t9_l0) + m_Gam_y_o0_t10_l0) + m_Gam_y_o0_t11_l0) + m_Gam_y_o0_t12_l0) + m_Gam_y_o0_t13_l0) + m_Gam_y_o0_t14_l0) + m_Gam_y_o0_t15_l0) + m_Gam_y_o0_t16_l0) + m_Gam_y_o0_t17_l0) + m_Gam_y_o0_t18_l0) + m_Gam_y_o0_t19_l0) + m_Gam_y_o0_t20_l0) + m_Gam_y_o0_t21_l0) + m_Gam_y_o0_t22_l0) + m_Gam_y_o0_t23_l0) + m_Gam_y_o0_t24_l0) + m_Gam_y_o0_t25_l0) + m_Gam_y_o0_t26_l0) + m_Gam_y_o0_t27_l0) + m_Gam_y_o0_t28_l0) + m_Gam_y_o0_t29_l0) + m_Gam_y_o0_t30_l0) + m_Gam_y_o0_t31_l0) + m_Gam_y_o0_t32_l0) + d_Gam_y_o0_t33_m0_l0;
						RHS_Gam_z = ((((((((((((((((((((((((((((((((m_Gam_z_o0_t0_l0 + m_Gam_z_o0_t1_l0) + m_Gam_z_o0_t2_l0) + m_Gam_z_o0_t3_l0) + m_Gam_z_o0_t4_l0) + m_Gam_z_o0_t5_l0) + m_Gam_z_o0_t6_l0) + m_Gam_z_o0_t7_l0) + m_Gam_z_o0_t8_l0) + m_Gam_z_o0_t9_l0) + m_Gam_z_o0_t10_l0) + m_Gam_z_o0_t11_l0) + m_Gam_z_o0_t12_l0) + m_Gam_z_o0_t13_l0) + m_Gam_z_o0_t14_l0) + m_Gam_z_o0_t15_l0) + m_Gam_z_o0_t16_l0) + m_Gam_z_o0_t17_l0) + m_Gam_z_o0_t18_l0) + m_Gam_z_o0_t19_l0) + m_Gam_z_o0_t20_l0) + m_Gam_z_o0_t21_l0) + m_Gam_z_o0_t22_l0) + m_Gam_z_o0_t23_l0) + m_Gam_z_o0_t24_l0) + m_Gam_z_o0_t25_l0) + m_Gam_z_o0_t26_l0) + m_Gam_z_o0_t27_l0) + m_Gam_z_o0_t28_l0) + m_Gam_z_o0_t29_l0) + m_Gam_z_o0_t30_l0) + m_Gam_z_o0_t31_l0) + m_Gam_z_o0_t32_l0) + d_Gam_z_o0_t33_m0_l0;
						if (dissipation_factor_gammac_xx > 0.0) {
							RHS_gammac_xx = RHS_gammac_xx + dissipation_factor_gammac_xx * (meshDissipation_i(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xy > 0.0) {
							RHS_gammac_xy = RHS_gammac_xy + dissipation_factor_gammac_xy * (meshDissipation_i(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xz > 0.0) {
							RHS_gammac_xz = RHS_gammac_xz + dissipation_factor_gammac_xz * (meshDissipation_i(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yy > 0.0) {
							RHS_gammac_yy = RHS_gammac_yy + dissipation_factor_gammac_yy * (meshDissipation_i(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yx > 0.0) {
							RHS_gammac_yx = RHS_gammac_yx + dissipation_factor_gammac_yx * (meshDissipation_i(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_yx_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yz > 0.0) {
							RHS_gammac_yz = RHS_gammac_yz + dissipation_factor_gammac_yz * (meshDissipation_i(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zz > 0.0) {
							RHS_gammac_zz = RHS_gammac_zz + dissipation_factor_gammac_zz * (meshDissipation_i(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zx > 0.0) {
							RHS_gammac_zx = RHS_gammac_zx + dissipation_factor_gammac_zx * (meshDissipation_i(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_zx_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zy > 0.0) {
							RHS_gammac_zy = RHS_gammac_zy + dissipation_factor_gammac_zy * (meshDissipation_i(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(gammac_zy_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xx > 0.0) {
							RHS_A_xx = RHS_A_xx + dissipation_factor_A_xx * (meshDissipation_i(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_xx_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xy > 0.0) {
							RHS_A_xy = RHS_A_xy + dissipation_factor_A_xy * (meshDissipation_i(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_xy_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xz > 0.0) {
							RHS_A_xz = RHS_A_xz + dissipation_factor_A_xz * (meshDissipation_i(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_xz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yy > 0.0) {
							RHS_A_yy = RHS_A_yy + dissipation_factor_A_yy * (meshDissipation_i(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_yy_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yz > 0.0) {
							RHS_A_yz = RHS_A_yz + dissipation_factor_A_yz * (meshDissipation_i(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_yz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_zz > 0.0) {
							RHS_A_zz = RHS_A_zz + dissipation_factor_A_zz * (meshDissipation_i(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(A_zz_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Phi > 0.0) {
							RHS_Phi = RHS_Phi + dissipation_factor_Phi * (meshDissipation_i(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(Phi_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_trK > 0.0) {
							RHS_trK = RHS_trK + dissipation_factor_trK * (meshDissipation_i(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(trK_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_x > 0.0) {
							RHS_beta_x = RHS_beta_x + dissipation_factor_beta_x * (meshDissipation_i(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(beta_x_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_y > 0.0) {
							RHS_beta_y = RHS_beta_y + dissipation_factor_beta_y * (meshDissipation_i(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(beta_y_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_z > 0.0) {
							RHS_beta_z = RHS_beta_z + dissipation_factor_beta_z * (meshDissipation_i(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(beta_z_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_alpha > 0.0) {
							RHS_alpha = RHS_alpha + dissipation_factor_alpha * (meshDissipation_i(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(alpha_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_x > 0.0) {
							RHS_Gam_x = RHS_Gam_x + dissipation_factor_Gam_x * (meshDissipation_i(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(Gam_x_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_y > 0.0) {
							RHS_Gam_y = RHS_Gam_y + dissipation_factor_Gam_y * (meshDissipation_i(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(Gam_y_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_z > 0.0) {
							RHS_Gam_z = RHS_Gam_z + dissipation_factor_Gam_z * (meshDissipation_i(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(Gam_z_p, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						vector(rk1gammac_xx, i, j, k) = RK4P1_(RHS_gammac_xx, vector(gammac_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_xy, i, j, k) = RK4P1_(RHS_gammac_xy, vector(gammac_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_xz, i, j, k) = RK4P1_(RHS_gammac_xz, vector(gammac_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_yy, i, j, k) = RK4P1_(RHS_gammac_yy, vector(gammac_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_yx, i, j, k) = RK4P1_(RHS_gammac_yx, vector(gammac_yx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_yz, i, j, k) = RK4P1_(RHS_gammac_yz, vector(gammac_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_zz, i, j, k) = RK4P1_(RHS_gammac_zz, vector(gammac_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_zx, i, j, k) = RK4P1_(RHS_gammac_zx, vector(gammac_zx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1gammac_zy, i, j, k) = RK4P1_(RHS_gammac_zy, vector(gammac_zy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_xx, i, j, k) = RK4P1_(RHS_A_xx, vector(A_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_xy, i, j, k) = RK4P1_(RHS_A_xy, vector(A_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_xz, i, j, k) = RK4P1_(RHS_A_xz, vector(A_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_yy, i, j, k) = RK4P1_(RHS_A_yy, vector(A_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_yz, i, j, k) = RK4P1_(RHS_A_yz, vector(A_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1A_zz, i, j, k) = RK4P1_(RHS_A_zz, vector(A_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1Phi, i, j, k) = RK4P1_(RHS_Phi, vector(Phi_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1trK, i, j, k) = RK4P1_(RHS_trK, vector(trK_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1beta_x, i, j, k) = RK4P1_(RHS_beta_x, vector(beta_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1beta_y, i, j, k) = RK4P1_(RHS_beta_y, vector(beta_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1beta_z, i, j, k) = RK4P1_(RHS_beta_z, vector(beta_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1alpha, i, j, k) = RK4P1_(RHS_alpha, vector(alpha_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1Gam_x, i, j, k) = RK4P1_(RHS_Gam_x, vector(Gam_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1Gam_y, i, j, k) = RK4P1_(RHS_Gam_y, vector(Gam_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk1Gam_z, i, j, k) = RK4P1_(RHS_Gam_z, vector(Gam_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
					}
				}
			}
		}
	}
	//Fill ghosts and periodical boundaries
	time_interpolate_operator_mesh1->setStep(1);
	d_bdry_sched_advance1[ln]->fillData(current_time + simPlat_dt * 0.5, false);
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		//Hard region field distance variables
		double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
	
		double* rk1gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xx_id).get())->getPointer();
		double* rk1gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xy_id).get())->getPointer();
		double* rk1gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xz_id).get())->getPointer();
		double* rk1gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yy_id).get())->getPointer();
		double* rk1gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yx_id).get())->getPointer();
		double* rk1gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yz_id).get())->getPointer();
		double* rk1gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zz_id).get())->getPointer();
		double* rk1gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zx_id).get())->getPointer();
		double* rk1gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zy_id).get())->getPointer();
		double* rk1A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xx_id).get())->getPointer();
		double* rk1A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xy_id).get())->getPointer();
		double* rk1A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xz_id).get())->getPointer();
		double* rk1A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yy_id).get())->getPointer();
		double* rk1A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yz_id).get())->getPointer();
		double* rk1A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_zz_id).get())->getPointer();
		double* rk1Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Phi_id).get())->getPointer();
		double* rk1trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1trK_id).get())->getPointer();
		double* rk1beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_x_id).get())->getPointer();
		double* rk1beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_y_id).get())->getPointer();
		double* rk1beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_z_id).get())->getPointer();
		double* rk1alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1alpha_id).get())->getPointer();
		double* rk1Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_x_id).get())->getPointer();
		double* rk1Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_y_id).get())->getPointer();
		double* rk1Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_z_id).get())->getPointer();
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((vector(FOV_xLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_xUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk1Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
				}
			}
		}
	}
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		double* rk1beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_x_id).get())->getPointer();
		double* rk1beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_y_id).get())->getPointer();
		double* rk1beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_z_id).get())->getPointer();
		double* rk1gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xx_id).get())->getPointer();
		double* rk1gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yx_id).get())->getPointer();
		double* rk1gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zx_id).get())->getPointer();
		double* rk1gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xy_id).get())->getPointer();
		double* rk1gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yy_id).get())->getPointer();
		double* rk1gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zy_id).get())->getPointer();
		double* rk1gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xz_id).get())->getPointer();
		double* rk1gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yz_id).get())->getPointer();
		double* rk1gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zz_id).get())->getPointer();
		double* rk1alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1alpha_id).get())->getPointer();
		double* rk1Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Phi_id).get())->getPointer();
		double* rk1Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_x_id).get())->getPointer();
		double* rk1Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_y_id).get())->getPointer();
		double* rk1Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_z_id).get())->getPointer();
		double* rk1A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xx_id).get())->getPointer();
		double* rk1A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xy_id).get())->getPointer();
		double* rk1A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xz_id).get())->getPointer();
		double* rk1A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yy_id).get())->getPointer();
		double* rk1A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yz_id).get())->getPointer();
		double* rk1A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_zz_id).get())->getPointer();
		double* rk1trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1trK_id).get())->getPointer();
		double* rk2gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xx_id).get())->getPointer();
		double* gammac_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_p_id).get())->getPointer();
		double* rk2gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xy_id).get())->getPointer();
		double* gammac_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_p_id).get())->getPointer();
		double* rk2gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xz_id).get())->getPointer();
		double* gammac_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_p_id).get())->getPointer();
		double* rk2gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yy_id).get())->getPointer();
		double* gammac_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_p_id).get())->getPointer();
		double* rk2gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yx_id).get())->getPointer();
		double* gammac_yx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_p_id).get())->getPointer();
		double* rk2gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yz_id).get())->getPointer();
		double* gammac_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_p_id).get())->getPointer();
		double* rk2gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zz_id).get())->getPointer();
		double* gammac_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_p_id).get())->getPointer();
		double* rk2gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zx_id).get())->getPointer();
		double* gammac_zx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_p_id).get())->getPointer();
		double* rk2gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zy_id).get())->getPointer();
		double* gammac_zy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_p_id).get())->getPointer();
		double* rk2A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xx_id).get())->getPointer();
		double* A_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_p_id).get())->getPointer();
		double* rk2A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xy_id).get())->getPointer();
		double* A_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_p_id).get())->getPointer();
		double* rk2A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xz_id).get())->getPointer();
		double* A_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_p_id).get())->getPointer();
		double* rk2A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yy_id).get())->getPointer();
		double* A_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_p_id).get())->getPointer();
		double* rk2A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yz_id).get())->getPointer();
		double* A_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_p_id).get())->getPointer();
		double* rk2A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_zz_id).get())->getPointer();
		double* A_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_p_id).get())->getPointer();
		double* rk2Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Phi_id).get())->getPointer();
		double* Phi_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_p_id).get())->getPointer();
		double* rk2trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2trK_id).get())->getPointer();
		double* trK_p = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_p_id).get())->getPointer();
		double* rk2beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_x_id).get())->getPointer();
		double* beta_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_p_id).get())->getPointer();
		double* rk2beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_y_id).get())->getPointer();
		double* beta_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_p_id).get())->getPointer();
		double* rk2beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_z_id).get())->getPointer();
		double* beta_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_p_id).get())->getPointer();
		double* rk2alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2alpha_id).get())->getPointer();
		double* alpha_p = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_p_id).get())->getPointer();
		double* rk2Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_x_id).get())->getPointer();
		double* Gam_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_p_id).get())->getPointer();
		double* rk2Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_y_id).get())->getPointer();
		double* Gam_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_p_id).get())->getPointer();
		double* rk2Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_z_id).get())->getPointer();
		double* Gam_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_p_id).get())->getPointer();
		double d_div_beta_o0_t0_m0_l0, d_gammac_xy_o2_t0_m0_l0, d_gammac_xz_o2_t0_m0_l0, d_Gam_x_o0_t0_m0_l0, d_Gam_x_o0_t3_m0_l0, d_Gam_x_o0_t6_m0_l0, d_Gam_x_o0_t1_m0_l0, d_Gam_x_o0_t4_m0_l0, d_Gam_x_o0_t7_m0_l0, d_Gam_x_o0_t2_m0_l0, d_Gam_x_o0_t5_m0_l0, d_Gam_x_o0_t8_m0_l0, d_gammac_xx_o2_t1_m0_l0, d_div_beta_o0_t1_m0_l0, d_gammac_xz_o2_t1_m0_l0, d_Gam_y_o0_t0_m0_l0, d_Gam_y_o0_t3_m0_l0, d_Gam_y_o0_t6_m0_l0, d_Gam_x_o0_t10_m0_l0, d_Gam_x_o0_t13_m0_l0, d_Gam_x_o0_t16_m0_l0, d_Gam_y_o0_t2_m0_l0, d_Gam_y_o0_t5_m0_l0, d_Gam_y_o0_t8_m0_l0, d_gammac_xx_o2_t2_m0_l0, d_gammac_xy_o2_t2_m0_l0, d_div_beta_o0_t2_m0_l0, d_Gam_z_o0_t0_m0_l0, d_Gam_z_o0_t3_m0_l0, d_Gam_z_o0_t6_m0_l0, d_Gam_z_o0_t1_m0_l0, d_Gam_z_o0_t4_m0_l0, d_Gam_z_o0_t7_m0_l0, d_Gam_x_o0_t11_m0_l0, d_Gam_x_o0_t14_m0_l0, d_Gam_x_o0_t17_m0_l0, d_C_xxx_o0_t0_m0_l0, d_gammac_xx_o0_t0_m0_l0, d_gammac_xx_o1_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_gammac_xx_o0_t1_m0_l0, d_gammac_xx_o1_t1_m0_l0, d_C_xxx_o0_t8_m0_l0, d_gammac_xx_o0_t2_m0_l0, d_gammac_xx_o1_t2_m0_l0, d_C_xxx_o0_t3_m0_l0, d_gammac_yx_o0_t0_m0_l0, d_gammac_yx_o1_t0_m0_l0, d_C_xxy_o0_t4_m0_l0, d_gammac_yx_o0_t1_m0_l0, d_gammac_yx_o1_t1_m0_l0, d_C_xxz_o0_t4_m0_l0, d_gammac_yx_o0_t2_m0_l0, d_gammac_yx_o1_t2_m0_l0, d_C_xxx_o0_t6_m0_l0, d_gammac_zx_o0_t0_m0_l0, d_gammac_zx_o1_t0_m0_l0, d_C_xxy_o0_t7_m0_l0, d_gammac_zx_o0_t1_m0_l0, d_gammac_zx_o1_t1_m0_l0, d_C_xxz_o0_t7_m0_l0, d_gammac_zx_o0_t2_m0_l0, d_gammac_zx_o1_t2_m0_l0, d_C_xxy_o0_t0_m0_l0, d_gammac_xy_o0_t0_m0_l0, d_gammac_xy_o1_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_gammac_xy_o0_t1_m0_l0, d_gammac_xy_o1_t1_m0_l0, d_C_xxy_o0_t8_m0_l0, d_gammac_xy_o0_t2_m0_l0, d_gammac_xy_o1_t2_m0_l0, d_C_xxy_o0_t3_m0_l0, d_gammac_yy_o0_t0_m0_l0, d_gammac_yy_o1_t0_m0_l0, d_C_xyy_o0_t3_m0_l0, d_gammac_yy_o0_t1_m0_l0, d_gammac_yy_o1_t1_m0_l0, d_C_xyy_o0_t8_m0_l0, d_gammac_yy_o0_t2_m0_l0, d_gammac_yy_o1_t2_m0_l0, d_C_xxy_o0_t6_m0_l0, d_gammac_zy_o0_t0_m0_l0, d_gammac_zy_o1_t0_m0_l0, d_C_xyy_o0_t6_m0_l0, d_gammac_zy_o0_t1_m0_l0, d_gammac_zy_o1_t1_m0_l0, d_C_xyz_o0_t7_m0_l0, d_gammac_zy_o0_t2_m0_l0, d_gammac_zy_o1_t2_m0_l0, d_C_xxz_o0_t0_m0_l0, d_gammac_xz_o0_t0_m0_l0, d_gammac_xz_o1_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_gammac_xz_o0_t1_m0_l0, d_gammac_xz_o1_t1_m0_l0, d_C_xxz_o0_t8_m0_l0, d_gammac_xz_o0_t2_m0_l0, d_gammac_xz_o1_t2_m0_l0, d_C_xxz_o0_t3_m0_l0, d_gammac_yz_o0_t0_m0_l0, d_gammac_yz_o1_t0_m0_l0, d_C_xyz_o0_t3_m0_l0, d_gammac_yz_o0_t1_m0_l0, d_gammac_yz_o1_t1_m0_l0, d_C_xyz_o0_t8_m0_l0, d_gammac_yz_o0_t2_m0_l0, d_gammac_yz_o1_t2_m0_l0, d_C_xxz_o0_t6_m0_l0, d_gammac_zz_o0_t0_m0_l0, d_gammac_zz_o1_t0_m0_l0, d_C_xyz_o0_t6_m0_l0, d_gammac_zz_o0_t1_m0_l0, d_gammac_zz_o1_t1_m0_l0, d_C_xzz_o0_t6_m0_l0, d_gammac_zz_o0_t2_m0_l0, d_gammac_zz_o1_t2_m0_l0, d_dalpha_xx_o0_t1_m0_l0, d_alpha_o0_t0_m0_l0, d_alpha_o1_t0_m0_l0, d_dalpha_xx_o0_t2_m0_l0, d_alpha_o0_t1_m0_l0, d_alpha_o1_t1_m0_l0, d_dalpha_xx_o0_t3_m0_l0, d_alpha_o0_t2_m0_l0, d_alpha_o1_t2_m0_l0, d_dalpha_xx_o0_t0_m0_l0, d_dalpha_xy_o0_t0_m0_l0, d_dalpha_yy_o0_t0_m0_l0, d_dalpha_xz_o0_t0_m0_l0, d_dalpha_yz_o0_t0_m0_l0, d_dalpha_zz_o0_t0_m0_l0, d_dalpha_xx_o0_t4_m0_l0, d_Phi_o0_t0_m0_l0, d_Phi_o1_t0_m0_l0, d_dalpha_xx_o0_t9_m0_l0, d_Phi_o0_t1_m0_l0, d_Phi_o1_t1_m0_l0, d_dalpha_xx_o0_t12_m0_l0, d_Phi_o0_t2_m0_l0, d_Phi_o1_t2_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_A_xx_o0_t0_m0_l0, d_A_xx_o1_t0_m0_l0, d_A_xx_o0_t1_m0_l0, d_A_xx_o1_t1_m0_l0, d_A_xx_o0_t2_m0_l0, d_A_xx_o1_t2_m0_l0, d_A_xy_o0_t0_m0_l0, d_A_xy_o1_t0_m0_l0, d_A_xy_o0_t1_m0_l0, d_A_xy_o1_t1_m0_l0, d_A_xy_o0_t2_m0_l0, d_A_xy_o1_t2_m0_l0, d_A_xz_o0_t0_m0_l0, d_A_xz_o1_t0_m0_l0, d_A_xz_o0_t1_m0_l0, d_A_xz_o1_t1_m0_l0, d_A_xz_o0_t2_m0_l0, d_A_xz_o1_t2_m0_l0, d_A_yy_o0_t0_m0_l0, d_A_yy_o1_t0_m0_l0, d_A_yy_o0_t1_m0_l0, d_A_yy_o1_t1_m0_l0, d_A_yy_o0_t2_m0_l0, d_A_yy_o1_t2_m0_l0, d_A_yz_o0_t0_m0_l0, d_A_yz_o1_t0_m0_l0, d_A_yz_o0_t1_m0_l0, d_A_yz_o1_t1_m0_l0, d_A_yz_o0_t2_m0_l0, d_A_yz_o1_t2_m0_l0, d_A_zz_o0_t0_m0_l0, d_A_zz_o1_t0_m0_l0, d_A_zz_o0_t1_m0_l0, d_A_zz_o1_t1_m0_l0, d_A_zz_o0_t2_m0_l0, d_A_zz_o1_t2_m0_l0, d_trK_o0_t0_m0_l0, d_trK_o1_t0_m0_l0, d_Gam_x_o0_t27_m0_l0, d_trK_o0_t1_m0_l0, d_trK_o1_t1_m0_l0, d_Gam_x_o0_t28_m0_l0, d_trK_o0_t2_m0_l0, d_trK_o1_t2_m0_l0, d_Gam_x_o0_t29_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, rk1div_beta, rk1Detgammac, rk1gamma_zz, rk1iDetgammac, rk1gamma_yy, rk1gamma_yz, rk1gamma_xx, rk1gamma_xy, rk1gamma_xz, rk1Detgamma, rk1iDetgamma, rk1gammacu_zz, rk1gammau_xx, rk1gammau_xy, rk1gammau_xz, rk1gammacu_yy, rk1gammacu_yz, rk1gammacu_zy, rk1gammau_yx, rk1gammau_yy, rk1gammau_yz, rk1gammacu_xz, rk1gammacu_zx, rk1Am_zx, rk1Am_zz, rk1Am_zy, rk1Au_zz, rk1gammacu_xx, rk1gammacu_xy, rk1m_C_xxx_o0_t8_l0, rk1m_C_xxx_o0_t6_l0, rk1m_C_xxx_o0_t5_l0, rk1m_C_xxx_o0_t3_l0, rk1m_C_xxx_o0_t2_l0, rk1m_C_xxx_o0_t0_l0, rk1C_xxx, rk1m_C_xxz_o0_t8_l0, rk1m_C_xxz_o0_t7_l0, rk1m_C_xxz_o0_t6_l0, rk1m_C_xxz_o0_t5_l0, rk1m_C_xxz_o0_t4_l0, rk1m_C_xxz_o0_t3_l0, rk1m_C_xxz_o0_t2_l0, rk1m_C_xxz_o0_t1_l0, rk1m_C_xxz_o0_t0_l0, rk1C_xxz, rk1m_C_zxz_o0_t8_l0, rk1m_C_zxz_o0_t7_l0, rk1m_C_zxz_o0_t6_l0, rk1m_C_zxz_o0_t5_l0, rk1m_C_zxz_o0_t4_l0, rk1m_C_zxz_o0_t3_l0, rk1m_C_zxz_o0_t2_l0, rk1m_C_zxz_o0_t1_l0, rk1m_C_zxz_o0_t0_l0, rk1C_zxz, rk1m_C_xxy_o0_t8_l0, rk1m_C_xxy_o0_t7_l0, rk1m_C_xxy_o0_t6_l0, rk1m_C_xxy_o0_t5_l0, rk1m_C_xxy_o0_t4_l0, rk1m_C_xxy_o0_t3_l0, rk1m_C_xxy_o0_t2_l0, rk1m_C_xxy_o0_t1_l0, rk1m_C_xxy_o0_t0_l0, rk1C_xxy, rk1gammacu_yx, rk1m_C_yxy_o0_t8_l0, rk1m_C_yxy_o0_t7_l0, rk1m_C_yxy_o0_t6_l0, rk1m_C_yxy_o0_t5_l0, rk1m_C_yxy_o0_t4_l0, rk1m_C_yxy_o0_t3_l0, rk1m_C_yxy_o0_t2_l0, rk1m_C_yxy_o0_t1_l0, rk1m_C_yxy_o0_t0_l0, rk1C_yxy, rk1m_C_yxz_o0_t8_l0, rk1m_C_yxz_o0_t7_l0, rk1m_C_yxz_o0_t6_l0, rk1m_C_yxz_o0_t5_l0, rk1m_C_yxz_o0_t4_l0, rk1m_C_yxz_o0_t3_l0, rk1m_C_yxz_o0_t2_l0, rk1m_C_yxz_o0_t1_l0, rk1m_C_yxz_o0_t0_l0, rk1C_yxz, rk1Cd_xxz, rk1Cd_yxz, rk1Cd_zxz, rk1m_C_yxx_o0_t8_l0, rk1m_C_yxx_o0_t6_l0, rk1m_C_yxx_o0_t5_l0, rk1m_C_yxx_o0_t3_l0, rk1m_C_yxx_o0_t2_l0, rk1m_C_yxx_o0_t0_l0, rk1C_yxx, rk1m_C_xyy_o0_t8_l0, rk1m_C_xyy_o0_t6_l0, rk1m_C_xyy_o0_t5_l0, rk1m_C_xyy_o0_t3_l0, rk1m_C_xyy_o0_t2_l0, rk1m_C_xyy_o0_t0_l0, rk1C_xyy, rk1m_C_zyy_o0_t8_l0, rk1m_C_zyy_o0_t6_l0, rk1m_C_zyy_o0_t5_l0, rk1m_C_zyy_o0_t3_l0, rk1m_C_zyy_o0_t2_l0, rk1m_C_zyy_o0_t0_l0, rk1C_zyy, rk1m_C_yyy_o0_t8_l0, rk1m_C_yyy_o0_t6_l0, rk1m_C_yyy_o0_t5_l0, rk1m_C_yyy_o0_t3_l0, rk1m_C_yyy_o0_t2_l0, rk1m_C_yyy_o0_t0_l0, rk1C_yyy, rk1Cd_xyy, rk1Cd_yyy, rk1Cd_zyy, rk1m_C_xyz_o0_t8_l0, rk1m_C_xyz_o0_t7_l0, rk1m_C_xyz_o0_t6_l0, rk1m_C_xyz_o0_t5_l0, rk1m_C_xyz_o0_t4_l0, rk1m_C_xyz_o0_t3_l0, rk1m_C_xyz_o0_t2_l0, rk1m_C_xyz_o0_t1_l0, rk1m_C_xyz_o0_t0_l0, rk1C_xyz, rk1m_C_zyz_o0_t8_l0, rk1m_C_zyz_o0_t7_l0, rk1m_C_zyz_o0_t6_l0, rk1m_C_zyz_o0_t5_l0, rk1m_C_zyz_o0_t4_l0, rk1m_C_zyz_o0_t3_l0, rk1m_C_zyz_o0_t2_l0, rk1m_C_zyz_o0_t1_l0, rk1m_C_zyz_o0_t0_l0, rk1C_zyz, rk1m_C_yyz_o0_t8_l0, rk1m_C_yyz_o0_t7_l0, rk1m_C_yyz_o0_t6_l0, rk1m_C_yyz_o0_t5_l0, rk1m_C_yyz_o0_t4_l0, rk1m_C_yyz_o0_t3_l0, rk1m_C_yyz_o0_t2_l0, rk1m_C_yyz_o0_t1_l0, rk1m_C_yyz_o0_t0_l0, rk1C_yyz, rk1Cd_xyz, rk1Cd_yyz, rk1m_C_xzz_o0_t8_l0, rk1m_C_xzz_o0_t6_l0, rk1m_C_xzz_o0_t5_l0, rk1m_C_xzz_o0_t3_l0, rk1m_C_xzz_o0_t2_l0, rk1m_C_xzz_o0_t0_l0, rk1C_xzz, rk1m_C_zzz_o0_t8_l0, rk1m_C_zzz_o0_t6_l0, rk1m_C_zzz_o0_t5_l0, rk1m_C_zzz_o0_t3_l0, rk1m_C_zzz_o0_t2_l0, rk1m_C_zzz_o0_t0_l0, rk1C_zzz, rk1m_C_yzz_o0_t8_l0, rk1m_C_yzz_o0_t6_l0, rk1m_C_yzz_o0_t5_l0, rk1m_C_yzz_o0_t3_l0, rk1m_C_yzz_o0_t2_l0, rk1m_C_yzz_o0_t0_l0, rk1C_yzz, rk1Cd_xzz, rk1Cd_yzz, rk1Cd_zzz, rk1Cd_zyz, rk1Am_yy, rk1Am_yx, rk1Am_yz, rk1Au_yz, rk1m_C_zxx_o0_t8_l0, rk1m_C_zxx_o0_t6_l0, rk1m_C_zxx_o0_t5_l0, rk1m_C_zxx_o0_t3_l0, rk1m_C_zxx_o0_t2_l0, rk1m_C_zxx_o0_t0_l0, rk1C_zxx, rk1Cd_xxx, rk1Cd_yxx, rk1Cd_zxx, rk1m_C_zxy_o0_t8_l0, rk1m_C_zxy_o0_t7_l0, rk1m_C_zxy_o0_t6_l0, rk1m_C_zxy_o0_t5_l0, rk1m_C_zxy_o0_t4_l0, rk1m_C_zxy_o0_t3_l0, rk1m_C_zxy_o0_t2_l0, rk1m_C_zxy_o0_t1_l0, rk1m_C_zxy_o0_t0_l0, rk1C_zxy, rk1Cd_xxy, rk1Cd_yxy, rk1Cd_zxy, rk1Au_yy, rk1falpha, rk1d_Rc_xx_o0_t15_m0_l0, rk1m_Rc_xx_o0_t11_l0, rk1m_Rc_xx_o0_t10_l0, rk1m_Rc_xx_o0_t9_l0, rk1m_Rc_xx_o0_t8_l0, rk1m_Rc_xx_o0_t7_l0, rk1m_Rc_xx_o0_t6_l0, rk1m_Rc_xx_o0_t5_l0, rk1m_Rc_xx_o0_t4_l0, rk1m_Rc_xx_o0_t3_l0, rk1m_Rc_xx_o0_t2_l0, rk1m_Rc_xx_o0_t1_l0, rk1m_Rc_xx_o0_t0_l0, rk1Rc_xx, rk1gammau_zy, rk1d_Rc_xy_o0_t15_m0_l0, rk1m_Rc_xy_o0_t14_l0, rk1m_Rc_xy_o0_t13_l0, rk1m_Rc_xy_o0_t12_l0, rk1m_Rc_xy_o0_t11_l0, rk1m_Rc_xy_o0_t10_l0, rk1m_Rc_xy_o0_t9_l0, rk1m_Rc_xy_o0_t8_l0, rk1m_Rc_xy_o0_t7_l0, rk1m_Rc_xy_o0_t6_l0, rk1m_Rc_xy_o0_t5_l0, rk1m_Rc_xy_o0_t4_l0, rk1m_Rc_xy_o0_t3_l0, rk1m_Rc_xy_o0_t2_l0, rk1m_Rc_xy_o0_t1_l0, rk1m_Rc_xy_o0_t0_l0, rk1Rc_xy, rk1d_Rc_yy_o0_t15_m0_l0, rk1m_Rc_yy_o0_t11_l0, rk1m_Rc_yy_o0_t10_l0, rk1m_Rc_yy_o0_t9_l0, rk1m_Rc_yy_o0_t8_l0, rk1m_Rc_yy_o0_t7_l0, rk1m_Rc_yy_o0_t6_l0, rk1m_Rc_yy_o0_t5_l0, rk1m_Rc_yy_o0_t4_l0, rk1m_Rc_yy_o0_t3_l0, rk1m_Rc_yy_o0_t2_l0, rk1m_Rc_yy_o0_t1_l0, rk1m_Rc_yy_o0_t0_l0, rk1Rc_yy, rk1gammau_zz, rk1Am_xx, rk1Am_xz, rk1Am_xy, rk1Au_xz, rk1Au_xy, rk1d_Rc_xz_o0_t15_m0_l0, rk1m_Rc_xz_o0_t14_l0, rk1m_Rc_xz_o0_t13_l0, rk1m_Rc_xz_o0_t12_l0, rk1m_Rc_xz_o0_t11_l0, rk1m_Rc_xz_o0_t10_l0, rk1m_Rc_xz_o0_t9_l0, rk1m_Rc_xz_o0_t8_l0, rk1m_Rc_xz_o0_t7_l0, rk1m_Rc_xz_o0_t6_l0, rk1m_Rc_xz_o0_t5_l0, rk1m_Rc_xz_o0_t4_l0, rk1m_Rc_xz_o0_t3_l0, rk1m_Rc_xz_o0_t2_l0, rk1m_Rc_xz_o0_t1_l0, rk1m_Rc_xz_o0_t0_l0, rk1Rc_xz, rk1d_Rc_yz_o0_t15_m0_l0, rk1m_Rc_yz_o0_t14_l0, rk1m_Rc_yz_o0_t13_l0, rk1m_Rc_yz_o0_t12_l0, rk1m_Rc_yz_o0_t11_l0, rk1m_Rc_yz_o0_t10_l0, rk1m_Rc_yz_o0_t9_l0, rk1m_Rc_yz_o0_t8_l0, rk1m_Rc_yz_o0_t7_l0, rk1m_Rc_yz_o0_t6_l0, rk1m_Rc_yz_o0_t5_l0, rk1m_Rc_yz_o0_t4_l0, rk1m_Rc_yz_o0_t3_l0, rk1m_Rc_yz_o0_t2_l0, rk1m_Rc_yz_o0_t1_l0, rk1m_Rc_yz_o0_t0_l0, rk1Rc_yz, rk1d_Rc_zz_o0_t15_m0_l0, rk1m_Rc_zz_o0_t11_l0, rk1m_Rc_zz_o0_t10_l0, rk1m_Rc_zz_o0_t9_l0, rk1m_Rc_zz_o0_t8_l0, rk1m_Rc_zz_o0_t7_l0, rk1m_Rc_zz_o0_t6_l0, rk1m_Rc_zz_o0_t5_l0, rk1m_Rc_zz_o0_t4_l0, rk1m_Rc_zz_o0_t3_l0, rk1m_Rc_zz_o0_t2_l0, rk1m_Rc_zz_o0_t1_l0, rk1m_Rc_zz_o0_t0_l0, rk1Rc_zz, rk1Au_xx, rk1gammau_zx, rk1m_dalpha_xx_o0_t14_l0, rk1m_dalpha_xx_o0_t13_l0, rk1m_dalpha_xx_o0_t12_l0, rk1m_dalpha_xx_o0_t11_l0, rk1m_dalpha_xx_o0_t10_l0, rk1m_dalpha_xx_o0_t9_l0, rk1m_dalpha_xx_o0_t8_l0, rk1m_dalpha_xx_o0_t7_l0, rk1m_dalpha_xx_o0_t6_l0, rk1m_dalpha_xx_o0_t4_l0, rk1m_dalpha_xx_o0_t3_l0, rk1m_dalpha_xx_o0_t2_l0, rk1m_dalpha_xx_o0_t1_l0, rk1dalpha_xx, rk1m_dalpha_xz_o0_t14_l0, rk1m_dalpha_xz_o0_t13_l0, rk1m_dalpha_xz_o0_t12_l0, rk1m_dalpha_xz_o0_t11_l0, rk1m_dalpha_xz_o0_t10_l0, rk1m_dalpha_xz_o0_t9_l0, rk1m_dalpha_xz_o0_t8_l0, rk1m_dalpha_xz_o0_t7_l0, rk1m_dalpha_xz_o0_t6_l0, rk1m_dalpha_xz_o0_t5_l0, rk1m_dalpha_xz_o0_t4_l0, rk1m_dalpha_xz_o0_t3_l0, rk1m_dalpha_xz_o0_t2_l0, rk1m_dalpha_xz_o0_t1_l0, rk1dalpha_xz, rk1m_dalpha_xy_o0_t14_l0, rk1m_dalpha_xy_o0_t13_l0, rk1m_dalpha_xy_o0_t12_l0, rk1m_dalpha_xy_o0_t11_l0, rk1m_dalpha_xy_o0_t10_l0, rk1m_dalpha_xy_o0_t9_l0, rk1m_dalpha_xy_o0_t8_l0, rk1m_dalpha_xy_o0_t7_l0, rk1m_dalpha_xy_o0_t6_l0, rk1m_dalpha_xy_o0_t5_l0, rk1m_dalpha_xy_o0_t4_l0, rk1m_dalpha_xy_o0_t3_l0, rk1m_dalpha_xy_o0_t2_l0, rk1m_dalpha_xy_o0_t1_l0, rk1dalpha_xy, rk1m_Rp_xx_o0_t49_l0, rk1m_Rp_xx_o0_t48_l0, rk1m_Rp_xx_o0_t47_l0, rk1m_Rp_xx_o0_t46_l0, rk1m_Rp_xx_o0_t45_l0, rk1m_Rp_xx_o0_t44_l0, rk1m_Rp_xx_o0_t43_l0, rk1m_Rp_xx_o0_t42_l0, rk1m_Rp_xx_o0_t41_l0, rk1m_Rp_xx_o0_t40_l0, rk1m_Rp_xx_o0_t39_l0, rk1m_Rp_xx_o0_t38_l0, rk1m_Rp_xx_o0_t37_l0, rk1m_Rp_xx_o0_t36_l0, rk1m_Rp_xx_o0_t35_l0, rk1m_Rp_xx_o0_t34_l0, rk1m_Rp_xx_o0_t33_l0, rk1m_Rp_xx_o0_t32_l0, rk1m_Rp_xx_o0_t31_l0, rk1m_Rp_xx_o0_t30_l0, rk1m_Rp_xx_o0_t29_l0, rk1m_Rp_xx_o0_t28_l0, rk1m_Rp_xx_o0_t27_l0, rk1m_Rp_xx_o0_t26_l0, rk1m_Rp_xx_o0_t25_l0, rk1m_Rp_xx_o0_t24_l0, rk1m_Rp_xx_o0_t23_l0, rk1m_Rp_xx_o0_t22_l0, rk1m_Rp_xx_o0_t21_l0, rk1m_Rp_xx_o0_t20_l0, rk1m_Rp_xx_o0_t19_l0, rk1m_Rp_xx_o0_t18_l0, rk1m_Rp_xx_o0_t17_l0, rk1m_Rp_xx_o0_t16_l0, rk1m_Rp_xx_o0_t15_l0, rk1m_Rp_xx_o0_t14_l0, rk1m_Rp_xx_o0_t13_l0, rk1m_Rp_xx_o0_t12_l0, rk1m_Rp_xx_o0_t11_l0, rk1m_Rp_xx_o0_t10_l0, rk1m_Rp_xx_o0_t9_l0, rk1m_Rp_xx_o0_t8_l0, rk1m_Rp_xx_o0_t7_l0, rk1m_Rp_xx_o0_t6_l0, rk1m_Rp_xx_o0_t5_l0, rk1m_Rp_xx_o0_t4_l0, rk1m_Rp_xx_o0_t3_l0, rk1m_Rp_xx_o0_t2_l0, rk1m_Rp_xx_o0_t1_l0, rk1m_Rp_xx_o0_t0_l0, rk1Rp_xx, rk1m_Rp_zz_o0_t49_l0, rk1m_Rp_zz_o0_t48_l0, rk1m_Rp_zz_o0_t47_l0, rk1m_Rp_zz_o0_t46_l0, rk1m_Rp_zz_o0_t45_l0, rk1m_Rp_zz_o0_t44_l0, rk1m_Rp_zz_o0_t43_l0, rk1m_Rp_zz_o0_t42_l0, rk1m_Rp_zz_o0_t41_l0, rk1m_Rp_zz_o0_t40_l0, rk1m_Rp_zz_o0_t39_l0, rk1m_Rp_zz_o0_t38_l0, rk1m_Rp_zz_o0_t37_l0, rk1m_Rp_zz_o0_t36_l0, rk1m_Rp_zz_o0_t35_l0, rk1m_Rp_zz_o0_t34_l0, rk1m_Rp_zz_o0_t33_l0, rk1m_Rp_zz_o0_t32_l0, rk1m_Rp_zz_o0_t31_l0, rk1m_Rp_zz_o0_t30_l0, rk1m_Rp_zz_o0_t29_l0, rk1m_Rp_zz_o0_t28_l0, rk1m_Rp_zz_o0_t27_l0, rk1m_Rp_zz_o0_t26_l0, rk1m_Rp_zz_o0_t25_l0, rk1m_Rp_zz_o0_t24_l0, rk1m_Rp_zz_o0_t23_l0, rk1m_Rp_zz_o0_t22_l0, rk1m_Rp_zz_o0_t21_l0, rk1m_Rp_zz_o0_t20_l0, rk1m_Rp_zz_o0_t19_l0, rk1m_Rp_zz_o0_t18_l0, rk1m_Rp_zz_o0_t17_l0, rk1m_Rp_zz_o0_t16_l0, rk1m_Rp_zz_o0_t15_l0, rk1m_Rp_zz_o0_t14_l0, rk1m_Rp_zz_o0_t13_l0, rk1m_Rp_zz_o0_t12_l0, rk1m_Rp_zz_o0_t11_l0, rk1m_Rp_zz_o0_t10_l0, rk1m_Rp_zz_o0_t9_l0, rk1m_Rp_zz_o0_t8_l0, rk1m_Rp_zz_o0_t7_l0, rk1m_Rp_zz_o0_t6_l0, rk1m_Rp_zz_o0_t5_l0, rk1m_Rp_zz_o0_t4_l0, rk1m_Rp_zz_o0_t3_l0, rk1m_Rp_zz_o0_t2_l0, rk1m_Rp_zz_o0_t1_l0, rk1m_Rp_zz_o0_t0_l0, rk1Rp_zz, rk1R_zz, rk1R_xx, rk1m_Rp_xy_o0_t49_l0, rk1m_Rp_xy_o0_t48_l0, rk1m_Rp_xy_o0_t47_l0, rk1m_Rp_xy_o0_t46_l0, rk1m_Rp_xy_o0_t45_l0, rk1m_Rp_xy_o0_t44_l0, rk1m_Rp_xy_o0_t43_l0, rk1m_Rp_xy_o0_t42_l0, rk1m_Rp_xy_o0_t41_l0, rk1m_Rp_xy_o0_t40_l0, rk1m_Rp_xy_o0_t39_l0, rk1m_Rp_xy_o0_t38_l0, rk1m_Rp_xy_o0_t37_l0, rk1m_Rp_xy_o0_t36_l0, rk1m_Rp_xy_o0_t35_l0, rk1m_Rp_xy_o0_t34_l0, rk1m_Rp_xy_o0_t33_l0, rk1m_Rp_xy_o0_t32_l0, rk1m_Rp_xy_o0_t31_l0, rk1m_Rp_xy_o0_t30_l0, rk1m_Rp_xy_o0_t29_l0, rk1m_Rp_xy_o0_t28_l0, rk1m_Rp_xy_o0_t27_l0, rk1m_Rp_xy_o0_t26_l0, rk1m_Rp_xy_o0_t25_l0, rk1m_Rp_xy_o0_t24_l0, rk1m_Rp_xy_o0_t23_l0, rk1m_Rp_xy_o0_t22_l0, rk1m_Rp_xy_o0_t21_l0, rk1m_Rp_xy_o0_t20_l0, rk1m_Rp_xy_o0_t19_l0, rk1m_Rp_xy_o0_t18_l0, rk1m_Rp_xy_o0_t17_l0, rk1m_Rp_xy_o0_t16_l0, rk1m_Rp_xy_o0_t15_l0, rk1m_Rp_xy_o0_t14_l0, rk1m_Rp_xy_o0_t13_l0, rk1m_Rp_xy_o0_t12_l0, rk1m_Rp_xy_o0_t11_l0, rk1m_Rp_xy_o0_t10_l0, rk1m_Rp_xy_o0_t9_l0, rk1m_Rp_xy_o0_t8_l0, rk1m_Rp_xy_o0_t7_l0, rk1m_Rp_xy_o0_t6_l0, rk1m_Rp_xy_o0_t5_l0, rk1m_Rp_xy_o0_t4_l0, rk1m_Rp_xy_o0_t3_l0, rk1m_Rp_xy_o0_t2_l0, rk1m_Rp_xy_o0_t1_l0, rk1m_Rp_xy_o0_t0_l0, rk1Rp_xy, rk1R_xy, rk1m_Rp_xz_o0_t49_l0, rk1m_Rp_xz_o0_t48_l0, rk1m_Rp_xz_o0_t47_l0, rk1m_Rp_xz_o0_t46_l0, rk1m_Rp_xz_o0_t45_l0, rk1m_Rp_xz_o0_t44_l0, rk1m_Rp_xz_o0_t43_l0, rk1m_Rp_xz_o0_t42_l0, rk1m_Rp_xz_o0_t41_l0, rk1m_Rp_xz_o0_t40_l0, rk1m_Rp_xz_o0_t39_l0, rk1m_Rp_xz_o0_t38_l0, rk1m_Rp_xz_o0_t37_l0, rk1m_Rp_xz_o0_t36_l0, rk1m_Rp_xz_o0_t35_l0, rk1m_Rp_xz_o0_t34_l0, rk1m_Rp_xz_o0_t33_l0, rk1m_Rp_xz_o0_t32_l0, rk1m_Rp_xz_o0_t31_l0, rk1m_Rp_xz_o0_t30_l0, rk1m_Rp_xz_o0_t29_l0, rk1m_Rp_xz_o0_t28_l0, rk1m_Rp_xz_o0_t27_l0, rk1m_Rp_xz_o0_t26_l0, rk1m_Rp_xz_o0_t25_l0, rk1m_Rp_xz_o0_t24_l0, rk1m_Rp_xz_o0_t23_l0, rk1m_Rp_xz_o0_t22_l0, rk1m_Rp_xz_o0_t21_l0, rk1m_Rp_xz_o0_t20_l0, rk1m_Rp_xz_o0_t19_l0, rk1m_Rp_xz_o0_t18_l0, rk1m_Rp_xz_o0_t17_l0, rk1m_Rp_xz_o0_t16_l0, rk1m_Rp_xz_o0_t15_l0, rk1m_Rp_xz_o0_t14_l0, rk1m_Rp_xz_o0_t13_l0, rk1m_Rp_xz_o0_t12_l0, rk1m_Rp_xz_o0_t11_l0, rk1m_Rp_xz_o0_t10_l0, rk1m_Rp_xz_o0_t9_l0, rk1m_Rp_xz_o0_t8_l0, rk1m_Rp_xz_o0_t7_l0, rk1m_Rp_xz_o0_t6_l0, rk1m_Rp_xz_o0_t5_l0, rk1m_Rp_xz_o0_t4_l0, rk1m_Rp_xz_o0_t3_l0, rk1m_Rp_xz_o0_t2_l0, rk1m_Rp_xz_o0_t1_l0, rk1m_Rp_xz_o0_t0_l0, rk1Rp_xz, rk1R_xz, rk1m_Rp_yy_o0_t49_l0, rk1m_Rp_yy_o0_t48_l0, rk1m_Rp_yy_o0_t47_l0, rk1m_Rp_yy_o0_t46_l0, rk1m_Rp_yy_o0_t45_l0, rk1m_Rp_yy_o0_t44_l0, rk1m_Rp_yy_o0_t43_l0, rk1m_Rp_yy_o0_t42_l0, rk1m_Rp_yy_o0_t41_l0, rk1m_Rp_yy_o0_t40_l0, rk1m_Rp_yy_o0_t39_l0, rk1m_Rp_yy_o0_t38_l0, rk1m_Rp_yy_o0_t37_l0, rk1m_Rp_yy_o0_t36_l0, rk1m_Rp_yy_o0_t35_l0, rk1m_Rp_yy_o0_t34_l0, rk1m_Rp_yy_o0_t33_l0, rk1m_Rp_yy_o0_t32_l0, rk1m_Rp_yy_o0_t31_l0, rk1m_Rp_yy_o0_t30_l0, rk1m_Rp_yy_o0_t29_l0, rk1m_Rp_yy_o0_t28_l0, rk1m_Rp_yy_o0_t27_l0, rk1m_Rp_yy_o0_t26_l0, rk1m_Rp_yy_o0_t25_l0, rk1m_Rp_yy_o0_t24_l0, rk1m_Rp_yy_o0_t23_l0, rk1m_Rp_yy_o0_t22_l0, rk1m_Rp_yy_o0_t21_l0, rk1m_Rp_yy_o0_t20_l0, rk1m_Rp_yy_o0_t19_l0, rk1m_Rp_yy_o0_t18_l0, rk1m_Rp_yy_o0_t17_l0, rk1m_Rp_yy_o0_t16_l0, rk1m_Rp_yy_o0_t15_l0, rk1m_Rp_yy_o0_t14_l0, rk1m_Rp_yy_o0_t13_l0, rk1m_Rp_yy_o0_t12_l0, rk1m_Rp_yy_o0_t11_l0, rk1m_Rp_yy_o0_t10_l0, rk1m_Rp_yy_o0_t9_l0, rk1m_Rp_yy_o0_t8_l0, rk1m_Rp_yy_o0_t7_l0, rk1m_Rp_yy_o0_t6_l0, rk1m_Rp_yy_o0_t5_l0, rk1m_Rp_yy_o0_t4_l0, rk1m_Rp_yy_o0_t3_l0, rk1m_Rp_yy_o0_t2_l0, rk1m_Rp_yy_o0_t1_l0, rk1m_Rp_yy_o0_t0_l0, rk1Rp_yy, rk1R_yy, rk1m_Rp_yz_o0_t49_l0, rk1m_Rp_yz_o0_t48_l0, rk1m_Rp_yz_o0_t47_l0, rk1m_Rp_yz_o0_t46_l0, rk1m_Rp_yz_o0_t45_l0, rk1m_Rp_yz_o0_t44_l0, rk1m_Rp_yz_o0_t43_l0, rk1m_Rp_yz_o0_t42_l0, rk1m_Rp_yz_o0_t41_l0, rk1m_Rp_yz_o0_t40_l0, rk1m_Rp_yz_o0_t39_l0, rk1m_Rp_yz_o0_t38_l0, rk1m_Rp_yz_o0_t37_l0, rk1m_Rp_yz_o0_t36_l0, rk1m_Rp_yz_o0_t35_l0, rk1m_Rp_yz_o0_t34_l0, rk1m_Rp_yz_o0_t33_l0, rk1m_Rp_yz_o0_t32_l0, rk1m_Rp_yz_o0_t31_l0, rk1m_Rp_yz_o0_t30_l0, rk1m_Rp_yz_o0_t29_l0, rk1m_Rp_yz_o0_t28_l0, rk1m_Rp_yz_o0_t27_l0, rk1m_Rp_yz_o0_t26_l0, rk1m_Rp_yz_o0_t25_l0, rk1m_Rp_yz_o0_t24_l0, rk1m_Rp_yz_o0_t23_l0, rk1m_Rp_yz_o0_t22_l0, rk1m_Rp_yz_o0_t21_l0, rk1m_Rp_yz_o0_t20_l0, rk1m_Rp_yz_o0_t19_l0, rk1m_Rp_yz_o0_t18_l0, rk1m_Rp_yz_o0_t17_l0, rk1m_Rp_yz_o0_t16_l0, rk1m_Rp_yz_o0_t15_l0, rk1m_Rp_yz_o0_t14_l0, rk1m_Rp_yz_o0_t13_l0, rk1m_Rp_yz_o0_t12_l0, rk1m_Rp_yz_o0_t11_l0, rk1m_Rp_yz_o0_t10_l0, rk1m_Rp_yz_o0_t9_l0, rk1m_Rp_yz_o0_t8_l0, rk1m_Rp_yz_o0_t7_l0, rk1m_Rp_yz_o0_t6_l0, rk1m_Rp_yz_o0_t5_l0, rk1m_Rp_yz_o0_t4_l0, rk1m_Rp_yz_o0_t3_l0, rk1m_Rp_yz_o0_t2_l0, rk1m_Rp_yz_o0_t1_l0, rk1m_Rp_yz_o0_t0_l0, rk1Rp_yz, rk1R_yz, rk1R, rk1m_dalpha_yz_o0_t14_l0, rk1m_dalpha_yz_o0_t13_l0, rk1m_dalpha_yz_o0_t12_l0, rk1m_dalpha_yz_o0_t11_l0, rk1m_dalpha_yz_o0_t10_l0, rk1m_dalpha_yz_o0_t9_l0, rk1m_dalpha_yz_o0_t8_l0, rk1m_dalpha_yz_o0_t7_l0, rk1m_dalpha_yz_o0_t6_l0, rk1m_dalpha_yz_o0_t5_l0, rk1m_dalpha_yz_o0_t4_l0, rk1m_dalpha_yz_o0_t3_l0, rk1m_dalpha_yz_o0_t2_l0, rk1m_dalpha_yz_o0_t1_l0, rk1dalpha_yz, rk1m_dalpha_yy_o0_t14_l0, rk1m_dalpha_yy_o0_t13_l0, rk1m_dalpha_yy_o0_t12_l0, rk1m_dalpha_yy_o0_t11_l0, rk1m_dalpha_yy_o0_t10_l0, rk1m_dalpha_yy_o0_t9_l0, rk1m_dalpha_yy_o0_t8_l0, rk1m_dalpha_yy_o0_t7_l0, rk1m_dalpha_yy_o0_t6_l0, rk1m_dalpha_yy_o0_t4_l0, rk1m_dalpha_yy_o0_t3_l0, rk1m_dalpha_yy_o0_t2_l0, rk1m_dalpha_yy_o0_t1_l0, rk1dalpha_yy, rk1m_dalpha_zz_o0_t14_l0, rk1m_dalpha_zz_o0_t13_l0, rk1m_dalpha_zz_o0_t12_l0, rk1m_dalpha_zz_o0_t11_l0, rk1m_dalpha_zz_o0_t10_l0, rk1m_dalpha_zz_o0_t9_l0, rk1m_dalpha_zz_o0_t8_l0, rk1m_dalpha_zz_o0_t7_l0, rk1m_dalpha_zz_o0_t6_l0, rk1m_dalpha_zz_o0_t4_l0, rk1m_dalpha_zz_o0_t3_l0, rk1m_dalpha_zz_o0_t2_l0, rk1m_dalpha_zz_o0_t1_l0, rk1dalpha_zz, rk1trdalpha, rk1Psi1TF_yz, rk1Psi1TF_yy, rk1Psi1TF_xy, rk1Psi1TF_xx, rk1Psi1TF_xz, rk1Psi1TF_zz, d_gammac_xx_o2_t3_m0_l0, d_gammac_xy_o2_t6_m0_l0, d_gammac_xz_o2_t6_m0_l0, d_gammac_yy_o2_t3_m0_l0, d_gammac_yx_o2_t6_m0_l0, d_gammac_yz_o2_t6_m0_l0, d_gammac_zz_o2_t3_m0_l0, d_gammac_zx_o2_t6_m0_l0, d_gammac_zy_o2_t6_m0_l0, d_A_xx_o2_t3_m0_l0, d_A_xy_o2_t6_m0_l0, d_A_xz_o2_t6_m0_l0, d_A_yy_o2_t3_m0_l0, d_A_yz_o2_t6_m0_l0, d_A_zz_o2_t3_m0_l0, d_Phi_o2_t0_m0_l0, d_trK_o2_t0_m0_l0, d_beta_x_o0_t0_m0_l0, d_alpha_o2_t0_m0_l0, d_Gam_x_o0_t33_m0_l0, d_Gam_y_o0_t33_m0_l0, d_Gam_z_o0_t33_m0_l0, m_Gam_z_o0_t32_l0, m_Gam_z_o0_t31_l0, m_Gam_z_o0_t30_l0, m_Gam_z_o0_t29_l0, m_Gam_z_o0_t28_l0, m_Gam_z_o0_t27_l0, m_Gam_z_o0_t26_l0, m_Gam_z_o0_t25_l0, m_Gam_z_o0_t24_l0, m_Gam_z_o0_t23_l0, m_Gam_z_o0_t22_l0, m_Gam_z_o0_t21_l0, m_Gam_z_o0_t20_l0, m_Gam_z_o0_t19_l0, m_Gam_z_o0_t18_l0, m_Gam_z_o0_t17_l0, m_Gam_z_o0_t16_l0, m_Gam_z_o0_t15_l0, m_Gam_z_o0_t14_l0, m_Gam_z_o0_t13_l0, m_Gam_z_o0_t12_l0, m_Gam_z_o0_t11_l0, m_Gam_z_o0_t10_l0, m_Gam_z_o0_t9_l0, m_Gam_z_o0_t8_l0, m_Gam_z_o0_t7_l0, m_Gam_z_o0_t6_l0, m_Gam_z_o0_t5_l0, m_Gam_z_o0_t4_l0, m_Gam_z_o0_t3_l0, m_Gam_z_o0_t2_l0, m_Gam_z_o0_t1_l0, m_Gam_z_o0_t0_l0, m_Gam_y_o0_t32_l0, m_Gam_y_o0_t31_l0, m_Gam_y_o0_t30_l0, m_Gam_y_o0_t29_l0, m_Gam_y_o0_t28_l0, m_Gam_y_o0_t27_l0, m_Gam_y_o0_t26_l0, m_Gam_y_o0_t25_l0, m_Gam_y_o0_t24_l0, m_Gam_y_o0_t23_l0, m_Gam_y_o0_t22_l0, m_Gam_y_o0_t21_l0, m_Gam_y_o0_t20_l0, m_Gam_y_o0_t19_l0, m_Gam_y_o0_t18_l0, m_Gam_y_o0_t17_l0, m_Gam_y_o0_t16_l0, m_Gam_y_o0_t15_l0, m_Gam_y_o0_t14_l0, m_Gam_y_o0_t13_l0, m_Gam_y_o0_t12_l0, m_Gam_y_o0_t11_l0, m_Gam_y_o0_t10_l0, m_Gam_y_o0_t9_l0, m_Gam_y_o0_t8_l0, m_Gam_y_o0_t7_l0, m_Gam_y_o0_t6_l0, m_Gam_y_o0_t5_l0, m_Gam_y_o0_t4_l0, m_Gam_y_o0_t3_l0, m_Gam_y_o0_t2_l0, m_Gam_y_o0_t1_l0, m_Gam_y_o0_t0_l0, m_Gam_x_o0_t32_l0, m_Gam_x_o0_t31_l0, m_Gam_x_o0_t30_l0, m_Gam_x_o0_t29_l0, m_Gam_x_o0_t28_l0, m_Gam_x_o0_t27_l0, m_Gam_x_o0_t26_l0, m_Gam_x_o0_t25_l0, m_Gam_x_o0_t24_l0, m_Gam_x_o0_t23_l0, m_Gam_x_o0_t22_l0, m_Gam_x_o0_t21_l0, m_Gam_x_o0_t20_l0, m_Gam_x_o0_t19_l0, m_Gam_x_o0_t18_l0, m_Gam_x_o0_t17_l0, m_Gam_x_o0_t16_l0, m_Gam_x_o0_t15_l0, m_Gam_x_o0_t14_l0, m_Gam_x_o0_t13_l0, m_Gam_x_o0_t12_l0, m_Gam_x_o0_t11_l0, m_Gam_x_o0_t10_l0, m_Gam_x_o0_t9_l0, m_Gam_x_o0_t8_l0, m_Gam_x_o0_t7_l0, m_Gam_x_o0_t6_l0, m_Gam_x_o0_t5_l0, m_Gam_x_o0_t4_l0, m_Gam_x_o0_t3_l0, m_Gam_x_o0_t2_l0, m_Gam_x_o0_t1_l0, m_Gam_x_o0_t0_l0, m_alpha_o1_t2_l0, m_alpha_o1_t1_l0, m_alpha_o1_t0_l0, m_alpha_o0_t2_l0, m_alpha_o0_t1_l0, m_alpha_o0_t0_l0, m_trK_o1_t2_l0, m_trK_o1_t1_l0, m_trK_o1_t0_l0, m_trK_o0_t2_l0, m_trK_o0_t1_l0, m_trK_o0_t0_l0, m_Phi_o1_t2_l0, m_Phi_o1_t1_l0, m_Phi_o1_t0_l0, m_Phi_o0_t2_l0, m_Phi_o0_t1_l0, m_Phi_o0_t0_l0, m_A_zz_o2_t2_l0, m_A_zz_o2_t1_l0, m_A_zz_o2_t0_l0, m_A_zz_o1_t2_l0, m_A_zz_o1_t1_l0, m_A_zz_o1_t0_l0, m_A_zz_o0_t2_l0, m_A_zz_o0_t1_l0, m_A_zz_o0_t0_l0, m_A_yz_o2_t5_l0, m_A_yz_o2_t4_l0, m_A_yz_o2_t3_l0, m_A_yz_o2_t2_l0, m_A_yz_o2_t1_l0, m_A_yz_o2_t0_l0, m_A_yz_o1_t2_l0, m_A_yz_o1_t1_l0, m_A_yz_o1_t0_l0, m_A_yz_o0_t2_l0, m_A_yz_o0_t1_l0, m_A_yz_o0_t0_l0, m_A_yy_o2_t2_l0, m_A_yy_o2_t1_l0, m_A_yy_o2_t0_l0, m_A_yy_o1_t2_l0, m_A_yy_o1_t1_l0, m_A_yy_o1_t0_l0, m_A_yy_o0_t2_l0, m_A_yy_o0_t1_l0, m_A_yy_o0_t0_l0, m_A_xz_o2_t5_l0, m_A_xz_o2_t4_l0, m_A_xz_o2_t3_l0, m_A_xz_o2_t2_l0, m_A_xz_o2_t1_l0, m_A_xz_o2_t0_l0, m_A_xz_o1_t2_l0, m_A_xz_o1_t1_l0, m_A_xz_o1_t0_l0, m_A_xz_o0_t2_l0, m_A_xz_o0_t1_l0, m_A_xz_o0_t0_l0, m_A_xy_o2_t5_l0, m_A_xy_o2_t4_l0, m_A_xy_o2_t3_l0, m_A_xy_o2_t2_l0, m_A_xy_o2_t1_l0, m_A_xy_o2_t0_l0, m_A_xy_o1_t2_l0, m_A_xy_o1_t1_l0, m_A_xy_o1_t0_l0, m_A_xy_o0_t2_l0, m_A_xy_o0_t1_l0, m_A_xy_o0_t0_l0, m_A_xx_o2_t2_l0, m_A_xx_o2_t1_l0, m_A_xx_o2_t0_l0, m_A_xx_o1_t2_l0, m_A_xx_o1_t1_l0, m_A_xx_o1_t0_l0, m_A_xx_o0_t2_l0, m_A_xx_o0_t1_l0, m_A_xx_o0_t0_l0, m_gammac_zy_o1_t2_l0, m_gammac_zy_o1_t1_l0, m_gammac_zy_o1_t0_l0, m_gammac_zy_o0_t2_l0, m_gammac_zy_o0_t1_l0, m_gammac_zy_o0_t0_l0, m_gammac_zx_o1_t2_l0, m_gammac_zx_o1_t1_l0, m_gammac_zx_o1_t0_l0, m_gammac_zx_o0_t2_l0, m_gammac_zx_o0_t1_l0, m_gammac_zx_o0_t0_l0, m_gammac_zz_o2_t2_l0, m_gammac_zz_o2_t1_l0, m_gammac_zz_o2_t0_l0, m_gammac_zz_o1_t2_l0, m_gammac_zz_o1_t1_l0, m_gammac_zz_o1_t0_l0, m_gammac_zz_o0_t2_l0, m_gammac_zz_o0_t1_l0, m_gammac_zz_o0_t0_l0, m_gammac_yz_o2_t5_l0, m_gammac_yz_o2_t4_l0, m_gammac_yz_o2_t3_l0, m_gammac_yz_o2_t2_l0, m_gammac_yz_o2_t1_l0, m_gammac_yz_o2_t0_l0, m_gammac_yz_o1_t2_l0, m_gammac_yz_o1_t1_l0, m_gammac_yz_o1_t0_l0, m_gammac_yz_o0_t2_l0, m_gammac_yz_o0_t1_l0, m_gammac_yz_o0_t0_l0, m_gammac_yx_o1_t2_l0, m_gammac_yx_o1_t1_l0, m_gammac_yx_o1_t0_l0, m_gammac_yx_o0_t2_l0, m_gammac_yx_o0_t1_l0, m_gammac_yx_o0_t0_l0, m_gammac_yy_o2_t2_l0, m_gammac_yy_o2_t1_l0, m_gammac_yy_o2_t0_l0, m_gammac_yy_o1_t2_l0, m_gammac_yy_o1_t1_l0, m_gammac_yy_o1_t0_l0, m_gammac_yy_o0_t2_l0, m_gammac_yy_o0_t1_l0, m_gammac_yy_o0_t0_l0, m_gammac_xz_o2_t5_l0, m_gammac_xz_o2_t4_l0, m_gammac_xz_o2_t3_l0, m_gammac_xz_o2_t2_l0, m_gammac_xz_o2_t1_l0, m_gammac_xz_o2_t0_l0, m_gammac_xz_o1_t2_l0, m_gammac_xz_o1_t1_l0, m_gammac_xz_o1_t0_l0, m_gammac_xz_o0_t2_l0, m_gammac_xz_o0_t1_l0, m_gammac_xz_o0_t0_l0, m_gammac_xy_o2_t5_l0, m_gammac_xy_o2_t4_l0, m_gammac_xy_o2_t3_l0, m_gammac_xy_o2_t2_l0, m_gammac_xy_o2_t1_l0, m_gammac_xy_o2_t0_l0, m_gammac_xy_o1_t2_l0, m_gammac_xy_o1_t1_l0, m_gammac_xy_o1_t0_l0, m_gammac_xy_o0_t2_l0, m_gammac_xy_o0_t1_l0, m_gammac_xy_o0_t0_l0, m_gammac_xx_o2_t2_l0, m_gammac_xx_o2_t1_l0, m_gammac_xx_o2_t0_l0, m_gammac_xx_o1_t2_l0, m_gammac_xx_o1_t1_l0, m_gammac_xx_o1_t0_l0, m_gammac_xx_o0_t2_l0, m_gammac_xx_o0_t1_l0, m_gammac_xx_o0_t0_l0, RHS_gammac_xx, RHS_gammac_xy, RHS_gammac_xz, RHS_gammac_yy, RHS_gammac_yx, RHS_gammac_yz, RHS_gammac_zz, RHS_gammac_zx, RHS_gammac_zy, RHS_A_xx, RHS_A_xy, RHS_A_xz, RHS_A_yy, RHS_A_yz, RHS_A_zz, RHS_Phi, RHS_trK, RHS_beta_x, RHS_beta_y, RHS_beta_z, RHS_alpha, RHS_Gam_x, RHS_Gam_y, RHS_Gam_z;
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((i + 3 < ilast && i - 3 >= 0 && j + 3 < jlast && j - 3 >= 0 && k + 3 < klast && k - 3 >= 0)) {
						d_div_beta_o0_t0_m0_l0 = D1CDO4_i(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t0_m0_l0 = D1CDO4_j(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t0_m0_l0 = D1CDO4_k(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t0_m0_l0 = D2CDO4_i(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t4_m0_l0 = D2CDO4_j(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t8_m0_l0 = D2CDO4_k(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t1_m0_l0 = D1CDO4_i(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t1_m0_l0 = D1CDO4_j(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t1_m0_l0 = D1CDO4_k(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t0_m0_l0 = D2CDO4_i(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t10_m0_l0 = D1CDO4crossed_ji(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t13_m0_l0 = D2CDO4_j(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t16_m0_l0 = D1CDO4crossed_jk(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t8_m0_l0 = D2CDO4_k(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t2_m0_l0 = D1CDO4_i(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t2_m0_l0 = D1CDO4_j(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t2_m0_l0 = D1CDO4_k(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t0_m0_l0 = D2CDO4_i(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t4_m0_l0 = D2CDO4_j(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t11_m0_l0 = D1CDO4crossed_ki(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t14_m0_l0 = D1CDO4crossed_kj(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t17_m0_l0 = D2CDO4_k(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t0_m0_l0 = lieforward_i(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t0_m0_l0 = liebackward_i(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t1_m0_l0 = lieforward_j(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t1_m0_l0 = liebackward_j(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t2_m0_l0 = lieforward_k(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t2_m0_l0 = liebackward_k(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t0_m0_l0 = lieforward_i(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t0_m0_l0 = liebackward_i(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t1_m0_l0 = lieforward_j(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t1_m0_l0 = liebackward_j(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t2_m0_l0 = lieforward_k(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t2_m0_l0 = liebackward_k(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t0_m0_l0 = lieforward_i(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t0_m0_l0 = liebackward_i(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t1_m0_l0 = lieforward_j(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t1_m0_l0 = liebackward_j(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t2_m0_l0 = lieforward_k(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t2_m0_l0 = liebackward_k(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t0_m0_l0 = lieforward_i(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t0_m0_l0 = liebackward_i(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t1_m0_l0 = lieforward_j(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t1_m0_l0 = liebackward_j(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t2_m0_l0 = lieforward_k(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t2_m0_l0 = liebackward_k(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t0_m0_l0 = lieforward_i(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t0_m0_l0 = liebackward_i(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t1_m0_l0 = lieforward_j(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t1_m0_l0 = liebackward_j(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t2_m0_l0 = lieforward_k(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t2_m0_l0 = liebackward_k(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t0_m0_l0 = lieforward_i(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t0_m0_l0 = liebackward_i(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t1_m0_l0 = lieforward_j(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t1_m0_l0 = liebackward_j(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t2_m0_l0 = lieforward_k(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t2_m0_l0 = liebackward_k(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t0_m0_l0 = lieforward_i(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t0_m0_l0 = liebackward_i(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t1_m0_l0 = lieforward_j(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t1_m0_l0 = liebackward_j(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t2_m0_l0 = lieforward_k(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t2_m0_l0 = liebackward_k(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t0_m0_l0 = lieforward_i(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t0_m0_l0 = liebackward_i(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t1_m0_l0 = lieforward_j(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t1_m0_l0 = liebackward_j(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t2_m0_l0 = lieforward_k(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t2_m0_l0 = liebackward_k(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t0_m0_l0 = lieforward_i(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t0_m0_l0 = liebackward_i(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t1_m0_l0 = lieforward_j(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t1_m0_l0 = liebackward_j(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t2_m0_l0 = lieforward_k(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t2_m0_l0 = liebackward_k(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t1_m0_l0 = D1CDO4_i(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t0_m0_l0 = lieforward_i(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t0_m0_l0 = liebackward_i(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t2_m0_l0 = D1CDO4_j(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t1_m0_l0 = lieforward_j(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t1_m0_l0 = liebackward_j(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t3_m0_l0 = D1CDO4_k(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t2_m0_l0 = lieforward_k(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t2_m0_l0 = liebackward_k(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t0_m0_l0 = D2CDO4_i(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xy_o0_t0_m0_l0 = D1CDO4crossed_ji(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yy_o0_t0_m0_l0 = D2CDO4_j(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xz_o0_t0_m0_l0 = D1CDO4crossed_ki(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yz_o0_t0_m0_l0 = D1CDO4crossed_kj(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_zz_o0_t0_m0_l0 = D2CDO4_k(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t4_m0_l0 = D1CDO4_i(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t0_m0_l0 = lieforward_i(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t0_m0_l0 = liebackward_i(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t9_m0_l0 = D1CDO4_j(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t1_m0_l0 = lieforward_j(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t1_m0_l0 = liebackward_j(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t12_m0_l0 = D1CDO4_k(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t2_m0_l0 = lieforward_k(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t2_m0_l0 = liebackward_k(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t0_m0_l0 = lieforward_i(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t0_m0_l0 = liebackward_i(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t1_m0_l0 = lieforward_j(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t1_m0_l0 = liebackward_j(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t2_m0_l0 = lieforward_k(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t2_m0_l0 = liebackward_k(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t0_m0_l0 = lieforward_i(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t0_m0_l0 = liebackward_i(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t1_m0_l0 = lieforward_j(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t1_m0_l0 = liebackward_j(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t2_m0_l0 = lieforward_k(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t2_m0_l0 = liebackward_k(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t0_m0_l0 = lieforward_i(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t0_m0_l0 = liebackward_i(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t1_m0_l0 = lieforward_j(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t1_m0_l0 = liebackward_j(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t2_m0_l0 = lieforward_k(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t2_m0_l0 = liebackward_k(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t0_m0_l0 = lieforward_i(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t0_m0_l0 = liebackward_i(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t1_m0_l0 = lieforward_j(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t1_m0_l0 = liebackward_j(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t2_m0_l0 = lieforward_k(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t2_m0_l0 = liebackward_k(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t0_m0_l0 = lieforward_i(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t0_m0_l0 = liebackward_i(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t1_m0_l0 = lieforward_j(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t1_m0_l0 = liebackward_j(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t2_m0_l0 = lieforward_k(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t2_m0_l0 = liebackward_k(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t0_m0_l0 = lieforward_i(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t0_m0_l0 = liebackward_i(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t1_m0_l0 = lieforward_j(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t1_m0_l0 = liebackward_j(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t2_m0_l0 = lieforward_k(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t2_m0_l0 = liebackward_k(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t0_m0_l0 = lieforward_i(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t0_m0_l0 = liebackward_i(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t27_m0_l0 = D1CDO4_i(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t1_m0_l0 = lieforward_j(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t1_m0_l0 = liebackward_j(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t28_m0_l0 = D1CDO4_j(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t2_m0_l0 = lieforward_k(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t2_m0_l0 = liebackward_k(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t29_m0_l0 = D1CDO4_k(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						rk1div_beta = (d_div_beta_o0_t0_m0_l0 + d_div_beta_o0_t1_m0_l0) + d_div_beta_o0_t2_m0_l0;
						rk1Detgammac = vector(rk1gammac_yy, i, j, k) * vector(rk1gammac_zz, i, j, k) * vector(rk1gammac_xx, i, j, k) + (-vector(rk1gammac_yy, i, j, k) * (vector(rk1gammac_xz, i, j, k) * vector(rk1gammac_xz, i, j, k))) + (-vector(rk1gammac_zz, i, j, k) * (vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_xy, i, j, k))) + (-(vector(rk1gammac_yz, i, j, k) * vector(rk1gammac_yz, i, j, k)) * vector(rk1gammac_xx, i, j, k)) + 2.0 * vector(rk1gammac_yz, i, j, k) * vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_xz, i, j, k);
						rk1gamma_zz = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_zz, i, j, k);
						rk1iDetgammac = 1.0 / rk1Detgammac;
						rk1gamma_yy = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_yy, i, j, k);
						rk1gamma_yz = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_yz, i, j, k);
						rk1gamma_xx = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_xx, i, j, k);
						rk1gamma_xy = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_xy, i, j, k);
						rk1gamma_xz = exp(4.0 * vector(rk1Phi, i, j, k)) * vector(rk1gammac_xz, i, j, k);
						rk1Detgamma = rk1gamma_yy * rk1gamma_zz * rk1gamma_xx + (-rk1gamma_yy * (rk1gamma_xz * rk1gamma_xz)) + (-rk1gamma_zz * (rk1gamma_xy * rk1gamma_xy)) + (-(rk1gamma_yz * rk1gamma_yz) * rk1gamma_xx) + 2.0 * rk1gamma_yz * rk1gamma_xy * rk1gamma_xz;
						rk1iDetgamma = 1.0 / rk1Detgamma;
						rk1gammacu_zz = rk1iDetgammac * (vector(rk1gammac_xx, i, j, k) * vector(rk1gammac_yy, i, j, k) - vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_xy, i, j, k));
						rk1gammau_xx = rk1iDetgamma * (rk1gamma_yy * rk1gamma_zz - rk1gamma_yz * rk1gamma_yz);
						rk1gammau_xy = rk1iDetgamma * ((-rk1gamma_xy * rk1gamma_zz) + rk1gamma_yz * rk1gamma_xz);
						rk1gammau_xz = rk1iDetgamma * (rk1gamma_xy * rk1gamma_yz - rk1gamma_yy * rk1gamma_xz);
						rk1gammacu_yy = rk1iDetgammac * (vector(rk1gammac_xx, i, j, k) * vector(rk1gammac_zz, i, j, k) - vector(rk1gammac_xz, i, j, k) * vector(rk1gammac_xz, i, j, k));
						rk1gammacu_yz = rk1iDetgammac * ((-vector(rk1gammac_xx, i, j, k) * vector(rk1gammac_yz, i, j, k)) + vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_xz, i, j, k));
						rk1gammacu_zy = rk1gammacu_yz;
						rk1gammau_yx = rk1gammau_xy;
						rk1gammau_yy = rk1iDetgamma * (rk1gamma_xx * rk1gamma_zz - rk1gamma_xz * rk1gamma_xz);
						rk1gammau_yz = rk1iDetgamma * ((-rk1gamma_xx * rk1gamma_yz) + rk1gamma_xy * rk1gamma_xz);
						rk1gammacu_xz = rk1iDetgammac * (vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_yz, i, j, k) - vector(rk1gammac_yy, i, j, k) * vector(rk1gammac_xz, i, j, k));
						rk1gammacu_zx = rk1gammacu_xz;
						rk1Am_zx = rk1gammacu_zx * vector(rk1A_xx, i, j, k) + rk1gammacu_zy * vector(rk1A_xy, i, j, k) + rk1gammacu_zz * vector(rk1A_xz, i, j, k);
						rk1Am_zz = rk1gammacu_zx * vector(rk1A_xz, i, j, k) + rk1gammacu_zy * vector(rk1A_yz, i, j, k) + rk1gammacu_zz * vector(rk1A_zz, i, j, k);
						rk1Am_zy = rk1gammacu_zx * vector(rk1A_xy, i, j, k) + rk1gammacu_zy * vector(rk1A_yy, i, j, k) + rk1gammacu_zz * vector(rk1A_yz, i, j, k);
						rk1Au_zz = rk1gammacu_zx * rk1Am_zx + rk1gammacu_zy * rk1Am_zy + rk1gammacu_zz * rk1Am_zz;
						rk1gammacu_xx = rk1iDetgammac * (vector(rk1gammac_yy, i, j, k) * vector(rk1gammac_zz, i, j, k) - vector(rk1gammac_yz, i, j, k) * vector(rk1gammac_yz, i, j, k));
						rk1gammacu_xy = rk1iDetgammac * ((-vector(rk1gammac_xy, i, j, k) * vector(rk1gammac_zz, i, j, k)) + vector(rk1gammac_yz, i, j, k) * vector(rk1gammac_xz, i, j, k));
						rk1m_C_xxx_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_xxx_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xxx_o0_t6_m0_l0;
						rk1m_C_xxx_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_xxx_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xxx_o0_t3_m0_l0;
						rk1m_C_xxx_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk1m_C_xxx_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk1C_xxx = (((((((rk1m_C_xxx_o0_t0_l0 + rk1m_C_xxx_o0_t0_l0) + rk1m_C_xxx_o0_t2_l0) + rk1m_C_xxx_o0_t3_l0) + rk1m_C_xxx_o0_t3_l0) + rk1m_C_xxx_o0_t5_l0) + rk1m_C_xxx_o0_t6_l0) + rk1m_C_xxx_o0_t6_l0) + rk1m_C_xxx_o0_t8_l0;
						rk1m_C_xxz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xxz_o0_t8_m0_l0;
						rk1m_C_xxz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xxz_o0_t7_m0_l0;
						rk1m_C_xxz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_xxz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xxz_o0_t5_m0_l0;
						rk1m_C_xxz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xxz_o0_t4_m0_l0;
						rk1m_C_xxz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_xxz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk1m_C_xxz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_xxz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk1C_xxz = (((((((rk1m_C_xxz_o0_t0_l0 + rk1m_C_xxz_o0_t1_l0) + rk1m_C_xxz_o0_t2_l0) + rk1m_C_xxz_o0_t3_l0) + rk1m_C_xxz_o0_t4_l0) + rk1m_C_xxz_o0_t5_l0) + rk1m_C_xxz_o0_t6_l0) + rk1m_C_xxz_o0_t7_l0) + rk1m_C_xxz_o0_t8_l0;
						rk1m_C_zxz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xxz_o0_t8_m0_l0;
						rk1m_C_zxz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xxz_o0_t7_m0_l0;
						rk1m_C_zxz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_zxz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xxz_o0_t5_m0_l0;
						rk1m_C_zxz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xxz_o0_t4_m0_l0;
						rk1m_C_zxz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_zxz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk1m_C_zxz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_zxz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk1C_zxz = (((((((rk1m_C_zxz_o0_t0_l0 + rk1m_C_zxz_o0_t1_l0) + rk1m_C_zxz_o0_t2_l0) + rk1m_C_zxz_o0_t3_l0) + rk1m_C_zxz_o0_t4_l0) + rk1m_C_zxz_o0_t5_l0) + rk1m_C_zxz_o0_t6_l0) + rk1m_C_zxz_o0_t7_l0) + rk1m_C_zxz_o0_t8_l0;
						rk1m_C_xxy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_xxy_o0_t7_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xxy_o0_t7_m0_l0;
						rk1m_C_xxy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xxy_o0_t6_m0_l0;
						rk1m_C_xxy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xxy_o0_t5_m0_l0;
						rk1m_C_xxy_o0_t4_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xxy_o0_t4_m0_l0;
						rk1m_C_xxy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_xxy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk1m_C_xxy_o0_t1_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_xxy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk1C_xxy = (((((((rk1m_C_xxy_o0_t0_l0 + rk1m_C_xxy_o0_t1_l0) + rk1m_C_xxy_o0_t2_l0) + rk1m_C_xxy_o0_t3_l0) + rk1m_C_xxy_o0_t4_l0) + rk1m_C_xxy_o0_t5_l0) + rk1m_C_xxy_o0_t6_l0) + rk1m_C_xxy_o0_t7_l0) + rk1m_C_xxy_o0_t8_l0;
						rk1gammacu_yx = rk1gammacu_xy;
						rk1m_C_yxy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_yxy_o0_t7_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xxy_o0_t7_m0_l0;
						rk1m_C_yxy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xxy_o0_t6_m0_l0;
						rk1m_C_yxy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xxy_o0_t5_m0_l0;
						rk1m_C_yxy_o0_t4_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xxy_o0_t4_m0_l0;
						rk1m_C_yxy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_yxy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk1m_C_yxy_o0_t1_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_yxy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk1C_yxy = (((((((rk1m_C_yxy_o0_t0_l0 + rk1m_C_yxy_o0_t1_l0) + rk1m_C_yxy_o0_t2_l0) + rk1m_C_yxy_o0_t3_l0) + rk1m_C_yxy_o0_t4_l0) + rk1m_C_yxy_o0_t5_l0) + rk1m_C_yxy_o0_t6_l0) + rk1m_C_yxy_o0_t7_l0) + rk1m_C_yxy_o0_t8_l0;
						rk1m_C_yxz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xxz_o0_t8_m0_l0;
						rk1m_C_yxz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xxz_o0_t7_m0_l0;
						rk1m_C_yxz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_yxz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xxz_o0_t5_m0_l0;
						rk1m_C_yxz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xxz_o0_t4_m0_l0;
						rk1m_C_yxz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_yxz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk1m_C_yxz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_yxz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk1C_yxz = (((((((rk1m_C_yxz_o0_t0_l0 + rk1m_C_yxz_o0_t1_l0) + rk1m_C_yxz_o0_t2_l0) + rk1m_C_yxz_o0_t3_l0) + rk1m_C_yxz_o0_t4_l0) + rk1m_C_yxz_o0_t5_l0) + rk1m_C_yxz_o0_t6_l0) + rk1m_C_yxz_o0_t7_l0) + rk1m_C_yxz_o0_t8_l0;
						rk1Cd_xxz = vector(rk1gammac_xx, i, j, k) * rk1C_xxz + vector(rk1gammac_xy, i, j, k) * rk1C_yxz + vector(rk1gammac_xz, i, j, k) * rk1C_zxz;
						rk1Cd_yxz = vector(rk1gammac_yx, i, j, k) * rk1C_xxz + vector(rk1gammac_yy, i, j, k) * rk1C_yxz + vector(rk1gammac_yz, i, j, k) * rk1C_zxz;
						rk1Cd_zxz = vector(rk1gammac_zx, i, j, k) * rk1C_xxz + vector(rk1gammac_zy, i, j, k) * rk1C_yxz + vector(rk1gammac_zz, i, j, k) * rk1C_zxz;
						rk1m_C_yxx_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_yxx_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xxx_o0_t6_m0_l0;
						rk1m_C_yxx_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_yxx_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xxx_o0_t3_m0_l0;
						rk1m_C_yxx_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk1m_C_yxx_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk1C_yxx = (((((((rk1m_C_yxx_o0_t0_l0 + rk1m_C_yxx_o0_t0_l0) + rk1m_C_yxx_o0_t2_l0) + rk1m_C_yxx_o0_t3_l0) + rk1m_C_yxx_o0_t3_l0) + rk1m_C_yxx_o0_t5_l0) + rk1m_C_yxx_o0_t6_l0) + rk1m_C_yxx_o0_t6_l0) + rk1m_C_yxx_o0_t8_l0;
						rk1m_C_xyy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_xyy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xyy_o0_t6_m0_l0;
						rk1m_C_xyy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_xyy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_xyy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_xyy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxy_o0_t5_m0_l0;
						rk1C_xyy = (((((((rk1m_C_xyy_o0_t0_l0 + rk1m_C_xyy_o0_t0_l0) + rk1m_C_xyy_o0_t2_l0) + rk1m_C_xyy_o0_t3_l0) + rk1m_C_xyy_o0_t3_l0) + rk1m_C_xyy_o0_t5_l0) + rk1m_C_xyy_o0_t6_l0) + rk1m_C_xyy_o0_t6_l0) + rk1m_C_xyy_o0_t8_l0;
						rk1m_C_zyy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_zyy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xyy_o0_t6_m0_l0;
						rk1m_C_zyy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_zyy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_zyy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_zyy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxy_o0_t5_m0_l0;
						rk1C_zyy = (((((((rk1m_C_zyy_o0_t0_l0 + rk1m_C_zyy_o0_t0_l0) + rk1m_C_zyy_o0_t2_l0) + rk1m_C_zyy_o0_t3_l0) + rk1m_C_zyy_o0_t3_l0) + rk1m_C_zyy_o0_t5_l0) + rk1m_C_zyy_o0_t6_l0) + rk1m_C_zyy_o0_t6_l0) + rk1m_C_zyy_o0_t8_l0;
						rk1m_C_yyy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_yyy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xyy_o0_t6_m0_l0;
						rk1m_C_yyy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_yyy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk1m_C_yyy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_yyy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxy_o0_t5_m0_l0;
						rk1C_yyy = (((((((rk1m_C_yyy_o0_t0_l0 + rk1m_C_yyy_o0_t0_l0) + rk1m_C_yyy_o0_t2_l0) + rk1m_C_yyy_o0_t3_l0) + rk1m_C_yyy_o0_t3_l0) + rk1m_C_yyy_o0_t5_l0) + rk1m_C_yyy_o0_t6_l0) + rk1m_C_yyy_o0_t6_l0) + rk1m_C_yyy_o0_t8_l0;
						rk1Cd_xyy = vector(rk1gammac_xx, i, j, k) * rk1C_xyy + vector(rk1gammac_xy, i, j, k) * rk1C_yyy + vector(rk1gammac_xz, i, j, k) * rk1C_zyy;
						rk1Cd_yyy = vector(rk1gammac_yx, i, j, k) * rk1C_xyy + vector(rk1gammac_yy, i, j, k) * rk1C_yyy + vector(rk1gammac_yz, i, j, k) * rk1C_zyy;
						rk1Cd_zyy = vector(rk1gammac_zx, i, j, k) * rk1C_xyy + vector(rk1gammac_zy, i, j, k) * rk1C_yyy + vector(rk1gammac_zz, i, j, k) * rk1C_zyy;
						rk1m_C_xyz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_xyz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xyz_o0_t7_m0_l0;
						rk1m_C_xyz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_xyz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_xyz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_xyz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_xyz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_xyz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_xyz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxz_o0_t5_m0_l0;
						rk1C_xyz = (((((((rk1m_C_xyz_o0_t0_l0 + rk1m_C_xyz_o0_t1_l0) + rk1m_C_xyz_o0_t2_l0) + rk1m_C_xyz_o0_t3_l0) + rk1m_C_xyz_o0_t4_l0) + rk1m_C_xyz_o0_t5_l0) + rk1m_C_xyz_o0_t6_l0) + rk1m_C_xyz_o0_t7_l0) + rk1m_C_xyz_o0_t8_l0;
						rk1m_C_zyz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_zyz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xyz_o0_t7_m0_l0;
						rk1m_C_zyz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_zyz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_zyz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_zyz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_zyz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_zyz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_zyz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxz_o0_t5_m0_l0;
						rk1C_zyz = (((((((rk1m_C_zyz_o0_t0_l0 + rk1m_C_zyz_o0_t1_l0) + rk1m_C_zyz_o0_t2_l0) + rk1m_C_zyz_o0_t3_l0) + rk1m_C_zyz_o0_t4_l0) + rk1m_C_zyz_o0_t5_l0) + rk1m_C_zyz_o0_t6_l0) + rk1m_C_zyz_o0_t7_l0) + rk1m_C_zyz_o0_t8_l0;
						rk1m_C_yyz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_yyz_o0_t7_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xyz_o0_t7_m0_l0;
						rk1m_C_yyz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_yyz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_yyz_o0_t4_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xyy_o0_t8_m0_l0;
						rk1m_C_yyz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk1m_C_yyz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxz_o0_t3_m0_l0;
						rk1m_C_yyz_o0_t1_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_yyz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxz_o0_t5_m0_l0;
						rk1C_yyz = (((((((rk1m_C_yyz_o0_t0_l0 + rk1m_C_yyz_o0_t1_l0) + rk1m_C_yyz_o0_t2_l0) + rk1m_C_yyz_o0_t3_l0) + rk1m_C_yyz_o0_t4_l0) + rk1m_C_yyz_o0_t5_l0) + rk1m_C_yyz_o0_t6_l0) + rk1m_C_yyz_o0_t7_l0) + rk1m_C_yyz_o0_t8_l0;
						rk1Cd_xyz = vector(rk1gammac_xx, i, j, k) * rk1C_xyz + vector(rk1gammac_xy, i, j, k) * rk1C_yyz + vector(rk1gammac_xz, i, j, k) * rk1C_zyz;
						rk1Cd_yyz = vector(rk1gammac_yx, i, j, k) * rk1C_xyz + vector(rk1gammac_yy, i, j, k) * rk1C_yyz + vector(rk1gammac_yz, i, j, k) * rk1C_zyz;
						rk1m_C_xzz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_xzz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_xzz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_xy * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_xzz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_xy * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_xzz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_xx * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_xzz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_xx * d_C_xxz_o0_t8_m0_l0;
						rk1C_xzz = (((((((rk1m_C_xzz_o0_t0_l0 + rk1m_C_xzz_o0_t0_l0) + rk1m_C_xzz_o0_t2_l0) + rk1m_C_xzz_o0_t3_l0) + rk1m_C_xzz_o0_t3_l0) + rk1m_C_xzz_o0_t5_l0) + rk1m_C_xzz_o0_t6_l0) + rk1m_C_xzz_o0_t6_l0) + rk1m_C_xzz_o0_t8_l0;
						rk1m_C_zzz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_zzz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_zzz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_zzz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_zzz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_zzz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxz_o0_t8_m0_l0;
						rk1C_zzz = (((((((rk1m_C_zzz_o0_t0_l0 + rk1m_C_zzz_o0_t0_l0) + rk1m_C_zzz_o0_t2_l0) + rk1m_C_zzz_o0_t3_l0) + rk1m_C_zzz_o0_t3_l0) + rk1m_C_zzz_o0_t5_l0) + rk1m_C_zzz_o0_t6_l0) + rk1m_C_zzz_o0_t6_l0) + rk1m_C_zzz_o0_t8_l0;
						rk1m_C_yzz_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_yzz_o0_t6_l0 = 0.5000000000000 * rk1gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk1m_C_yzz_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_yy * d_C_xyz_o0_t6_m0_l0;
						rk1m_C_yzz_o0_t3_l0 = 0.5000000000000 * rk1gammacu_yy * d_C_xyz_o0_t8_m0_l0;
						rk1m_C_yzz_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_yx * d_C_xxz_o0_t6_m0_l0;
						rk1m_C_yzz_o0_t0_l0 = 0.5000000000000 * rk1gammacu_yx * d_C_xxz_o0_t8_m0_l0;
						rk1C_yzz = (((((((rk1m_C_yzz_o0_t0_l0 + rk1m_C_yzz_o0_t0_l0) + rk1m_C_yzz_o0_t2_l0) + rk1m_C_yzz_o0_t3_l0) + rk1m_C_yzz_o0_t3_l0) + rk1m_C_yzz_o0_t5_l0) + rk1m_C_yzz_o0_t6_l0) + rk1m_C_yzz_o0_t6_l0) + rk1m_C_yzz_o0_t8_l0;
						rk1Cd_xzz = vector(rk1gammac_xx, i, j, k) * rk1C_xzz + vector(rk1gammac_xy, i, j, k) * rk1C_yzz + vector(rk1gammac_xz, i, j, k) * rk1C_zzz;
						rk1Cd_yzz = vector(rk1gammac_yx, i, j, k) * rk1C_xzz + vector(rk1gammac_yy, i, j, k) * rk1C_yzz + vector(rk1gammac_yz, i, j, k) * rk1C_zzz;
						rk1Cd_zzz = vector(rk1gammac_zx, i, j, k) * rk1C_xzz + vector(rk1gammac_zy, i, j, k) * rk1C_yzz + vector(rk1gammac_zz, i, j, k) * rk1C_zzz;
						rk1Cd_zyz = vector(rk1gammac_zx, i, j, k) * rk1C_xyz + vector(rk1gammac_zy, i, j, k) * rk1C_yyz + vector(rk1gammac_zz, i, j, k) * rk1C_zyz;
						rk1Am_yy = rk1gammacu_yx * vector(rk1A_xy, i, j, k) + rk1gammacu_yy * vector(rk1A_yy, i, j, k) + rk1gammacu_yz * vector(rk1A_yz, i, j, k);
						rk1Am_yx = rk1gammacu_yx * vector(rk1A_xx, i, j, k) + rk1gammacu_yy * vector(rk1A_xy, i, j, k) + rk1gammacu_yz * vector(rk1A_xz, i, j, k);
						rk1Am_yz = rk1gammacu_yx * vector(rk1A_xz, i, j, k) + rk1gammacu_yy * vector(rk1A_yz, i, j, k) + rk1gammacu_yz * vector(rk1A_zz, i, j, k);
						rk1Au_yz = rk1gammacu_yx * rk1Am_zx + rk1gammacu_yy * rk1Am_zy + rk1gammacu_yz * rk1Am_zz;
						rk1m_C_zxx_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xxx_o0_t8_m0_l0;
						rk1m_C_zxx_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xxx_o0_t6_m0_l0;
						rk1m_C_zxx_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_zxx_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xxx_o0_t3_m0_l0;
						rk1m_C_zxx_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk1m_C_zxx_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk1C_zxx = (((((((rk1m_C_zxx_o0_t0_l0 + rk1m_C_zxx_o0_t0_l0) + rk1m_C_zxx_o0_t2_l0) + rk1m_C_zxx_o0_t3_l0) + rk1m_C_zxx_o0_t3_l0) + rk1m_C_zxx_o0_t5_l0) + rk1m_C_zxx_o0_t6_l0) + rk1m_C_zxx_o0_t6_l0) + rk1m_C_zxx_o0_t8_l0;
						rk1Cd_xxx = vector(rk1gammac_xx, i, j, k) * rk1C_xxx + vector(rk1gammac_xy, i, j, k) * rk1C_yxx + vector(rk1gammac_xz, i, j, k) * rk1C_zxx;
						rk1Cd_yxx = vector(rk1gammac_yx, i, j, k) * rk1C_xxx + vector(rk1gammac_yy, i, j, k) * rk1C_yxx + vector(rk1gammac_yz, i, j, k) * rk1C_zxx;
						rk1Cd_zxx = vector(rk1gammac_zx, i, j, k) * rk1C_xxx + vector(rk1gammac_zy, i, j, k) * rk1C_yxx + vector(rk1gammac_zz, i, j, k) * rk1C_zxx;
						rk1m_C_zxy_o0_t8_l0 = (-0.5000000000000) * rk1gammacu_zz * d_C_xxy_o0_t8_m0_l0;
						rk1m_C_zxy_o0_t7_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xxy_o0_t7_m0_l0;
						rk1m_C_zxy_o0_t6_l0 = 0.5000000000000 * rk1gammacu_zz * d_C_xxy_o0_t6_m0_l0;
						rk1m_C_zxy_o0_t5_l0 = (-0.5000000000000) * rk1gammacu_zy * d_C_xxy_o0_t5_m0_l0;
						rk1m_C_zxy_o0_t4_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xxy_o0_t4_m0_l0;
						rk1m_C_zxy_o0_t3_l0 = 0.5000000000000 * rk1gammacu_zy * d_C_xxy_o0_t3_m0_l0;
						rk1m_C_zxy_o0_t2_l0 = (-0.5000000000000) * rk1gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk1m_C_zxy_o0_t1_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxx_o0_t5_m0_l0;
						rk1m_C_zxy_o0_t0_l0 = 0.5000000000000 * rk1gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk1C_zxy = (((((((rk1m_C_zxy_o0_t0_l0 + rk1m_C_zxy_o0_t1_l0) + rk1m_C_zxy_o0_t2_l0) + rk1m_C_zxy_o0_t3_l0) + rk1m_C_zxy_o0_t4_l0) + rk1m_C_zxy_o0_t5_l0) + rk1m_C_zxy_o0_t6_l0) + rk1m_C_zxy_o0_t7_l0) + rk1m_C_zxy_o0_t8_l0;
						rk1Cd_xxy = vector(rk1gammac_xx, i, j, k) * rk1C_xxy + vector(rk1gammac_xy, i, j, k) * rk1C_yxy + vector(rk1gammac_xz, i, j, k) * rk1C_zxy;
						rk1Cd_yxy = vector(rk1gammac_yx, i, j, k) * rk1C_xxy + vector(rk1gammac_yy, i, j, k) * rk1C_yxy + vector(rk1gammac_yz, i, j, k) * rk1C_zxy;
						rk1Cd_zxy = vector(rk1gammac_zx, i, j, k) * rk1C_xxy + vector(rk1gammac_zy, i, j, k) * rk1C_yxy + vector(rk1gammac_zz, i, j, k) * rk1C_zxy;
						rk1Au_yy = rk1gammacu_yx * rk1Am_yx + rk1gammacu_yy * rk1Am_yy + rk1gammacu_yz * rk1Am_yz;
						rk1falpha = 1.0 + 1.0 / (vector(rk1alpha, i, j, k) * vector(rk1alpha, i, j, k));
						rk1d_Rc_xx_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxx * rk1Cd_xxz + rk1C_yxx * rk1Cd_yxz + rk1C_zxx * rk1Cd_zxz) + rk1gammacu_zy * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_yxz + rk1C_zxy * rk1Cd_zxz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_yxz + rk1C_zxz * rk1Cd_zxz)) + (rk1gammacu_yx * (rk1C_xxx * rk1Cd_xxy + rk1C_yxx * rk1Cd_yxy + rk1C_zxx * rk1Cd_zxy) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_zxy) + rk1gammacu_yz * (rk1C_xxz * rk1Cd_xxy + rk1C_yxz * rk1Cd_yxy + rk1C_zxz * rk1Cd_zxy)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_xxx + rk1C_yxx * rk1Cd_yxx + rk1C_zxx * rk1Cd_zxx) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_xxx + rk1C_yxy * rk1Cd_yxx + rk1C_zxy * rk1Cd_zxx) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_xxx + rk1C_yxz * rk1Cd_yxx + rk1C_zxz * rk1Cd_zxx)) + (rk1gammacu_zx * (rk1C_xxz * rk1Cd_xxx + rk1C_yxz * rk1Cd_xxy + rk1C_zxz * rk1Cd_xxz) + rk1gammacu_zy * (rk1C_xxz * rk1Cd_xxy + rk1C_yxz * rk1Cd_xyy + rk1C_zxz * rk1Cd_xyz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_xyz + rk1C_zxz * rk1Cd_xzz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_xxx + rk1C_yxy * rk1Cd_xxy + rk1C_zxy * rk1Cd_xxz) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_xyy + rk1C_zxy * rk1Cd_xyz) + rk1gammacu_yz * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_xyz + rk1C_zxy * rk1Cd_xzz)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_xxx + rk1C_yxx * rk1Cd_xxy + rk1C_zxx * rk1Cd_xxz) + rk1gammacu_xy * (rk1C_xxx * rk1Cd_xxy + rk1C_yxx * rk1Cd_xyy + rk1C_zxx * rk1Cd_xyz) + rk1gammacu_xz * (rk1C_xxx * rk1Cd_xxz + rk1C_yxx * rk1Cd_xyz + rk1C_zxx * rk1Cd_xzz)) + (rk1gammacu_zx * (rk1C_xxz * rk1Cd_xxx + rk1C_yxz * rk1Cd_xxy + rk1C_zxz * rk1Cd_xxz) + rk1gammacu_zy * (rk1C_xxz * rk1Cd_xxy + rk1C_yxz * rk1Cd_xyy + rk1C_zxz * rk1Cd_xyz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_xyz + rk1C_zxz * rk1Cd_xzz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_xxx + rk1C_yxy * rk1Cd_xxy + rk1C_zxy * rk1Cd_xxz) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_xyy + rk1C_zxy * rk1Cd_xyz) + rk1gammacu_yz * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_xyz + rk1C_zxy * rk1Cd_xzz)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_xxx + rk1C_yxx * rk1Cd_xxy + rk1C_zxx * rk1Cd_xxz) + rk1gammacu_xy * (rk1C_xxx * rk1Cd_xxy + rk1C_yxx * rk1Cd_xyy + rk1C_zxx * rk1Cd_xyz) + rk1gammacu_xz * (rk1C_xxx * rk1Cd_xxz + rk1C_yxx * rk1Cd_xyz + rk1C_zxx * rk1Cd_xzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_xxx + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_xxy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_xxz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_xxx + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_xxy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_xxz);
						rk1m_Rc_xx_o0_t11_l0 = 0.5 * vector(rk1gammac_zx, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk1m_Rc_xx_o0_t10_l0 = 0.5 * vector(rk1gammac_yx, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk1m_Rc_xx_o0_t9_l0 = 0.5 * vector(rk1gammac_xx, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk1m_Rc_xx_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_xx_o0_t8_m0_l0;
						rk1m_Rc_xx_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_xx_o0_t7_m0_l0;
						rk1m_Rc_xx_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_xx_o0_t6_m0_l0;
						rk1m_Rc_xx_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_xx_o0_t5_m0_l0;
						rk1m_Rc_xx_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_xx_o0_t4_m0_l0;
						rk1m_Rc_xx_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_xx_o0_t3_m0_l0;
						rk1m_Rc_xx_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_xx_o0_t2_m0_l0;
						rk1m_Rc_xx_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_xx_o0_t1_m0_l0;
						rk1m_Rc_xx_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_xx_o0_t0_m0_l0;
						rk1Rc_xx = ((((((((((((((rk1m_Rc_xx_o0_t0_l0 + rk1m_Rc_xx_o0_t1_l0) + rk1m_Rc_xx_o0_t2_l0) + rk1m_Rc_xx_o0_t3_l0) + rk1m_Rc_xx_o0_t4_l0) + rk1m_Rc_xx_o0_t5_l0) + rk1m_Rc_xx_o0_t6_l0) + rk1m_Rc_xx_o0_t7_l0) + rk1m_Rc_xx_o0_t8_l0) + rk1m_Rc_xx_o0_t9_l0) + rk1m_Rc_xx_o0_t10_l0) + rk1m_Rc_xx_o0_t11_l0) + rk1m_Rc_xx_o0_t9_l0) + rk1m_Rc_xx_o0_t10_l0) + rk1m_Rc_xx_o0_t11_l0) + rk1d_Rc_xx_o0_t15_m0_l0;
						rk1gammau_zy = rk1gammau_yz;
						rk1d_Rc_xy_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxx * rk1Cd_xyz + rk1C_yxx * rk1Cd_yyz + rk1C_zxx * rk1Cd_zyz) + rk1gammacu_zy * (rk1C_xxy * rk1Cd_xyz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_xyz + rk1C_yxz * rk1Cd_yyz + rk1C_zxz * rk1Cd_zyz)) + (rk1gammacu_yx * (rk1C_xxx * rk1Cd_xyy + rk1C_yxx * rk1Cd_yyy + rk1C_zxx * rk1Cd_zyy) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_xyy + rk1C_yxy * rk1Cd_yyy + rk1C_zxy * rk1Cd_zyy) + rk1gammacu_yz * (rk1C_xxz * rk1Cd_xyy + rk1C_yxz * rk1Cd_yyy + rk1C_zxz * rk1Cd_zyy)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_xxy + rk1C_yxx * rk1Cd_yxy + rk1C_zxx * rk1Cd_zxy) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_zxy) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_xxy + rk1C_yxz * rk1Cd_yxy + rk1C_zxz * rk1Cd_zxy)) + (rk1gammacu_zx * (rk1C_xyz * rk1Cd_xxx + rk1C_yyz * rk1Cd_xxy + rk1C_zyz * rk1Cd_xxz) + rk1gammacu_zy * (rk1C_xyz * rk1Cd_xxy + rk1C_yyz * rk1Cd_xyy + rk1C_zyz * rk1Cd_xyz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_xxz + rk1C_yyz * rk1Cd_xyz + rk1C_zyz * rk1Cd_xzz)) + (rk1gammacu_yx * (rk1C_xyy * rk1Cd_xxx + rk1C_yyy * rk1Cd_xxy + rk1C_zyy * rk1Cd_xxz) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_xxy + rk1C_yyy * rk1Cd_xyy + rk1C_zyy * rk1Cd_xyz) + rk1gammacu_yz * (rk1C_xyy * rk1Cd_xxz + rk1C_yyy * rk1Cd_xyz + rk1C_zyy * rk1Cd_xzz)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_xxx + rk1C_yxy * rk1Cd_xxy + rk1C_zxy * rk1Cd_xxz) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_xyy + rk1C_zxy * rk1Cd_xyz) + rk1gammacu_xz * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_xyz + rk1C_zxy * rk1Cd_xzz)) + (rk1gammacu_zx * (rk1C_xxz * rk1Cd_yxx + rk1C_yxz * rk1Cd_yxy + rk1C_zxz * rk1Cd_yxz) + rk1gammacu_zy * (rk1C_xxz * rk1Cd_yxy + rk1C_yxz * rk1Cd_yyy + rk1C_zxz * rk1Cd_yyz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_yxz + rk1C_yxz * rk1Cd_yyz + rk1C_zxz * rk1Cd_yzz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_yxx + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_yxz) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_yxy + rk1C_yxy * rk1Cd_yyy + rk1C_zxy * rk1Cd_yyz) + rk1gammacu_yz * (rk1C_xxy * rk1Cd_yxz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_yzz)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_yxx + rk1C_yxx * rk1Cd_yxy + rk1C_zxx * rk1Cd_yxz) + rk1gammacu_xy * (rk1C_xxx * rk1Cd_yxy + rk1C_yxx * rk1Cd_yyy + rk1C_zxx * rk1Cd_yyz) + rk1gammacu_xz * (rk1C_xxx * rk1Cd_yxz + rk1C_yxx * rk1Cd_yyz + rk1C_zxx * rk1Cd_yzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_yxx + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_yxy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_yxz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_xxy + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_xyy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_xyz);
						rk1m_Rc_xy_o0_t14_l0 = 0.5 * vector(rk1gammac_zy, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk1m_Rc_xy_o0_t13_l0 = 0.5 * vector(rk1gammac_yy, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk1m_Rc_xy_o0_t12_l0 = 0.5 * vector(rk1gammac_xy, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk1m_Rc_xy_o0_t11_l0 = 0.5 * vector(rk1gammac_zx, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk1m_Rc_xy_o0_t10_l0 = 0.5 * vector(rk1gammac_yx, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk1m_Rc_xy_o0_t9_l0 = 0.5 * vector(rk1gammac_xx, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk1m_Rc_xy_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_xy_o0_t8_m0_l0;
						rk1m_Rc_xy_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_xy_o0_t7_m0_l0;
						rk1m_Rc_xy_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_xy_o0_t6_m0_l0;
						rk1m_Rc_xy_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_xy_o0_t5_m0_l0;
						rk1m_Rc_xy_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_xy_o0_t4_m0_l0;
						rk1m_Rc_xy_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_xy_o0_t3_m0_l0;
						rk1m_Rc_xy_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_xy_o0_t2_m0_l0;
						rk1m_Rc_xy_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_xy_o0_t1_m0_l0;
						rk1m_Rc_xy_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_xy_o0_t0_m0_l0;
						rk1Rc_xy = ((((((((((((((rk1m_Rc_xy_o0_t0_l0 + rk1m_Rc_xy_o0_t1_l0) + rk1m_Rc_xy_o0_t2_l0) + rk1m_Rc_xy_o0_t3_l0) + rk1m_Rc_xy_o0_t4_l0) + rk1m_Rc_xy_o0_t5_l0) + rk1m_Rc_xy_o0_t6_l0) + rk1m_Rc_xy_o0_t7_l0) + rk1m_Rc_xy_o0_t8_l0) + rk1m_Rc_xy_o0_t9_l0) + rk1m_Rc_xy_o0_t10_l0) + rk1m_Rc_xy_o0_t11_l0) + rk1m_Rc_xy_o0_t12_l0) + rk1m_Rc_xy_o0_t13_l0) + rk1m_Rc_xy_o0_t14_l0) + rk1d_Rc_xy_o0_t15_m0_l0;
						rk1d_Rc_yy_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxy * rk1Cd_xyz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_zy * (rk1C_xyy * rk1Cd_xyz + rk1C_yyy * rk1Cd_yyz + rk1C_zyy * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_xyz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_zyz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_xyy + rk1C_yxy * rk1Cd_yyy + rk1C_zxy * rk1Cd_zyy) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_xyy + rk1C_yyy * rk1Cd_yyy + rk1C_zyy * rk1Cd_zyy) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_xyy + rk1C_yyz * rk1Cd_yyy + rk1C_zyz * rk1Cd_zyy)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_xxy + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_zxy) + rk1gammacu_xy * (rk1C_xyy * rk1Cd_xxy + rk1C_yyy * rk1Cd_yxy + rk1C_zyy * rk1Cd_zxy) + rk1gammacu_xz * (rk1C_xyz * rk1Cd_xxy + rk1C_yyz * rk1Cd_yxy + rk1C_zyz * rk1Cd_zxy)) + (rk1gammacu_zx * (rk1C_xyz * rk1Cd_yxx + rk1C_yyz * rk1Cd_yxy + rk1C_zyz * rk1Cd_yxz) + rk1gammacu_zy * (rk1C_xyz * rk1Cd_yxy + rk1C_yyz * rk1Cd_yyy + rk1C_zyz * rk1Cd_yyz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_yxz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_yzz)) + (rk1gammacu_yx * (rk1C_xyy * rk1Cd_yxx + rk1C_yyy * rk1Cd_yxy + rk1C_zyy * rk1Cd_yxz) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_yxy + rk1C_yyy * rk1Cd_yyy + rk1C_zyy * rk1Cd_yyz) + rk1gammacu_yz * (rk1C_xyy * rk1Cd_yxz + rk1C_yyy * rk1Cd_yyz + rk1C_zyy * rk1Cd_yzz)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_yxx + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_yxz) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_yxy + rk1C_yxy * rk1Cd_yyy + rk1C_zxy * rk1Cd_yyz) + rk1gammacu_xz * (rk1C_xxy * rk1Cd_yxz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_yzz)) + (rk1gammacu_zx * (rk1C_xyz * rk1Cd_yxx + rk1C_yyz * rk1Cd_yxy + rk1C_zyz * rk1Cd_yxz) + rk1gammacu_zy * (rk1C_xyz * rk1Cd_yxy + rk1C_yyz * rk1Cd_yyy + rk1C_zyz * rk1Cd_yyz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_yxz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_yzz)) + (rk1gammacu_yx * (rk1C_xyy * rk1Cd_yxx + rk1C_yyy * rk1Cd_yxy + rk1C_zyy * rk1Cd_yxz) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_yxy + rk1C_yyy * rk1Cd_yyy + rk1C_zyy * rk1Cd_yyz) + rk1gammacu_yz * (rk1C_xyy * rk1Cd_yxz + rk1C_yyy * rk1Cd_yyz + rk1C_zyy * rk1Cd_yzz)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_yxx + rk1C_yxy * rk1Cd_yxy + rk1C_zxy * rk1Cd_yxz) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_yxy + rk1C_yxy * rk1Cd_yyy + rk1C_zxy * rk1Cd_yyz) + rk1gammacu_xz * (rk1C_xxy * rk1Cd_yxz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_yzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_yxy + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_yyy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_yyz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_yxy + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_yyy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_yyz);
						rk1m_Rc_yy_o0_t11_l0 = 0.5 * vector(rk1gammac_zy, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk1m_Rc_yy_o0_t10_l0 = 0.5 * vector(rk1gammac_yy, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk1m_Rc_yy_o0_t9_l0 = 0.5 * vector(rk1gammac_xy, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk1m_Rc_yy_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_yy_o0_t8_m0_l0;
						rk1m_Rc_yy_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_yy_o0_t7_m0_l0;
						rk1m_Rc_yy_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_yy_o0_t6_m0_l0;
						rk1m_Rc_yy_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_yy_o0_t5_m0_l0;
						rk1m_Rc_yy_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_yy_o0_t4_m0_l0;
						rk1m_Rc_yy_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_yy_o0_t3_m0_l0;
						rk1m_Rc_yy_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_yy_o0_t2_m0_l0;
						rk1m_Rc_yy_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_yy_o0_t1_m0_l0;
						rk1m_Rc_yy_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_yy_o0_t0_m0_l0;
						rk1Rc_yy = ((((((((((((((rk1m_Rc_yy_o0_t0_l0 + rk1m_Rc_yy_o0_t1_l0) + rk1m_Rc_yy_o0_t2_l0) + rk1m_Rc_yy_o0_t3_l0) + rk1m_Rc_yy_o0_t4_l0) + rk1m_Rc_yy_o0_t5_l0) + rk1m_Rc_yy_o0_t6_l0) + rk1m_Rc_yy_o0_t7_l0) + rk1m_Rc_yy_o0_t8_l0) + rk1m_Rc_yy_o0_t9_l0) + rk1m_Rc_yy_o0_t10_l0) + rk1m_Rc_yy_o0_t11_l0) + rk1m_Rc_yy_o0_t9_l0) + rk1m_Rc_yy_o0_t10_l0) + rk1m_Rc_yy_o0_t11_l0) + rk1d_Rc_yy_o0_t15_m0_l0;
						rk1gammau_zz = rk1iDetgamma * (rk1gamma_xx * rk1gamma_yy - rk1gamma_xy * rk1gamma_xy);
						rk1Am_xx = rk1gammacu_xx * vector(rk1A_xx, i, j, k) + rk1gammacu_xy * vector(rk1A_xy, i, j, k) + rk1gammacu_xz * vector(rk1A_xz, i, j, k);
						rk1Am_xz = rk1gammacu_xx * vector(rk1A_xz, i, j, k) + rk1gammacu_xy * vector(rk1A_yz, i, j, k) + rk1gammacu_xz * vector(rk1A_zz, i, j, k);
						rk1Am_xy = rk1gammacu_xx * vector(rk1A_xy, i, j, k) + rk1gammacu_xy * vector(rk1A_yy, i, j, k) + rk1gammacu_xz * vector(rk1A_yz, i, j, k);
						rk1Au_xz = rk1gammacu_xx * rk1Am_zx + rk1gammacu_xy * rk1Am_zy + rk1gammacu_xz * rk1Am_zz;
						rk1Au_xy = rk1gammacu_xx * rk1Am_yx + rk1gammacu_xy * rk1Am_yy + rk1gammacu_xz * rk1Am_yz;
						rk1d_Rc_xz_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxx * rk1Cd_xzz + rk1C_yxx * rk1Cd_yzz + rk1C_zxx * rk1Cd_zzz) + rk1gammacu_zy * (rk1C_xxy * rk1Cd_xzz + rk1C_yxy * rk1Cd_yzz + rk1C_zxy * rk1Cd_zzz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_xzz + rk1C_yxz * rk1Cd_yzz + rk1C_zxz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xxx * rk1Cd_xyz + rk1C_yxx * rk1Cd_yyz + rk1C_zxx * rk1Cd_zyz) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_xyz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xxz * rk1Cd_xyz + rk1C_yxz * rk1Cd_yyz + rk1C_zxz * rk1Cd_zyz)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_xxz + rk1C_yxx * rk1Cd_yxz + rk1C_zxx * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_yxz + rk1C_zxy * rk1Cd_zxz) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_yxz + rk1C_zxz * rk1Cd_zxz)) + (rk1gammacu_zx * (rk1C_xzz * rk1Cd_xxx + rk1C_yzz * rk1Cd_xxy + rk1C_zzz * rk1Cd_xxz) + rk1gammacu_zy * (rk1C_xzz * rk1Cd_xxy + rk1C_yzz * rk1Cd_xyy + rk1C_zzz * rk1Cd_xyz) + rk1gammacu_zz * (rk1C_xzz * rk1Cd_xxz + rk1C_yzz * rk1Cd_xyz + rk1C_zzz * rk1Cd_xzz)) + (rk1gammacu_yx * (rk1C_xyz * rk1Cd_xxx + rk1C_yyz * rk1Cd_xxy + rk1C_zyz * rk1Cd_xxz) + rk1gammacu_yy * (rk1C_xyz * rk1Cd_xxy + rk1C_yyz * rk1Cd_xyy + rk1C_zyz * rk1Cd_xyz) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_xxz + rk1C_yyz * rk1Cd_xyz + rk1C_zyz * rk1Cd_xzz)) + (rk1gammacu_xx * (rk1C_xxz * rk1Cd_xxx + rk1C_yxz * rk1Cd_xxy + rk1C_zxz * rk1Cd_xxz) + rk1gammacu_xy * (rk1C_xxz * rk1Cd_xxy + rk1C_yxz * rk1Cd_xyy + rk1C_zxz * rk1Cd_xyz) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_xyz + rk1C_zxz * rk1Cd_xzz)) + (rk1gammacu_zx * (rk1C_xxz * rk1Cd_zxx + rk1C_yxz * rk1Cd_zxy + rk1C_zxz * rk1Cd_zxz) + rk1gammacu_zy * (rk1C_xxz * rk1Cd_zxy + rk1C_yxz * rk1Cd_zyy + rk1C_zxz * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xxz * rk1Cd_zxz + rk1C_yxz * rk1Cd_zyz + rk1C_zxz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_zxx + rk1C_yxy * rk1Cd_zxy + rk1C_zxy * rk1Cd_zxz) + rk1gammacu_yy * (rk1C_xxy * rk1Cd_zxy + rk1C_yxy * rk1Cd_zyy + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xxy * rk1Cd_zxz + rk1C_yxy * rk1Cd_zyz + rk1C_zxy * rk1Cd_zzz)) + (rk1gammacu_xx * (rk1C_xxx * rk1Cd_zxx + rk1C_yxx * rk1Cd_zxy + rk1C_zxx * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xxx * rk1Cd_zxy + rk1C_yxx * rk1Cd_zyy + rk1C_zxx * rk1Cd_zyz) + rk1gammacu_xz * (rk1C_xxx * rk1Cd_zxz + rk1C_yxx * rk1Cd_zyz + rk1C_zxx * rk1Cd_zzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_zxx + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_zxy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_zxz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_xxz + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_xyz + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_xzz);
						rk1m_Rc_xz_o0_t14_l0 = 0.5 * vector(rk1gammac_zz, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk1m_Rc_xz_o0_t13_l0 = 0.5 * vector(rk1gammac_yz, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk1m_Rc_xz_o0_t12_l0 = 0.5 * vector(rk1gammac_xz, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk1m_Rc_xz_o0_t11_l0 = 0.5 * vector(rk1gammac_zx, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk1m_Rc_xz_o0_t10_l0 = 0.5 * vector(rk1gammac_yx, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk1m_Rc_xz_o0_t9_l0 = 0.5 * vector(rk1gammac_xx, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk1m_Rc_xz_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_xz_o0_t8_m0_l0;
						rk1m_Rc_xz_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_xz_o0_t7_m0_l0;
						rk1m_Rc_xz_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_xz_o0_t6_m0_l0;
						rk1m_Rc_xz_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_xz_o0_t5_m0_l0;
						rk1m_Rc_xz_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_xz_o0_t4_m0_l0;
						rk1m_Rc_xz_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_xz_o0_t3_m0_l0;
						rk1m_Rc_xz_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_xz_o0_t2_m0_l0;
						rk1m_Rc_xz_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_xz_o0_t1_m0_l0;
						rk1m_Rc_xz_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_xz_o0_t0_m0_l0;
						rk1Rc_xz = ((((((((((((((rk1m_Rc_xz_o0_t0_l0 + rk1m_Rc_xz_o0_t1_l0) + rk1m_Rc_xz_o0_t2_l0) + rk1m_Rc_xz_o0_t3_l0) + rk1m_Rc_xz_o0_t4_l0) + rk1m_Rc_xz_o0_t5_l0) + rk1m_Rc_xz_o0_t6_l0) + rk1m_Rc_xz_o0_t7_l0) + rk1m_Rc_xz_o0_t8_l0) + rk1m_Rc_xz_o0_t9_l0) + rk1m_Rc_xz_o0_t10_l0) + rk1m_Rc_xz_o0_t11_l0) + rk1m_Rc_xz_o0_t12_l0) + rk1m_Rc_xz_o0_t13_l0) + rk1m_Rc_xz_o0_t14_l0) + rk1d_Rc_xz_o0_t15_m0_l0;
						rk1d_Rc_yz_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxy * rk1Cd_xzz + rk1C_yxy * rk1Cd_yzz + rk1C_zxy * rk1Cd_zzz) + rk1gammacu_zy * (rk1C_xyy * rk1Cd_xzz + rk1C_yyy * rk1Cd_yzz + rk1C_zyy * rk1Cd_zzz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_xzz + rk1C_yyz * rk1Cd_yzz + rk1C_zyz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xxy * rk1Cd_xyz + rk1C_yxy * rk1Cd_yyz + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_xyz + rk1C_yyy * rk1Cd_yyz + rk1C_zyy * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_xyz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_zyz)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_xxz + rk1C_yxy * rk1Cd_yxz + rk1C_zxy * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xyy * rk1Cd_xxz + rk1C_yyy * rk1Cd_yxz + rk1C_zyy * rk1Cd_zxz) + rk1gammacu_xz * (rk1C_xyz * rk1Cd_xxz + rk1C_yyz * rk1Cd_yxz + rk1C_zyz * rk1Cd_zxz)) + (rk1gammacu_zx * (rk1C_xzz * rk1Cd_yxx + rk1C_yzz * rk1Cd_yxy + rk1C_zzz * rk1Cd_yxz) + rk1gammacu_zy * (rk1C_xzz * rk1Cd_yxy + rk1C_yzz * rk1Cd_yyy + rk1C_zzz * rk1Cd_yyz) + rk1gammacu_zz * (rk1C_xzz * rk1Cd_yxz + rk1C_yzz * rk1Cd_yyz + rk1C_zzz * rk1Cd_yzz)) + (rk1gammacu_yx * (rk1C_xyz * rk1Cd_yxx + rk1C_yyz * rk1Cd_yxy + rk1C_zyz * rk1Cd_yxz) + rk1gammacu_yy * (rk1C_xyz * rk1Cd_yxy + rk1C_yyz * rk1Cd_yyy + rk1C_zyz * rk1Cd_yyz) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_yxz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_yzz)) + (rk1gammacu_xx * (rk1C_xxz * rk1Cd_yxx + rk1C_yxz * rk1Cd_yxy + rk1C_zxz * rk1Cd_yxz) + rk1gammacu_xy * (rk1C_xxz * rk1Cd_yxy + rk1C_yxz * rk1Cd_yyy + rk1C_zxz * rk1Cd_yyz) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_yxz + rk1C_yxz * rk1Cd_yyz + rk1C_zxz * rk1Cd_yzz)) + (rk1gammacu_zx * (rk1C_xyz * rk1Cd_zxx + rk1C_yyz * rk1Cd_zxy + rk1C_zyz * rk1Cd_zxz) + rk1gammacu_zy * (rk1C_xyz * rk1Cd_zxy + rk1C_yyz * rk1Cd_zyy + rk1C_zyz * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xyz * rk1Cd_zxz + rk1C_yyz * rk1Cd_zyz + rk1C_zyz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xyy * rk1Cd_zxx + rk1C_yyy * rk1Cd_zxy + rk1C_zyy * rk1Cd_zxz) + rk1gammacu_yy * (rk1C_xyy * rk1Cd_zxy + rk1C_yyy * rk1Cd_zyy + rk1C_zyy * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xyy * rk1Cd_zxz + rk1C_yyy * rk1Cd_zyz + rk1C_zyy * rk1Cd_zzz)) + (rk1gammacu_xx * (rk1C_xxy * rk1Cd_zxx + rk1C_yxy * rk1Cd_zxy + rk1C_zxy * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xxy * rk1Cd_zxy + rk1C_yxy * rk1Cd_zyy + rk1C_zxy * rk1Cd_zyz) + rk1gammacu_xz * (rk1C_xxy * rk1Cd_zxz + rk1C_yxy * rk1Cd_zyz + rk1C_zxy * rk1Cd_zzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_zxy + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_zyy + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_zyz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_yxz + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_yyz + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_yzz);
						rk1m_Rc_yz_o0_t14_l0 = 0.5 * vector(rk1gammac_zz, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk1m_Rc_yz_o0_t13_l0 = 0.5 * vector(rk1gammac_yz, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk1m_Rc_yz_o0_t12_l0 = 0.5 * vector(rk1gammac_xz, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk1m_Rc_yz_o0_t11_l0 = 0.5 * vector(rk1gammac_zy, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk1m_Rc_yz_o0_t10_l0 = 0.5 * vector(rk1gammac_yy, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk1m_Rc_yz_o0_t9_l0 = 0.5 * vector(rk1gammac_xy, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk1m_Rc_yz_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_yz_o0_t8_m0_l0;
						rk1m_Rc_yz_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_yz_o0_t7_m0_l0;
						rk1m_Rc_yz_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_yz_o0_t6_m0_l0;
						rk1m_Rc_yz_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_yz_o0_t5_m0_l0;
						rk1m_Rc_yz_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_yz_o0_t4_m0_l0;
						rk1m_Rc_yz_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_yz_o0_t3_m0_l0;
						rk1m_Rc_yz_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_yz_o0_t2_m0_l0;
						rk1m_Rc_yz_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_yz_o0_t1_m0_l0;
						rk1m_Rc_yz_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_yz_o0_t0_m0_l0;
						rk1Rc_yz = ((((((((((((((rk1m_Rc_yz_o0_t0_l0 + rk1m_Rc_yz_o0_t1_l0) + rk1m_Rc_yz_o0_t2_l0) + rk1m_Rc_yz_o0_t3_l0) + rk1m_Rc_yz_o0_t4_l0) + rk1m_Rc_yz_o0_t5_l0) + rk1m_Rc_yz_o0_t6_l0) + rk1m_Rc_yz_o0_t7_l0) + rk1m_Rc_yz_o0_t8_l0) + rk1m_Rc_yz_o0_t9_l0) + rk1m_Rc_yz_o0_t10_l0) + rk1m_Rc_yz_o0_t11_l0) + rk1m_Rc_yz_o0_t12_l0) + rk1m_Rc_yz_o0_t13_l0) + rk1m_Rc_yz_o0_t14_l0) + rk1d_Rc_yz_o0_t15_m0_l0;
						rk1d_Rc_zz_o0_t15_m0_l0 = (rk1gammacu_zx * (rk1C_xxz * rk1Cd_xzz + rk1C_yxz * rk1Cd_yzz + rk1C_zxz * rk1Cd_zzz) + rk1gammacu_zy * (rk1C_xyz * rk1Cd_xzz + rk1C_yyz * rk1Cd_yzz + rk1C_zyz * rk1Cd_zzz) + rk1gammacu_zz * (rk1C_xzz * rk1Cd_xzz + rk1C_yzz * rk1Cd_yzz + rk1C_zzz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xxz * rk1Cd_xyz + rk1C_yxz * rk1Cd_yyz + rk1C_zxz * rk1Cd_zyz) + rk1gammacu_yy * (rk1C_xyz * rk1Cd_xyz + rk1C_yyz * rk1Cd_yyz + rk1C_zyz * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xzz * rk1Cd_xyz + rk1C_yzz * rk1Cd_yyz + rk1C_zzz * rk1Cd_zyz)) + (rk1gammacu_xx * (rk1C_xxz * rk1Cd_xxz + rk1C_yxz * rk1Cd_yxz + rk1C_zxz * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xyz * rk1Cd_xxz + rk1C_yyz * rk1Cd_yxz + rk1C_zyz * rk1Cd_zxz) + rk1gammacu_xz * (rk1C_xzz * rk1Cd_xxz + rk1C_yzz * rk1Cd_yxz + rk1C_zzz * rk1Cd_zxz)) + (rk1gammacu_zx * (rk1C_xzz * rk1Cd_zxx + rk1C_yzz * rk1Cd_zxy + rk1C_zzz * rk1Cd_zxz) + rk1gammacu_zy * (rk1C_xzz * rk1Cd_zxy + rk1C_yzz * rk1Cd_zyy + rk1C_zzz * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xzz * rk1Cd_zxz + rk1C_yzz * rk1Cd_zyz + rk1C_zzz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xyz * rk1Cd_zxx + rk1C_yyz * rk1Cd_zxy + rk1C_zyz * rk1Cd_zxz) + rk1gammacu_yy * (rk1C_xyz * rk1Cd_zxy + rk1C_yyz * rk1Cd_zyy + rk1C_zyz * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_zxz + rk1C_yyz * rk1Cd_zyz + rk1C_zyz * rk1Cd_zzz)) + (rk1gammacu_xx * (rk1C_xxz * rk1Cd_zxx + rk1C_yxz * rk1Cd_zxy + rk1C_zxz * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xxz * rk1Cd_zxy + rk1C_yxz * rk1Cd_zyy + rk1C_zxz * rk1Cd_zyz) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_zxz + rk1C_yxz * rk1Cd_zyz + rk1C_zxz * rk1Cd_zzz)) + (rk1gammacu_zx * (rk1C_xzz * rk1Cd_zxx + rk1C_yzz * rk1Cd_zxy + rk1C_zzz * rk1Cd_zxz) + rk1gammacu_zy * (rk1C_xzz * rk1Cd_zxy + rk1C_yzz * rk1Cd_zyy + rk1C_zzz * rk1Cd_zyz) + rk1gammacu_zz * (rk1C_xzz * rk1Cd_zxz + rk1C_yzz * rk1Cd_zyz + rk1C_zzz * rk1Cd_zzz)) + (rk1gammacu_yx * (rk1C_xyz * rk1Cd_zxx + rk1C_yyz * rk1Cd_zxy + rk1C_zyz * rk1Cd_zxz) + rk1gammacu_yy * (rk1C_xyz * rk1Cd_zxy + rk1C_yyz * rk1Cd_zyy + rk1C_zyz * rk1Cd_zyz) + rk1gammacu_yz * (rk1C_xyz * rk1Cd_zxz + rk1C_yyz * rk1Cd_zyz + rk1C_zyz * rk1Cd_zzz)) + (rk1gammacu_xx * (rk1C_xxz * rk1Cd_zxx + rk1C_yxz * rk1Cd_zxy + rk1C_zxz * rk1Cd_zxz) + rk1gammacu_xy * (rk1C_xxz * rk1Cd_zxy + rk1C_yxz * rk1Cd_zyy + rk1C_zxz * rk1Cd_zyz) + rk1gammacu_xz * (rk1C_xxz * rk1Cd_zxz + rk1C_yxz * rk1Cd_zyz + rk1C_zxz * rk1Cd_zzz)) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_zxz + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_zyz + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_zzz) + (0.5 * vector(rk1Gam_x, i, j, k) * rk1Cd_zxz + 0.5 * vector(rk1Gam_y, i, j, k) * rk1Cd_zyz + 0.5 * vector(rk1Gam_z, i, j, k) * rk1Cd_zzz);
						rk1m_Rc_zz_o0_t11_l0 = 0.5 * vector(rk1gammac_zz, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk1m_Rc_zz_o0_t10_l0 = 0.5 * vector(rk1gammac_yz, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk1m_Rc_zz_o0_t9_l0 = 0.5 * vector(rk1gammac_xz, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk1m_Rc_zz_o0_t8_l0 = (-0.5) * rk1gammacu_zz * d_Rc_zz_o0_t8_m0_l0;
						rk1m_Rc_zz_o0_t7_l0 = (-0.5) * rk1gammacu_zy * d_Rc_zz_o0_t7_m0_l0;
						rk1m_Rc_zz_o0_t6_l0 = (-0.5) * rk1gammacu_zx * d_Rc_zz_o0_t6_m0_l0;
						rk1m_Rc_zz_o0_t5_l0 = (-0.5) * rk1gammacu_yz * d_Rc_zz_o0_t5_m0_l0;
						rk1m_Rc_zz_o0_t4_l0 = (-0.5) * rk1gammacu_yy * d_Rc_zz_o0_t4_m0_l0;
						rk1m_Rc_zz_o0_t3_l0 = (-0.5) * rk1gammacu_yx * d_Rc_zz_o0_t3_m0_l0;
						rk1m_Rc_zz_o0_t2_l0 = (-0.5) * rk1gammacu_xz * d_Rc_zz_o0_t2_m0_l0;
						rk1m_Rc_zz_o0_t1_l0 = (-0.5) * rk1gammacu_xy * d_Rc_zz_o0_t1_m0_l0;
						rk1m_Rc_zz_o0_t0_l0 = (-0.5) * rk1gammacu_xx * d_Rc_zz_o0_t0_m0_l0;
						rk1Rc_zz = ((((((((((((((rk1m_Rc_zz_o0_t0_l0 + rk1m_Rc_zz_o0_t1_l0) + rk1m_Rc_zz_o0_t2_l0) + rk1m_Rc_zz_o0_t3_l0) + rk1m_Rc_zz_o0_t4_l0) + rk1m_Rc_zz_o0_t5_l0) + rk1m_Rc_zz_o0_t6_l0) + rk1m_Rc_zz_o0_t7_l0) + rk1m_Rc_zz_o0_t8_l0) + rk1m_Rc_zz_o0_t9_l0) + rk1m_Rc_zz_o0_t10_l0) + rk1m_Rc_zz_o0_t11_l0) + rk1m_Rc_zz_o0_t9_l0) + rk1m_Rc_zz_o0_t10_l0) + rk1m_Rc_zz_o0_t11_l0) + rk1d_Rc_zz_o0_t15_m0_l0;
						rk1Au_xx = rk1gammacu_xx * rk1Am_xx + rk1gammacu_xy * rk1Am_xy + rk1gammacu_xz * rk1Am_xz;
						rk1gammau_zx = rk1gammau_xz;
						rk1m_dalpha_xx_o0_t14_l0 = 2.0 * rk1gamma_xx * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xx_o0_t13_l0 = 2.0 * rk1gamma_xx * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xx_o0_t12_l0 = 2.0 * rk1gamma_xx * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xx_o0_t11_l0 = 2.0 * rk1gamma_xx * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xx_o0_t10_l0 = 2.0 * rk1gamma_xx * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xx_o0_t9_l0 = 2.0 * rk1gamma_xx * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xx_o0_t8_l0 = 2.0 * rk1gamma_xx * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xx_o0_t7_l0 = 2.0 * rk1gamma_xx * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xx_o0_t6_l0 = 2.0 * rk1gamma_xx * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xx_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xx_o0_t3_l0 = (-1.0) * rk1C_zxx * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xx_o0_t2_l0 = (-1.0) * rk1C_yxx * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xx_o0_t1_l0 = (-1.0) * rk1C_xxx * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_xx = (((((((((((((d_dalpha_xx_o0_t0_m0_l0 + rk1m_dalpha_xx_o0_t1_l0) + rk1m_dalpha_xx_o0_t2_l0) + rk1m_dalpha_xx_o0_t3_l0) + rk1m_dalpha_xx_o0_t4_l0) + rk1m_dalpha_xx_o0_t4_l0) + rk1m_dalpha_xx_o0_t6_l0) + rk1m_dalpha_xx_o0_t7_l0) + rk1m_dalpha_xx_o0_t8_l0) + rk1m_dalpha_xx_o0_t9_l0) + rk1m_dalpha_xx_o0_t10_l0) + rk1m_dalpha_xx_o0_t11_l0) + rk1m_dalpha_xx_o0_t12_l0) + rk1m_dalpha_xx_o0_t13_l0) + rk1m_dalpha_xx_o0_t14_l0;
						rk1m_dalpha_xz_o0_t14_l0 = 2.0 * rk1gamma_xz * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xz_o0_t13_l0 = 2.0 * rk1gamma_xz * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xz_o0_t12_l0 = 2.0 * rk1gamma_xz * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xz_o0_t11_l0 = 2.0 * rk1gamma_xz * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xz_o0_t10_l0 = 2.0 * rk1gamma_xz * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xz_o0_t9_l0 = 2.0 * rk1gamma_xz * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xz_o0_t8_l0 = 2.0 * rk1gamma_xz * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xz_o0_t7_l0 = 2.0 * rk1gamma_xz * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xz_o0_t6_l0 = 2.0 * rk1gamma_xz * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xz_o0_t3_l0 = (-1.0) * rk1C_zxz * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xz_o0_t2_l0 = (-1.0) * rk1C_yxz * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xz_o0_t1_l0 = (-1.0) * rk1C_xxz * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_xz = (((((((((((((d_dalpha_xz_o0_t0_m0_l0 + rk1m_dalpha_xz_o0_t1_l0) + rk1m_dalpha_xz_o0_t2_l0) + rk1m_dalpha_xz_o0_t3_l0) + rk1m_dalpha_xz_o0_t4_l0) + rk1m_dalpha_xz_o0_t5_l0) + rk1m_dalpha_xz_o0_t6_l0) + rk1m_dalpha_xz_o0_t7_l0) + rk1m_dalpha_xz_o0_t8_l0) + rk1m_dalpha_xz_o0_t9_l0) + rk1m_dalpha_xz_o0_t10_l0) + rk1m_dalpha_xz_o0_t11_l0) + rk1m_dalpha_xz_o0_t12_l0) + rk1m_dalpha_xz_o0_t13_l0) + rk1m_dalpha_xz_o0_t14_l0;
						rk1m_dalpha_xy_o0_t14_l0 = 2.0 * rk1gamma_xy * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xy_o0_t13_l0 = 2.0 * rk1gamma_xy * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xy_o0_t12_l0 = 2.0 * rk1gamma_xy * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xy_o0_t11_l0 = 2.0 * rk1gamma_xy * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xy_o0_t10_l0 = 2.0 * rk1gamma_xy * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xy_o0_t9_l0 = 2.0 * rk1gamma_xy * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xy_o0_t8_l0 = 2.0 * rk1gamma_xy * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xy_o0_t7_l0 = 2.0 * rk1gamma_xy * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xy_o0_t6_l0 = 2.0 * rk1gamma_xy * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xy_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_xy_o0_t3_l0 = (-1.0) * rk1C_zxy * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_xy_o0_t2_l0 = (-1.0) * rk1C_yxy * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_xy_o0_t1_l0 = (-1.0) * rk1C_xxy * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_xy = (((((((((((((d_dalpha_xy_o0_t0_m0_l0 + rk1m_dalpha_xy_o0_t1_l0) + rk1m_dalpha_xy_o0_t2_l0) + rk1m_dalpha_xy_o0_t3_l0) + rk1m_dalpha_xy_o0_t4_l0) + rk1m_dalpha_xy_o0_t5_l0) + rk1m_dalpha_xy_o0_t6_l0) + rk1m_dalpha_xy_o0_t7_l0) + rk1m_dalpha_xy_o0_t8_l0) + rk1m_dalpha_xy_o0_t9_l0) + rk1m_dalpha_xy_o0_t10_l0) + rk1m_dalpha_xy_o0_t11_l0) + rk1m_dalpha_xy_o0_t12_l0) + rk1m_dalpha_xy_o0_t13_l0) + rk1m_dalpha_xy_o0_t14_l0;
						rk1m_Rp_xx_o0_t49_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t48_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t47_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t46_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t45_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t44_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t43_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t42_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t41_l0 = (-4.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t39_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t38_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t37_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t36_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t35_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t34_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t33_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t32_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t31_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t30_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t29_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t28_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t27_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t26_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t25_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t24_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t23_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t22_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t21_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t20_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t19_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t18_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t17_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t16_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t15_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t14_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t13_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t12_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t11_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_xx_o0_t10_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_xx_o0_t9_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t8_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_xx_o0_t7_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_xx_o0_t6_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_xx_o0_t5_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_xx_o0_t4_l0 = (-2.0) * vector(rk1gammac_xx, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_xx_o0_t3_l0 = 2.0 * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xx_o0_t2_l0 = 2.0 * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xx_o0_t1_l0 = 2.0 * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xx_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
						rk1Rp_xx = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_xx_o0_t0_l0 + rk1m_Rp_xx_o0_t1_l0) + rk1m_Rp_xx_o0_t2_l0) + rk1m_Rp_xx_o0_t3_l0) + rk1m_Rp_xx_o0_t4_l0) + rk1m_Rp_xx_o0_t5_l0) + rk1m_Rp_xx_o0_t6_l0) + rk1m_Rp_xx_o0_t7_l0) + rk1m_Rp_xx_o0_t8_l0) + rk1m_Rp_xx_o0_t9_l0) + rk1m_Rp_xx_o0_t10_l0) + rk1m_Rp_xx_o0_t11_l0) + rk1m_Rp_xx_o0_t12_l0) + rk1m_Rp_xx_o0_t13_l0) + rk1m_Rp_xx_o0_t14_l0) + rk1m_Rp_xx_o0_t15_l0) + rk1m_Rp_xx_o0_t16_l0) + rk1m_Rp_xx_o0_t17_l0) + rk1m_Rp_xx_o0_t18_l0) + rk1m_Rp_xx_o0_t19_l0) + rk1m_Rp_xx_o0_t20_l0) + rk1m_Rp_xx_o0_t21_l0) + rk1m_Rp_xx_o0_t22_l0) + rk1m_Rp_xx_o0_t23_l0) + rk1m_Rp_xx_o0_t24_l0) + rk1m_Rp_xx_o0_t25_l0) + rk1m_Rp_xx_o0_t26_l0) + rk1m_Rp_xx_o0_t27_l0) + rk1m_Rp_xx_o0_t28_l0) + rk1m_Rp_xx_o0_t29_l0) + rk1m_Rp_xx_o0_t30_l0) + rk1m_Rp_xx_o0_t31_l0) + rk1m_Rp_xx_o0_t32_l0) + rk1m_Rp_xx_o0_t33_l0) + rk1m_Rp_xx_o0_t34_l0) + rk1m_Rp_xx_o0_t35_l0) + rk1m_Rp_xx_o0_t36_l0) + rk1m_Rp_xx_o0_t37_l0) + rk1m_Rp_xx_o0_t38_l0) + rk1m_Rp_xx_o0_t39_l0) + rk1m_Rp_xx_o0_t40_l0) + rk1m_Rp_xx_o0_t41_l0) + rk1m_Rp_xx_o0_t42_l0) + rk1m_Rp_xx_o0_t43_l0) + rk1m_Rp_xx_o0_t44_l0) + rk1m_Rp_xx_o0_t45_l0) + rk1m_Rp_xx_o0_t46_l0) + rk1m_Rp_xx_o0_t47_l0) + rk1m_Rp_xx_o0_t48_l0) + rk1m_Rp_xx_o0_t49_l0;
						rk1m_Rp_zz_o0_t49_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t48_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t47_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t46_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t45_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t44_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t43_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t42_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t41_l0 = (-4.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t39_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t38_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t37_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t36_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t35_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t34_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t33_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t32_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t31_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t30_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t29_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t28_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t27_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t26_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t25_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t24_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t23_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t22_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t21_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t20_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t19_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t18_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t17_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t16_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t15_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t14_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t13_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t12_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t11_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_zz_o0_t10_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_zz_o0_t9_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t8_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_zz_o0_t7_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_zz_o0_t6_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_zz_o0_t5_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_zz_o0_t4_l0 = (-2.0) * vector(rk1gammac_zz, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_zz_o0_t3_l0 = 2.0 * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_zz_o0_t2_l0 = 2.0 * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_zz_o0_t1_l0 = 2.0 * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_zz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
						rk1Rp_zz = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_zz_o0_t0_l0 + rk1m_Rp_zz_o0_t1_l0) + rk1m_Rp_zz_o0_t2_l0) + rk1m_Rp_zz_o0_t3_l0) + rk1m_Rp_zz_o0_t4_l0) + rk1m_Rp_zz_o0_t5_l0) + rk1m_Rp_zz_o0_t6_l0) + rk1m_Rp_zz_o0_t7_l0) + rk1m_Rp_zz_o0_t8_l0) + rk1m_Rp_zz_o0_t9_l0) + rk1m_Rp_zz_o0_t10_l0) + rk1m_Rp_zz_o0_t11_l0) + rk1m_Rp_zz_o0_t12_l0) + rk1m_Rp_zz_o0_t13_l0) + rk1m_Rp_zz_o0_t14_l0) + rk1m_Rp_zz_o0_t15_l0) + rk1m_Rp_zz_o0_t16_l0) + rk1m_Rp_zz_o0_t17_l0) + rk1m_Rp_zz_o0_t18_l0) + rk1m_Rp_zz_o0_t19_l0) + rk1m_Rp_zz_o0_t20_l0) + rk1m_Rp_zz_o0_t21_l0) + rk1m_Rp_zz_o0_t22_l0) + rk1m_Rp_zz_o0_t23_l0) + rk1m_Rp_zz_o0_t24_l0) + rk1m_Rp_zz_o0_t25_l0) + rk1m_Rp_zz_o0_t26_l0) + rk1m_Rp_zz_o0_t27_l0) + rk1m_Rp_zz_o0_t28_l0) + rk1m_Rp_zz_o0_t29_l0) + rk1m_Rp_zz_o0_t30_l0) + rk1m_Rp_zz_o0_t31_l0) + rk1m_Rp_zz_o0_t32_l0) + rk1m_Rp_zz_o0_t33_l0) + rk1m_Rp_zz_o0_t34_l0) + rk1m_Rp_zz_o0_t35_l0) + rk1m_Rp_zz_o0_t36_l0) + rk1m_Rp_zz_o0_t37_l0) + rk1m_Rp_zz_o0_t38_l0) + rk1m_Rp_zz_o0_t39_l0) + rk1m_Rp_zz_o0_t40_l0) + rk1m_Rp_zz_o0_t41_l0) + rk1m_Rp_zz_o0_t42_l0) + rk1m_Rp_zz_o0_t43_l0) + rk1m_Rp_zz_o0_t44_l0) + rk1m_Rp_zz_o0_t45_l0) + rk1m_Rp_zz_o0_t46_l0) + rk1m_Rp_zz_o0_t47_l0) + rk1m_Rp_zz_o0_t48_l0) + rk1m_Rp_zz_o0_t49_l0;
						rk1R_zz = rk1Rc_zz + rk1Rp_zz;
						rk1R_xx = rk1Rc_xx + rk1Rp_xx;
						rk1m_Rp_xy_o0_t49_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t48_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t47_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t46_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t45_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t44_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t43_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t42_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t41_l0 = (-4.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t39_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t38_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t37_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t36_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t35_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t34_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t33_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t32_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t31_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t30_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t29_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t28_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t27_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t26_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t25_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t24_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t23_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t22_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t21_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t20_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t19_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t18_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t17_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t16_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t15_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t14_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t13_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t12_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t11_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_xy_o0_t10_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_xy_o0_t9_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t8_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_xy_o0_t7_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_xy_o0_t6_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_xy_o0_t5_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_xy_o0_t4_l0 = (-2.0) * vector(rk1gammac_xy, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_xy_o0_t3_l0 = 2.0 * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xy_o0_t2_l0 = 2.0 * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xy_o0_t1_l0 = 2.0 * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
						rk1Rp_xy = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_xy_o0_t0_l0 + rk1m_Rp_xy_o0_t1_l0) + rk1m_Rp_xy_o0_t2_l0) + rk1m_Rp_xy_o0_t3_l0) + rk1m_Rp_xy_o0_t4_l0) + rk1m_Rp_xy_o0_t5_l0) + rk1m_Rp_xy_o0_t6_l0) + rk1m_Rp_xy_o0_t7_l0) + rk1m_Rp_xy_o0_t8_l0) + rk1m_Rp_xy_o0_t9_l0) + rk1m_Rp_xy_o0_t10_l0) + rk1m_Rp_xy_o0_t11_l0) + rk1m_Rp_xy_o0_t12_l0) + rk1m_Rp_xy_o0_t13_l0) + rk1m_Rp_xy_o0_t14_l0) + rk1m_Rp_xy_o0_t15_l0) + rk1m_Rp_xy_o0_t16_l0) + rk1m_Rp_xy_o0_t17_l0) + rk1m_Rp_xy_o0_t18_l0) + rk1m_Rp_xy_o0_t19_l0) + rk1m_Rp_xy_o0_t20_l0) + rk1m_Rp_xy_o0_t21_l0) + rk1m_Rp_xy_o0_t22_l0) + rk1m_Rp_xy_o0_t23_l0) + rk1m_Rp_xy_o0_t24_l0) + rk1m_Rp_xy_o0_t25_l0) + rk1m_Rp_xy_o0_t26_l0) + rk1m_Rp_xy_o0_t27_l0) + rk1m_Rp_xy_o0_t28_l0) + rk1m_Rp_xy_o0_t29_l0) + rk1m_Rp_xy_o0_t30_l0) + rk1m_Rp_xy_o0_t31_l0) + rk1m_Rp_xy_o0_t32_l0) + rk1m_Rp_xy_o0_t33_l0) + rk1m_Rp_xy_o0_t34_l0) + rk1m_Rp_xy_o0_t35_l0) + rk1m_Rp_xy_o0_t36_l0) + rk1m_Rp_xy_o0_t37_l0) + rk1m_Rp_xy_o0_t38_l0) + rk1m_Rp_xy_o0_t39_l0) + rk1m_Rp_xy_o0_t40_l0) + rk1m_Rp_xy_o0_t41_l0) + rk1m_Rp_xy_o0_t42_l0) + rk1m_Rp_xy_o0_t43_l0) + rk1m_Rp_xy_o0_t44_l0) + rk1m_Rp_xy_o0_t45_l0) + rk1m_Rp_xy_o0_t46_l0) + rk1m_Rp_xy_o0_t47_l0) + rk1m_Rp_xy_o0_t48_l0) + rk1m_Rp_xy_o0_t49_l0;
						rk1R_xy = rk1Rc_xy + rk1Rp_xy;
						rk1m_Rp_xz_o0_t49_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t48_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t47_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t46_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t45_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t44_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t43_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t42_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t41_l0 = (-4.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t39_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t38_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t37_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t36_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t35_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t34_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t33_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t32_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t31_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t30_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t29_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t28_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t27_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t26_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t25_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t24_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t23_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t22_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t21_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t20_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t19_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t18_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t17_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t16_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t15_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t14_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t13_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t12_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t11_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_xz_o0_t10_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_xz_o0_t9_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t8_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_xz_o0_t7_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_xz_o0_t6_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_xz_o0_t5_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_xz_o0_t4_l0 = (-2.0) * vector(rk1gammac_xz, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_xz_o0_t3_l0 = 2.0 * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_xz_o0_t2_l0 = 2.0 * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_xz_o0_t1_l0 = 2.0 * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_xz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
						rk1Rp_xz = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_xz_o0_t0_l0 + rk1m_Rp_xz_o0_t1_l0) + rk1m_Rp_xz_o0_t2_l0) + rk1m_Rp_xz_o0_t3_l0) + rk1m_Rp_xz_o0_t4_l0) + rk1m_Rp_xz_o0_t5_l0) + rk1m_Rp_xz_o0_t6_l0) + rk1m_Rp_xz_o0_t7_l0) + rk1m_Rp_xz_o0_t8_l0) + rk1m_Rp_xz_o0_t9_l0) + rk1m_Rp_xz_o0_t10_l0) + rk1m_Rp_xz_o0_t11_l0) + rk1m_Rp_xz_o0_t12_l0) + rk1m_Rp_xz_o0_t13_l0) + rk1m_Rp_xz_o0_t14_l0) + rk1m_Rp_xz_o0_t15_l0) + rk1m_Rp_xz_o0_t16_l0) + rk1m_Rp_xz_o0_t17_l0) + rk1m_Rp_xz_o0_t18_l0) + rk1m_Rp_xz_o0_t19_l0) + rk1m_Rp_xz_o0_t20_l0) + rk1m_Rp_xz_o0_t21_l0) + rk1m_Rp_xz_o0_t22_l0) + rk1m_Rp_xz_o0_t23_l0) + rk1m_Rp_xz_o0_t24_l0) + rk1m_Rp_xz_o0_t25_l0) + rk1m_Rp_xz_o0_t26_l0) + rk1m_Rp_xz_o0_t27_l0) + rk1m_Rp_xz_o0_t28_l0) + rk1m_Rp_xz_o0_t29_l0) + rk1m_Rp_xz_o0_t30_l0) + rk1m_Rp_xz_o0_t31_l0) + rk1m_Rp_xz_o0_t32_l0) + rk1m_Rp_xz_o0_t33_l0) + rk1m_Rp_xz_o0_t34_l0) + rk1m_Rp_xz_o0_t35_l0) + rk1m_Rp_xz_o0_t36_l0) + rk1m_Rp_xz_o0_t37_l0) + rk1m_Rp_xz_o0_t38_l0) + rk1m_Rp_xz_o0_t39_l0) + rk1m_Rp_xz_o0_t40_l0) + rk1m_Rp_xz_o0_t41_l0) + rk1m_Rp_xz_o0_t42_l0) + rk1m_Rp_xz_o0_t43_l0) + rk1m_Rp_xz_o0_t44_l0) + rk1m_Rp_xz_o0_t45_l0) + rk1m_Rp_xz_o0_t46_l0) + rk1m_Rp_xz_o0_t47_l0) + rk1m_Rp_xz_o0_t48_l0) + rk1m_Rp_xz_o0_t49_l0;
						rk1R_xz = rk1Rc_xz + rk1Rp_xz;
						rk1m_Rp_yy_o0_t49_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t48_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t47_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t46_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t45_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t44_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t43_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t42_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t41_l0 = (-4.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t39_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t38_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t37_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t36_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t35_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t34_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t33_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t32_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t31_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t30_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t29_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t28_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t27_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t26_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t25_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t24_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t23_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t22_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t21_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t20_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t19_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t18_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t17_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t16_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t15_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t14_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t13_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t12_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t11_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_yy_o0_t10_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_yy_o0_t9_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t8_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_yy_o0_t7_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_yy_o0_t6_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_yy_o0_t5_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_yy_o0_t4_l0 = (-2.0) * vector(rk1gammac_yy, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_yy_o0_t3_l0 = 2.0 * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yy_o0_t2_l0 = 2.0 * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yy_o0_t1_l0 = 2.0 * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
						rk1Rp_yy = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_yy_o0_t0_l0 + rk1m_Rp_yy_o0_t1_l0) + rk1m_Rp_yy_o0_t2_l0) + rk1m_Rp_yy_o0_t3_l0) + rk1m_Rp_yy_o0_t4_l0) + rk1m_Rp_yy_o0_t5_l0) + rk1m_Rp_yy_o0_t6_l0) + rk1m_Rp_yy_o0_t7_l0) + rk1m_Rp_yy_o0_t8_l0) + rk1m_Rp_yy_o0_t9_l0) + rk1m_Rp_yy_o0_t10_l0) + rk1m_Rp_yy_o0_t11_l0) + rk1m_Rp_yy_o0_t12_l0) + rk1m_Rp_yy_o0_t13_l0) + rk1m_Rp_yy_o0_t14_l0) + rk1m_Rp_yy_o0_t15_l0) + rk1m_Rp_yy_o0_t16_l0) + rk1m_Rp_yy_o0_t17_l0) + rk1m_Rp_yy_o0_t18_l0) + rk1m_Rp_yy_o0_t19_l0) + rk1m_Rp_yy_o0_t20_l0) + rk1m_Rp_yy_o0_t21_l0) + rk1m_Rp_yy_o0_t22_l0) + rk1m_Rp_yy_o0_t23_l0) + rk1m_Rp_yy_o0_t24_l0) + rk1m_Rp_yy_o0_t25_l0) + rk1m_Rp_yy_o0_t26_l0) + rk1m_Rp_yy_o0_t27_l0) + rk1m_Rp_yy_o0_t28_l0) + rk1m_Rp_yy_o0_t29_l0) + rk1m_Rp_yy_o0_t30_l0) + rk1m_Rp_yy_o0_t31_l0) + rk1m_Rp_yy_o0_t32_l0) + rk1m_Rp_yy_o0_t33_l0) + rk1m_Rp_yy_o0_t34_l0) + rk1m_Rp_yy_o0_t35_l0) + rk1m_Rp_yy_o0_t36_l0) + rk1m_Rp_yy_o0_t37_l0) + rk1m_Rp_yy_o0_t38_l0) + rk1m_Rp_yy_o0_t39_l0) + rk1m_Rp_yy_o0_t40_l0) + rk1m_Rp_yy_o0_t41_l0) + rk1m_Rp_yy_o0_t42_l0) + rk1m_Rp_yy_o0_t43_l0) + rk1m_Rp_yy_o0_t44_l0) + rk1m_Rp_yy_o0_t45_l0) + rk1m_Rp_yy_o0_t46_l0) + rk1m_Rp_yy_o0_t47_l0) + rk1m_Rp_yy_o0_t48_l0) + rk1m_Rp_yy_o0_t49_l0;
						rk1R_yy = rk1Rc_yy + rk1Rp_yy;
						rk1m_Rp_yz_o0_t49_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t48_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t47_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t46_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t45_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t44_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t43_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t42_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t41_l0 = (-4.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t39_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zz * rk1C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t38_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zz * rk1C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t37_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zz * rk1C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t36_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zy * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t35_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zy * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t34_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zy * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t33_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zx * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t32_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zx * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t31_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zx * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t30_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yz * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t29_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yz * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t28_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yz * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t27_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yy * rk1C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t26_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yy * rk1C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t25_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yy * rk1C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t24_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yx * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t23_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yx * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t22_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yx * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t21_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xz * rk1C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t20_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xz * rk1C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t19_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xz * rk1C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t18_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xy * rk1C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t17_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xy * rk1C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t16_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xy * rk1C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t15_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xx * rk1C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t14_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xx * rk1C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t13_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xx * rk1C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t12_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t11_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk1m_Rp_yz_o0_t10_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk1m_Rp_yz_o0_t9_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t8_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk1m_Rp_yz_o0_t7_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk1m_Rp_yz_o0_t6_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk1m_Rp_yz_o0_t5_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk1m_Rp_yz_o0_t4_l0 = (-2.0) * vector(rk1gammac_yz, i, j, k) * rk1gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk1m_Rp_yz_o0_t3_l0 = 2.0 * rk1C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk1m_Rp_yz_o0_t2_l0 = 2.0 * rk1C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk1m_Rp_yz_o0_t1_l0 = 2.0 * rk1C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk1m_Rp_yz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
						rk1Rp_yz = ((((((((((((((((((((((((((((((((((((((((((((((((rk1m_Rp_yz_o0_t0_l0 + rk1m_Rp_yz_o0_t1_l0) + rk1m_Rp_yz_o0_t2_l0) + rk1m_Rp_yz_o0_t3_l0) + rk1m_Rp_yz_o0_t4_l0) + rk1m_Rp_yz_o0_t5_l0) + rk1m_Rp_yz_o0_t6_l0) + rk1m_Rp_yz_o0_t7_l0) + rk1m_Rp_yz_o0_t8_l0) + rk1m_Rp_yz_o0_t9_l0) + rk1m_Rp_yz_o0_t10_l0) + rk1m_Rp_yz_o0_t11_l0) + rk1m_Rp_yz_o0_t12_l0) + rk1m_Rp_yz_o0_t13_l0) + rk1m_Rp_yz_o0_t14_l0) + rk1m_Rp_yz_o0_t15_l0) + rk1m_Rp_yz_o0_t16_l0) + rk1m_Rp_yz_o0_t17_l0) + rk1m_Rp_yz_o0_t18_l0) + rk1m_Rp_yz_o0_t19_l0) + rk1m_Rp_yz_o0_t20_l0) + rk1m_Rp_yz_o0_t21_l0) + rk1m_Rp_yz_o0_t22_l0) + rk1m_Rp_yz_o0_t23_l0) + rk1m_Rp_yz_o0_t24_l0) + rk1m_Rp_yz_o0_t25_l0) + rk1m_Rp_yz_o0_t26_l0) + rk1m_Rp_yz_o0_t27_l0) + rk1m_Rp_yz_o0_t28_l0) + rk1m_Rp_yz_o0_t29_l0) + rk1m_Rp_yz_o0_t30_l0) + rk1m_Rp_yz_o0_t31_l0) + rk1m_Rp_yz_o0_t32_l0) + rk1m_Rp_yz_o0_t33_l0) + rk1m_Rp_yz_o0_t34_l0) + rk1m_Rp_yz_o0_t35_l0) + rk1m_Rp_yz_o0_t36_l0) + rk1m_Rp_yz_o0_t37_l0) + rk1m_Rp_yz_o0_t38_l0) + rk1m_Rp_yz_o0_t39_l0) + rk1m_Rp_yz_o0_t40_l0) + rk1m_Rp_yz_o0_t41_l0) + rk1m_Rp_yz_o0_t42_l0) + rk1m_Rp_yz_o0_t43_l0) + rk1m_Rp_yz_o0_t44_l0) + rk1m_Rp_yz_o0_t45_l0) + rk1m_Rp_yz_o0_t46_l0) + rk1m_Rp_yz_o0_t47_l0) + rk1m_Rp_yz_o0_t48_l0) + rk1m_Rp_yz_o0_t49_l0;
						rk1R_yz = rk1Rc_yz + rk1Rp_yz;
						rk1R = rk1gammau_xx * rk1R_xx + rk1gammau_yy * rk1R_yy + rk1gammau_zz * rk1R_zz + 2.0 * (rk1gammau_xy * rk1R_xy + rk1gammau_xz * rk1R_xz + rk1gammau_yz * rk1R_yz);
						rk1m_dalpha_yz_o0_t14_l0 = 2.0 * rk1gamma_yz * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yz_o0_t13_l0 = 2.0 * rk1gamma_yz * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yz_o0_t12_l0 = 2.0 * rk1gamma_yz * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yz_o0_t11_l0 = 2.0 * rk1gamma_yz * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yz_o0_t10_l0 = 2.0 * rk1gamma_yz * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yz_o0_t9_l0 = 2.0 * rk1gamma_yz * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yz_o0_t8_l0 = 2.0 * rk1gamma_yz * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yz_o0_t7_l0 = 2.0 * rk1gamma_yz * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yz_o0_t6_l0 = 2.0 * rk1gamma_yz * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yz_o0_t3_l0 = (-1.0) * rk1C_zyz * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yz_o0_t2_l0 = (-1.0) * rk1C_yyz * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yz_o0_t1_l0 = (-1.0) * rk1C_xyz * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_yz = (((((((((((((d_dalpha_yz_o0_t0_m0_l0 + rk1m_dalpha_yz_o0_t1_l0) + rk1m_dalpha_yz_o0_t2_l0) + rk1m_dalpha_yz_o0_t3_l0) + rk1m_dalpha_yz_o0_t4_l0) + rk1m_dalpha_yz_o0_t5_l0) + rk1m_dalpha_yz_o0_t6_l0) + rk1m_dalpha_yz_o0_t7_l0) + rk1m_dalpha_yz_o0_t8_l0) + rk1m_dalpha_yz_o0_t9_l0) + rk1m_dalpha_yz_o0_t10_l0) + rk1m_dalpha_yz_o0_t11_l0) + rk1m_dalpha_yz_o0_t12_l0) + rk1m_dalpha_yz_o0_t13_l0) + rk1m_dalpha_yz_o0_t14_l0;
						rk1m_dalpha_yy_o0_t14_l0 = 2.0 * rk1gamma_yy * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yy_o0_t13_l0 = 2.0 * rk1gamma_yy * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yy_o0_t12_l0 = 2.0 * rk1gamma_yy * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yy_o0_t11_l0 = 2.0 * rk1gamma_yy * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yy_o0_t10_l0 = 2.0 * rk1gamma_yy * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yy_o0_t9_l0 = 2.0 * rk1gamma_yy * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yy_o0_t8_l0 = 2.0 * rk1gamma_yy * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yy_o0_t7_l0 = 2.0 * rk1gamma_yy * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yy_o0_t6_l0 = 2.0 * rk1gamma_yy * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_yy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yy_o0_t3_l0 = (-1.0) * rk1C_zyy * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_yy_o0_t2_l0 = (-1.0) * rk1C_yyy * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_yy_o0_t1_l0 = (-1.0) * rk1C_xyy * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_yy = (((((((((((((d_dalpha_yy_o0_t0_m0_l0 + rk1m_dalpha_yy_o0_t1_l0) + rk1m_dalpha_yy_o0_t2_l0) + rk1m_dalpha_yy_o0_t3_l0) + rk1m_dalpha_yy_o0_t4_l0) + rk1m_dalpha_yy_o0_t4_l0) + rk1m_dalpha_yy_o0_t6_l0) + rk1m_dalpha_yy_o0_t7_l0) + rk1m_dalpha_yy_o0_t8_l0) + rk1m_dalpha_yy_o0_t9_l0) + rk1m_dalpha_yy_o0_t10_l0) + rk1m_dalpha_yy_o0_t11_l0) + rk1m_dalpha_yy_o0_t12_l0) + rk1m_dalpha_yy_o0_t13_l0) + rk1m_dalpha_yy_o0_t14_l0;
						rk1m_dalpha_zz_o0_t14_l0 = 2.0 * rk1gamma_zz * rk1gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_zz_o0_t13_l0 = 2.0 * rk1gamma_zz * rk1gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_zz_o0_t12_l0 = 2.0 * rk1gamma_zz * rk1gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_zz_o0_t11_l0 = 2.0 * rk1gamma_zz * rk1gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_zz_o0_t10_l0 = 2.0 * rk1gamma_zz * rk1gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_zz_o0_t9_l0 = 2.0 * rk1gamma_zz * rk1gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_zz_o0_t8_l0 = 2.0 * rk1gamma_zz * rk1gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_zz_o0_t7_l0 = 2.0 * rk1gamma_zz * rk1gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_zz_o0_t6_l0 = 2.0 * rk1gamma_zz * rk1gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk1m_dalpha_zz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_zz_o0_t3_l0 = (-1.0) * rk1C_zzz * d_dalpha_xx_o0_t3_m0_l0;
						rk1m_dalpha_zz_o0_t2_l0 = (-1.0) * rk1C_yzz * d_dalpha_xx_o0_t2_m0_l0;
						rk1m_dalpha_zz_o0_t1_l0 = (-1.0) * rk1C_xzz * d_dalpha_xx_o0_t1_m0_l0;
						rk1dalpha_zz = (((((((((((((d_dalpha_zz_o0_t0_m0_l0 + rk1m_dalpha_zz_o0_t1_l0) + rk1m_dalpha_zz_o0_t2_l0) + rk1m_dalpha_zz_o0_t3_l0) + rk1m_dalpha_zz_o0_t4_l0) + rk1m_dalpha_zz_o0_t4_l0) + rk1m_dalpha_zz_o0_t6_l0) + rk1m_dalpha_zz_o0_t7_l0) + rk1m_dalpha_zz_o0_t8_l0) + rk1m_dalpha_zz_o0_t9_l0) + rk1m_dalpha_zz_o0_t10_l0) + rk1m_dalpha_zz_o0_t11_l0) + rk1m_dalpha_zz_o0_t12_l0) + rk1m_dalpha_zz_o0_t13_l0) + rk1m_dalpha_zz_o0_t14_l0;
						rk1trdalpha = rk1gammau_xx * rk1dalpha_xx + 2.0 * rk1gammau_xy * rk1dalpha_xy + 2.0 * rk1gammau_xz * rk1dalpha_xz + rk1gammau_yy * rk1dalpha_yy + 2.0 * rk1gammau_yz * rk1dalpha_yz + rk1gammau_zz * rk1dalpha_zz;
						rk1Psi1TF_yz = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_yz) + vector(rk1alpha, i, j, k) * rk1R_yz + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						rk1Psi1TF_yy = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_yy) + vector(rk1alpha, i, j, k) * rk1R_yy + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						rk1Psi1TF_xy = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_xy) + vector(rk1alpha, i, j, k) * rk1R_xy + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						rk1Psi1TF_xx = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_xx) + vector(rk1alpha, i, j, k) * rk1R_xx + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						rk1Psi1TF_xz = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_xz) + vector(rk1alpha, i, j, k) * rk1R_xz + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						rk1Psi1TF_zz = exp(-4.0 * vector(rk1Phi, i, j, k)) * ((-rk1dalpha_zz) + vector(rk1alpha, i, j, k) * rk1R_zz + 1.0 / 3.0 * rk1trdalpha - 1.0 / 3.0 * vector(rk1alpha, i, j, k) * rk1R);
						d_gammac_xx_o2_t3_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_xx, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_xx, i, j, k) * rk1div_beta;
						d_gammac_xy_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_xy, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_xy, i, j, k) * rk1div_beta;
						d_gammac_xz_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_xz, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_xz, i, j, k) * rk1div_beta;
						d_gammac_yy_o2_t3_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_yy, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_yy, i, j, k) * rk1div_beta;
						d_gammac_yx_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_xy, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_yx, i, j, k) * rk1div_beta;
						d_gammac_yz_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_yz, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_yz, i, j, k) * rk1div_beta;
						d_gammac_zz_o2_t3_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_zz, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_zz, i, j, k) * rk1div_beta;
						d_gammac_zx_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_xz, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_zx, i, j, k) * rk1div_beta;
						d_gammac_zy_o2_t6_m0_l0 = (-2.0) * vector(rk1alpha, i, j, k) * vector(rk1A_yz, i, j, k) + (-0.6666666666666667) * vector(rk1gammac_zy, i, j, k) * rk1div_beta;
						d_A_xx_o2_t3_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_xx, i, j, k) - 2.0 * (vector(rk1A_xx, i, j, k) * rk1Am_xx + vector(rk1A_xy, i, j, k) * rk1Am_yx + vector(rk1A_xz, i, j, k) * rk1Am_zx)) + rk1Psi1TF_xx + (-0.6666666666666667) * vector(rk1A_xx, i, j, k) * rk1div_beta;
						d_A_xy_o2_t6_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_xy, i, j, k) - 2.0 * (vector(rk1A_xx, i, j, k) * rk1Am_xy + vector(rk1A_xy, i, j, k) * rk1Am_yy + vector(rk1A_xz, i, j, k) * rk1Am_zy)) + rk1Psi1TF_xy + (-0.6666666666666667) * vector(rk1A_xy, i, j, k) * rk1div_beta;
						d_A_xz_o2_t6_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_xz, i, j, k) - 2.0 * (vector(rk1A_xx, i, j, k) * rk1Am_xz + vector(rk1A_xy, i, j, k) * rk1Am_yz + vector(rk1A_xz, i, j, k) * rk1Am_zz)) + rk1Psi1TF_xz + (-0.6666666666666667) * vector(rk1A_xz, i, j, k) * rk1div_beta;
						d_A_yy_o2_t3_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_yy, i, j, k) - 2.0 * (vector(rk1A_xy, i, j, k) * rk1Am_xy + vector(rk1A_yy, i, j, k) * rk1Am_yy + vector(rk1A_yz, i, j, k) * rk1Am_zy)) + rk1Psi1TF_yy + (-0.6666666666666667) * vector(rk1A_yy, i, j, k) * rk1div_beta;
						d_A_yz_o2_t6_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_yz, i, j, k) - 2.0 * (vector(rk1A_xy, i, j, k) * rk1Am_xz + vector(rk1A_yy, i, j, k) * rk1Am_yz + vector(rk1A_yz, i, j, k) * rk1Am_zz)) + rk1Psi1TF_yz + (-0.6666666666666667) * vector(rk1A_yz, i, j, k) * rk1div_beta;
						d_A_zz_o2_t3_m0_l0 = vector(rk1alpha, i, j, k) * (vector(rk1trK, i, j, k) * vector(rk1A_zz, i, j, k) - 2.0 * (vector(rk1A_xz, i, j, k) * rk1Am_xz + vector(rk1A_yz, i, j, k) * rk1Am_yz + vector(rk1A_zz, i, j, k) * rk1Am_zz)) + rk1Psi1TF_zz + (-0.6666666666666667) * vector(rk1A_zz, i, j, k) * rk1div_beta;
						d_Phi_o2_t0_m0_l0 = (-0.16666666666666666) * vector(rk1alpha, i, j, k) * vector(rk1trK, i, j, k) + 0.1666666666666666 * rk1div_beta;
						d_trK_o2_t0_m0_l0 = 0.166666666666666 * rk1div_beta + vector(rk1alpha, i, j, k) * (vector(rk1A_xx, i, j, k) * rk1Au_xx + vector(rk1A_yy, i, j, k) * rk1Au_yy + vector(rk1A_zz, i, j, k) * rk1Au_zz + 2.0 * (vector(rk1A_xy, i, j, k) * rk1Au_xy + vector(rk1A_xz, i, j, k) * rk1Au_xz + vector(rk1A_yz, i, j, k) * rk1Au_yz) + 0.3333333333333 * (vector(rk1trK, i, j, k) * vector(rk1trK, i, j, k))) + (-(rk1gammau_xx * rk1dalpha_xx + rk1gammau_yy * rk1dalpha_yy + rk1gammau_zz * rk1dalpha_zz + 2.0 * rk1gammau_xy * rk1dalpha_xy + 2.0 * rk1gammau_xz * rk1dalpha_xz + 2.0 * rk1gammau_yz * rk1dalpha_yz));
						d_beta_x_o0_t0_m0_l0 = 0.0;
						d_alpha_o2_t0_m0_l0 = (-vector(rk1alpha, i, j, k) * vector(rk1alpha, i, j, k) * rk1falpha * vector(rk1trK, i, j, k)) + 0.166666666666 * rk1div_beta;
						d_Gam_x_o0_t33_m0_l0 = 2.0 * vector(rk1alpha, i, j, k) * (rk1C_xxx * rk1Au_xx + rk1C_xyy * rk1Au_yy + rk1C_xzz * rk1Au_zz + 2.0 * rk1C_xxy * rk1Au_xy + 2.0 * rk1C_xxz * rk1Au_xz + 2.0 * rk1C_xyz * rk1Au_yz) + 0.666666666666 * vector(rk1Gam_x, i, j, k) * rk1div_beta;
						d_Gam_y_o0_t33_m0_l0 = 2.0 * vector(rk1alpha, i, j, k) * (rk1C_yxx * rk1Au_xx + rk1C_yyy * rk1Au_yy + rk1C_yzz * rk1Au_zz + 2.0 * rk1C_yxy * rk1Au_xy + 2.0 * rk1C_yxz * rk1Au_xz + 2.0 * rk1C_yyz * rk1Au_yz) + 0.666666666666 * vector(rk1Gam_y, i, j, k) * rk1div_beta;
						d_Gam_z_o0_t33_m0_l0 = 2.0 * vector(rk1alpha, i, j, k) * (rk1C_zxx * rk1Au_xx + rk1C_zyy * rk1Au_yy + rk1C_zzz * rk1Au_zz + 2.0 * rk1C_zxy * rk1Au_xy + 2.0 * rk1C_zxz * rk1Au_xz + 2.0 * rk1C_zyz * rk1Au_yz) + 0.666666666666 * vector(rk1Gam_z, i, j, k) * rk1div_beta;
						m_Gam_z_o0_t32_l0 = (-2.0) * rk1Au_zz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_z_o0_t31_l0 = (-2.0) * rk1Au_yz * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_z_o0_t30_l0 = (-2.0) * rk1Au_xz * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_z_o0_t29_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_zz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_z_o0_t28_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_zy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_z_o0_t27_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_zx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_z_o0_t26_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_zz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_z_o0_t25_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_yz * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_z_o0_t24_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_xz * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_z_o0_t23_l0 = (-1.0) * vector(rk1Gam_z, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_Gam_z_o0_t22_l0 = (-1.0) * vector(rk1Gam_y, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_Gam_z_o0_t21_l0 = (-1.0) * vector(rk1Gam_x, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_Gam_z_o0_t20_l0 = vector(rk1beta_z, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Gam_z_o0_t19_l0 = vector(rk1beta_y, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Gam_z_o0_t18_l0 = vector(rk1beta_x, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Gam_z_o0_t17_l0 = 0.3333333333333 * rk1gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t16_l0 = 0.3333333333333 * rk1gammacu_zz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_z_o0_t15_l0 = 0.3333333333333 * rk1gammacu_zz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_z_o0_t14_l0 = 0.3333333333333 * rk1gammacu_zy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t13_l0 = 0.3333333333333 * rk1gammacu_zy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_z_o0_t12_l0 = 0.3333333333333 * rk1gammacu_zy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_z_o0_t11_l0 = 0.3333333333333 * rk1gammacu_zx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t10_l0 = 0.3333333333333 * rk1gammacu_zx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_z_o0_t9_l0 = 0.3333333333333 * rk1gammacu_zx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_z_o0_t8_l0 = rk1gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t7_l0 = rk1gammacu_zy * d_Gam_z_o0_t7_m0_l0;
						m_Gam_z_o0_t6_l0 = rk1gammacu_zx * d_Gam_z_o0_t6_m0_l0;
						m_Gam_z_o0_t5_l0 = rk1gammacu_yz * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t4_l0 = rk1gammacu_yy * d_Gam_z_o0_t4_m0_l0;
						m_Gam_z_o0_t3_l0 = rk1gammacu_yx * d_Gam_z_o0_t3_m0_l0;
						m_Gam_z_o0_t2_l0 = rk1gammacu_xz * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t1_l0 = rk1gammacu_xy * d_Gam_z_o0_t1_m0_l0;
						m_Gam_z_o0_t0_l0 = rk1gammacu_xx * d_Gam_z_o0_t0_m0_l0;
						m_Gam_y_o0_t32_l0 = (-2.0) * rk1Au_yz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_y_o0_t31_l0 = (-2.0) * rk1Au_yy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_y_o0_t30_l0 = (-2.0) * rk1Au_xy * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_y_o0_t29_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_yz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_y_o0_t28_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_yy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_y_o0_t27_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_yx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_y_o0_t26_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_yz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_y_o0_t25_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_yy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_y_o0_t24_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_xy * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_y_o0_t23_l0 = (-1.0) * vector(rk1Gam_z, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_Gam_y_o0_t22_l0 = (-1.0) * vector(rk1Gam_y, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_Gam_y_o0_t21_l0 = (-1.0) * vector(rk1Gam_x, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_Gam_y_o0_t20_l0 = vector(rk1beta_z, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Gam_y_o0_t19_l0 = vector(rk1beta_y, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Gam_y_o0_t18_l0 = vector(rk1beta_x, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Gam_y_o0_t17_l0 = 0.3333333333333 * rk1gammacu_yz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_y_o0_t16_l0 = 0.3333333333333 * rk1gammacu_yz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t15_l0 = 0.3333333333333 * rk1gammacu_yz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_y_o0_t14_l0 = 0.3333333333333 * rk1gammacu_yy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_y_o0_t13_l0 = 0.3333333333333 * rk1gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t12_l0 = 0.3333333333333 * rk1gammacu_yy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_y_o0_t11_l0 = 0.3333333333333 * rk1gammacu_yx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_y_o0_t10_l0 = 0.3333333333333 * rk1gammacu_yx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t9_l0 = 0.3333333333333 * rk1gammacu_yx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_y_o0_t8_l0 = rk1gammacu_zz * d_Gam_y_o0_t8_m0_l0;
						m_Gam_y_o0_t7_l0 = rk1gammacu_zy * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t6_l0 = rk1gammacu_zx * d_Gam_y_o0_t6_m0_l0;
						m_Gam_y_o0_t5_l0 = rk1gammacu_yz * d_Gam_y_o0_t5_m0_l0;
						m_Gam_y_o0_t4_l0 = rk1gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t3_l0 = rk1gammacu_yx * d_Gam_y_o0_t3_m0_l0;
						m_Gam_y_o0_t2_l0 = rk1gammacu_xz * d_Gam_y_o0_t2_m0_l0;
						m_Gam_y_o0_t1_l0 = rk1gammacu_xy * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t0_l0 = rk1gammacu_xx * d_Gam_y_o0_t0_m0_l0;
						m_Gam_x_o0_t32_l0 = (-2.0) * rk1Au_xz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_x_o0_t31_l0 = (-2.0) * rk1Au_xy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_x_o0_t30_l0 = (-2.0) * rk1Au_xx * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_x_o0_t29_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_xz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_x_o0_t28_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_xy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_x_o0_t27_l0 = (-2.0) * vector(rk1alpha, i, j, k) * 0.666666666666 * rk1gammacu_xx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_x_o0_t26_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_xz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_x_o0_t25_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_xy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t24_l0 = 2.0 * vector(rk1alpha, i, j, k) * 6.0 * rk1Au_xx * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_x_o0_t23_l0 = (-1.0) * vector(rk1Gam_z, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_Gam_x_o0_t22_l0 = (-1.0) * vector(rk1Gam_y, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_Gam_x_o0_t21_l0 = (-1.0) * vector(rk1Gam_x, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_Gam_x_o0_t20_l0 = vector(rk1beta_z, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Gam_x_o0_t19_l0 = vector(rk1beta_y, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Gam_x_o0_t18_l0 = vector(rk1beta_x, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t17_l0 = 0.3333333333333 * rk1gammacu_xz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_x_o0_t16_l0 = 0.3333333333333 * rk1gammacu_xz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_x_o0_t15_l0 = 0.3333333333333 * rk1gammacu_xz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t14_l0 = 0.3333333333333 * rk1gammacu_xy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_x_o0_t13_l0 = 0.3333333333333 * rk1gammacu_xy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_x_o0_t12_l0 = 0.3333333333333 * rk1gammacu_xy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t11_l0 = 0.3333333333333 * rk1gammacu_xx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_x_o0_t10_l0 = 0.3333333333333 * rk1gammacu_xx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_x_o0_t9_l0 = 0.3333333333333 * rk1gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_x_o0_t8_l0 = rk1gammacu_zz * d_Gam_x_o0_t8_m0_l0;
						m_Gam_x_o0_t7_l0 = rk1gammacu_zy * d_Gam_x_o0_t7_m0_l0;
						m_Gam_x_o0_t6_l0 = rk1gammacu_zx * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t5_l0 = rk1gammacu_yz * d_Gam_x_o0_t5_m0_l0;
						m_Gam_x_o0_t4_l0 = rk1gammacu_yy * d_Gam_x_o0_t4_m0_l0;
						m_Gam_x_o0_t3_l0 = rk1gammacu_yx * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t2_l0 = rk1gammacu_xz * d_Gam_x_o0_t2_m0_l0;
						m_Gam_x_o0_t1_l0 = rk1gammacu_xy * d_Gam_x_o0_t1_m0_l0;
						m_Gam_x_o0_t0_l0 = rk1gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_alpha_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_alpha_o1_t2_m0_l0;
						m_alpha_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_alpha_o1_t1_m0_l0;
						m_alpha_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_alpha_o1_t0_m0_l0;
						m_alpha_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_alpha_o0_t2_m0_l0;
						m_alpha_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_alpha_o0_t1_m0_l0;
						m_alpha_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_alpha_o0_t0_m0_l0;
						m_trK_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_trK_o1_t2_m0_l0;
						m_trK_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_trK_o1_t1_m0_l0;
						m_trK_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_trK_o1_t0_m0_l0;
						m_trK_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_trK_o0_t2_m0_l0;
						m_trK_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_trK_o0_t1_m0_l0;
						m_trK_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_trK_o0_t0_m0_l0;
						m_Phi_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_Phi_o1_t2_m0_l0;
						m_Phi_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_Phi_o1_t1_m0_l0;
						m_Phi_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_Phi_o1_t0_m0_l0;
						m_Phi_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_Phi_o0_t2_m0_l0;
						m_Phi_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_Phi_o0_t1_m0_l0;
						m_Phi_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_Phi_o0_t0_m0_l0;
						m_A_zz_o2_t2_l0 = 2.0 * vector(rk1A_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_zz_o2_t1_l0 = 2.0 * vector(rk1A_yz, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_zz_o2_t0_l0 = 2.0 * vector(rk1A_xz, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_zz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_zz_o1_t2_m0_l0;
						m_A_zz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_zz_o1_t1_m0_l0;
						m_A_zz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_zz_o1_t0_m0_l0;
						m_A_zz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_zz_o0_t2_m0_l0;
						m_A_zz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_zz_o0_t1_m0_l0;
						m_A_zz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_zz_o0_t0_m0_l0;
						m_A_yz_o2_t5_l0 = vector(rk1A_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yz_o2_t4_l0 = vector(rk1A_yz, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yz_o2_t3_l0 = vector(rk1A_xz, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yz_o2_t2_l0 = vector(rk1A_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_yz_o2_t1_l0 = vector(rk1A_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_yz_o2_t0_l0 = vector(rk1A_xy, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_yz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_yz_o1_t2_m0_l0;
						m_A_yz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_yz_o1_t1_m0_l0;
						m_A_yz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_yz_o1_t0_m0_l0;
						m_A_yz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_yz_o0_t2_m0_l0;
						m_A_yz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_yz_o0_t1_m0_l0;
						m_A_yz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_yz_o0_t0_m0_l0;
						m_A_yy_o2_t2_l0 = 2.0 * vector(rk1A_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yy_o2_t1_l0 = 2.0 * vector(rk1A_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yy_o2_t0_l0 = 2.0 * vector(rk1A_xy, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yy_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_yy_o1_t2_m0_l0;
						m_A_yy_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_yy_o1_t1_m0_l0;
						m_A_yy_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_yy_o1_t0_m0_l0;
						m_A_yy_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_yy_o0_t2_m0_l0;
						m_A_yy_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_yy_o0_t1_m0_l0;
						m_A_yy_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_yy_o0_t0_m0_l0;
						m_A_xz_o2_t5_l0 = vector(rk1A_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xz_o2_t4_l0 = vector(rk1A_yz, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xz_o2_t3_l0 = vector(rk1A_xz, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xz_o2_t2_l0 = vector(rk1A_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_xz_o2_t1_l0 = vector(rk1A_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_xz_o2_t0_l0 = vector(rk1A_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_xz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_xz_o1_t2_m0_l0;
						m_A_xz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_xz_o1_t1_m0_l0;
						m_A_xz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_xz_o1_t0_m0_l0;
						m_A_xz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_xz_o0_t2_m0_l0;
						m_A_xz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_xz_o0_t1_m0_l0;
						m_A_xz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_xz_o0_t0_m0_l0;
						m_A_xy_o2_t5_l0 = vector(rk1A_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xy_o2_t4_l0 = vector(rk1A_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xy_o2_t3_l0 = vector(rk1A_xy, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xy_o2_t2_l0 = vector(rk1A_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_xy_o2_t1_l0 = vector(rk1A_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_xy_o2_t0_l0 = vector(rk1A_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_xy_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_xy_o1_t2_m0_l0;
						m_A_xy_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_xy_o1_t1_m0_l0;
						m_A_xy_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_xy_o1_t0_m0_l0;
						m_A_xy_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_xy_o0_t2_m0_l0;
						m_A_xy_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_xy_o0_t1_m0_l0;
						m_A_xy_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_xy_o0_t0_m0_l0;
						m_A_xx_o2_t2_l0 = 2.0 * vector(rk1A_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xx_o2_t1_l0 = 2.0 * vector(rk1A_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xx_o2_t0_l0 = 2.0 * vector(rk1A_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xx_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_A_xx_o1_t2_m0_l0;
						m_A_xx_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_A_xx_o1_t1_m0_l0;
						m_A_xx_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_A_xx_o1_t0_m0_l0;
						m_A_xx_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_A_xx_o0_t2_m0_l0;
						m_A_xx_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_A_xx_o0_t1_m0_l0;
						m_A_xx_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_A_xx_o0_t0_m0_l0;
						m_gammac_zy_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zy_o1_t2_m0_l0;
						m_gammac_zy_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zy_o1_t1_m0_l0;
						m_gammac_zy_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zy_o1_t0_m0_l0;
						m_gammac_zy_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zy_o0_t2_m0_l0;
						m_gammac_zy_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zy_o0_t1_m0_l0;
						m_gammac_zy_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zy_o0_t0_m0_l0;
						m_gammac_zx_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zx_o1_t2_m0_l0;
						m_gammac_zx_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zx_o1_t1_m0_l0;
						m_gammac_zx_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zx_o1_t0_m0_l0;
						m_gammac_zx_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zx_o0_t2_m0_l0;
						m_gammac_zx_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zx_o0_t1_m0_l0;
						m_gammac_zx_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zx_o0_t0_m0_l0;
						m_gammac_zz_o2_t2_l0 = 2.0 * vector(rk1gammac_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_zz_o2_t1_l0 = 2.0 * vector(rk1gammac_zy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_zz_o2_t0_l0 = 2.0 * vector(rk1gammac_zx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_zz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zz_o1_t2_m0_l0;
						m_gammac_zz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zz_o1_t1_m0_l0;
						m_gammac_zz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zz_o1_t0_m0_l0;
						m_gammac_zz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_zz_o0_t2_m0_l0;
						m_gammac_zz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_zz_o0_t1_m0_l0;
						m_gammac_zz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_zz_o0_t0_m0_l0;
						m_gammac_yz_o2_t5_l0 = vector(rk1gammac_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yz_o2_t4_l0 = vector(rk1gammac_zy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yz_o2_t3_l0 = vector(rk1gammac_zx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yz_o2_t2_l0 = vector(rk1gammac_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_yz_o2_t1_l0 = vector(rk1gammac_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_yz_o2_t0_l0 = vector(rk1gammac_yx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_yz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yz_o1_t2_m0_l0;
						m_gammac_yz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yz_o1_t1_m0_l0;
						m_gammac_yz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yz_o1_t0_m0_l0;
						m_gammac_yz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yz_o0_t2_m0_l0;
						m_gammac_yz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yz_o0_t1_m0_l0;
						m_gammac_yz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yz_o0_t0_m0_l0;
						m_gammac_yx_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yx_o1_t2_m0_l0;
						m_gammac_yx_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yx_o1_t1_m0_l0;
						m_gammac_yx_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yx_o1_t0_m0_l0;
						m_gammac_yx_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yx_o0_t2_m0_l0;
						m_gammac_yx_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yx_o0_t1_m0_l0;
						m_gammac_yx_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yx_o0_t0_m0_l0;
						m_gammac_yy_o2_t2_l0 = 2.0 * vector(rk1gammac_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yy_o2_t1_l0 = 2.0 * vector(rk1gammac_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yy_o2_t0_l0 = 2.0 * vector(rk1gammac_yx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yy_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yy_o1_t2_m0_l0;
						m_gammac_yy_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yy_o1_t1_m0_l0;
						m_gammac_yy_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yy_o1_t0_m0_l0;
						m_gammac_yy_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_yy_o0_t2_m0_l0;
						m_gammac_yy_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_yy_o0_t1_m0_l0;
						m_gammac_yy_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_yy_o0_t0_m0_l0;
						m_gammac_xz_o2_t5_l0 = vector(rk1gammac_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xz_o2_t4_l0 = vector(rk1gammac_zy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xz_o2_t3_l0 = vector(rk1gammac_zx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xz_o2_t2_l0 = vector(rk1gammac_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_xz_o2_t1_l0 = vector(rk1gammac_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_xz_o2_t0_l0 = vector(rk1gammac_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_xz_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xz_o1_t2_m0_l0;
						m_gammac_xz_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xz_o1_t1_m0_l0;
						m_gammac_xz_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xz_o1_t0_m0_l0;
						m_gammac_xz_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xz_o0_t2_m0_l0;
						m_gammac_xz_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xz_o0_t1_m0_l0;
						m_gammac_xz_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xz_o0_t0_m0_l0;
						m_gammac_xy_o2_t5_l0 = vector(rk1gammac_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xy_o2_t4_l0 = vector(rk1gammac_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xy_o2_t3_l0 = vector(rk1gammac_yx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xy_o2_t2_l0 = vector(rk1gammac_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_xy_o2_t1_l0 = vector(rk1gammac_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_xy_o2_t0_l0 = vector(rk1gammac_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_xy_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xy_o1_t2_m0_l0;
						m_gammac_xy_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xy_o1_t1_m0_l0;
						m_gammac_xy_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xy_o1_t0_m0_l0;
						m_gammac_xy_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xy_o0_t2_m0_l0;
						m_gammac_xy_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xy_o0_t1_m0_l0;
						m_gammac_xy_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xy_o0_t0_m0_l0;
						m_gammac_xx_o2_t2_l0 = 2.0 * vector(rk1gammac_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xx_o2_t1_l0 = 2.0 * vector(rk1gammac_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xx_o2_t0_l0 = 2.0 * vector(rk1gammac_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xx_o1_t2_l0 = MIN(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xx_o1_t2_m0_l0;
						m_gammac_xx_o1_t1_l0 = MIN(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xx_o1_t1_m0_l0;
						m_gammac_xx_o1_t0_l0 = MIN(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xx_o1_t0_m0_l0;
						m_gammac_xx_o0_t2_l0 = MAX(0.0, vector(rk1beta_z, i, j, k)) * d_gammac_xx_o0_t2_m0_l0;
						m_gammac_xx_o0_t1_l0 = MAX(0.0, vector(rk1beta_y, i, j, k)) * d_gammac_xx_o0_t1_m0_l0;
						m_gammac_xx_o0_t0_l0 = MAX(0.0, vector(rk1beta_x, i, j, k)) * d_gammac_xx_o0_t0_m0_l0;
						RHS_gammac_xx = ((((((((m_gammac_xx_o0_t0_l0 + m_gammac_xx_o0_t1_l0) + m_gammac_xx_o0_t2_l0) + m_gammac_xx_o1_t0_l0) + m_gammac_xx_o1_t1_l0) + m_gammac_xx_o1_t2_l0) + m_gammac_xx_o2_t0_l0) + m_gammac_xx_o2_t1_l0) + m_gammac_xx_o2_t2_l0) + d_gammac_xx_o2_t3_m0_l0;
						RHS_gammac_xy = (((((((((((m_gammac_xy_o0_t0_l0 + m_gammac_xy_o0_t1_l0) + m_gammac_xy_o0_t2_l0) + m_gammac_xy_o1_t0_l0) + m_gammac_xy_o1_t1_l0) + m_gammac_xy_o1_t2_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + d_gammac_xy_o2_t6_m0_l0;
						RHS_gammac_xz = (((((((((((m_gammac_xz_o0_t0_l0 + m_gammac_xz_o0_t1_l0) + m_gammac_xz_o0_t2_l0) + m_gammac_xz_o1_t0_l0) + m_gammac_xz_o1_t1_l0) + m_gammac_xz_o1_t2_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + d_gammac_xz_o2_t6_m0_l0;
						RHS_gammac_yy = ((((((((m_gammac_yy_o0_t0_l0 + m_gammac_yy_o0_t1_l0) + m_gammac_yy_o0_t2_l0) + m_gammac_yy_o1_t0_l0) + m_gammac_yy_o1_t1_l0) + m_gammac_yy_o1_t2_l0) + m_gammac_yy_o2_t0_l0) + m_gammac_yy_o2_t1_l0) + m_gammac_yy_o2_t2_l0) + d_gammac_yy_o2_t3_m0_l0;
						RHS_gammac_yx = (((((((((((m_gammac_yx_o0_t0_l0 + m_gammac_yx_o0_t1_l0) + m_gammac_yx_o0_t2_l0) + m_gammac_yx_o1_t0_l0) + m_gammac_yx_o1_t1_l0) + m_gammac_yx_o1_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + d_gammac_yx_o2_t6_m0_l0;
						RHS_gammac_yz = (((((((((((m_gammac_yz_o0_t0_l0 + m_gammac_yz_o0_t1_l0) + m_gammac_yz_o0_t2_l0) + m_gammac_yz_o1_t0_l0) + m_gammac_yz_o1_t1_l0) + m_gammac_yz_o1_t2_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + d_gammac_yz_o2_t6_m0_l0;
						RHS_gammac_zz = ((((((((m_gammac_zz_o0_t0_l0 + m_gammac_zz_o0_t1_l0) + m_gammac_zz_o0_t2_l0) + m_gammac_zz_o1_t0_l0) + m_gammac_zz_o1_t1_l0) + m_gammac_zz_o1_t2_l0) + m_gammac_zz_o2_t0_l0) + m_gammac_zz_o2_t1_l0) + m_gammac_zz_o2_t2_l0) + d_gammac_zz_o2_t3_m0_l0;
						RHS_gammac_zx = (((((((((((m_gammac_zx_o0_t0_l0 + m_gammac_zx_o0_t1_l0) + m_gammac_zx_o0_t2_l0) + m_gammac_zx_o1_t0_l0) + m_gammac_zx_o1_t1_l0) + m_gammac_zx_o1_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + d_gammac_zx_o2_t6_m0_l0;
						RHS_gammac_zy = (((((((((((m_gammac_zy_o0_t0_l0 + m_gammac_zy_o0_t1_l0) + m_gammac_zy_o0_t2_l0) + m_gammac_zy_o1_t0_l0) + m_gammac_zy_o1_t1_l0) + m_gammac_zy_o1_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + d_gammac_zy_o2_t6_m0_l0;
						RHS_A_xx = ((((((((m_A_xx_o0_t0_l0 + m_A_xx_o0_t1_l0) + m_A_xx_o0_t2_l0) + m_A_xx_o1_t0_l0) + m_A_xx_o1_t1_l0) + m_A_xx_o1_t2_l0) + m_A_xx_o2_t0_l0) + m_A_xx_o2_t1_l0) + m_A_xx_o2_t2_l0) + d_A_xx_o2_t3_m0_l0;
						RHS_A_xy = (((((((((((m_A_xy_o0_t0_l0 + m_A_xy_o0_t1_l0) + m_A_xy_o0_t2_l0) + m_A_xy_o1_t0_l0) + m_A_xy_o1_t1_l0) + m_A_xy_o1_t2_l0) + m_A_xy_o2_t0_l0) + m_A_xy_o2_t1_l0) + m_A_xy_o2_t2_l0) + m_A_xy_o2_t3_l0) + m_A_xy_o2_t4_l0) + m_A_xy_o2_t5_l0) + d_A_xy_o2_t6_m0_l0;
						RHS_A_xz = (((((((((((m_A_xz_o0_t0_l0 + m_A_xz_o0_t1_l0) + m_A_xz_o0_t2_l0) + m_A_xz_o1_t0_l0) + m_A_xz_o1_t1_l0) + m_A_xz_o1_t2_l0) + m_A_xz_o2_t0_l0) + m_A_xz_o2_t1_l0) + m_A_xz_o2_t2_l0) + m_A_xz_o2_t3_l0) + m_A_xz_o2_t4_l0) + m_A_xz_o2_t5_l0) + d_A_xz_o2_t6_m0_l0;
						RHS_A_yy = ((((((((m_A_yy_o0_t0_l0 + m_A_yy_o0_t1_l0) + m_A_yy_o0_t2_l0) + m_A_yy_o1_t0_l0) + m_A_yy_o1_t1_l0) + m_A_yy_o1_t2_l0) + m_A_yy_o2_t0_l0) + m_A_yy_o2_t1_l0) + m_A_yy_o2_t2_l0) + d_A_yy_o2_t3_m0_l0;
						RHS_A_yz = (((((((((((m_A_yz_o0_t0_l0 + m_A_yz_o0_t1_l0) + m_A_yz_o0_t2_l0) + m_A_yz_o1_t0_l0) + m_A_yz_o1_t1_l0) + m_A_yz_o1_t2_l0) + m_A_yz_o2_t0_l0) + m_A_yz_o2_t1_l0) + m_A_yz_o2_t2_l0) + m_A_yz_o2_t3_l0) + m_A_yz_o2_t4_l0) + m_A_yz_o2_t5_l0) + d_A_yz_o2_t6_m0_l0;
						RHS_A_zz = ((((((((m_A_zz_o0_t0_l0 + m_A_zz_o0_t1_l0) + m_A_zz_o0_t2_l0) + m_A_zz_o1_t0_l0) + m_A_zz_o1_t1_l0) + m_A_zz_o1_t2_l0) + m_A_zz_o2_t0_l0) + m_A_zz_o2_t1_l0) + m_A_zz_o2_t2_l0) + d_A_zz_o2_t3_m0_l0;
						RHS_Phi = (((((m_Phi_o0_t0_l0 + m_Phi_o0_t1_l0) + m_Phi_o0_t2_l0) + m_Phi_o1_t0_l0) + m_Phi_o1_t1_l0) + m_Phi_o1_t2_l0) + d_Phi_o2_t0_m0_l0;
						RHS_trK = (((((m_trK_o0_t0_l0 + m_trK_o0_t1_l0) + m_trK_o0_t2_l0) + m_trK_o1_t0_l0) + m_trK_o1_t1_l0) + m_trK_o1_t2_l0) + d_trK_o2_t0_m0_l0;
						RHS_beta_x = d_beta_x_o0_t0_m0_l0;
						RHS_beta_y = d_beta_x_o0_t0_m0_l0;
						RHS_beta_z = d_beta_x_o0_t0_m0_l0;
						RHS_alpha = (((((m_alpha_o0_t0_l0 + m_alpha_o0_t1_l0) + m_alpha_o0_t2_l0) + m_alpha_o1_t0_l0) + m_alpha_o1_t1_l0) + m_alpha_o1_t2_l0) + d_alpha_o2_t0_m0_l0;
						RHS_Gam_x = ((((((((((((((((((((((((((((((((m_Gam_x_o0_t0_l0 + m_Gam_x_o0_t1_l0) + m_Gam_x_o0_t2_l0) + m_Gam_x_o0_t3_l0) + m_Gam_x_o0_t4_l0) + m_Gam_x_o0_t5_l0) + m_Gam_x_o0_t6_l0) + m_Gam_x_o0_t7_l0) + m_Gam_x_o0_t8_l0) + m_Gam_x_o0_t9_l0) + m_Gam_x_o0_t10_l0) + m_Gam_x_o0_t11_l0) + m_Gam_x_o0_t12_l0) + m_Gam_x_o0_t13_l0) + m_Gam_x_o0_t14_l0) + m_Gam_x_o0_t15_l0) + m_Gam_x_o0_t16_l0) + m_Gam_x_o0_t17_l0) + m_Gam_x_o0_t18_l0) + m_Gam_x_o0_t19_l0) + m_Gam_x_o0_t20_l0) + m_Gam_x_o0_t21_l0) + m_Gam_x_o0_t22_l0) + m_Gam_x_o0_t23_l0) + m_Gam_x_o0_t24_l0) + m_Gam_x_o0_t25_l0) + m_Gam_x_o0_t26_l0) + m_Gam_x_o0_t27_l0) + m_Gam_x_o0_t28_l0) + m_Gam_x_o0_t29_l0) + m_Gam_x_o0_t30_l0) + m_Gam_x_o0_t31_l0) + m_Gam_x_o0_t32_l0) + d_Gam_x_o0_t33_m0_l0;
						RHS_Gam_y = ((((((((((((((((((((((((((((((((m_Gam_y_o0_t0_l0 + m_Gam_y_o0_t1_l0) + m_Gam_y_o0_t2_l0) + m_Gam_y_o0_t3_l0) + m_Gam_y_o0_t4_l0) + m_Gam_y_o0_t5_l0) + m_Gam_y_o0_t6_l0) + m_Gam_y_o0_t7_l0) + m_Gam_y_o0_t8_l0) + m_Gam_y_o0_t9_l0) + m_Gam_y_o0_t10_l0) + m_Gam_y_o0_t11_l0) + m_Gam_y_o0_t12_l0) + m_Gam_y_o0_t13_l0) + m_Gam_y_o0_t14_l0) + m_Gam_y_o0_t15_l0) + m_Gam_y_o0_t16_l0) + m_Gam_y_o0_t17_l0) + m_Gam_y_o0_t18_l0) + m_Gam_y_o0_t19_l0) + m_Gam_y_o0_t20_l0) + m_Gam_y_o0_t21_l0) + m_Gam_y_o0_t22_l0) + m_Gam_y_o0_t23_l0) + m_Gam_y_o0_t24_l0) + m_Gam_y_o0_t25_l0) + m_Gam_y_o0_t26_l0) + m_Gam_y_o0_t27_l0) + m_Gam_y_o0_t28_l0) + m_Gam_y_o0_t29_l0) + m_Gam_y_o0_t30_l0) + m_Gam_y_o0_t31_l0) + m_Gam_y_o0_t32_l0) + d_Gam_y_o0_t33_m0_l0;
						RHS_Gam_z = ((((((((((((((((((((((((((((((((m_Gam_z_o0_t0_l0 + m_Gam_z_o0_t1_l0) + m_Gam_z_o0_t2_l0) + m_Gam_z_o0_t3_l0) + m_Gam_z_o0_t4_l0) + m_Gam_z_o0_t5_l0) + m_Gam_z_o0_t6_l0) + m_Gam_z_o0_t7_l0) + m_Gam_z_o0_t8_l0) + m_Gam_z_o0_t9_l0) + m_Gam_z_o0_t10_l0) + m_Gam_z_o0_t11_l0) + m_Gam_z_o0_t12_l0) + m_Gam_z_o0_t13_l0) + m_Gam_z_o0_t14_l0) + m_Gam_z_o0_t15_l0) + m_Gam_z_o0_t16_l0) + m_Gam_z_o0_t17_l0) + m_Gam_z_o0_t18_l0) + m_Gam_z_o0_t19_l0) + m_Gam_z_o0_t20_l0) + m_Gam_z_o0_t21_l0) + m_Gam_z_o0_t22_l0) + m_Gam_z_o0_t23_l0) + m_Gam_z_o0_t24_l0) + m_Gam_z_o0_t25_l0) + m_Gam_z_o0_t26_l0) + m_Gam_z_o0_t27_l0) + m_Gam_z_o0_t28_l0) + m_Gam_z_o0_t29_l0) + m_Gam_z_o0_t30_l0) + m_Gam_z_o0_t31_l0) + m_Gam_z_o0_t32_l0) + d_Gam_z_o0_t33_m0_l0;
						if (dissipation_factor_gammac_xx > 0.0) {
							RHS_gammac_xx = RHS_gammac_xx + dissipation_factor_gammac_xx * (meshDissipation_i(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xy > 0.0) {
							RHS_gammac_xy = RHS_gammac_xy + dissipation_factor_gammac_xy * (meshDissipation_i(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xz > 0.0) {
							RHS_gammac_xz = RHS_gammac_xz + dissipation_factor_gammac_xz * (meshDissipation_i(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yy > 0.0) {
							RHS_gammac_yy = RHS_gammac_yy + dissipation_factor_gammac_yy * (meshDissipation_i(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yx > 0.0) {
							RHS_gammac_yx = RHS_gammac_yx + dissipation_factor_gammac_yx * (meshDissipation_i(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yz > 0.0) {
							RHS_gammac_yz = RHS_gammac_yz + dissipation_factor_gammac_yz * (meshDissipation_i(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zz > 0.0) {
							RHS_gammac_zz = RHS_gammac_zz + dissipation_factor_gammac_zz * (meshDissipation_i(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zx > 0.0) {
							RHS_gammac_zx = RHS_gammac_zx + dissipation_factor_gammac_zx * (meshDissipation_i(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zy > 0.0) {
							RHS_gammac_zy = RHS_gammac_zy + dissipation_factor_gammac_zy * (meshDissipation_i(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xx > 0.0) {
							RHS_A_xx = RHS_A_xx + dissipation_factor_A_xx * (meshDissipation_i(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xy > 0.0) {
							RHS_A_xy = RHS_A_xy + dissipation_factor_A_xy * (meshDissipation_i(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xz > 0.0) {
							RHS_A_xz = RHS_A_xz + dissipation_factor_A_xz * (meshDissipation_i(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yy > 0.0) {
							RHS_A_yy = RHS_A_yy + dissipation_factor_A_yy * (meshDissipation_i(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yz > 0.0) {
							RHS_A_yz = RHS_A_yz + dissipation_factor_A_yz * (meshDissipation_i(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_zz > 0.0) {
							RHS_A_zz = RHS_A_zz + dissipation_factor_A_zz * (meshDissipation_i(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1A_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Phi > 0.0) {
							RHS_Phi = RHS_Phi + dissipation_factor_Phi * (meshDissipation_i(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1Phi, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_trK > 0.0) {
							RHS_trK = RHS_trK + dissipation_factor_trK * (meshDissipation_i(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1trK, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_x > 0.0) {
							RHS_beta_x = RHS_beta_x + dissipation_factor_beta_x * (meshDissipation_i(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1beta_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_y > 0.0) {
							RHS_beta_y = RHS_beta_y + dissipation_factor_beta_y * (meshDissipation_i(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1beta_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_z > 0.0) {
							RHS_beta_z = RHS_beta_z + dissipation_factor_beta_z * (meshDissipation_i(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1beta_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_alpha > 0.0) {
							RHS_alpha = RHS_alpha + dissipation_factor_alpha * (meshDissipation_i(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1alpha, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_x > 0.0) {
							RHS_Gam_x = RHS_Gam_x + dissipation_factor_Gam_x * (meshDissipation_i(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_y > 0.0) {
							RHS_Gam_y = RHS_Gam_y + dissipation_factor_Gam_y * (meshDissipation_i(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_z > 0.0) {
							RHS_Gam_z = RHS_Gam_z + dissipation_factor_Gam_z * (meshDissipation_i(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk1Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						vector(rk2gammac_xx, i, j, k) = RK4P2_(RHS_gammac_xx, vector(gammac_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_xy, i, j, k) = RK4P2_(RHS_gammac_xy, vector(gammac_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_xz, i, j, k) = RK4P2_(RHS_gammac_xz, vector(gammac_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_yy, i, j, k) = RK4P2_(RHS_gammac_yy, vector(gammac_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_yx, i, j, k) = RK4P2_(RHS_gammac_yx, vector(gammac_yx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_yz, i, j, k) = RK4P2_(RHS_gammac_yz, vector(gammac_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_zz, i, j, k) = RK4P2_(RHS_gammac_zz, vector(gammac_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_zx, i, j, k) = RK4P2_(RHS_gammac_zx, vector(gammac_zx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2gammac_zy, i, j, k) = RK4P2_(RHS_gammac_zy, vector(gammac_zy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_xx, i, j, k) = RK4P2_(RHS_A_xx, vector(A_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_xy, i, j, k) = RK4P2_(RHS_A_xy, vector(A_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_xz, i, j, k) = RK4P2_(RHS_A_xz, vector(A_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_yy, i, j, k) = RK4P2_(RHS_A_yy, vector(A_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_yz, i, j, k) = RK4P2_(RHS_A_yz, vector(A_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2A_zz, i, j, k) = RK4P2_(RHS_A_zz, vector(A_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2Phi, i, j, k) = RK4P2_(RHS_Phi, vector(Phi_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2trK, i, j, k) = RK4P2_(RHS_trK, vector(trK_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2beta_x, i, j, k) = RK4P2_(RHS_beta_x, vector(beta_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2beta_y, i, j, k) = RK4P2_(RHS_beta_y, vector(beta_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2beta_z, i, j, k) = RK4P2_(RHS_beta_z, vector(beta_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2alpha, i, j, k) = RK4P2_(RHS_alpha, vector(alpha_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2Gam_x, i, j, k) = RK4P2_(RHS_Gam_x, vector(Gam_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2Gam_y, i, j, k) = RK4P2_(RHS_Gam_y, vector(Gam_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk2Gam_z, i, j, k) = RK4P2_(RHS_Gam_z, vector(Gam_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
					}
				}
			}
		}
	}
	//Fill ghosts and periodical boundaries
	time_interpolate_operator_mesh1->setStep(2);
	d_bdry_sched_advance6[ln]->fillData(current_time + simPlat_dt * 0.5, false);
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		//Hard region field distance variables
		double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
	
		double* rk2gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xx_id).get())->getPointer();
		double* rk2gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xy_id).get())->getPointer();
		double* rk2gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xz_id).get())->getPointer();
		double* rk2gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yy_id).get())->getPointer();
		double* rk2gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yx_id).get())->getPointer();
		double* rk2gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yz_id).get())->getPointer();
		double* rk2gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zz_id).get())->getPointer();
		double* rk2gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zx_id).get())->getPointer();
		double* rk2gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zy_id).get())->getPointer();
		double* rk2A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xx_id).get())->getPointer();
		double* rk2A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xy_id).get())->getPointer();
		double* rk2A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xz_id).get())->getPointer();
		double* rk2A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yy_id).get())->getPointer();
		double* rk2A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yz_id).get())->getPointer();
		double* rk2A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_zz_id).get())->getPointer();
		double* rk2Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Phi_id).get())->getPointer();
		double* rk2trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2trK_id).get())->getPointer();
		double* rk2beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_x_id).get())->getPointer();
		double* rk2beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_y_id).get())->getPointer();
		double* rk2beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_z_id).get())->getPointer();
		double* rk2alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2alpha_id).get())->getPointer();
		double* rk2Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_x_id).get())->getPointer();
		double* rk2Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_y_id).get())->getPointer();
		double* rk2Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_z_id).get())->getPointer();
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((vector(FOV_xLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_xUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk2Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
				}
			}
		}
	}
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		double* rk2beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_x_id).get())->getPointer();
		double* rk2beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_y_id).get())->getPointer();
		double* rk2beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_z_id).get())->getPointer();
		double* rk2gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xx_id).get())->getPointer();
		double* rk2gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yx_id).get())->getPointer();
		double* rk2gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zx_id).get())->getPointer();
		double* rk2gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xy_id).get())->getPointer();
		double* rk2gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yy_id).get())->getPointer();
		double* rk2gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zy_id).get())->getPointer();
		double* rk2gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xz_id).get())->getPointer();
		double* rk2gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yz_id).get())->getPointer();
		double* rk2gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zz_id).get())->getPointer();
		double* rk2alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2alpha_id).get())->getPointer();
		double* rk2Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Phi_id).get())->getPointer();
		double* rk2Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_x_id).get())->getPointer();
		double* rk2Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_y_id).get())->getPointer();
		double* rk2Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_z_id).get())->getPointer();
		double* rk2A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xx_id).get())->getPointer();
		double* rk2A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xy_id).get())->getPointer();
		double* rk2A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xz_id).get())->getPointer();
		double* rk2A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yy_id).get())->getPointer();
		double* rk2A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yz_id).get())->getPointer();
		double* rk2A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_zz_id).get())->getPointer();
		double* rk2trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2trK_id).get())->getPointer();
		double* rk3gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xx_id).get())->getPointer();
		double* gammac_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_p_id).get())->getPointer();
		double* rk3gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xy_id).get())->getPointer();
		double* gammac_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_p_id).get())->getPointer();
		double* rk3gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xz_id).get())->getPointer();
		double* gammac_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_p_id).get())->getPointer();
		double* rk3gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yy_id).get())->getPointer();
		double* gammac_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_p_id).get())->getPointer();
		double* rk3gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yx_id).get())->getPointer();
		double* gammac_yx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_p_id).get())->getPointer();
		double* rk3gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yz_id).get())->getPointer();
		double* gammac_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_p_id).get())->getPointer();
		double* rk3gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zz_id).get())->getPointer();
		double* gammac_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_p_id).get())->getPointer();
		double* rk3gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zx_id).get())->getPointer();
		double* gammac_zx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_p_id).get())->getPointer();
		double* rk3gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zy_id).get())->getPointer();
		double* gammac_zy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_p_id).get())->getPointer();
		double* rk3A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xx_id).get())->getPointer();
		double* A_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_p_id).get())->getPointer();
		double* rk3A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xy_id).get())->getPointer();
		double* A_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_p_id).get())->getPointer();
		double* rk3A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xz_id).get())->getPointer();
		double* A_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_p_id).get())->getPointer();
		double* rk3A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yy_id).get())->getPointer();
		double* A_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_p_id).get())->getPointer();
		double* rk3A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yz_id).get())->getPointer();
		double* A_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_p_id).get())->getPointer();
		double* rk3A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_zz_id).get())->getPointer();
		double* A_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_p_id).get())->getPointer();
		double* rk3Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Phi_id).get())->getPointer();
		double* Phi_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_p_id).get())->getPointer();
		double* rk3trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3trK_id).get())->getPointer();
		double* trK_p = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_p_id).get())->getPointer();
		double* rk3beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_x_id).get())->getPointer();
		double* beta_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_p_id).get())->getPointer();
		double* rk3beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_y_id).get())->getPointer();
		double* beta_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_p_id).get())->getPointer();
		double* rk3beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_z_id).get())->getPointer();
		double* beta_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_p_id).get())->getPointer();
		double* rk3alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3alpha_id).get())->getPointer();
		double* alpha_p = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_p_id).get())->getPointer();
		double* rk3Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_x_id).get())->getPointer();
		double* Gam_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_p_id).get())->getPointer();
		double* rk3Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_y_id).get())->getPointer();
		double* Gam_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_p_id).get())->getPointer();
		double* rk3Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_z_id).get())->getPointer();
		double* Gam_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_p_id).get())->getPointer();
		double d_div_beta_o0_t0_m0_l0, d_gammac_xy_o2_t0_m0_l0, d_gammac_xz_o2_t0_m0_l0, d_Gam_x_o0_t0_m0_l0, d_Gam_x_o0_t3_m0_l0, d_Gam_x_o0_t6_m0_l0, d_Gam_x_o0_t1_m0_l0, d_Gam_x_o0_t4_m0_l0, d_Gam_x_o0_t7_m0_l0, d_Gam_x_o0_t2_m0_l0, d_Gam_x_o0_t5_m0_l0, d_Gam_x_o0_t8_m0_l0, d_gammac_xx_o2_t1_m0_l0, d_div_beta_o0_t1_m0_l0, d_gammac_xz_o2_t1_m0_l0, d_Gam_y_o0_t0_m0_l0, d_Gam_y_o0_t3_m0_l0, d_Gam_y_o0_t6_m0_l0, d_Gam_x_o0_t10_m0_l0, d_Gam_x_o0_t13_m0_l0, d_Gam_x_o0_t16_m0_l0, d_Gam_y_o0_t2_m0_l0, d_Gam_y_o0_t5_m0_l0, d_Gam_y_o0_t8_m0_l0, d_gammac_xx_o2_t2_m0_l0, d_gammac_xy_o2_t2_m0_l0, d_div_beta_o0_t2_m0_l0, d_Gam_z_o0_t0_m0_l0, d_Gam_z_o0_t3_m0_l0, d_Gam_z_o0_t6_m0_l0, d_Gam_z_o0_t1_m0_l0, d_Gam_z_o0_t4_m0_l0, d_Gam_z_o0_t7_m0_l0, d_Gam_x_o0_t11_m0_l0, d_Gam_x_o0_t14_m0_l0, d_Gam_x_o0_t17_m0_l0, d_C_xxx_o0_t0_m0_l0, d_gammac_xx_o0_t0_m0_l0, d_gammac_xx_o1_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_gammac_xx_o0_t1_m0_l0, d_gammac_xx_o1_t1_m0_l0, d_C_xxx_o0_t8_m0_l0, d_gammac_xx_o0_t2_m0_l0, d_gammac_xx_o1_t2_m0_l0, d_C_xxx_o0_t3_m0_l0, d_gammac_yx_o0_t0_m0_l0, d_gammac_yx_o1_t0_m0_l0, d_C_xxy_o0_t4_m0_l0, d_gammac_yx_o0_t1_m0_l0, d_gammac_yx_o1_t1_m0_l0, d_C_xxz_o0_t4_m0_l0, d_gammac_yx_o0_t2_m0_l0, d_gammac_yx_o1_t2_m0_l0, d_C_xxx_o0_t6_m0_l0, d_gammac_zx_o0_t0_m0_l0, d_gammac_zx_o1_t0_m0_l0, d_C_xxy_o0_t7_m0_l0, d_gammac_zx_o0_t1_m0_l0, d_gammac_zx_o1_t1_m0_l0, d_C_xxz_o0_t7_m0_l0, d_gammac_zx_o0_t2_m0_l0, d_gammac_zx_o1_t2_m0_l0, d_C_xxy_o0_t0_m0_l0, d_gammac_xy_o0_t0_m0_l0, d_gammac_xy_o1_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_gammac_xy_o0_t1_m0_l0, d_gammac_xy_o1_t1_m0_l0, d_C_xxy_o0_t8_m0_l0, d_gammac_xy_o0_t2_m0_l0, d_gammac_xy_o1_t2_m0_l0, d_C_xxy_o0_t3_m0_l0, d_gammac_yy_o0_t0_m0_l0, d_gammac_yy_o1_t0_m0_l0, d_C_xyy_o0_t3_m0_l0, d_gammac_yy_o0_t1_m0_l0, d_gammac_yy_o1_t1_m0_l0, d_C_xyy_o0_t8_m0_l0, d_gammac_yy_o0_t2_m0_l0, d_gammac_yy_o1_t2_m0_l0, d_C_xxy_o0_t6_m0_l0, d_gammac_zy_o0_t0_m0_l0, d_gammac_zy_o1_t0_m0_l0, d_C_xyy_o0_t6_m0_l0, d_gammac_zy_o0_t1_m0_l0, d_gammac_zy_o1_t1_m0_l0, d_C_xyz_o0_t7_m0_l0, d_gammac_zy_o0_t2_m0_l0, d_gammac_zy_o1_t2_m0_l0, d_C_xxz_o0_t0_m0_l0, d_gammac_xz_o0_t0_m0_l0, d_gammac_xz_o1_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_gammac_xz_o0_t1_m0_l0, d_gammac_xz_o1_t1_m0_l0, d_C_xxz_o0_t8_m0_l0, d_gammac_xz_o0_t2_m0_l0, d_gammac_xz_o1_t2_m0_l0, d_C_xxz_o0_t3_m0_l0, d_gammac_yz_o0_t0_m0_l0, d_gammac_yz_o1_t0_m0_l0, d_C_xyz_o0_t3_m0_l0, d_gammac_yz_o0_t1_m0_l0, d_gammac_yz_o1_t1_m0_l0, d_C_xyz_o0_t8_m0_l0, d_gammac_yz_o0_t2_m0_l0, d_gammac_yz_o1_t2_m0_l0, d_C_xxz_o0_t6_m0_l0, d_gammac_zz_o0_t0_m0_l0, d_gammac_zz_o1_t0_m0_l0, d_C_xyz_o0_t6_m0_l0, d_gammac_zz_o0_t1_m0_l0, d_gammac_zz_o1_t1_m0_l0, d_C_xzz_o0_t6_m0_l0, d_gammac_zz_o0_t2_m0_l0, d_gammac_zz_o1_t2_m0_l0, d_dalpha_xx_o0_t1_m0_l0, d_alpha_o0_t0_m0_l0, d_alpha_o1_t0_m0_l0, d_dalpha_xx_o0_t2_m0_l0, d_alpha_o0_t1_m0_l0, d_alpha_o1_t1_m0_l0, d_dalpha_xx_o0_t3_m0_l0, d_alpha_o0_t2_m0_l0, d_alpha_o1_t2_m0_l0, d_dalpha_xx_o0_t0_m0_l0, d_dalpha_xy_o0_t0_m0_l0, d_dalpha_yy_o0_t0_m0_l0, d_dalpha_xz_o0_t0_m0_l0, d_dalpha_yz_o0_t0_m0_l0, d_dalpha_zz_o0_t0_m0_l0, d_dalpha_xx_o0_t4_m0_l0, d_Phi_o0_t0_m0_l0, d_Phi_o1_t0_m0_l0, d_dalpha_xx_o0_t9_m0_l0, d_Phi_o0_t1_m0_l0, d_Phi_o1_t1_m0_l0, d_dalpha_xx_o0_t12_m0_l0, d_Phi_o0_t2_m0_l0, d_Phi_o1_t2_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_A_xx_o0_t0_m0_l0, d_A_xx_o1_t0_m0_l0, d_A_xx_o0_t1_m0_l0, d_A_xx_o1_t1_m0_l0, d_A_xx_o0_t2_m0_l0, d_A_xx_o1_t2_m0_l0, d_A_xy_o0_t0_m0_l0, d_A_xy_o1_t0_m0_l0, d_A_xy_o0_t1_m0_l0, d_A_xy_o1_t1_m0_l0, d_A_xy_o0_t2_m0_l0, d_A_xy_o1_t2_m0_l0, d_A_xz_o0_t0_m0_l0, d_A_xz_o1_t0_m0_l0, d_A_xz_o0_t1_m0_l0, d_A_xz_o1_t1_m0_l0, d_A_xz_o0_t2_m0_l0, d_A_xz_o1_t2_m0_l0, d_A_yy_o0_t0_m0_l0, d_A_yy_o1_t0_m0_l0, d_A_yy_o0_t1_m0_l0, d_A_yy_o1_t1_m0_l0, d_A_yy_o0_t2_m0_l0, d_A_yy_o1_t2_m0_l0, d_A_yz_o0_t0_m0_l0, d_A_yz_o1_t0_m0_l0, d_A_yz_o0_t1_m0_l0, d_A_yz_o1_t1_m0_l0, d_A_yz_o0_t2_m0_l0, d_A_yz_o1_t2_m0_l0, d_A_zz_o0_t0_m0_l0, d_A_zz_o1_t0_m0_l0, d_A_zz_o0_t1_m0_l0, d_A_zz_o1_t1_m0_l0, d_A_zz_o0_t2_m0_l0, d_A_zz_o1_t2_m0_l0, d_trK_o0_t0_m0_l0, d_trK_o1_t0_m0_l0, d_Gam_x_o0_t27_m0_l0, d_trK_o0_t1_m0_l0, d_trK_o1_t1_m0_l0, d_Gam_x_o0_t28_m0_l0, d_trK_o0_t2_m0_l0, d_trK_o1_t2_m0_l0, d_Gam_x_o0_t29_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, rk2div_beta, rk2Detgammac, rk2gamma_zz, rk2iDetgammac, rk2gamma_yy, rk2gamma_yz, rk2gamma_xx, rk2gamma_xy, rk2gamma_xz, rk2Detgamma, rk2iDetgamma, rk2gammacu_zz, rk2gammau_xx, rk2gammau_xy, rk2gammau_xz, rk2gammacu_yy, rk2gammacu_yz, rk2gammacu_zy, rk2gammau_yx, rk2gammau_yy, rk2gammau_yz, rk2gammacu_xz, rk2gammacu_zx, rk2Am_zx, rk2Am_zz, rk2Am_zy, rk2Au_zz, rk2gammacu_xx, rk2gammacu_xy, rk2m_C_xxx_o0_t8_l0, rk2m_C_xxx_o0_t6_l0, rk2m_C_xxx_o0_t5_l0, rk2m_C_xxx_o0_t3_l0, rk2m_C_xxx_o0_t2_l0, rk2m_C_xxx_o0_t0_l0, rk2C_xxx, rk2m_C_xxz_o0_t8_l0, rk2m_C_xxz_o0_t7_l0, rk2m_C_xxz_o0_t6_l0, rk2m_C_xxz_o0_t5_l0, rk2m_C_xxz_o0_t4_l0, rk2m_C_xxz_o0_t3_l0, rk2m_C_xxz_o0_t2_l0, rk2m_C_xxz_o0_t1_l0, rk2m_C_xxz_o0_t0_l0, rk2C_xxz, rk2m_C_zxz_o0_t8_l0, rk2m_C_zxz_o0_t7_l0, rk2m_C_zxz_o0_t6_l0, rk2m_C_zxz_o0_t5_l0, rk2m_C_zxz_o0_t4_l0, rk2m_C_zxz_o0_t3_l0, rk2m_C_zxz_o0_t2_l0, rk2m_C_zxz_o0_t1_l0, rk2m_C_zxz_o0_t0_l0, rk2C_zxz, rk2m_C_xxy_o0_t8_l0, rk2m_C_xxy_o0_t7_l0, rk2m_C_xxy_o0_t6_l0, rk2m_C_xxy_o0_t5_l0, rk2m_C_xxy_o0_t4_l0, rk2m_C_xxy_o0_t3_l0, rk2m_C_xxy_o0_t2_l0, rk2m_C_xxy_o0_t1_l0, rk2m_C_xxy_o0_t0_l0, rk2C_xxy, rk2gammacu_yx, rk2m_C_yxy_o0_t8_l0, rk2m_C_yxy_o0_t7_l0, rk2m_C_yxy_o0_t6_l0, rk2m_C_yxy_o0_t5_l0, rk2m_C_yxy_o0_t4_l0, rk2m_C_yxy_o0_t3_l0, rk2m_C_yxy_o0_t2_l0, rk2m_C_yxy_o0_t1_l0, rk2m_C_yxy_o0_t0_l0, rk2C_yxy, rk2m_C_yxz_o0_t8_l0, rk2m_C_yxz_o0_t7_l0, rk2m_C_yxz_o0_t6_l0, rk2m_C_yxz_o0_t5_l0, rk2m_C_yxz_o0_t4_l0, rk2m_C_yxz_o0_t3_l0, rk2m_C_yxz_o0_t2_l0, rk2m_C_yxz_o0_t1_l0, rk2m_C_yxz_o0_t0_l0, rk2C_yxz, rk2Cd_xxz, rk2Cd_yxz, rk2Cd_zxz, rk2m_C_yxx_o0_t8_l0, rk2m_C_yxx_o0_t6_l0, rk2m_C_yxx_o0_t5_l0, rk2m_C_yxx_o0_t3_l0, rk2m_C_yxx_o0_t2_l0, rk2m_C_yxx_o0_t0_l0, rk2C_yxx, rk2m_C_xyy_o0_t8_l0, rk2m_C_xyy_o0_t6_l0, rk2m_C_xyy_o0_t5_l0, rk2m_C_xyy_o0_t3_l0, rk2m_C_xyy_o0_t2_l0, rk2m_C_xyy_o0_t0_l0, rk2C_xyy, rk2m_C_zyy_o0_t8_l0, rk2m_C_zyy_o0_t6_l0, rk2m_C_zyy_o0_t5_l0, rk2m_C_zyy_o0_t3_l0, rk2m_C_zyy_o0_t2_l0, rk2m_C_zyy_o0_t0_l0, rk2C_zyy, rk2m_C_yyy_o0_t8_l0, rk2m_C_yyy_o0_t6_l0, rk2m_C_yyy_o0_t5_l0, rk2m_C_yyy_o0_t3_l0, rk2m_C_yyy_o0_t2_l0, rk2m_C_yyy_o0_t0_l0, rk2C_yyy, rk2Cd_xyy, rk2Cd_yyy, rk2Cd_zyy, rk2m_C_xyz_o0_t8_l0, rk2m_C_xyz_o0_t7_l0, rk2m_C_xyz_o0_t6_l0, rk2m_C_xyz_o0_t5_l0, rk2m_C_xyz_o0_t4_l0, rk2m_C_xyz_o0_t3_l0, rk2m_C_xyz_o0_t2_l0, rk2m_C_xyz_o0_t1_l0, rk2m_C_xyz_o0_t0_l0, rk2C_xyz, rk2m_C_zyz_o0_t8_l0, rk2m_C_zyz_o0_t7_l0, rk2m_C_zyz_o0_t6_l0, rk2m_C_zyz_o0_t5_l0, rk2m_C_zyz_o0_t4_l0, rk2m_C_zyz_o0_t3_l0, rk2m_C_zyz_o0_t2_l0, rk2m_C_zyz_o0_t1_l0, rk2m_C_zyz_o0_t0_l0, rk2C_zyz, rk2m_C_yyz_o0_t8_l0, rk2m_C_yyz_o0_t7_l0, rk2m_C_yyz_o0_t6_l0, rk2m_C_yyz_o0_t5_l0, rk2m_C_yyz_o0_t4_l0, rk2m_C_yyz_o0_t3_l0, rk2m_C_yyz_o0_t2_l0, rk2m_C_yyz_o0_t1_l0, rk2m_C_yyz_o0_t0_l0, rk2C_yyz, rk2Cd_xyz, rk2Cd_yyz, rk2m_C_xzz_o0_t8_l0, rk2m_C_xzz_o0_t6_l0, rk2m_C_xzz_o0_t5_l0, rk2m_C_xzz_o0_t3_l0, rk2m_C_xzz_o0_t2_l0, rk2m_C_xzz_o0_t0_l0, rk2C_xzz, rk2m_C_zzz_o0_t8_l0, rk2m_C_zzz_o0_t6_l0, rk2m_C_zzz_o0_t5_l0, rk2m_C_zzz_o0_t3_l0, rk2m_C_zzz_o0_t2_l0, rk2m_C_zzz_o0_t0_l0, rk2C_zzz, rk2m_C_yzz_o0_t8_l0, rk2m_C_yzz_o0_t6_l0, rk2m_C_yzz_o0_t5_l0, rk2m_C_yzz_o0_t3_l0, rk2m_C_yzz_o0_t2_l0, rk2m_C_yzz_o0_t0_l0, rk2C_yzz, rk2Cd_xzz, rk2Cd_yzz, rk2Cd_zzz, rk2Cd_zyz, rk2Am_yy, rk2Am_yx, rk2Am_yz, rk2Au_yz, rk2m_C_zxx_o0_t8_l0, rk2m_C_zxx_o0_t6_l0, rk2m_C_zxx_o0_t5_l0, rk2m_C_zxx_o0_t3_l0, rk2m_C_zxx_o0_t2_l0, rk2m_C_zxx_o0_t0_l0, rk2C_zxx, rk2Cd_xxx, rk2Cd_yxx, rk2Cd_zxx, rk2m_C_zxy_o0_t8_l0, rk2m_C_zxy_o0_t7_l0, rk2m_C_zxy_o0_t6_l0, rk2m_C_zxy_o0_t5_l0, rk2m_C_zxy_o0_t4_l0, rk2m_C_zxy_o0_t3_l0, rk2m_C_zxy_o0_t2_l0, rk2m_C_zxy_o0_t1_l0, rk2m_C_zxy_o0_t0_l0, rk2C_zxy, rk2Cd_xxy, rk2Cd_yxy, rk2Cd_zxy, rk2Au_yy, rk2falpha, rk2d_Rc_xx_o0_t15_m0_l0, rk2m_Rc_xx_o0_t11_l0, rk2m_Rc_xx_o0_t10_l0, rk2m_Rc_xx_o0_t9_l0, rk2m_Rc_xx_o0_t8_l0, rk2m_Rc_xx_o0_t7_l0, rk2m_Rc_xx_o0_t6_l0, rk2m_Rc_xx_o0_t5_l0, rk2m_Rc_xx_o0_t4_l0, rk2m_Rc_xx_o0_t3_l0, rk2m_Rc_xx_o0_t2_l0, rk2m_Rc_xx_o0_t1_l0, rk2m_Rc_xx_o0_t0_l0, rk2Rc_xx, rk2gammau_zy, rk2d_Rc_xy_o0_t15_m0_l0, rk2m_Rc_xy_o0_t14_l0, rk2m_Rc_xy_o0_t13_l0, rk2m_Rc_xy_o0_t12_l0, rk2m_Rc_xy_o0_t11_l0, rk2m_Rc_xy_o0_t10_l0, rk2m_Rc_xy_o0_t9_l0, rk2m_Rc_xy_o0_t8_l0, rk2m_Rc_xy_o0_t7_l0, rk2m_Rc_xy_o0_t6_l0, rk2m_Rc_xy_o0_t5_l0, rk2m_Rc_xy_o0_t4_l0, rk2m_Rc_xy_o0_t3_l0, rk2m_Rc_xy_o0_t2_l0, rk2m_Rc_xy_o0_t1_l0, rk2m_Rc_xy_o0_t0_l0, rk2Rc_xy, rk2d_Rc_yy_o0_t15_m0_l0, rk2m_Rc_yy_o0_t11_l0, rk2m_Rc_yy_o0_t10_l0, rk2m_Rc_yy_o0_t9_l0, rk2m_Rc_yy_o0_t8_l0, rk2m_Rc_yy_o0_t7_l0, rk2m_Rc_yy_o0_t6_l0, rk2m_Rc_yy_o0_t5_l0, rk2m_Rc_yy_o0_t4_l0, rk2m_Rc_yy_o0_t3_l0, rk2m_Rc_yy_o0_t2_l0, rk2m_Rc_yy_o0_t1_l0, rk2m_Rc_yy_o0_t0_l0, rk2Rc_yy, rk2gammau_zz, rk2Am_xx, rk2Am_xz, rk2Am_xy, rk2Au_xz, rk2Au_xy, rk2d_Rc_xz_o0_t15_m0_l0, rk2m_Rc_xz_o0_t14_l0, rk2m_Rc_xz_o0_t13_l0, rk2m_Rc_xz_o0_t12_l0, rk2m_Rc_xz_o0_t11_l0, rk2m_Rc_xz_o0_t10_l0, rk2m_Rc_xz_o0_t9_l0, rk2m_Rc_xz_o0_t8_l0, rk2m_Rc_xz_o0_t7_l0, rk2m_Rc_xz_o0_t6_l0, rk2m_Rc_xz_o0_t5_l0, rk2m_Rc_xz_o0_t4_l0, rk2m_Rc_xz_o0_t3_l0, rk2m_Rc_xz_o0_t2_l0, rk2m_Rc_xz_o0_t1_l0, rk2m_Rc_xz_o0_t0_l0, rk2Rc_xz, rk2d_Rc_yz_o0_t15_m0_l0, rk2m_Rc_yz_o0_t14_l0, rk2m_Rc_yz_o0_t13_l0, rk2m_Rc_yz_o0_t12_l0, rk2m_Rc_yz_o0_t11_l0, rk2m_Rc_yz_o0_t10_l0, rk2m_Rc_yz_o0_t9_l0, rk2m_Rc_yz_o0_t8_l0, rk2m_Rc_yz_o0_t7_l0, rk2m_Rc_yz_o0_t6_l0, rk2m_Rc_yz_o0_t5_l0, rk2m_Rc_yz_o0_t4_l0, rk2m_Rc_yz_o0_t3_l0, rk2m_Rc_yz_o0_t2_l0, rk2m_Rc_yz_o0_t1_l0, rk2m_Rc_yz_o0_t0_l0, rk2Rc_yz, rk2d_Rc_zz_o0_t15_m0_l0, rk2m_Rc_zz_o0_t11_l0, rk2m_Rc_zz_o0_t10_l0, rk2m_Rc_zz_o0_t9_l0, rk2m_Rc_zz_o0_t8_l0, rk2m_Rc_zz_o0_t7_l0, rk2m_Rc_zz_o0_t6_l0, rk2m_Rc_zz_o0_t5_l0, rk2m_Rc_zz_o0_t4_l0, rk2m_Rc_zz_o0_t3_l0, rk2m_Rc_zz_o0_t2_l0, rk2m_Rc_zz_o0_t1_l0, rk2m_Rc_zz_o0_t0_l0, rk2Rc_zz, rk2Au_xx, rk2gammau_zx, rk2m_dalpha_xx_o0_t14_l0, rk2m_dalpha_xx_o0_t13_l0, rk2m_dalpha_xx_o0_t12_l0, rk2m_dalpha_xx_o0_t11_l0, rk2m_dalpha_xx_o0_t10_l0, rk2m_dalpha_xx_o0_t9_l0, rk2m_dalpha_xx_o0_t8_l0, rk2m_dalpha_xx_o0_t7_l0, rk2m_dalpha_xx_o0_t6_l0, rk2m_dalpha_xx_o0_t4_l0, rk2m_dalpha_xx_o0_t3_l0, rk2m_dalpha_xx_o0_t2_l0, rk2m_dalpha_xx_o0_t1_l0, rk2dalpha_xx, rk2m_dalpha_xz_o0_t14_l0, rk2m_dalpha_xz_o0_t13_l0, rk2m_dalpha_xz_o0_t12_l0, rk2m_dalpha_xz_o0_t11_l0, rk2m_dalpha_xz_o0_t10_l0, rk2m_dalpha_xz_o0_t9_l0, rk2m_dalpha_xz_o0_t8_l0, rk2m_dalpha_xz_o0_t7_l0, rk2m_dalpha_xz_o0_t6_l0, rk2m_dalpha_xz_o0_t5_l0, rk2m_dalpha_xz_o0_t4_l0, rk2m_dalpha_xz_o0_t3_l0, rk2m_dalpha_xz_o0_t2_l0, rk2m_dalpha_xz_o0_t1_l0, rk2dalpha_xz, rk2m_dalpha_xy_o0_t14_l0, rk2m_dalpha_xy_o0_t13_l0, rk2m_dalpha_xy_o0_t12_l0, rk2m_dalpha_xy_o0_t11_l0, rk2m_dalpha_xy_o0_t10_l0, rk2m_dalpha_xy_o0_t9_l0, rk2m_dalpha_xy_o0_t8_l0, rk2m_dalpha_xy_o0_t7_l0, rk2m_dalpha_xy_o0_t6_l0, rk2m_dalpha_xy_o0_t5_l0, rk2m_dalpha_xy_o0_t4_l0, rk2m_dalpha_xy_o0_t3_l0, rk2m_dalpha_xy_o0_t2_l0, rk2m_dalpha_xy_o0_t1_l0, rk2dalpha_xy, rk2m_Rp_xx_o0_t49_l0, rk2m_Rp_xx_o0_t48_l0, rk2m_Rp_xx_o0_t47_l0, rk2m_Rp_xx_o0_t46_l0, rk2m_Rp_xx_o0_t45_l0, rk2m_Rp_xx_o0_t44_l0, rk2m_Rp_xx_o0_t43_l0, rk2m_Rp_xx_o0_t42_l0, rk2m_Rp_xx_o0_t41_l0, rk2m_Rp_xx_o0_t40_l0, rk2m_Rp_xx_o0_t39_l0, rk2m_Rp_xx_o0_t38_l0, rk2m_Rp_xx_o0_t37_l0, rk2m_Rp_xx_o0_t36_l0, rk2m_Rp_xx_o0_t35_l0, rk2m_Rp_xx_o0_t34_l0, rk2m_Rp_xx_o0_t33_l0, rk2m_Rp_xx_o0_t32_l0, rk2m_Rp_xx_o0_t31_l0, rk2m_Rp_xx_o0_t30_l0, rk2m_Rp_xx_o0_t29_l0, rk2m_Rp_xx_o0_t28_l0, rk2m_Rp_xx_o0_t27_l0, rk2m_Rp_xx_o0_t26_l0, rk2m_Rp_xx_o0_t25_l0, rk2m_Rp_xx_o0_t24_l0, rk2m_Rp_xx_o0_t23_l0, rk2m_Rp_xx_o0_t22_l0, rk2m_Rp_xx_o0_t21_l0, rk2m_Rp_xx_o0_t20_l0, rk2m_Rp_xx_o0_t19_l0, rk2m_Rp_xx_o0_t18_l0, rk2m_Rp_xx_o0_t17_l0, rk2m_Rp_xx_o0_t16_l0, rk2m_Rp_xx_o0_t15_l0, rk2m_Rp_xx_o0_t14_l0, rk2m_Rp_xx_o0_t13_l0, rk2m_Rp_xx_o0_t12_l0, rk2m_Rp_xx_o0_t11_l0, rk2m_Rp_xx_o0_t10_l0, rk2m_Rp_xx_o0_t9_l0, rk2m_Rp_xx_o0_t8_l0, rk2m_Rp_xx_o0_t7_l0, rk2m_Rp_xx_o0_t6_l0, rk2m_Rp_xx_o0_t5_l0, rk2m_Rp_xx_o0_t4_l0, rk2m_Rp_xx_o0_t3_l0, rk2m_Rp_xx_o0_t2_l0, rk2m_Rp_xx_o0_t1_l0, rk2m_Rp_xx_o0_t0_l0, rk2Rp_xx, rk2m_Rp_zz_o0_t49_l0, rk2m_Rp_zz_o0_t48_l0, rk2m_Rp_zz_o0_t47_l0, rk2m_Rp_zz_o0_t46_l0, rk2m_Rp_zz_o0_t45_l0, rk2m_Rp_zz_o0_t44_l0, rk2m_Rp_zz_o0_t43_l0, rk2m_Rp_zz_o0_t42_l0, rk2m_Rp_zz_o0_t41_l0, rk2m_Rp_zz_o0_t40_l0, rk2m_Rp_zz_o0_t39_l0, rk2m_Rp_zz_o0_t38_l0, rk2m_Rp_zz_o0_t37_l0, rk2m_Rp_zz_o0_t36_l0, rk2m_Rp_zz_o0_t35_l0, rk2m_Rp_zz_o0_t34_l0, rk2m_Rp_zz_o0_t33_l0, rk2m_Rp_zz_o0_t32_l0, rk2m_Rp_zz_o0_t31_l0, rk2m_Rp_zz_o0_t30_l0, rk2m_Rp_zz_o0_t29_l0, rk2m_Rp_zz_o0_t28_l0, rk2m_Rp_zz_o0_t27_l0, rk2m_Rp_zz_o0_t26_l0, rk2m_Rp_zz_o0_t25_l0, rk2m_Rp_zz_o0_t24_l0, rk2m_Rp_zz_o0_t23_l0, rk2m_Rp_zz_o0_t22_l0, rk2m_Rp_zz_o0_t21_l0, rk2m_Rp_zz_o0_t20_l0, rk2m_Rp_zz_o0_t19_l0, rk2m_Rp_zz_o0_t18_l0, rk2m_Rp_zz_o0_t17_l0, rk2m_Rp_zz_o0_t16_l0, rk2m_Rp_zz_o0_t15_l0, rk2m_Rp_zz_o0_t14_l0, rk2m_Rp_zz_o0_t13_l0, rk2m_Rp_zz_o0_t12_l0, rk2m_Rp_zz_o0_t11_l0, rk2m_Rp_zz_o0_t10_l0, rk2m_Rp_zz_o0_t9_l0, rk2m_Rp_zz_o0_t8_l0, rk2m_Rp_zz_o0_t7_l0, rk2m_Rp_zz_o0_t6_l0, rk2m_Rp_zz_o0_t5_l0, rk2m_Rp_zz_o0_t4_l0, rk2m_Rp_zz_o0_t3_l0, rk2m_Rp_zz_o0_t2_l0, rk2m_Rp_zz_o0_t1_l0, rk2m_Rp_zz_o0_t0_l0, rk2Rp_zz, rk2R_zz, rk2R_xx, rk2m_Rp_xy_o0_t49_l0, rk2m_Rp_xy_o0_t48_l0, rk2m_Rp_xy_o0_t47_l0, rk2m_Rp_xy_o0_t46_l0, rk2m_Rp_xy_o0_t45_l0, rk2m_Rp_xy_o0_t44_l0, rk2m_Rp_xy_o0_t43_l0, rk2m_Rp_xy_o0_t42_l0, rk2m_Rp_xy_o0_t41_l0, rk2m_Rp_xy_o0_t40_l0, rk2m_Rp_xy_o0_t39_l0, rk2m_Rp_xy_o0_t38_l0, rk2m_Rp_xy_o0_t37_l0, rk2m_Rp_xy_o0_t36_l0, rk2m_Rp_xy_o0_t35_l0, rk2m_Rp_xy_o0_t34_l0, rk2m_Rp_xy_o0_t33_l0, rk2m_Rp_xy_o0_t32_l0, rk2m_Rp_xy_o0_t31_l0, rk2m_Rp_xy_o0_t30_l0, rk2m_Rp_xy_o0_t29_l0, rk2m_Rp_xy_o0_t28_l0, rk2m_Rp_xy_o0_t27_l0, rk2m_Rp_xy_o0_t26_l0, rk2m_Rp_xy_o0_t25_l0, rk2m_Rp_xy_o0_t24_l0, rk2m_Rp_xy_o0_t23_l0, rk2m_Rp_xy_o0_t22_l0, rk2m_Rp_xy_o0_t21_l0, rk2m_Rp_xy_o0_t20_l0, rk2m_Rp_xy_o0_t19_l0, rk2m_Rp_xy_o0_t18_l0, rk2m_Rp_xy_o0_t17_l0, rk2m_Rp_xy_o0_t16_l0, rk2m_Rp_xy_o0_t15_l0, rk2m_Rp_xy_o0_t14_l0, rk2m_Rp_xy_o0_t13_l0, rk2m_Rp_xy_o0_t12_l0, rk2m_Rp_xy_o0_t11_l0, rk2m_Rp_xy_o0_t10_l0, rk2m_Rp_xy_o0_t9_l0, rk2m_Rp_xy_o0_t8_l0, rk2m_Rp_xy_o0_t7_l0, rk2m_Rp_xy_o0_t6_l0, rk2m_Rp_xy_o0_t5_l0, rk2m_Rp_xy_o0_t4_l0, rk2m_Rp_xy_o0_t3_l0, rk2m_Rp_xy_o0_t2_l0, rk2m_Rp_xy_o0_t1_l0, rk2m_Rp_xy_o0_t0_l0, rk2Rp_xy, rk2R_xy, rk2m_Rp_xz_o0_t49_l0, rk2m_Rp_xz_o0_t48_l0, rk2m_Rp_xz_o0_t47_l0, rk2m_Rp_xz_o0_t46_l0, rk2m_Rp_xz_o0_t45_l0, rk2m_Rp_xz_o0_t44_l0, rk2m_Rp_xz_o0_t43_l0, rk2m_Rp_xz_o0_t42_l0, rk2m_Rp_xz_o0_t41_l0, rk2m_Rp_xz_o0_t40_l0, rk2m_Rp_xz_o0_t39_l0, rk2m_Rp_xz_o0_t38_l0, rk2m_Rp_xz_o0_t37_l0, rk2m_Rp_xz_o0_t36_l0, rk2m_Rp_xz_o0_t35_l0, rk2m_Rp_xz_o0_t34_l0, rk2m_Rp_xz_o0_t33_l0, rk2m_Rp_xz_o0_t32_l0, rk2m_Rp_xz_o0_t31_l0, rk2m_Rp_xz_o0_t30_l0, rk2m_Rp_xz_o0_t29_l0, rk2m_Rp_xz_o0_t28_l0, rk2m_Rp_xz_o0_t27_l0, rk2m_Rp_xz_o0_t26_l0, rk2m_Rp_xz_o0_t25_l0, rk2m_Rp_xz_o0_t24_l0, rk2m_Rp_xz_o0_t23_l0, rk2m_Rp_xz_o0_t22_l0, rk2m_Rp_xz_o0_t21_l0, rk2m_Rp_xz_o0_t20_l0, rk2m_Rp_xz_o0_t19_l0, rk2m_Rp_xz_o0_t18_l0, rk2m_Rp_xz_o0_t17_l0, rk2m_Rp_xz_o0_t16_l0, rk2m_Rp_xz_o0_t15_l0, rk2m_Rp_xz_o0_t14_l0, rk2m_Rp_xz_o0_t13_l0, rk2m_Rp_xz_o0_t12_l0, rk2m_Rp_xz_o0_t11_l0, rk2m_Rp_xz_o0_t10_l0, rk2m_Rp_xz_o0_t9_l0, rk2m_Rp_xz_o0_t8_l0, rk2m_Rp_xz_o0_t7_l0, rk2m_Rp_xz_o0_t6_l0, rk2m_Rp_xz_o0_t5_l0, rk2m_Rp_xz_o0_t4_l0, rk2m_Rp_xz_o0_t3_l0, rk2m_Rp_xz_o0_t2_l0, rk2m_Rp_xz_o0_t1_l0, rk2m_Rp_xz_o0_t0_l0, rk2Rp_xz, rk2R_xz, rk2m_Rp_yy_o0_t49_l0, rk2m_Rp_yy_o0_t48_l0, rk2m_Rp_yy_o0_t47_l0, rk2m_Rp_yy_o0_t46_l0, rk2m_Rp_yy_o0_t45_l0, rk2m_Rp_yy_o0_t44_l0, rk2m_Rp_yy_o0_t43_l0, rk2m_Rp_yy_o0_t42_l0, rk2m_Rp_yy_o0_t41_l0, rk2m_Rp_yy_o0_t40_l0, rk2m_Rp_yy_o0_t39_l0, rk2m_Rp_yy_o0_t38_l0, rk2m_Rp_yy_o0_t37_l0, rk2m_Rp_yy_o0_t36_l0, rk2m_Rp_yy_o0_t35_l0, rk2m_Rp_yy_o0_t34_l0, rk2m_Rp_yy_o0_t33_l0, rk2m_Rp_yy_o0_t32_l0, rk2m_Rp_yy_o0_t31_l0, rk2m_Rp_yy_o0_t30_l0, rk2m_Rp_yy_o0_t29_l0, rk2m_Rp_yy_o0_t28_l0, rk2m_Rp_yy_o0_t27_l0, rk2m_Rp_yy_o0_t26_l0, rk2m_Rp_yy_o0_t25_l0, rk2m_Rp_yy_o0_t24_l0, rk2m_Rp_yy_o0_t23_l0, rk2m_Rp_yy_o0_t22_l0, rk2m_Rp_yy_o0_t21_l0, rk2m_Rp_yy_o0_t20_l0, rk2m_Rp_yy_o0_t19_l0, rk2m_Rp_yy_o0_t18_l0, rk2m_Rp_yy_o0_t17_l0, rk2m_Rp_yy_o0_t16_l0, rk2m_Rp_yy_o0_t15_l0, rk2m_Rp_yy_o0_t14_l0, rk2m_Rp_yy_o0_t13_l0, rk2m_Rp_yy_o0_t12_l0, rk2m_Rp_yy_o0_t11_l0, rk2m_Rp_yy_o0_t10_l0, rk2m_Rp_yy_o0_t9_l0, rk2m_Rp_yy_o0_t8_l0, rk2m_Rp_yy_o0_t7_l0, rk2m_Rp_yy_o0_t6_l0, rk2m_Rp_yy_o0_t5_l0, rk2m_Rp_yy_o0_t4_l0, rk2m_Rp_yy_o0_t3_l0, rk2m_Rp_yy_o0_t2_l0, rk2m_Rp_yy_o0_t1_l0, rk2m_Rp_yy_o0_t0_l0, rk2Rp_yy, rk2R_yy, rk2m_Rp_yz_o0_t49_l0, rk2m_Rp_yz_o0_t48_l0, rk2m_Rp_yz_o0_t47_l0, rk2m_Rp_yz_o0_t46_l0, rk2m_Rp_yz_o0_t45_l0, rk2m_Rp_yz_o0_t44_l0, rk2m_Rp_yz_o0_t43_l0, rk2m_Rp_yz_o0_t42_l0, rk2m_Rp_yz_o0_t41_l0, rk2m_Rp_yz_o0_t40_l0, rk2m_Rp_yz_o0_t39_l0, rk2m_Rp_yz_o0_t38_l0, rk2m_Rp_yz_o0_t37_l0, rk2m_Rp_yz_o0_t36_l0, rk2m_Rp_yz_o0_t35_l0, rk2m_Rp_yz_o0_t34_l0, rk2m_Rp_yz_o0_t33_l0, rk2m_Rp_yz_o0_t32_l0, rk2m_Rp_yz_o0_t31_l0, rk2m_Rp_yz_o0_t30_l0, rk2m_Rp_yz_o0_t29_l0, rk2m_Rp_yz_o0_t28_l0, rk2m_Rp_yz_o0_t27_l0, rk2m_Rp_yz_o0_t26_l0, rk2m_Rp_yz_o0_t25_l0, rk2m_Rp_yz_o0_t24_l0, rk2m_Rp_yz_o0_t23_l0, rk2m_Rp_yz_o0_t22_l0, rk2m_Rp_yz_o0_t21_l0, rk2m_Rp_yz_o0_t20_l0, rk2m_Rp_yz_o0_t19_l0, rk2m_Rp_yz_o0_t18_l0, rk2m_Rp_yz_o0_t17_l0, rk2m_Rp_yz_o0_t16_l0, rk2m_Rp_yz_o0_t15_l0, rk2m_Rp_yz_o0_t14_l0, rk2m_Rp_yz_o0_t13_l0, rk2m_Rp_yz_o0_t12_l0, rk2m_Rp_yz_o0_t11_l0, rk2m_Rp_yz_o0_t10_l0, rk2m_Rp_yz_o0_t9_l0, rk2m_Rp_yz_o0_t8_l0, rk2m_Rp_yz_o0_t7_l0, rk2m_Rp_yz_o0_t6_l0, rk2m_Rp_yz_o0_t5_l0, rk2m_Rp_yz_o0_t4_l0, rk2m_Rp_yz_o0_t3_l0, rk2m_Rp_yz_o0_t2_l0, rk2m_Rp_yz_o0_t1_l0, rk2m_Rp_yz_o0_t0_l0, rk2Rp_yz, rk2R_yz, rk2R, rk2m_dalpha_yz_o0_t14_l0, rk2m_dalpha_yz_o0_t13_l0, rk2m_dalpha_yz_o0_t12_l0, rk2m_dalpha_yz_o0_t11_l0, rk2m_dalpha_yz_o0_t10_l0, rk2m_dalpha_yz_o0_t9_l0, rk2m_dalpha_yz_o0_t8_l0, rk2m_dalpha_yz_o0_t7_l0, rk2m_dalpha_yz_o0_t6_l0, rk2m_dalpha_yz_o0_t5_l0, rk2m_dalpha_yz_o0_t4_l0, rk2m_dalpha_yz_o0_t3_l0, rk2m_dalpha_yz_o0_t2_l0, rk2m_dalpha_yz_o0_t1_l0, rk2dalpha_yz, rk2m_dalpha_yy_o0_t14_l0, rk2m_dalpha_yy_o0_t13_l0, rk2m_dalpha_yy_o0_t12_l0, rk2m_dalpha_yy_o0_t11_l0, rk2m_dalpha_yy_o0_t10_l0, rk2m_dalpha_yy_o0_t9_l0, rk2m_dalpha_yy_o0_t8_l0, rk2m_dalpha_yy_o0_t7_l0, rk2m_dalpha_yy_o0_t6_l0, rk2m_dalpha_yy_o0_t4_l0, rk2m_dalpha_yy_o0_t3_l0, rk2m_dalpha_yy_o0_t2_l0, rk2m_dalpha_yy_o0_t1_l0, rk2dalpha_yy, rk2m_dalpha_zz_o0_t14_l0, rk2m_dalpha_zz_o0_t13_l0, rk2m_dalpha_zz_o0_t12_l0, rk2m_dalpha_zz_o0_t11_l0, rk2m_dalpha_zz_o0_t10_l0, rk2m_dalpha_zz_o0_t9_l0, rk2m_dalpha_zz_o0_t8_l0, rk2m_dalpha_zz_o0_t7_l0, rk2m_dalpha_zz_o0_t6_l0, rk2m_dalpha_zz_o0_t4_l0, rk2m_dalpha_zz_o0_t3_l0, rk2m_dalpha_zz_o0_t2_l0, rk2m_dalpha_zz_o0_t1_l0, rk2dalpha_zz, rk2trdalpha, rk2Psi1TF_yz, rk2Psi1TF_yy, rk2Psi1TF_xy, rk2Psi1TF_xx, rk2Psi1TF_xz, rk2Psi1TF_zz, d_gammac_xx_o2_t3_m0_l0, d_gammac_xy_o2_t6_m0_l0, d_gammac_xz_o2_t6_m0_l0, d_gammac_yy_o2_t3_m0_l0, d_gammac_yx_o2_t6_m0_l0, d_gammac_yz_o2_t6_m0_l0, d_gammac_zz_o2_t3_m0_l0, d_gammac_zx_o2_t6_m0_l0, d_gammac_zy_o2_t6_m0_l0, d_A_xx_o2_t3_m0_l0, d_A_xy_o2_t6_m0_l0, d_A_xz_o2_t6_m0_l0, d_A_yy_o2_t3_m0_l0, d_A_yz_o2_t6_m0_l0, d_A_zz_o2_t3_m0_l0, d_Phi_o2_t0_m0_l0, d_trK_o2_t0_m0_l0, d_beta_x_o0_t0_m0_l0, d_alpha_o2_t0_m0_l0, d_Gam_x_o0_t33_m0_l0, d_Gam_y_o0_t33_m0_l0, d_Gam_z_o0_t33_m0_l0, m_Gam_z_o0_t32_l0, m_Gam_z_o0_t31_l0, m_Gam_z_o0_t30_l0, m_Gam_z_o0_t29_l0, m_Gam_z_o0_t28_l0, m_Gam_z_o0_t27_l0, m_Gam_z_o0_t26_l0, m_Gam_z_o0_t25_l0, m_Gam_z_o0_t24_l0, m_Gam_z_o0_t23_l0, m_Gam_z_o0_t22_l0, m_Gam_z_o0_t21_l0, m_Gam_z_o0_t20_l0, m_Gam_z_o0_t19_l0, m_Gam_z_o0_t18_l0, m_Gam_z_o0_t17_l0, m_Gam_z_o0_t16_l0, m_Gam_z_o0_t15_l0, m_Gam_z_o0_t14_l0, m_Gam_z_o0_t13_l0, m_Gam_z_o0_t12_l0, m_Gam_z_o0_t11_l0, m_Gam_z_o0_t10_l0, m_Gam_z_o0_t9_l0, m_Gam_z_o0_t8_l0, m_Gam_z_o0_t7_l0, m_Gam_z_o0_t6_l0, m_Gam_z_o0_t5_l0, m_Gam_z_o0_t4_l0, m_Gam_z_o0_t3_l0, m_Gam_z_o0_t2_l0, m_Gam_z_o0_t1_l0, m_Gam_z_o0_t0_l0, m_Gam_y_o0_t32_l0, m_Gam_y_o0_t31_l0, m_Gam_y_o0_t30_l0, m_Gam_y_o0_t29_l0, m_Gam_y_o0_t28_l0, m_Gam_y_o0_t27_l0, m_Gam_y_o0_t26_l0, m_Gam_y_o0_t25_l0, m_Gam_y_o0_t24_l0, m_Gam_y_o0_t23_l0, m_Gam_y_o0_t22_l0, m_Gam_y_o0_t21_l0, m_Gam_y_o0_t20_l0, m_Gam_y_o0_t19_l0, m_Gam_y_o0_t18_l0, m_Gam_y_o0_t17_l0, m_Gam_y_o0_t16_l0, m_Gam_y_o0_t15_l0, m_Gam_y_o0_t14_l0, m_Gam_y_o0_t13_l0, m_Gam_y_o0_t12_l0, m_Gam_y_o0_t11_l0, m_Gam_y_o0_t10_l0, m_Gam_y_o0_t9_l0, m_Gam_y_o0_t8_l0, m_Gam_y_o0_t7_l0, m_Gam_y_o0_t6_l0, m_Gam_y_o0_t5_l0, m_Gam_y_o0_t4_l0, m_Gam_y_o0_t3_l0, m_Gam_y_o0_t2_l0, m_Gam_y_o0_t1_l0, m_Gam_y_o0_t0_l0, m_Gam_x_o0_t32_l0, m_Gam_x_o0_t31_l0, m_Gam_x_o0_t30_l0, m_Gam_x_o0_t29_l0, m_Gam_x_o0_t28_l0, m_Gam_x_o0_t27_l0, m_Gam_x_o0_t26_l0, m_Gam_x_o0_t25_l0, m_Gam_x_o0_t24_l0, m_Gam_x_o0_t23_l0, m_Gam_x_o0_t22_l0, m_Gam_x_o0_t21_l0, m_Gam_x_o0_t20_l0, m_Gam_x_o0_t19_l0, m_Gam_x_o0_t18_l0, m_Gam_x_o0_t17_l0, m_Gam_x_o0_t16_l0, m_Gam_x_o0_t15_l0, m_Gam_x_o0_t14_l0, m_Gam_x_o0_t13_l0, m_Gam_x_o0_t12_l0, m_Gam_x_o0_t11_l0, m_Gam_x_o0_t10_l0, m_Gam_x_o0_t9_l0, m_Gam_x_o0_t8_l0, m_Gam_x_o0_t7_l0, m_Gam_x_o0_t6_l0, m_Gam_x_o0_t5_l0, m_Gam_x_o0_t4_l0, m_Gam_x_o0_t3_l0, m_Gam_x_o0_t2_l0, m_Gam_x_o0_t1_l0, m_Gam_x_o0_t0_l0, m_alpha_o1_t2_l0, m_alpha_o1_t1_l0, m_alpha_o1_t0_l0, m_alpha_o0_t2_l0, m_alpha_o0_t1_l0, m_alpha_o0_t0_l0, m_trK_o1_t2_l0, m_trK_o1_t1_l0, m_trK_o1_t0_l0, m_trK_o0_t2_l0, m_trK_o0_t1_l0, m_trK_o0_t0_l0, m_Phi_o1_t2_l0, m_Phi_o1_t1_l0, m_Phi_o1_t0_l0, m_Phi_o0_t2_l0, m_Phi_o0_t1_l0, m_Phi_o0_t0_l0, m_A_zz_o2_t2_l0, m_A_zz_o2_t1_l0, m_A_zz_o2_t0_l0, m_A_zz_o1_t2_l0, m_A_zz_o1_t1_l0, m_A_zz_o1_t0_l0, m_A_zz_o0_t2_l0, m_A_zz_o0_t1_l0, m_A_zz_o0_t0_l0, m_A_yz_o2_t5_l0, m_A_yz_o2_t4_l0, m_A_yz_o2_t3_l0, m_A_yz_o2_t2_l0, m_A_yz_o2_t1_l0, m_A_yz_o2_t0_l0, m_A_yz_o1_t2_l0, m_A_yz_o1_t1_l0, m_A_yz_o1_t0_l0, m_A_yz_o0_t2_l0, m_A_yz_o0_t1_l0, m_A_yz_o0_t0_l0, m_A_yy_o2_t2_l0, m_A_yy_o2_t1_l0, m_A_yy_o2_t0_l0, m_A_yy_o1_t2_l0, m_A_yy_o1_t1_l0, m_A_yy_o1_t0_l0, m_A_yy_o0_t2_l0, m_A_yy_o0_t1_l0, m_A_yy_o0_t0_l0, m_A_xz_o2_t5_l0, m_A_xz_o2_t4_l0, m_A_xz_o2_t3_l0, m_A_xz_o2_t2_l0, m_A_xz_o2_t1_l0, m_A_xz_o2_t0_l0, m_A_xz_o1_t2_l0, m_A_xz_o1_t1_l0, m_A_xz_o1_t0_l0, m_A_xz_o0_t2_l0, m_A_xz_o0_t1_l0, m_A_xz_o0_t0_l0, m_A_xy_o2_t5_l0, m_A_xy_o2_t4_l0, m_A_xy_o2_t3_l0, m_A_xy_o2_t2_l0, m_A_xy_o2_t1_l0, m_A_xy_o2_t0_l0, m_A_xy_o1_t2_l0, m_A_xy_o1_t1_l0, m_A_xy_o1_t0_l0, m_A_xy_o0_t2_l0, m_A_xy_o0_t1_l0, m_A_xy_o0_t0_l0, m_A_xx_o2_t2_l0, m_A_xx_o2_t1_l0, m_A_xx_o2_t0_l0, m_A_xx_o1_t2_l0, m_A_xx_o1_t1_l0, m_A_xx_o1_t0_l0, m_A_xx_o0_t2_l0, m_A_xx_o0_t1_l0, m_A_xx_o0_t0_l0, m_gammac_zy_o1_t2_l0, m_gammac_zy_o1_t1_l0, m_gammac_zy_o1_t0_l0, m_gammac_zy_o0_t2_l0, m_gammac_zy_o0_t1_l0, m_gammac_zy_o0_t0_l0, m_gammac_zx_o1_t2_l0, m_gammac_zx_o1_t1_l0, m_gammac_zx_o1_t0_l0, m_gammac_zx_o0_t2_l0, m_gammac_zx_o0_t1_l0, m_gammac_zx_o0_t0_l0, m_gammac_zz_o2_t2_l0, m_gammac_zz_o2_t1_l0, m_gammac_zz_o2_t0_l0, m_gammac_zz_o1_t2_l0, m_gammac_zz_o1_t1_l0, m_gammac_zz_o1_t0_l0, m_gammac_zz_o0_t2_l0, m_gammac_zz_o0_t1_l0, m_gammac_zz_o0_t0_l0, m_gammac_yz_o2_t5_l0, m_gammac_yz_o2_t4_l0, m_gammac_yz_o2_t3_l0, m_gammac_yz_o2_t2_l0, m_gammac_yz_o2_t1_l0, m_gammac_yz_o2_t0_l0, m_gammac_yz_o1_t2_l0, m_gammac_yz_o1_t1_l0, m_gammac_yz_o1_t0_l0, m_gammac_yz_o0_t2_l0, m_gammac_yz_o0_t1_l0, m_gammac_yz_o0_t0_l0, m_gammac_yx_o1_t2_l0, m_gammac_yx_o1_t1_l0, m_gammac_yx_o1_t0_l0, m_gammac_yx_o0_t2_l0, m_gammac_yx_o0_t1_l0, m_gammac_yx_o0_t0_l0, m_gammac_yy_o2_t2_l0, m_gammac_yy_o2_t1_l0, m_gammac_yy_o2_t0_l0, m_gammac_yy_o1_t2_l0, m_gammac_yy_o1_t1_l0, m_gammac_yy_o1_t0_l0, m_gammac_yy_o0_t2_l0, m_gammac_yy_o0_t1_l0, m_gammac_yy_o0_t0_l0, m_gammac_xz_o2_t5_l0, m_gammac_xz_o2_t4_l0, m_gammac_xz_o2_t3_l0, m_gammac_xz_o2_t2_l0, m_gammac_xz_o2_t1_l0, m_gammac_xz_o2_t0_l0, m_gammac_xz_o1_t2_l0, m_gammac_xz_o1_t1_l0, m_gammac_xz_o1_t0_l0, m_gammac_xz_o0_t2_l0, m_gammac_xz_o0_t1_l0, m_gammac_xz_o0_t0_l0, m_gammac_xy_o2_t5_l0, m_gammac_xy_o2_t4_l0, m_gammac_xy_o2_t3_l0, m_gammac_xy_o2_t2_l0, m_gammac_xy_o2_t1_l0, m_gammac_xy_o2_t0_l0, m_gammac_xy_o1_t2_l0, m_gammac_xy_o1_t1_l0, m_gammac_xy_o1_t0_l0, m_gammac_xy_o0_t2_l0, m_gammac_xy_o0_t1_l0, m_gammac_xy_o0_t0_l0, m_gammac_xx_o2_t2_l0, m_gammac_xx_o2_t1_l0, m_gammac_xx_o2_t0_l0, m_gammac_xx_o1_t2_l0, m_gammac_xx_o1_t1_l0, m_gammac_xx_o1_t0_l0, m_gammac_xx_o0_t2_l0, m_gammac_xx_o0_t1_l0, m_gammac_xx_o0_t0_l0, RHS_gammac_xx, RHS_gammac_xy, RHS_gammac_xz, RHS_gammac_yy, RHS_gammac_yx, RHS_gammac_yz, RHS_gammac_zz, RHS_gammac_zx, RHS_gammac_zy, RHS_A_xx, RHS_A_xy, RHS_A_xz, RHS_A_yy, RHS_A_yz, RHS_A_zz, RHS_Phi, RHS_trK, RHS_beta_x, RHS_beta_y, RHS_beta_z, RHS_alpha, RHS_Gam_x, RHS_Gam_y, RHS_Gam_z;
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((i + 3 < ilast && i - 3 >= 0 && j + 3 < jlast && j - 3 >= 0 && k + 3 < klast && k - 3 >= 0)) {
						d_div_beta_o0_t0_m0_l0 = D1CDO4_i(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t0_m0_l0 = D1CDO4_j(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t0_m0_l0 = D1CDO4_k(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t0_m0_l0 = D2CDO4_i(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t4_m0_l0 = D2CDO4_j(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t8_m0_l0 = D2CDO4_k(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t1_m0_l0 = D1CDO4_i(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t1_m0_l0 = D1CDO4_j(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t1_m0_l0 = D1CDO4_k(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t0_m0_l0 = D2CDO4_i(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t10_m0_l0 = D1CDO4crossed_ji(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t13_m0_l0 = D2CDO4_j(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t16_m0_l0 = D1CDO4crossed_jk(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t8_m0_l0 = D2CDO4_k(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t2_m0_l0 = D1CDO4_i(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t2_m0_l0 = D1CDO4_j(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t2_m0_l0 = D1CDO4_k(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t0_m0_l0 = D2CDO4_i(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t4_m0_l0 = D2CDO4_j(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t11_m0_l0 = D1CDO4crossed_ki(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t14_m0_l0 = D1CDO4crossed_kj(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t17_m0_l0 = D2CDO4_k(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t0_m0_l0 = lieforward_i(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t0_m0_l0 = liebackward_i(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t1_m0_l0 = lieforward_j(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t1_m0_l0 = liebackward_j(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t2_m0_l0 = lieforward_k(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t2_m0_l0 = liebackward_k(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t0_m0_l0 = lieforward_i(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t0_m0_l0 = liebackward_i(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t1_m0_l0 = lieforward_j(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t1_m0_l0 = liebackward_j(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t2_m0_l0 = lieforward_k(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t2_m0_l0 = liebackward_k(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t0_m0_l0 = lieforward_i(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t0_m0_l0 = liebackward_i(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t1_m0_l0 = lieforward_j(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t1_m0_l0 = liebackward_j(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t2_m0_l0 = lieforward_k(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t2_m0_l0 = liebackward_k(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t0_m0_l0 = lieforward_i(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t0_m0_l0 = liebackward_i(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t1_m0_l0 = lieforward_j(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t1_m0_l0 = liebackward_j(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t2_m0_l0 = lieforward_k(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t2_m0_l0 = liebackward_k(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t0_m0_l0 = lieforward_i(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t0_m0_l0 = liebackward_i(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t1_m0_l0 = lieforward_j(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t1_m0_l0 = liebackward_j(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t2_m0_l0 = lieforward_k(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t2_m0_l0 = liebackward_k(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t0_m0_l0 = lieforward_i(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t0_m0_l0 = liebackward_i(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t1_m0_l0 = lieforward_j(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t1_m0_l0 = liebackward_j(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t2_m0_l0 = lieforward_k(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t2_m0_l0 = liebackward_k(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t0_m0_l0 = lieforward_i(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t0_m0_l0 = liebackward_i(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t1_m0_l0 = lieforward_j(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t1_m0_l0 = liebackward_j(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t2_m0_l0 = lieforward_k(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t2_m0_l0 = liebackward_k(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t0_m0_l0 = lieforward_i(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t0_m0_l0 = liebackward_i(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t1_m0_l0 = lieforward_j(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t1_m0_l0 = liebackward_j(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t2_m0_l0 = lieforward_k(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t2_m0_l0 = liebackward_k(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t0_m0_l0 = lieforward_i(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t0_m0_l0 = liebackward_i(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t1_m0_l0 = lieforward_j(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t1_m0_l0 = liebackward_j(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t2_m0_l0 = lieforward_k(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t2_m0_l0 = liebackward_k(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t1_m0_l0 = D1CDO4_i(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t0_m0_l0 = lieforward_i(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t0_m0_l0 = liebackward_i(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t2_m0_l0 = D1CDO4_j(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t1_m0_l0 = lieforward_j(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t1_m0_l0 = liebackward_j(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t3_m0_l0 = D1CDO4_k(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t2_m0_l0 = lieforward_k(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t2_m0_l0 = liebackward_k(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t0_m0_l0 = D2CDO4_i(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xy_o0_t0_m0_l0 = D1CDO4crossed_ji(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yy_o0_t0_m0_l0 = D2CDO4_j(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xz_o0_t0_m0_l0 = D1CDO4crossed_ki(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yz_o0_t0_m0_l0 = D1CDO4crossed_kj(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_zz_o0_t0_m0_l0 = D2CDO4_k(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t4_m0_l0 = D1CDO4_i(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t0_m0_l0 = lieforward_i(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t0_m0_l0 = liebackward_i(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t9_m0_l0 = D1CDO4_j(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t1_m0_l0 = lieforward_j(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t1_m0_l0 = liebackward_j(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t12_m0_l0 = D1CDO4_k(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t2_m0_l0 = lieforward_k(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t2_m0_l0 = liebackward_k(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t0_m0_l0 = lieforward_i(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t0_m0_l0 = liebackward_i(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t1_m0_l0 = lieforward_j(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t1_m0_l0 = liebackward_j(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t2_m0_l0 = lieforward_k(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t2_m0_l0 = liebackward_k(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t0_m0_l0 = lieforward_i(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t0_m0_l0 = liebackward_i(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t1_m0_l0 = lieforward_j(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t1_m0_l0 = liebackward_j(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t2_m0_l0 = lieforward_k(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t2_m0_l0 = liebackward_k(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t0_m0_l0 = lieforward_i(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t0_m0_l0 = liebackward_i(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t1_m0_l0 = lieforward_j(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t1_m0_l0 = liebackward_j(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t2_m0_l0 = lieforward_k(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t2_m0_l0 = liebackward_k(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t0_m0_l0 = lieforward_i(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t0_m0_l0 = liebackward_i(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t1_m0_l0 = lieforward_j(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t1_m0_l0 = liebackward_j(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t2_m0_l0 = lieforward_k(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t2_m0_l0 = liebackward_k(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t0_m0_l0 = lieforward_i(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t0_m0_l0 = liebackward_i(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t1_m0_l0 = lieforward_j(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t1_m0_l0 = liebackward_j(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t2_m0_l0 = lieforward_k(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t2_m0_l0 = liebackward_k(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t0_m0_l0 = lieforward_i(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t0_m0_l0 = liebackward_i(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t1_m0_l0 = lieforward_j(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t1_m0_l0 = liebackward_j(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t2_m0_l0 = lieforward_k(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t2_m0_l0 = liebackward_k(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t0_m0_l0 = lieforward_i(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t0_m0_l0 = liebackward_i(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t27_m0_l0 = D1CDO4_i(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t1_m0_l0 = lieforward_j(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t1_m0_l0 = liebackward_j(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t28_m0_l0 = D1CDO4_j(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t2_m0_l0 = lieforward_k(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t2_m0_l0 = liebackward_k(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t29_m0_l0 = D1CDO4_k(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						rk2div_beta = (d_div_beta_o0_t0_m0_l0 + d_div_beta_o0_t1_m0_l0) + d_div_beta_o0_t2_m0_l0;
						rk2Detgammac = vector(rk2gammac_yy, i, j, k) * vector(rk2gammac_zz, i, j, k) * vector(rk2gammac_xx, i, j, k) + (-vector(rk2gammac_yy, i, j, k) * (vector(rk2gammac_xz, i, j, k) * vector(rk2gammac_xz, i, j, k))) + (-vector(rk2gammac_zz, i, j, k) * (vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_xy, i, j, k))) + (-(vector(rk2gammac_yz, i, j, k) * vector(rk2gammac_yz, i, j, k)) * vector(rk2gammac_xx, i, j, k)) + 2.0 * vector(rk2gammac_yz, i, j, k) * vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_xz, i, j, k);
						rk2gamma_zz = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_zz, i, j, k);
						rk2iDetgammac = 1.0 / rk2Detgammac;
						rk2gamma_yy = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_yy, i, j, k);
						rk2gamma_yz = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_yz, i, j, k);
						rk2gamma_xx = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_xx, i, j, k);
						rk2gamma_xy = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_xy, i, j, k);
						rk2gamma_xz = exp(4.0 * vector(rk2Phi, i, j, k)) * vector(rk2gammac_xz, i, j, k);
						rk2Detgamma = rk2gamma_yy * rk2gamma_zz * rk2gamma_xx + (-rk2gamma_yy * (rk2gamma_xz * rk2gamma_xz)) + (-rk2gamma_zz * (rk2gamma_xy * rk2gamma_xy)) + (-(rk2gamma_yz * rk2gamma_yz) * rk2gamma_xx) + 2.0 * rk2gamma_yz * rk2gamma_xy * rk2gamma_xz;
						rk2iDetgamma = 1.0 / rk2Detgamma;
						rk2gammacu_zz = rk2iDetgammac * (vector(rk2gammac_xx, i, j, k) * vector(rk2gammac_yy, i, j, k) - vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_xy, i, j, k));
						rk2gammau_xx = rk2iDetgamma * (rk2gamma_yy * rk2gamma_zz - rk2gamma_yz * rk2gamma_yz);
						rk2gammau_xy = rk2iDetgamma * ((-rk2gamma_xy * rk2gamma_zz) + rk2gamma_yz * rk2gamma_xz);
						rk2gammau_xz = rk2iDetgamma * (rk2gamma_xy * rk2gamma_yz - rk2gamma_yy * rk2gamma_xz);
						rk2gammacu_yy = rk2iDetgammac * (vector(rk2gammac_xx, i, j, k) * vector(rk2gammac_zz, i, j, k) - vector(rk2gammac_xz, i, j, k) * vector(rk2gammac_xz, i, j, k));
						rk2gammacu_yz = rk2iDetgammac * ((-vector(rk2gammac_xx, i, j, k) * vector(rk2gammac_yz, i, j, k)) + vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_xz, i, j, k));
						rk2gammacu_zy = rk2gammacu_yz;
						rk2gammau_yx = rk2gammau_xy;
						rk2gammau_yy = rk2iDetgamma * (rk2gamma_xx * rk2gamma_zz - rk2gamma_xz * rk2gamma_xz);
						rk2gammau_yz = rk2iDetgamma * ((-rk2gamma_xx * rk2gamma_yz) + rk2gamma_xy * rk2gamma_xz);
						rk2gammacu_xz = rk2iDetgammac * (vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_yz, i, j, k) - vector(rk2gammac_yy, i, j, k) * vector(rk2gammac_xz, i, j, k));
						rk2gammacu_zx = rk2gammacu_xz;
						rk2Am_zx = rk2gammacu_zx * vector(rk2A_xx, i, j, k) + rk2gammacu_zy * vector(rk2A_xy, i, j, k) + rk2gammacu_zz * vector(rk2A_xz, i, j, k);
						rk2Am_zz = rk2gammacu_zx * vector(rk2A_xz, i, j, k) + rk2gammacu_zy * vector(rk2A_yz, i, j, k) + rk2gammacu_zz * vector(rk2A_zz, i, j, k);
						rk2Am_zy = rk2gammacu_zx * vector(rk2A_xy, i, j, k) + rk2gammacu_zy * vector(rk2A_yy, i, j, k) + rk2gammacu_zz * vector(rk2A_yz, i, j, k);
						rk2Au_zz = rk2gammacu_zx * rk2Am_zx + rk2gammacu_zy * rk2Am_zy + rk2gammacu_zz * rk2Am_zz;
						rk2gammacu_xx = rk2iDetgammac * (vector(rk2gammac_yy, i, j, k) * vector(rk2gammac_zz, i, j, k) - vector(rk2gammac_yz, i, j, k) * vector(rk2gammac_yz, i, j, k));
						rk2gammacu_xy = rk2iDetgammac * ((-vector(rk2gammac_xy, i, j, k) * vector(rk2gammac_zz, i, j, k)) + vector(rk2gammac_yz, i, j, k) * vector(rk2gammac_xz, i, j, k));
						rk2m_C_xxx_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_xxx_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xxx_o0_t6_m0_l0;
						rk2m_C_xxx_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_xxx_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xxx_o0_t3_m0_l0;
						rk2m_C_xxx_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk2m_C_xxx_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk2C_xxx = (((((((rk2m_C_xxx_o0_t0_l0 + rk2m_C_xxx_o0_t0_l0) + rk2m_C_xxx_o0_t2_l0) + rk2m_C_xxx_o0_t3_l0) + rk2m_C_xxx_o0_t3_l0) + rk2m_C_xxx_o0_t5_l0) + rk2m_C_xxx_o0_t6_l0) + rk2m_C_xxx_o0_t6_l0) + rk2m_C_xxx_o0_t8_l0;
						rk2m_C_xxz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xxz_o0_t8_m0_l0;
						rk2m_C_xxz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xxz_o0_t7_m0_l0;
						rk2m_C_xxz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_xxz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xxz_o0_t5_m0_l0;
						rk2m_C_xxz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xxz_o0_t4_m0_l0;
						rk2m_C_xxz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_xxz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk2m_C_xxz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_xxz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk2C_xxz = (((((((rk2m_C_xxz_o0_t0_l0 + rk2m_C_xxz_o0_t1_l0) + rk2m_C_xxz_o0_t2_l0) + rk2m_C_xxz_o0_t3_l0) + rk2m_C_xxz_o0_t4_l0) + rk2m_C_xxz_o0_t5_l0) + rk2m_C_xxz_o0_t6_l0) + rk2m_C_xxz_o0_t7_l0) + rk2m_C_xxz_o0_t8_l0;
						rk2m_C_zxz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xxz_o0_t8_m0_l0;
						rk2m_C_zxz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xxz_o0_t7_m0_l0;
						rk2m_C_zxz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_zxz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xxz_o0_t5_m0_l0;
						rk2m_C_zxz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xxz_o0_t4_m0_l0;
						rk2m_C_zxz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_zxz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk2m_C_zxz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_zxz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk2C_zxz = (((((((rk2m_C_zxz_o0_t0_l0 + rk2m_C_zxz_o0_t1_l0) + rk2m_C_zxz_o0_t2_l0) + rk2m_C_zxz_o0_t3_l0) + rk2m_C_zxz_o0_t4_l0) + rk2m_C_zxz_o0_t5_l0) + rk2m_C_zxz_o0_t6_l0) + rk2m_C_zxz_o0_t7_l0) + rk2m_C_zxz_o0_t8_l0;
						rk2m_C_xxy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_xxy_o0_t7_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xxy_o0_t7_m0_l0;
						rk2m_C_xxy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xxy_o0_t6_m0_l0;
						rk2m_C_xxy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xxy_o0_t5_m0_l0;
						rk2m_C_xxy_o0_t4_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xxy_o0_t4_m0_l0;
						rk2m_C_xxy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_xxy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk2m_C_xxy_o0_t1_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_xxy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk2C_xxy = (((((((rk2m_C_xxy_o0_t0_l0 + rk2m_C_xxy_o0_t1_l0) + rk2m_C_xxy_o0_t2_l0) + rk2m_C_xxy_o0_t3_l0) + rk2m_C_xxy_o0_t4_l0) + rk2m_C_xxy_o0_t5_l0) + rk2m_C_xxy_o0_t6_l0) + rk2m_C_xxy_o0_t7_l0) + rk2m_C_xxy_o0_t8_l0;
						rk2gammacu_yx = rk2gammacu_xy;
						rk2m_C_yxy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_yxy_o0_t7_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xxy_o0_t7_m0_l0;
						rk2m_C_yxy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xxy_o0_t6_m0_l0;
						rk2m_C_yxy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xxy_o0_t5_m0_l0;
						rk2m_C_yxy_o0_t4_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xxy_o0_t4_m0_l0;
						rk2m_C_yxy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_yxy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk2m_C_yxy_o0_t1_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_yxy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk2C_yxy = (((((((rk2m_C_yxy_o0_t0_l0 + rk2m_C_yxy_o0_t1_l0) + rk2m_C_yxy_o0_t2_l0) + rk2m_C_yxy_o0_t3_l0) + rk2m_C_yxy_o0_t4_l0) + rk2m_C_yxy_o0_t5_l0) + rk2m_C_yxy_o0_t6_l0) + rk2m_C_yxy_o0_t7_l0) + rk2m_C_yxy_o0_t8_l0;
						rk2m_C_yxz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xxz_o0_t8_m0_l0;
						rk2m_C_yxz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xxz_o0_t7_m0_l0;
						rk2m_C_yxz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_yxz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xxz_o0_t5_m0_l0;
						rk2m_C_yxz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xxz_o0_t4_m0_l0;
						rk2m_C_yxz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_yxz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk2m_C_yxz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_yxz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk2C_yxz = (((((((rk2m_C_yxz_o0_t0_l0 + rk2m_C_yxz_o0_t1_l0) + rk2m_C_yxz_o0_t2_l0) + rk2m_C_yxz_o0_t3_l0) + rk2m_C_yxz_o0_t4_l0) + rk2m_C_yxz_o0_t5_l0) + rk2m_C_yxz_o0_t6_l0) + rk2m_C_yxz_o0_t7_l0) + rk2m_C_yxz_o0_t8_l0;
						rk2Cd_xxz = vector(rk2gammac_xx, i, j, k) * rk2C_xxz + vector(rk2gammac_xy, i, j, k) * rk2C_yxz + vector(rk2gammac_xz, i, j, k) * rk2C_zxz;
						rk2Cd_yxz = vector(rk2gammac_yx, i, j, k) * rk2C_xxz + vector(rk2gammac_yy, i, j, k) * rk2C_yxz + vector(rk2gammac_yz, i, j, k) * rk2C_zxz;
						rk2Cd_zxz = vector(rk2gammac_zx, i, j, k) * rk2C_xxz + vector(rk2gammac_zy, i, j, k) * rk2C_yxz + vector(rk2gammac_zz, i, j, k) * rk2C_zxz;
						rk2m_C_yxx_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_yxx_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xxx_o0_t6_m0_l0;
						rk2m_C_yxx_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_yxx_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xxx_o0_t3_m0_l0;
						rk2m_C_yxx_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk2m_C_yxx_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk2C_yxx = (((((((rk2m_C_yxx_o0_t0_l0 + rk2m_C_yxx_o0_t0_l0) + rk2m_C_yxx_o0_t2_l0) + rk2m_C_yxx_o0_t3_l0) + rk2m_C_yxx_o0_t3_l0) + rk2m_C_yxx_o0_t5_l0) + rk2m_C_yxx_o0_t6_l0) + rk2m_C_yxx_o0_t6_l0) + rk2m_C_yxx_o0_t8_l0;
						rk2m_C_xyy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_xyy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xyy_o0_t6_m0_l0;
						rk2m_C_xyy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_xyy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_xyy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_xyy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxy_o0_t5_m0_l0;
						rk2C_xyy = (((((((rk2m_C_xyy_o0_t0_l0 + rk2m_C_xyy_o0_t0_l0) + rk2m_C_xyy_o0_t2_l0) + rk2m_C_xyy_o0_t3_l0) + rk2m_C_xyy_o0_t3_l0) + rk2m_C_xyy_o0_t5_l0) + rk2m_C_xyy_o0_t6_l0) + rk2m_C_xyy_o0_t6_l0) + rk2m_C_xyy_o0_t8_l0;
						rk2m_C_zyy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_zyy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xyy_o0_t6_m0_l0;
						rk2m_C_zyy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_zyy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_zyy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_zyy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxy_o0_t5_m0_l0;
						rk2C_zyy = (((((((rk2m_C_zyy_o0_t0_l0 + rk2m_C_zyy_o0_t0_l0) + rk2m_C_zyy_o0_t2_l0) + rk2m_C_zyy_o0_t3_l0) + rk2m_C_zyy_o0_t3_l0) + rk2m_C_zyy_o0_t5_l0) + rk2m_C_zyy_o0_t6_l0) + rk2m_C_zyy_o0_t6_l0) + rk2m_C_zyy_o0_t8_l0;
						rk2m_C_yyy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_yyy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xyy_o0_t6_m0_l0;
						rk2m_C_yyy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_yyy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk2m_C_yyy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_yyy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxy_o0_t5_m0_l0;
						rk2C_yyy = (((((((rk2m_C_yyy_o0_t0_l0 + rk2m_C_yyy_o0_t0_l0) + rk2m_C_yyy_o0_t2_l0) + rk2m_C_yyy_o0_t3_l0) + rk2m_C_yyy_o0_t3_l0) + rk2m_C_yyy_o0_t5_l0) + rk2m_C_yyy_o0_t6_l0) + rk2m_C_yyy_o0_t6_l0) + rk2m_C_yyy_o0_t8_l0;
						rk2Cd_xyy = vector(rk2gammac_xx, i, j, k) * rk2C_xyy + vector(rk2gammac_xy, i, j, k) * rk2C_yyy + vector(rk2gammac_xz, i, j, k) * rk2C_zyy;
						rk2Cd_yyy = vector(rk2gammac_yx, i, j, k) * rk2C_xyy + vector(rk2gammac_yy, i, j, k) * rk2C_yyy + vector(rk2gammac_yz, i, j, k) * rk2C_zyy;
						rk2Cd_zyy = vector(rk2gammac_zx, i, j, k) * rk2C_xyy + vector(rk2gammac_zy, i, j, k) * rk2C_yyy + vector(rk2gammac_zz, i, j, k) * rk2C_zyy;
						rk2m_C_xyz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_xyz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xyz_o0_t7_m0_l0;
						rk2m_C_xyz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_xyz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_xyz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_xyz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_xyz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_xyz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_xyz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxz_o0_t5_m0_l0;
						rk2C_xyz = (((((((rk2m_C_xyz_o0_t0_l0 + rk2m_C_xyz_o0_t1_l0) + rk2m_C_xyz_o0_t2_l0) + rk2m_C_xyz_o0_t3_l0) + rk2m_C_xyz_o0_t4_l0) + rk2m_C_xyz_o0_t5_l0) + rk2m_C_xyz_o0_t6_l0) + rk2m_C_xyz_o0_t7_l0) + rk2m_C_xyz_o0_t8_l0;
						rk2m_C_zyz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_zyz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xyz_o0_t7_m0_l0;
						rk2m_C_zyz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_zyz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_zyz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_zyz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_zyz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_zyz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_zyz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxz_o0_t5_m0_l0;
						rk2C_zyz = (((((((rk2m_C_zyz_o0_t0_l0 + rk2m_C_zyz_o0_t1_l0) + rk2m_C_zyz_o0_t2_l0) + rk2m_C_zyz_o0_t3_l0) + rk2m_C_zyz_o0_t4_l0) + rk2m_C_zyz_o0_t5_l0) + rk2m_C_zyz_o0_t6_l0) + rk2m_C_zyz_o0_t7_l0) + rk2m_C_zyz_o0_t8_l0;
						rk2m_C_yyz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_yyz_o0_t7_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xyz_o0_t7_m0_l0;
						rk2m_C_yyz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_yyz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_yyz_o0_t4_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xyy_o0_t8_m0_l0;
						rk2m_C_yyz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk2m_C_yyz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxz_o0_t3_m0_l0;
						rk2m_C_yyz_o0_t1_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_yyz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxz_o0_t5_m0_l0;
						rk2C_yyz = (((((((rk2m_C_yyz_o0_t0_l0 + rk2m_C_yyz_o0_t1_l0) + rk2m_C_yyz_o0_t2_l0) + rk2m_C_yyz_o0_t3_l0) + rk2m_C_yyz_o0_t4_l0) + rk2m_C_yyz_o0_t5_l0) + rk2m_C_yyz_o0_t6_l0) + rk2m_C_yyz_o0_t7_l0) + rk2m_C_yyz_o0_t8_l0;
						rk2Cd_xyz = vector(rk2gammac_xx, i, j, k) * rk2C_xyz + vector(rk2gammac_xy, i, j, k) * rk2C_yyz + vector(rk2gammac_xz, i, j, k) * rk2C_zyz;
						rk2Cd_yyz = vector(rk2gammac_yx, i, j, k) * rk2C_xyz + vector(rk2gammac_yy, i, j, k) * rk2C_yyz + vector(rk2gammac_yz, i, j, k) * rk2C_zyz;
						rk2m_C_xzz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_xzz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_xzz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_xy * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_xzz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_xy * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_xzz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_xx * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_xzz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_xx * d_C_xxz_o0_t8_m0_l0;
						rk2C_xzz = (((((((rk2m_C_xzz_o0_t0_l0 + rk2m_C_xzz_o0_t0_l0) + rk2m_C_xzz_o0_t2_l0) + rk2m_C_xzz_o0_t3_l0) + rk2m_C_xzz_o0_t3_l0) + rk2m_C_xzz_o0_t5_l0) + rk2m_C_xzz_o0_t6_l0) + rk2m_C_xzz_o0_t6_l0) + rk2m_C_xzz_o0_t8_l0;
						rk2m_C_zzz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_zzz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_zzz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_zzz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_zzz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_zzz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxz_o0_t8_m0_l0;
						rk2C_zzz = (((((((rk2m_C_zzz_o0_t0_l0 + rk2m_C_zzz_o0_t0_l0) + rk2m_C_zzz_o0_t2_l0) + rk2m_C_zzz_o0_t3_l0) + rk2m_C_zzz_o0_t3_l0) + rk2m_C_zzz_o0_t5_l0) + rk2m_C_zzz_o0_t6_l0) + rk2m_C_zzz_o0_t6_l0) + rk2m_C_zzz_o0_t8_l0;
						rk2m_C_yzz_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_yzz_o0_t6_l0 = 0.5000000000000 * rk2gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk2m_C_yzz_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_yy * d_C_xyz_o0_t6_m0_l0;
						rk2m_C_yzz_o0_t3_l0 = 0.5000000000000 * rk2gammacu_yy * d_C_xyz_o0_t8_m0_l0;
						rk2m_C_yzz_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_yx * d_C_xxz_o0_t6_m0_l0;
						rk2m_C_yzz_o0_t0_l0 = 0.5000000000000 * rk2gammacu_yx * d_C_xxz_o0_t8_m0_l0;
						rk2C_yzz = (((((((rk2m_C_yzz_o0_t0_l0 + rk2m_C_yzz_o0_t0_l0) + rk2m_C_yzz_o0_t2_l0) + rk2m_C_yzz_o0_t3_l0) + rk2m_C_yzz_o0_t3_l0) + rk2m_C_yzz_o0_t5_l0) + rk2m_C_yzz_o0_t6_l0) + rk2m_C_yzz_o0_t6_l0) + rk2m_C_yzz_o0_t8_l0;
						rk2Cd_xzz = vector(rk2gammac_xx, i, j, k) * rk2C_xzz + vector(rk2gammac_xy, i, j, k) * rk2C_yzz + vector(rk2gammac_xz, i, j, k) * rk2C_zzz;
						rk2Cd_yzz = vector(rk2gammac_yx, i, j, k) * rk2C_xzz + vector(rk2gammac_yy, i, j, k) * rk2C_yzz + vector(rk2gammac_yz, i, j, k) * rk2C_zzz;
						rk2Cd_zzz = vector(rk2gammac_zx, i, j, k) * rk2C_xzz + vector(rk2gammac_zy, i, j, k) * rk2C_yzz + vector(rk2gammac_zz, i, j, k) * rk2C_zzz;
						rk2Cd_zyz = vector(rk2gammac_zx, i, j, k) * rk2C_xyz + vector(rk2gammac_zy, i, j, k) * rk2C_yyz + vector(rk2gammac_zz, i, j, k) * rk2C_zyz;
						rk2Am_yy = rk2gammacu_yx * vector(rk2A_xy, i, j, k) + rk2gammacu_yy * vector(rk2A_yy, i, j, k) + rk2gammacu_yz * vector(rk2A_yz, i, j, k);
						rk2Am_yx = rk2gammacu_yx * vector(rk2A_xx, i, j, k) + rk2gammacu_yy * vector(rk2A_xy, i, j, k) + rk2gammacu_yz * vector(rk2A_xz, i, j, k);
						rk2Am_yz = rk2gammacu_yx * vector(rk2A_xz, i, j, k) + rk2gammacu_yy * vector(rk2A_yz, i, j, k) + rk2gammacu_yz * vector(rk2A_zz, i, j, k);
						rk2Au_yz = rk2gammacu_yx * rk2Am_zx + rk2gammacu_yy * rk2Am_zy + rk2gammacu_yz * rk2Am_zz;
						rk2m_C_zxx_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xxx_o0_t8_m0_l0;
						rk2m_C_zxx_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xxx_o0_t6_m0_l0;
						rk2m_C_zxx_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_zxx_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xxx_o0_t3_m0_l0;
						rk2m_C_zxx_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk2m_C_zxx_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk2C_zxx = (((((((rk2m_C_zxx_o0_t0_l0 + rk2m_C_zxx_o0_t0_l0) + rk2m_C_zxx_o0_t2_l0) + rk2m_C_zxx_o0_t3_l0) + rk2m_C_zxx_o0_t3_l0) + rk2m_C_zxx_o0_t5_l0) + rk2m_C_zxx_o0_t6_l0) + rk2m_C_zxx_o0_t6_l0) + rk2m_C_zxx_o0_t8_l0;
						rk2Cd_xxx = vector(rk2gammac_xx, i, j, k) * rk2C_xxx + vector(rk2gammac_xy, i, j, k) * rk2C_yxx + vector(rk2gammac_xz, i, j, k) * rk2C_zxx;
						rk2Cd_yxx = vector(rk2gammac_yx, i, j, k) * rk2C_xxx + vector(rk2gammac_yy, i, j, k) * rk2C_yxx + vector(rk2gammac_yz, i, j, k) * rk2C_zxx;
						rk2Cd_zxx = vector(rk2gammac_zx, i, j, k) * rk2C_xxx + vector(rk2gammac_zy, i, j, k) * rk2C_yxx + vector(rk2gammac_zz, i, j, k) * rk2C_zxx;
						rk2m_C_zxy_o0_t8_l0 = (-0.5000000000000) * rk2gammacu_zz * d_C_xxy_o0_t8_m0_l0;
						rk2m_C_zxy_o0_t7_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xxy_o0_t7_m0_l0;
						rk2m_C_zxy_o0_t6_l0 = 0.5000000000000 * rk2gammacu_zz * d_C_xxy_o0_t6_m0_l0;
						rk2m_C_zxy_o0_t5_l0 = (-0.5000000000000) * rk2gammacu_zy * d_C_xxy_o0_t5_m0_l0;
						rk2m_C_zxy_o0_t4_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xxy_o0_t4_m0_l0;
						rk2m_C_zxy_o0_t3_l0 = 0.5000000000000 * rk2gammacu_zy * d_C_xxy_o0_t3_m0_l0;
						rk2m_C_zxy_o0_t2_l0 = (-0.5000000000000) * rk2gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk2m_C_zxy_o0_t1_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxx_o0_t5_m0_l0;
						rk2m_C_zxy_o0_t0_l0 = 0.5000000000000 * rk2gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk2C_zxy = (((((((rk2m_C_zxy_o0_t0_l0 + rk2m_C_zxy_o0_t1_l0) + rk2m_C_zxy_o0_t2_l0) + rk2m_C_zxy_o0_t3_l0) + rk2m_C_zxy_o0_t4_l0) + rk2m_C_zxy_o0_t5_l0) + rk2m_C_zxy_o0_t6_l0) + rk2m_C_zxy_o0_t7_l0) + rk2m_C_zxy_o0_t8_l0;
						rk2Cd_xxy = vector(rk2gammac_xx, i, j, k) * rk2C_xxy + vector(rk2gammac_xy, i, j, k) * rk2C_yxy + vector(rk2gammac_xz, i, j, k) * rk2C_zxy;
						rk2Cd_yxy = vector(rk2gammac_yx, i, j, k) * rk2C_xxy + vector(rk2gammac_yy, i, j, k) * rk2C_yxy + vector(rk2gammac_yz, i, j, k) * rk2C_zxy;
						rk2Cd_zxy = vector(rk2gammac_zx, i, j, k) * rk2C_xxy + vector(rk2gammac_zy, i, j, k) * rk2C_yxy + vector(rk2gammac_zz, i, j, k) * rk2C_zxy;
						rk2Au_yy = rk2gammacu_yx * rk2Am_yx + rk2gammacu_yy * rk2Am_yy + rk2gammacu_yz * rk2Am_yz;
						rk2falpha = 1.0 + 1.0 / (vector(rk2alpha, i, j, k) * vector(rk2alpha, i, j, k));
						rk2d_Rc_xx_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxx * rk2Cd_xxz + rk2C_yxx * rk2Cd_yxz + rk2C_zxx * rk2Cd_zxz) + rk2gammacu_zy * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_yxz + rk2C_zxy * rk2Cd_zxz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_yxz + rk2C_zxz * rk2Cd_zxz)) + (rk2gammacu_yx * (rk2C_xxx * rk2Cd_xxy + rk2C_yxx * rk2Cd_yxy + rk2C_zxx * rk2Cd_zxy) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_zxy) + rk2gammacu_yz * (rk2C_xxz * rk2Cd_xxy + rk2C_yxz * rk2Cd_yxy + rk2C_zxz * rk2Cd_zxy)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_xxx + rk2C_yxx * rk2Cd_yxx + rk2C_zxx * rk2Cd_zxx) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_xxx + rk2C_yxy * rk2Cd_yxx + rk2C_zxy * rk2Cd_zxx) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_xxx + rk2C_yxz * rk2Cd_yxx + rk2C_zxz * rk2Cd_zxx)) + (rk2gammacu_zx * (rk2C_xxz * rk2Cd_xxx + rk2C_yxz * rk2Cd_xxy + rk2C_zxz * rk2Cd_xxz) + rk2gammacu_zy * (rk2C_xxz * rk2Cd_xxy + rk2C_yxz * rk2Cd_xyy + rk2C_zxz * rk2Cd_xyz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_xyz + rk2C_zxz * rk2Cd_xzz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_xxx + rk2C_yxy * rk2Cd_xxy + rk2C_zxy * rk2Cd_xxz) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_xyy + rk2C_zxy * rk2Cd_xyz) + rk2gammacu_yz * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_xyz + rk2C_zxy * rk2Cd_xzz)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_xxx + rk2C_yxx * rk2Cd_xxy + rk2C_zxx * rk2Cd_xxz) + rk2gammacu_xy * (rk2C_xxx * rk2Cd_xxy + rk2C_yxx * rk2Cd_xyy + rk2C_zxx * rk2Cd_xyz) + rk2gammacu_xz * (rk2C_xxx * rk2Cd_xxz + rk2C_yxx * rk2Cd_xyz + rk2C_zxx * rk2Cd_xzz)) + (rk2gammacu_zx * (rk2C_xxz * rk2Cd_xxx + rk2C_yxz * rk2Cd_xxy + rk2C_zxz * rk2Cd_xxz) + rk2gammacu_zy * (rk2C_xxz * rk2Cd_xxy + rk2C_yxz * rk2Cd_xyy + rk2C_zxz * rk2Cd_xyz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_xyz + rk2C_zxz * rk2Cd_xzz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_xxx + rk2C_yxy * rk2Cd_xxy + rk2C_zxy * rk2Cd_xxz) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_xyy + rk2C_zxy * rk2Cd_xyz) + rk2gammacu_yz * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_xyz + rk2C_zxy * rk2Cd_xzz)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_xxx + rk2C_yxx * rk2Cd_xxy + rk2C_zxx * rk2Cd_xxz) + rk2gammacu_xy * (rk2C_xxx * rk2Cd_xxy + rk2C_yxx * rk2Cd_xyy + rk2C_zxx * rk2Cd_xyz) + rk2gammacu_xz * (rk2C_xxx * rk2Cd_xxz + rk2C_yxx * rk2Cd_xyz + rk2C_zxx * rk2Cd_xzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_xxx + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_xxy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_xxz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_xxx + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_xxy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_xxz);
						rk2m_Rc_xx_o0_t11_l0 = 0.5 * vector(rk2gammac_zx, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk2m_Rc_xx_o0_t10_l0 = 0.5 * vector(rk2gammac_yx, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk2m_Rc_xx_o0_t9_l0 = 0.5 * vector(rk2gammac_xx, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk2m_Rc_xx_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_xx_o0_t8_m0_l0;
						rk2m_Rc_xx_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_xx_o0_t7_m0_l0;
						rk2m_Rc_xx_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_xx_o0_t6_m0_l0;
						rk2m_Rc_xx_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_xx_o0_t5_m0_l0;
						rk2m_Rc_xx_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_xx_o0_t4_m0_l0;
						rk2m_Rc_xx_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_xx_o0_t3_m0_l0;
						rk2m_Rc_xx_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_xx_o0_t2_m0_l0;
						rk2m_Rc_xx_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_xx_o0_t1_m0_l0;
						rk2m_Rc_xx_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_xx_o0_t0_m0_l0;
						rk2Rc_xx = ((((((((((((((rk2m_Rc_xx_o0_t0_l0 + rk2m_Rc_xx_o0_t1_l0) + rk2m_Rc_xx_o0_t2_l0) + rk2m_Rc_xx_o0_t3_l0) + rk2m_Rc_xx_o0_t4_l0) + rk2m_Rc_xx_o0_t5_l0) + rk2m_Rc_xx_o0_t6_l0) + rk2m_Rc_xx_o0_t7_l0) + rk2m_Rc_xx_o0_t8_l0) + rk2m_Rc_xx_o0_t9_l0) + rk2m_Rc_xx_o0_t10_l0) + rk2m_Rc_xx_o0_t11_l0) + rk2m_Rc_xx_o0_t9_l0) + rk2m_Rc_xx_o0_t10_l0) + rk2m_Rc_xx_o0_t11_l0) + rk2d_Rc_xx_o0_t15_m0_l0;
						rk2gammau_zy = rk2gammau_yz;
						rk2d_Rc_xy_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxx * rk2Cd_xyz + rk2C_yxx * rk2Cd_yyz + rk2C_zxx * rk2Cd_zyz) + rk2gammacu_zy * (rk2C_xxy * rk2Cd_xyz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_xyz + rk2C_yxz * rk2Cd_yyz + rk2C_zxz * rk2Cd_zyz)) + (rk2gammacu_yx * (rk2C_xxx * rk2Cd_xyy + rk2C_yxx * rk2Cd_yyy + rk2C_zxx * rk2Cd_zyy) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_xyy + rk2C_yxy * rk2Cd_yyy + rk2C_zxy * rk2Cd_zyy) + rk2gammacu_yz * (rk2C_xxz * rk2Cd_xyy + rk2C_yxz * rk2Cd_yyy + rk2C_zxz * rk2Cd_zyy)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_xxy + rk2C_yxx * rk2Cd_yxy + rk2C_zxx * rk2Cd_zxy) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_zxy) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_xxy + rk2C_yxz * rk2Cd_yxy + rk2C_zxz * rk2Cd_zxy)) + (rk2gammacu_zx * (rk2C_xyz * rk2Cd_xxx + rk2C_yyz * rk2Cd_xxy + rk2C_zyz * rk2Cd_xxz) + rk2gammacu_zy * (rk2C_xyz * rk2Cd_xxy + rk2C_yyz * rk2Cd_xyy + rk2C_zyz * rk2Cd_xyz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_xxz + rk2C_yyz * rk2Cd_xyz + rk2C_zyz * rk2Cd_xzz)) + (rk2gammacu_yx * (rk2C_xyy * rk2Cd_xxx + rk2C_yyy * rk2Cd_xxy + rk2C_zyy * rk2Cd_xxz) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_xxy + rk2C_yyy * rk2Cd_xyy + rk2C_zyy * rk2Cd_xyz) + rk2gammacu_yz * (rk2C_xyy * rk2Cd_xxz + rk2C_yyy * rk2Cd_xyz + rk2C_zyy * rk2Cd_xzz)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_xxx + rk2C_yxy * rk2Cd_xxy + rk2C_zxy * rk2Cd_xxz) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_xyy + rk2C_zxy * rk2Cd_xyz) + rk2gammacu_xz * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_xyz + rk2C_zxy * rk2Cd_xzz)) + (rk2gammacu_zx * (rk2C_xxz * rk2Cd_yxx + rk2C_yxz * rk2Cd_yxy + rk2C_zxz * rk2Cd_yxz) + rk2gammacu_zy * (rk2C_xxz * rk2Cd_yxy + rk2C_yxz * rk2Cd_yyy + rk2C_zxz * rk2Cd_yyz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_yxz + rk2C_yxz * rk2Cd_yyz + rk2C_zxz * rk2Cd_yzz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_yxx + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_yxz) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_yxy + rk2C_yxy * rk2Cd_yyy + rk2C_zxy * rk2Cd_yyz) + rk2gammacu_yz * (rk2C_xxy * rk2Cd_yxz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_yzz)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_yxx + rk2C_yxx * rk2Cd_yxy + rk2C_zxx * rk2Cd_yxz) + rk2gammacu_xy * (rk2C_xxx * rk2Cd_yxy + rk2C_yxx * rk2Cd_yyy + rk2C_zxx * rk2Cd_yyz) + rk2gammacu_xz * (rk2C_xxx * rk2Cd_yxz + rk2C_yxx * rk2Cd_yyz + rk2C_zxx * rk2Cd_yzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_yxx + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_yxy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_yxz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_xxy + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_xyy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_xyz);
						rk2m_Rc_xy_o0_t14_l0 = 0.5 * vector(rk2gammac_zy, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk2m_Rc_xy_o0_t13_l0 = 0.5 * vector(rk2gammac_yy, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk2m_Rc_xy_o0_t12_l0 = 0.5 * vector(rk2gammac_xy, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk2m_Rc_xy_o0_t11_l0 = 0.5 * vector(rk2gammac_zx, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk2m_Rc_xy_o0_t10_l0 = 0.5 * vector(rk2gammac_yx, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk2m_Rc_xy_o0_t9_l0 = 0.5 * vector(rk2gammac_xx, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk2m_Rc_xy_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_xy_o0_t8_m0_l0;
						rk2m_Rc_xy_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_xy_o0_t7_m0_l0;
						rk2m_Rc_xy_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_xy_o0_t6_m0_l0;
						rk2m_Rc_xy_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_xy_o0_t5_m0_l0;
						rk2m_Rc_xy_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_xy_o0_t4_m0_l0;
						rk2m_Rc_xy_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_xy_o0_t3_m0_l0;
						rk2m_Rc_xy_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_xy_o0_t2_m0_l0;
						rk2m_Rc_xy_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_xy_o0_t1_m0_l0;
						rk2m_Rc_xy_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_xy_o0_t0_m0_l0;
						rk2Rc_xy = ((((((((((((((rk2m_Rc_xy_o0_t0_l0 + rk2m_Rc_xy_o0_t1_l0) + rk2m_Rc_xy_o0_t2_l0) + rk2m_Rc_xy_o0_t3_l0) + rk2m_Rc_xy_o0_t4_l0) + rk2m_Rc_xy_o0_t5_l0) + rk2m_Rc_xy_o0_t6_l0) + rk2m_Rc_xy_o0_t7_l0) + rk2m_Rc_xy_o0_t8_l0) + rk2m_Rc_xy_o0_t9_l0) + rk2m_Rc_xy_o0_t10_l0) + rk2m_Rc_xy_o0_t11_l0) + rk2m_Rc_xy_o0_t12_l0) + rk2m_Rc_xy_o0_t13_l0) + rk2m_Rc_xy_o0_t14_l0) + rk2d_Rc_xy_o0_t15_m0_l0;
						rk2d_Rc_yy_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxy * rk2Cd_xyz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_zy * (rk2C_xyy * rk2Cd_xyz + rk2C_yyy * rk2Cd_yyz + rk2C_zyy * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_xyz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_zyz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_xyy + rk2C_yxy * rk2Cd_yyy + rk2C_zxy * rk2Cd_zyy) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_xyy + rk2C_yyy * rk2Cd_yyy + rk2C_zyy * rk2Cd_zyy) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_xyy + rk2C_yyz * rk2Cd_yyy + rk2C_zyz * rk2Cd_zyy)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_xxy + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_zxy) + rk2gammacu_xy * (rk2C_xyy * rk2Cd_xxy + rk2C_yyy * rk2Cd_yxy + rk2C_zyy * rk2Cd_zxy) + rk2gammacu_xz * (rk2C_xyz * rk2Cd_xxy + rk2C_yyz * rk2Cd_yxy + rk2C_zyz * rk2Cd_zxy)) + (rk2gammacu_zx * (rk2C_xyz * rk2Cd_yxx + rk2C_yyz * rk2Cd_yxy + rk2C_zyz * rk2Cd_yxz) + rk2gammacu_zy * (rk2C_xyz * rk2Cd_yxy + rk2C_yyz * rk2Cd_yyy + rk2C_zyz * rk2Cd_yyz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_yxz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_yzz)) + (rk2gammacu_yx * (rk2C_xyy * rk2Cd_yxx + rk2C_yyy * rk2Cd_yxy + rk2C_zyy * rk2Cd_yxz) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_yxy + rk2C_yyy * rk2Cd_yyy + rk2C_zyy * rk2Cd_yyz) + rk2gammacu_yz * (rk2C_xyy * rk2Cd_yxz + rk2C_yyy * rk2Cd_yyz + rk2C_zyy * rk2Cd_yzz)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_yxx + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_yxz) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_yxy + rk2C_yxy * rk2Cd_yyy + rk2C_zxy * rk2Cd_yyz) + rk2gammacu_xz * (rk2C_xxy * rk2Cd_yxz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_yzz)) + (rk2gammacu_zx * (rk2C_xyz * rk2Cd_yxx + rk2C_yyz * rk2Cd_yxy + rk2C_zyz * rk2Cd_yxz) + rk2gammacu_zy * (rk2C_xyz * rk2Cd_yxy + rk2C_yyz * rk2Cd_yyy + rk2C_zyz * rk2Cd_yyz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_yxz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_yzz)) + (rk2gammacu_yx * (rk2C_xyy * rk2Cd_yxx + rk2C_yyy * rk2Cd_yxy + rk2C_zyy * rk2Cd_yxz) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_yxy + rk2C_yyy * rk2Cd_yyy + rk2C_zyy * rk2Cd_yyz) + rk2gammacu_yz * (rk2C_xyy * rk2Cd_yxz + rk2C_yyy * rk2Cd_yyz + rk2C_zyy * rk2Cd_yzz)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_yxx + rk2C_yxy * rk2Cd_yxy + rk2C_zxy * rk2Cd_yxz) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_yxy + rk2C_yxy * rk2Cd_yyy + rk2C_zxy * rk2Cd_yyz) + rk2gammacu_xz * (rk2C_xxy * rk2Cd_yxz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_yzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_yxy + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_yyy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_yyz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_yxy + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_yyy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_yyz);
						rk2m_Rc_yy_o0_t11_l0 = 0.5 * vector(rk2gammac_zy, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk2m_Rc_yy_o0_t10_l0 = 0.5 * vector(rk2gammac_yy, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk2m_Rc_yy_o0_t9_l0 = 0.5 * vector(rk2gammac_xy, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk2m_Rc_yy_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_yy_o0_t8_m0_l0;
						rk2m_Rc_yy_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_yy_o0_t7_m0_l0;
						rk2m_Rc_yy_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_yy_o0_t6_m0_l0;
						rk2m_Rc_yy_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_yy_o0_t5_m0_l0;
						rk2m_Rc_yy_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_yy_o0_t4_m0_l0;
						rk2m_Rc_yy_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_yy_o0_t3_m0_l0;
						rk2m_Rc_yy_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_yy_o0_t2_m0_l0;
						rk2m_Rc_yy_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_yy_o0_t1_m0_l0;
						rk2m_Rc_yy_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_yy_o0_t0_m0_l0;
						rk2Rc_yy = ((((((((((((((rk2m_Rc_yy_o0_t0_l0 + rk2m_Rc_yy_o0_t1_l0) + rk2m_Rc_yy_o0_t2_l0) + rk2m_Rc_yy_o0_t3_l0) + rk2m_Rc_yy_o0_t4_l0) + rk2m_Rc_yy_o0_t5_l0) + rk2m_Rc_yy_o0_t6_l0) + rk2m_Rc_yy_o0_t7_l0) + rk2m_Rc_yy_o0_t8_l0) + rk2m_Rc_yy_o0_t9_l0) + rk2m_Rc_yy_o0_t10_l0) + rk2m_Rc_yy_o0_t11_l0) + rk2m_Rc_yy_o0_t9_l0) + rk2m_Rc_yy_o0_t10_l0) + rk2m_Rc_yy_o0_t11_l0) + rk2d_Rc_yy_o0_t15_m0_l0;
						rk2gammau_zz = rk2iDetgamma * (rk2gamma_xx * rk2gamma_yy - rk2gamma_xy * rk2gamma_xy);
						rk2Am_xx = rk2gammacu_xx * vector(rk2A_xx, i, j, k) + rk2gammacu_xy * vector(rk2A_xy, i, j, k) + rk2gammacu_xz * vector(rk2A_xz, i, j, k);
						rk2Am_xz = rk2gammacu_xx * vector(rk2A_xz, i, j, k) + rk2gammacu_xy * vector(rk2A_yz, i, j, k) + rk2gammacu_xz * vector(rk2A_zz, i, j, k);
						rk2Am_xy = rk2gammacu_xx * vector(rk2A_xy, i, j, k) + rk2gammacu_xy * vector(rk2A_yy, i, j, k) + rk2gammacu_xz * vector(rk2A_yz, i, j, k);
						rk2Au_xz = rk2gammacu_xx * rk2Am_zx + rk2gammacu_xy * rk2Am_zy + rk2gammacu_xz * rk2Am_zz;
						rk2Au_xy = rk2gammacu_xx * rk2Am_yx + rk2gammacu_xy * rk2Am_yy + rk2gammacu_xz * rk2Am_yz;
						rk2d_Rc_xz_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxx * rk2Cd_xzz + rk2C_yxx * rk2Cd_yzz + rk2C_zxx * rk2Cd_zzz) + rk2gammacu_zy * (rk2C_xxy * rk2Cd_xzz + rk2C_yxy * rk2Cd_yzz + rk2C_zxy * rk2Cd_zzz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_xzz + rk2C_yxz * rk2Cd_yzz + rk2C_zxz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xxx * rk2Cd_xyz + rk2C_yxx * rk2Cd_yyz + rk2C_zxx * rk2Cd_zyz) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_xyz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xxz * rk2Cd_xyz + rk2C_yxz * rk2Cd_yyz + rk2C_zxz * rk2Cd_zyz)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_xxz + rk2C_yxx * rk2Cd_yxz + rk2C_zxx * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_yxz + rk2C_zxy * rk2Cd_zxz) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_yxz + rk2C_zxz * rk2Cd_zxz)) + (rk2gammacu_zx * (rk2C_xzz * rk2Cd_xxx + rk2C_yzz * rk2Cd_xxy + rk2C_zzz * rk2Cd_xxz) + rk2gammacu_zy * (rk2C_xzz * rk2Cd_xxy + rk2C_yzz * rk2Cd_xyy + rk2C_zzz * rk2Cd_xyz) + rk2gammacu_zz * (rk2C_xzz * rk2Cd_xxz + rk2C_yzz * rk2Cd_xyz + rk2C_zzz * rk2Cd_xzz)) + (rk2gammacu_yx * (rk2C_xyz * rk2Cd_xxx + rk2C_yyz * rk2Cd_xxy + rk2C_zyz * rk2Cd_xxz) + rk2gammacu_yy * (rk2C_xyz * rk2Cd_xxy + rk2C_yyz * rk2Cd_xyy + rk2C_zyz * rk2Cd_xyz) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_xxz + rk2C_yyz * rk2Cd_xyz + rk2C_zyz * rk2Cd_xzz)) + (rk2gammacu_xx * (rk2C_xxz * rk2Cd_xxx + rk2C_yxz * rk2Cd_xxy + rk2C_zxz * rk2Cd_xxz) + rk2gammacu_xy * (rk2C_xxz * rk2Cd_xxy + rk2C_yxz * rk2Cd_xyy + rk2C_zxz * rk2Cd_xyz) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_xyz + rk2C_zxz * rk2Cd_xzz)) + (rk2gammacu_zx * (rk2C_xxz * rk2Cd_zxx + rk2C_yxz * rk2Cd_zxy + rk2C_zxz * rk2Cd_zxz) + rk2gammacu_zy * (rk2C_xxz * rk2Cd_zxy + rk2C_yxz * rk2Cd_zyy + rk2C_zxz * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xxz * rk2Cd_zxz + rk2C_yxz * rk2Cd_zyz + rk2C_zxz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_zxx + rk2C_yxy * rk2Cd_zxy + rk2C_zxy * rk2Cd_zxz) + rk2gammacu_yy * (rk2C_xxy * rk2Cd_zxy + rk2C_yxy * rk2Cd_zyy + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xxy * rk2Cd_zxz + rk2C_yxy * rk2Cd_zyz + rk2C_zxy * rk2Cd_zzz)) + (rk2gammacu_xx * (rk2C_xxx * rk2Cd_zxx + rk2C_yxx * rk2Cd_zxy + rk2C_zxx * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xxx * rk2Cd_zxy + rk2C_yxx * rk2Cd_zyy + rk2C_zxx * rk2Cd_zyz) + rk2gammacu_xz * (rk2C_xxx * rk2Cd_zxz + rk2C_yxx * rk2Cd_zyz + rk2C_zxx * rk2Cd_zzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_zxx + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_zxy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_zxz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_xxz + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_xyz + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_xzz);
						rk2m_Rc_xz_o0_t14_l0 = 0.5 * vector(rk2gammac_zz, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk2m_Rc_xz_o0_t13_l0 = 0.5 * vector(rk2gammac_yz, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk2m_Rc_xz_o0_t12_l0 = 0.5 * vector(rk2gammac_xz, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk2m_Rc_xz_o0_t11_l0 = 0.5 * vector(rk2gammac_zx, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk2m_Rc_xz_o0_t10_l0 = 0.5 * vector(rk2gammac_yx, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk2m_Rc_xz_o0_t9_l0 = 0.5 * vector(rk2gammac_xx, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk2m_Rc_xz_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_xz_o0_t8_m0_l0;
						rk2m_Rc_xz_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_xz_o0_t7_m0_l0;
						rk2m_Rc_xz_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_xz_o0_t6_m0_l0;
						rk2m_Rc_xz_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_xz_o0_t5_m0_l0;
						rk2m_Rc_xz_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_xz_o0_t4_m0_l0;
						rk2m_Rc_xz_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_xz_o0_t3_m0_l0;
						rk2m_Rc_xz_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_xz_o0_t2_m0_l0;
						rk2m_Rc_xz_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_xz_o0_t1_m0_l0;
						rk2m_Rc_xz_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_xz_o0_t0_m0_l0;
						rk2Rc_xz = ((((((((((((((rk2m_Rc_xz_o0_t0_l0 + rk2m_Rc_xz_o0_t1_l0) + rk2m_Rc_xz_o0_t2_l0) + rk2m_Rc_xz_o0_t3_l0) + rk2m_Rc_xz_o0_t4_l0) + rk2m_Rc_xz_o0_t5_l0) + rk2m_Rc_xz_o0_t6_l0) + rk2m_Rc_xz_o0_t7_l0) + rk2m_Rc_xz_o0_t8_l0) + rk2m_Rc_xz_o0_t9_l0) + rk2m_Rc_xz_o0_t10_l0) + rk2m_Rc_xz_o0_t11_l0) + rk2m_Rc_xz_o0_t12_l0) + rk2m_Rc_xz_o0_t13_l0) + rk2m_Rc_xz_o0_t14_l0) + rk2d_Rc_xz_o0_t15_m0_l0;
						rk2d_Rc_yz_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxy * rk2Cd_xzz + rk2C_yxy * rk2Cd_yzz + rk2C_zxy * rk2Cd_zzz) + rk2gammacu_zy * (rk2C_xyy * rk2Cd_xzz + rk2C_yyy * rk2Cd_yzz + rk2C_zyy * rk2Cd_zzz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_xzz + rk2C_yyz * rk2Cd_yzz + rk2C_zyz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xxy * rk2Cd_xyz + rk2C_yxy * rk2Cd_yyz + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_xyz + rk2C_yyy * rk2Cd_yyz + rk2C_zyy * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_xyz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_zyz)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_xxz + rk2C_yxy * rk2Cd_yxz + rk2C_zxy * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xyy * rk2Cd_xxz + rk2C_yyy * rk2Cd_yxz + rk2C_zyy * rk2Cd_zxz) + rk2gammacu_xz * (rk2C_xyz * rk2Cd_xxz + rk2C_yyz * rk2Cd_yxz + rk2C_zyz * rk2Cd_zxz)) + (rk2gammacu_zx * (rk2C_xzz * rk2Cd_yxx + rk2C_yzz * rk2Cd_yxy + rk2C_zzz * rk2Cd_yxz) + rk2gammacu_zy * (rk2C_xzz * rk2Cd_yxy + rk2C_yzz * rk2Cd_yyy + rk2C_zzz * rk2Cd_yyz) + rk2gammacu_zz * (rk2C_xzz * rk2Cd_yxz + rk2C_yzz * rk2Cd_yyz + rk2C_zzz * rk2Cd_yzz)) + (rk2gammacu_yx * (rk2C_xyz * rk2Cd_yxx + rk2C_yyz * rk2Cd_yxy + rk2C_zyz * rk2Cd_yxz) + rk2gammacu_yy * (rk2C_xyz * rk2Cd_yxy + rk2C_yyz * rk2Cd_yyy + rk2C_zyz * rk2Cd_yyz) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_yxz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_yzz)) + (rk2gammacu_xx * (rk2C_xxz * rk2Cd_yxx + rk2C_yxz * rk2Cd_yxy + rk2C_zxz * rk2Cd_yxz) + rk2gammacu_xy * (rk2C_xxz * rk2Cd_yxy + rk2C_yxz * rk2Cd_yyy + rk2C_zxz * rk2Cd_yyz) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_yxz + rk2C_yxz * rk2Cd_yyz + rk2C_zxz * rk2Cd_yzz)) + (rk2gammacu_zx * (rk2C_xyz * rk2Cd_zxx + rk2C_yyz * rk2Cd_zxy + rk2C_zyz * rk2Cd_zxz) + rk2gammacu_zy * (rk2C_xyz * rk2Cd_zxy + rk2C_yyz * rk2Cd_zyy + rk2C_zyz * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xyz * rk2Cd_zxz + rk2C_yyz * rk2Cd_zyz + rk2C_zyz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xyy * rk2Cd_zxx + rk2C_yyy * rk2Cd_zxy + rk2C_zyy * rk2Cd_zxz) + rk2gammacu_yy * (rk2C_xyy * rk2Cd_zxy + rk2C_yyy * rk2Cd_zyy + rk2C_zyy * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xyy * rk2Cd_zxz + rk2C_yyy * rk2Cd_zyz + rk2C_zyy * rk2Cd_zzz)) + (rk2gammacu_xx * (rk2C_xxy * rk2Cd_zxx + rk2C_yxy * rk2Cd_zxy + rk2C_zxy * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xxy * rk2Cd_zxy + rk2C_yxy * rk2Cd_zyy + rk2C_zxy * rk2Cd_zyz) + rk2gammacu_xz * (rk2C_xxy * rk2Cd_zxz + rk2C_yxy * rk2Cd_zyz + rk2C_zxy * rk2Cd_zzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_zxy + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_zyy + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_zyz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_yxz + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_yyz + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_yzz);
						rk2m_Rc_yz_o0_t14_l0 = 0.5 * vector(rk2gammac_zz, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk2m_Rc_yz_o0_t13_l0 = 0.5 * vector(rk2gammac_yz, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk2m_Rc_yz_o0_t12_l0 = 0.5 * vector(rk2gammac_xz, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk2m_Rc_yz_o0_t11_l0 = 0.5 * vector(rk2gammac_zy, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk2m_Rc_yz_o0_t10_l0 = 0.5 * vector(rk2gammac_yy, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk2m_Rc_yz_o0_t9_l0 = 0.5 * vector(rk2gammac_xy, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk2m_Rc_yz_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_yz_o0_t8_m0_l0;
						rk2m_Rc_yz_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_yz_o0_t7_m0_l0;
						rk2m_Rc_yz_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_yz_o0_t6_m0_l0;
						rk2m_Rc_yz_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_yz_o0_t5_m0_l0;
						rk2m_Rc_yz_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_yz_o0_t4_m0_l0;
						rk2m_Rc_yz_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_yz_o0_t3_m0_l0;
						rk2m_Rc_yz_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_yz_o0_t2_m0_l0;
						rk2m_Rc_yz_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_yz_o0_t1_m0_l0;
						rk2m_Rc_yz_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_yz_o0_t0_m0_l0;
						rk2Rc_yz = ((((((((((((((rk2m_Rc_yz_o0_t0_l0 + rk2m_Rc_yz_o0_t1_l0) + rk2m_Rc_yz_o0_t2_l0) + rk2m_Rc_yz_o0_t3_l0) + rk2m_Rc_yz_o0_t4_l0) + rk2m_Rc_yz_o0_t5_l0) + rk2m_Rc_yz_o0_t6_l0) + rk2m_Rc_yz_o0_t7_l0) + rk2m_Rc_yz_o0_t8_l0) + rk2m_Rc_yz_o0_t9_l0) + rk2m_Rc_yz_o0_t10_l0) + rk2m_Rc_yz_o0_t11_l0) + rk2m_Rc_yz_o0_t12_l0) + rk2m_Rc_yz_o0_t13_l0) + rk2m_Rc_yz_o0_t14_l0) + rk2d_Rc_yz_o0_t15_m0_l0;
						rk2d_Rc_zz_o0_t15_m0_l0 = (rk2gammacu_zx * (rk2C_xxz * rk2Cd_xzz + rk2C_yxz * rk2Cd_yzz + rk2C_zxz * rk2Cd_zzz) + rk2gammacu_zy * (rk2C_xyz * rk2Cd_xzz + rk2C_yyz * rk2Cd_yzz + rk2C_zyz * rk2Cd_zzz) + rk2gammacu_zz * (rk2C_xzz * rk2Cd_xzz + rk2C_yzz * rk2Cd_yzz + rk2C_zzz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xxz * rk2Cd_xyz + rk2C_yxz * rk2Cd_yyz + rk2C_zxz * rk2Cd_zyz) + rk2gammacu_yy * (rk2C_xyz * rk2Cd_xyz + rk2C_yyz * rk2Cd_yyz + rk2C_zyz * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xzz * rk2Cd_xyz + rk2C_yzz * rk2Cd_yyz + rk2C_zzz * rk2Cd_zyz)) + (rk2gammacu_xx * (rk2C_xxz * rk2Cd_xxz + rk2C_yxz * rk2Cd_yxz + rk2C_zxz * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xyz * rk2Cd_xxz + rk2C_yyz * rk2Cd_yxz + rk2C_zyz * rk2Cd_zxz) + rk2gammacu_xz * (rk2C_xzz * rk2Cd_xxz + rk2C_yzz * rk2Cd_yxz + rk2C_zzz * rk2Cd_zxz)) + (rk2gammacu_zx * (rk2C_xzz * rk2Cd_zxx + rk2C_yzz * rk2Cd_zxy + rk2C_zzz * rk2Cd_zxz) + rk2gammacu_zy * (rk2C_xzz * rk2Cd_zxy + rk2C_yzz * rk2Cd_zyy + rk2C_zzz * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xzz * rk2Cd_zxz + rk2C_yzz * rk2Cd_zyz + rk2C_zzz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xyz * rk2Cd_zxx + rk2C_yyz * rk2Cd_zxy + rk2C_zyz * rk2Cd_zxz) + rk2gammacu_yy * (rk2C_xyz * rk2Cd_zxy + rk2C_yyz * rk2Cd_zyy + rk2C_zyz * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_zxz + rk2C_yyz * rk2Cd_zyz + rk2C_zyz * rk2Cd_zzz)) + (rk2gammacu_xx * (rk2C_xxz * rk2Cd_zxx + rk2C_yxz * rk2Cd_zxy + rk2C_zxz * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xxz * rk2Cd_zxy + rk2C_yxz * rk2Cd_zyy + rk2C_zxz * rk2Cd_zyz) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_zxz + rk2C_yxz * rk2Cd_zyz + rk2C_zxz * rk2Cd_zzz)) + (rk2gammacu_zx * (rk2C_xzz * rk2Cd_zxx + rk2C_yzz * rk2Cd_zxy + rk2C_zzz * rk2Cd_zxz) + rk2gammacu_zy * (rk2C_xzz * rk2Cd_zxy + rk2C_yzz * rk2Cd_zyy + rk2C_zzz * rk2Cd_zyz) + rk2gammacu_zz * (rk2C_xzz * rk2Cd_zxz + rk2C_yzz * rk2Cd_zyz + rk2C_zzz * rk2Cd_zzz)) + (rk2gammacu_yx * (rk2C_xyz * rk2Cd_zxx + rk2C_yyz * rk2Cd_zxy + rk2C_zyz * rk2Cd_zxz) + rk2gammacu_yy * (rk2C_xyz * rk2Cd_zxy + rk2C_yyz * rk2Cd_zyy + rk2C_zyz * rk2Cd_zyz) + rk2gammacu_yz * (rk2C_xyz * rk2Cd_zxz + rk2C_yyz * rk2Cd_zyz + rk2C_zyz * rk2Cd_zzz)) + (rk2gammacu_xx * (rk2C_xxz * rk2Cd_zxx + rk2C_yxz * rk2Cd_zxy + rk2C_zxz * rk2Cd_zxz) + rk2gammacu_xy * (rk2C_xxz * rk2Cd_zxy + rk2C_yxz * rk2Cd_zyy + rk2C_zxz * rk2Cd_zyz) + rk2gammacu_xz * (rk2C_xxz * rk2Cd_zxz + rk2C_yxz * rk2Cd_zyz + rk2C_zxz * rk2Cd_zzz)) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_zxz + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_zyz + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_zzz) + (0.5 * vector(rk2Gam_x, i, j, k) * rk2Cd_zxz + 0.5 * vector(rk2Gam_y, i, j, k) * rk2Cd_zyz + 0.5 * vector(rk2Gam_z, i, j, k) * rk2Cd_zzz);
						rk2m_Rc_zz_o0_t11_l0 = 0.5 * vector(rk2gammac_zz, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk2m_Rc_zz_o0_t10_l0 = 0.5 * vector(rk2gammac_yz, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk2m_Rc_zz_o0_t9_l0 = 0.5 * vector(rk2gammac_xz, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk2m_Rc_zz_o0_t8_l0 = (-0.5) * rk2gammacu_zz * d_Rc_zz_o0_t8_m0_l0;
						rk2m_Rc_zz_o0_t7_l0 = (-0.5) * rk2gammacu_zy * d_Rc_zz_o0_t7_m0_l0;
						rk2m_Rc_zz_o0_t6_l0 = (-0.5) * rk2gammacu_zx * d_Rc_zz_o0_t6_m0_l0;
						rk2m_Rc_zz_o0_t5_l0 = (-0.5) * rk2gammacu_yz * d_Rc_zz_o0_t5_m0_l0;
						rk2m_Rc_zz_o0_t4_l0 = (-0.5) * rk2gammacu_yy * d_Rc_zz_o0_t4_m0_l0;
						rk2m_Rc_zz_o0_t3_l0 = (-0.5) * rk2gammacu_yx * d_Rc_zz_o0_t3_m0_l0;
						rk2m_Rc_zz_o0_t2_l0 = (-0.5) * rk2gammacu_xz * d_Rc_zz_o0_t2_m0_l0;
						rk2m_Rc_zz_o0_t1_l0 = (-0.5) * rk2gammacu_xy * d_Rc_zz_o0_t1_m0_l0;
						rk2m_Rc_zz_o0_t0_l0 = (-0.5) * rk2gammacu_xx * d_Rc_zz_o0_t0_m0_l0;
						rk2Rc_zz = ((((((((((((((rk2m_Rc_zz_o0_t0_l0 + rk2m_Rc_zz_o0_t1_l0) + rk2m_Rc_zz_o0_t2_l0) + rk2m_Rc_zz_o0_t3_l0) + rk2m_Rc_zz_o0_t4_l0) + rk2m_Rc_zz_o0_t5_l0) + rk2m_Rc_zz_o0_t6_l0) + rk2m_Rc_zz_o0_t7_l0) + rk2m_Rc_zz_o0_t8_l0) + rk2m_Rc_zz_o0_t9_l0) + rk2m_Rc_zz_o0_t10_l0) + rk2m_Rc_zz_o0_t11_l0) + rk2m_Rc_zz_o0_t9_l0) + rk2m_Rc_zz_o0_t10_l0) + rk2m_Rc_zz_o0_t11_l0) + rk2d_Rc_zz_o0_t15_m0_l0;
						rk2Au_xx = rk2gammacu_xx * rk2Am_xx + rk2gammacu_xy * rk2Am_xy + rk2gammacu_xz * rk2Am_xz;
						rk2gammau_zx = rk2gammau_xz;
						rk2m_dalpha_xx_o0_t14_l0 = 2.0 * rk2gamma_xx * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xx_o0_t13_l0 = 2.0 * rk2gamma_xx * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xx_o0_t12_l0 = 2.0 * rk2gamma_xx * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xx_o0_t11_l0 = 2.0 * rk2gamma_xx * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xx_o0_t10_l0 = 2.0 * rk2gamma_xx * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xx_o0_t9_l0 = 2.0 * rk2gamma_xx * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xx_o0_t8_l0 = 2.0 * rk2gamma_xx * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xx_o0_t7_l0 = 2.0 * rk2gamma_xx * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xx_o0_t6_l0 = 2.0 * rk2gamma_xx * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xx_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xx_o0_t3_l0 = (-1.0) * rk2C_zxx * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xx_o0_t2_l0 = (-1.0) * rk2C_yxx * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xx_o0_t1_l0 = (-1.0) * rk2C_xxx * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_xx = (((((((((((((d_dalpha_xx_o0_t0_m0_l0 + rk2m_dalpha_xx_o0_t1_l0) + rk2m_dalpha_xx_o0_t2_l0) + rk2m_dalpha_xx_o0_t3_l0) + rk2m_dalpha_xx_o0_t4_l0) + rk2m_dalpha_xx_o0_t4_l0) + rk2m_dalpha_xx_o0_t6_l0) + rk2m_dalpha_xx_o0_t7_l0) + rk2m_dalpha_xx_o0_t8_l0) + rk2m_dalpha_xx_o0_t9_l0) + rk2m_dalpha_xx_o0_t10_l0) + rk2m_dalpha_xx_o0_t11_l0) + rk2m_dalpha_xx_o0_t12_l0) + rk2m_dalpha_xx_o0_t13_l0) + rk2m_dalpha_xx_o0_t14_l0;
						rk2m_dalpha_xz_o0_t14_l0 = 2.0 * rk2gamma_xz * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xz_o0_t13_l0 = 2.0 * rk2gamma_xz * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xz_o0_t12_l0 = 2.0 * rk2gamma_xz * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xz_o0_t11_l0 = 2.0 * rk2gamma_xz * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xz_o0_t10_l0 = 2.0 * rk2gamma_xz * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xz_o0_t9_l0 = 2.0 * rk2gamma_xz * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xz_o0_t8_l0 = 2.0 * rk2gamma_xz * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xz_o0_t7_l0 = 2.0 * rk2gamma_xz * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xz_o0_t6_l0 = 2.0 * rk2gamma_xz * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xz_o0_t3_l0 = (-1.0) * rk2C_zxz * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xz_o0_t2_l0 = (-1.0) * rk2C_yxz * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xz_o0_t1_l0 = (-1.0) * rk2C_xxz * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_xz = (((((((((((((d_dalpha_xz_o0_t0_m0_l0 + rk2m_dalpha_xz_o0_t1_l0) + rk2m_dalpha_xz_o0_t2_l0) + rk2m_dalpha_xz_o0_t3_l0) + rk2m_dalpha_xz_o0_t4_l0) + rk2m_dalpha_xz_o0_t5_l0) + rk2m_dalpha_xz_o0_t6_l0) + rk2m_dalpha_xz_o0_t7_l0) + rk2m_dalpha_xz_o0_t8_l0) + rk2m_dalpha_xz_o0_t9_l0) + rk2m_dalpha_xz_o0_t10_l0) + rk2m_dalpha_xz_o0_t11_l0) + rk2m_dalpha_xz_o0_t12_l0) + rk2m_dalpha_xz_o0_t13_l0) + rk2m_dalpha_xz_o0_t14_l0;
						rk2m_dalpha_xy_o0_t14_l0 = 2.0 * rk2gamma_xy * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xy_o0_t13_l0 = 2.0 * rk2gamma_xy * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xy_o0_t12_l0 = 2.0 * rk2gamma_xy * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xy_o0_t11_l0 = 2.0 * rk2gamma_xy * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xy_o0_t10_l0 = 2.0 * rk2gamma_xy * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xy_o0_t9_l0 = 2.0 * rk2gamma_xy * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xy_o0_t8_l0 = 2.0 * rk2gamma_xy * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xy_o0_t7_l0 = 2.0 * rk2gamma_xy * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xy_o0_t6_l0 = 2.0 * rk2gamma_xy * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xy_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_xy_o0_t3_l0 = (-1.0) * rk2C_zxy * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_xy_o0_t2_l0 = (-1.0) * rk2C_yxy * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_xy_o0_t1_l0 = (-1.0) * rk2C_xxy * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_xy = (((((((((((((d_dalpha_xy_o0_t0_m0_l0 + rk2m_dalpha_xy_o0_t1_l0) + rk2m_dalpha_xy_o0_t2_l0) + rk2m_dalpha_xy_o0_t3_l0) + rk2m_dalpha_xy_o0_t4_l0) + rk2m_dalpha_xy_o0_t5_l0) + rk2m_dalpha_xy_o0_t6_l0) + rk2m_dalpha_xy_o0_t7_l0) + rk2m_dalpha_xy_o0_t8_l0) + rk2m_dalpha_xy_o0_t9_l0) + rk2m_dalpha_xy_o0_t10_l0) + rk2m_dalpha_xy_o0_t11_l0) + rk2m_dalpha_xy_o0_t12_l0) + rk2m_dalpha_xy_o0_t13_l0) + rk2m_dalpha_xy_o0_t14_l0;
						rk2m_Rp_xx_o0_t49_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t48_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t47_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t46_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t45_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t44_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t43_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t42_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t41_l0 = (-4.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t39_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t38_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t37_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t36_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t35_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t34_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t33_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t32_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t31_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t30_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t29_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t28_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t27_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t26_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t25_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t24_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t23_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t22_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t21_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t20_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t19_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t18_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t17_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t16_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t15_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t14_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t13_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t12_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t11_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_xx_o0_t10_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_xx_o0_t9_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t8_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_xx_o0_t7_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_xx_o0_t6_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_xx_o0_t5_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_xx_o0_t4_l0 = (-2.0) * vector(rk2gammac_xx, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_xx_o0_t3_l0 = 2.0 * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xx_o0_t2_l0 = 2.0 * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xx_o0_t1_l0 = 2.0 * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xx_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
						rk2Rp_xx = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_xx_o0_t0_l0 + rk2m_Rp_xx_o0_t1_l0) + rk2m_Rp_xx_o0_t2_l0) + rk2m_Rp_xx_o0_t3_l0) + rk2m_Rp_xx_o0_t4_l0) + rk2m_Rp_xx_o0_t5_l0) + rk2m_Rp_xx_o0_t6_l0) + rk2m_Rp_xx_o0_t7_l0) + rk2m_Rp_xx_o0_t8_l0) + rk2m_Rp_xx_o0_t9_l0) + rk2m_Rp_xx_o0_t10_l0) + rk2m_Rp_xx_o0_t11_l0) + rk2m_Rp_xx_o0_t12_l0) + rk2m_Rp_xx_o0_t13_l0) + rk2m_Rp_xx_o0_t14_l0) + rk2m_Rp_xx_o0_t15_l0) + rk2m_Rp_xx_o0_t16_l0) + rk2m_Rp_xx_o0_t17_l0) + rk2m_Rp_xx_o0_t18_l0) + rk2m_Rp_xx_o0_t19_l0) + rk2m_Rp_xx_o0_t20_l0) + rk2m_Rp_xx_o0_t21_l0) + rk2m_Rp_xx_o0_t22_l0) + rk2m_Rp_xx_o0_t23_l0) + rk2m_Rp_xx_o0_t24_l0) + rk2m_Rp_xx_o0_t25_l0) + rk2m_Rp_xx_o0_t26_l0) + rk2m_Rp_xx_o0_t27_l0) + rk2m_Rp_xx_o0_t28_l0) + rk2m_Rp_xx_o0_t29_l0) + rk2m_Rp_xx_o0_t30_l0) + rk2m_Rp_xx_o0_t31_l0) + rk2m_Rp_xx_o0_t32_l0) + rk2m_Rp_xx_o0_t33_l0) + rk2m_Rp_xx_o0_t34_l0) + rk2m_Rp_xx_o0_t35_l0) + rk2m_Rp_xx_o0_t36_l0) + rk2m_Rp_xx_o0_t37_l0) + rk2m_Rp_xx_o0_t38_l0) + rk2m_Rp_xx_o0_t39_l0) + rk2m_Rp_xx_o0_t40_l0) + rk2m_Rp_xx_o0_t41_l0) + rk2m_Rp_xx_o0_t42_l0) + rk2m_Rp_xx_o0_t43_l0) + rk2m_Rp_xx_o0_t44_l0) + rk2m_Rp_xx_o0_t45_l0) + rk2m_Rp_xx_o0_t46_l0) + rk2m_Rp_xx_o0_t47_l0) + rk2m_Rp_xx_o0_t48_l0) + rk2m_Rp_xx_o0_t49_l0;
						rk2m_Rp_zz_o0_t49_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t48_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t47_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t46_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t45_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t44_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t43_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t42_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t41_l0 = (-4.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t39_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t38_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t37_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t36_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t35_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t34_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t33_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t32_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t31_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t30_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t29_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t28_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t27_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t26_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t25_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t24_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t23_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t22_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t21_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t20_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t19_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t18_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t17_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t16_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t15_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t14_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t13_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t12_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t11_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_zz_o0_t10_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_zz_o0_t9_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t8_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_zz_o0_t7_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_zz_o0_t6_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_zz_o0_t5_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_zz_o0_t4_l0 = (-2.0) * vector(rk2gammac_zz, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_zz_o0_t3_l0 = 2.0 * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_zz_o0_t2_l0 = 2.0 * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_zz_o0_t1_l0 = 2.0 * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_zz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
						rk2Rp_zz = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_zz_o0_t0_l0 + rk2m_Rp_zz_o0_t1_l0) + rk2m_Rp_zz_o0_t2_l0) + rk2m_Rp_zz_o0_t3_l0) + rk2m_Rp_zz_o0_t4_l0) + rk2m_Rp_zz_o0_t5_l0) + rk2m_Rp_zz_o0_t6_l0) + rk2m_Rp_zz_o0_t7_l0) + rk2m_Rp_zz_o0_t8_l0) + rk2m_Rp_zz_o0_t9_l0) + rk2m_Rp_zz_o0_t10_l0) + rk2m_Rp_zz_o0_t11_l0) + rk2m_Rp_zz_o0_t12_l0) + rk2m_Rp_zz_o0_t13_l0) + rk2m_Rp_zz_o0_t14_l0) + rk2m_Rp_zz_o0_t15_l0) + rk2m_Rp_zz_o0_t16_l0) + rk2m_Rp_zz_o0_t17_l0) + rk2m_Rp_zz_o0_t18_l0) + rk2m_Rp_zz_o0_t19_l0) + rk2m_Rp_zz_o0_t20_l0) + rk2m_Rp_zz_o0_t21_l0) + rk2m_Rp_zz_o0_t22_l0) + rk2m_Rp_zz_o0_t23_l0) + rk2m_Rp_zz_o0_t24_l0) + rk2m_Rp_zz_o0_t25_l0) + rk2m_Rp_zz_o0_t26_l0) + rk2m_Rp_zz_o0_t27_l0) + rk2m_Rp_zz_o0_t28_l0) + rk2m_Rp_zz_o0_t29_l0) + rk2m_Rp_zz_o0_t30_l0) + rk2m_Rp_zz_o0_t31_l0) + rk2m_Rp_zz_o0_t32_l0) + rk2m_Rp_zz_o0_t33_l0) + rk2m_Rp_zz_o0_t34_l0) + rk2m_Rp_zz_o0_t35_l0) + rk2m_Rp_zz_o0_t36_l0) + rk2m_Rp_zz_o0_t37_l0) + rk2m_Rp_zz_o0_t38_l0) + rk2m_Rp_zz_o0_t39_l0) + rk2m_Rp_zz_o0_t40_l0) + rk2m_Rp_zz_o0_t41_l0) + rk2m_Rp_zz_o0_t42_l0) + rk2m_Rp_zz_o0_t43_l0) + rk2m_Rp_zz_o0_t44_l0) + rk2m_Rp_zz_o0_t45_l0) + rk2m_Rp_zz_o0_t46_l0) + rk2m_Rp_zz_o0_t47_l0) + rk2m_Rp_zz_o0_t48_l0) + rk2m_Rp_zz_o0_t49_l0;
						rk2R_zz = rk2Rc_zz + rk2Rp_zz;
						rk2R_xx = rk2Rc_xx + rk2Rp_xx;
						rk2m_Rp_xy_o0_t49_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t48_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t47_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t46_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t45_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t44_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t43_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t42_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t41_l0 = (-4.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t39_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t38_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t37_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t36_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t35_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t34_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t33_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t32_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t31_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t30_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t29_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t28_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t27_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t26_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t25_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t24_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t23_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t22_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t21_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t20_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t19_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t18_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t17_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t16_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t15_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t14_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t13_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t12_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t11_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_xy_o0_t10_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_xy_o0_t9_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t8_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_xy_o0_t7_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_xy_o0_t6_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_xy_o0_t5_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_xy_o0_t4_l0 = (-2.0) * vector(rk2gammac_xy, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_xy_o0_t3_l0 = 2.0 * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xy_o0_t2_l0 = 2.0 * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xy_o0_t1_l0 = 2.0 * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
						rk2Rp_xy = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_xy_o0_t0_l0 + rk2m_Rp_xy_o0_t1_l0) + rk2m_Rp_xy_o0_t2_l0) + rk2m_Rp_xy_o0_t3_l0) + rk2m_Rp_xy_o0_t4_l0) + rk2m_Rp_xy_o0_t5_l0) + rk2m_Rp_xy_o0_t6_l0) + rk2m_Rp_xy_o0_t7_l0) + rk2m_Rp_xy_o0_t8_l0) + rk2m_Rp_xy_o0_t9_l0) + rk2m_Rp_xy_o0_t10_l0) + rk2m_Rp_xy_o0_t11_l0) + rk2m_Rp_xy_o0_t12_l0) + rk2m_Rp_xy_o0_t13_l0) + rk2m_Rp_xy_o0_t14_l0) + rk2m_Rp_xy_o0_t15_l0) + rk2m_Rp_xy_o0_t16_l0) + rk2m_Rp_xy_o0_t17_l0) + rk2m_Rp_xy_o0_t18_l0) + rk2m_Rp_xy_o0_t19_l0) + rk2m_Rp_xy_o0_t20_l0) + rk2m_Rp_xy_o0_t21_l0) + rk2m_Rp_xy_o0_t22_l0) + rk2m_Rp_xy_o0_t23_l0) + rk2m_Rp_xy_o0_t24_l0) + rk2m_Rp_xy_o0_t25_l0) + rk2m_Rp_xy_o0_t26_l0) + rk2m_Rp_xy_o0_t27_l0) + rk2m_Rp_xy_o0_t28_l0) + rk2m_Rp_xy_o0_t29_l0) + rk2m_Rp_xy_o0_t30_l0) + rk2m_Rp_xy_o0_t31_l0) + rk2m_Rp_xy_o0_t32_l0) + rk2m_Rp_xy_o0_t33_l0) + rk2m_Rp_xy_o0_t34_l0) + rk2m_Rp_xy_o0_t35_l0) + rk2m_Rp_xy_o0_t36_l0) + rk2m_Rp_xy_o0_t37_l0) + rk2m_Rp_xy_o0_t38_l0) + rk2m_Rp_xy_o0_t39_l0) + rk2m_Rp_xy_o0_t40_l0) + rk2m_Rp_xy_o0_t41_l0) + rk2m_Rp_xy_o0_t42_l0) + rk2m_Rp_xy_o0_t43_l0) + rk2m_Rp_xy_o0_t44_l0) + rk2m_Rp_xy_o0_t45_l0) + rk2m_Rp_xy_o0_t46_l0) + rk2m_Rp_xy_o0_t47_l0) + rk2m_Rp_xy_o0_t48_l0) + rk2m_Rp_xy_o0_t49_l0;
						rk2R_xy = rk2Rc_xy + rk2Rp_xy;
						rk2m_Rp_xz_o0_t49_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t48_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t47_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t46_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t45_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t44_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t43_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t42_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t41_l0 = (-4.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t39_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t38_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t37_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t36_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t35_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t34_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t33_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t32_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t31_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t30_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t29_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t28_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t27_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t26_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t25_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t24_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t23_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t22_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t21_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t20_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t19_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t18_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t17_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t16_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t15_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t14_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t13_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t12_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t11_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_xz_o0_t10_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_xz_o0_t9_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t8_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_xz_o0_t7_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_xz_o0_t6_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_xz_o0_t5_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_xz_o0_t4_l0 = (-2.0) * vector(rk2gammac_xz, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_xz_o0_t3_l0 = 2.0 * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_xz_o0_t2_l0 = 2.0 * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_xz_o0_t1_l0 = 2.0 * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_xz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
						rk2Rp_xz = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_xz_o0_t0_l0 + rk2m_Rp_xz_o0_t1_l0) + rk2m_Rp_xz_o0_t2_l0) + rk2m_Rp_xz_o0_t3_l0) + rk2m_Rp_xz_o0_t4_l0) + rk2m_Rp_xz_o0_t5_l0) + rk2m_Rp_xz_o0_t6_l0) + rk2m_Rp_xz_o0_t7_l0) + rk2m_Rp_xz_o0_t8_l0) + rk2m_Rp_xz_o0_t9_l0) + rk2m_Rp_xz_o0_t10_l0) + rk2m_Rp_xz_o0_t11_l0) + rk2m_Rp_xz_o0_t12_l0) + rk2m_Rp_xz_o0_t13_l0) + rk2m_Rp_xz_o0_t14_l0) + rk2m_Rp_xz_o0_t15_l0) + rk2m_Rp_xz_o0_t16_l0) + rk2m_Rp_xz_o0_t17_l0) + rk2m_Rp_xz_o0_t18_l0) + rk2m_Rp_xz_o0_t19_l0) + rk2m_Rp_xz_o0_t20_l0) + rk2m_Rp_xz_o0_t21_l0) + rk2m_Rp_xz_o0_t22_l0) + rk2m_Rp_xz_o0_t23_l0) + rk2m_Rp_xz_o0_t24_l0) + rk2m_Rp_xz_o0_t25_l0) + rk2m_Rp_xz_o0_t26_l0) + rk2m_Rp_xz_o0_t27_l0) + rk2m_Rp_xz_o0_t28_l0) + rk2m_Rp_xz_o0_t29_l0) + rk2m_Rp_xz_o0_t30_l0) + rk2m_Rp_xz_o0_t31_l0) + rk2m_Rp_xz_o0_t32_l0) + rk2m_Rp_xz_o0_t33_l0) + rk2m_Rp_xz_o0_t34_l0) + rk2m_Rp_xz_o0_t35_l0) + rk2m_Rp_xz_o0_t36_l0) + rk2m_Rp_xz_o0_t37_l0) + rk2m_Rp_xz_o0_t38_l0) + rk2m_Rp_xz_o0_t39_l0) + rk2m_Rp_xz_o0_t40_l0) + rk2m_Rp_xz_o0_t41_l0) + rk2m_Rp_xz_o0_t42_l0) + rk2m_Rp_xz_o0_t43_l0) + rk2m_Rp_xz_o0_t44_l0) + rk2m_Rp_xz_o0_t45_l0) + rk2m_Rp_xz_o0_t46_l0) + rk2m_Rp_xz_o0_t47_l0) + rk2m_Rp_xz_o0_t48_l0) + rk2m_Rp_xz_o0_t49_l0;
						rk2R_xz = rk2Rc_xz + rk2Rp_xz;
						rk2m_Rp_yy_o0_t49_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t48_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t47_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t46_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t45_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t44_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t43_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t42_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t41_l0 = (-4.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t39_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t38_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t37_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t36_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t35_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t34_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t33_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t32_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t31_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t30_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t29_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t28_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t27_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t26_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t25_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t24_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t23_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t22_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t21_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t20_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t19_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t18_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t17_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t16_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t15_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t14_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t13_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t12_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t11_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_yy_o0_t10_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_yy_o0_t9_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t8_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_yy_o0_t7_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_yy_o0_t6_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_yy_o0_t5_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_yy_o0_t4_l0 = (-2.0) * vector(rk2gammac_yy, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_yy_o0_t3_l0 = 2.0 * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yy_o0_t2_l0 = 2.0 * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yy_o0_t1_l0 = 2.0 * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
						rk2Rp_yy = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_yy_o0_t0_l0 + rk2m_Rp_yy_o0_t1_l0) + rk2m_Rp_yy_o0_t2_l0) + rk2m_Rp_yy_o0_t3_l0) + rk2m_Rp_yy_o0_t4_l0) + rk2m_Rp_yy_o0_t5_l0) + rk2m_Rp_yy_o0_t6_l0) + rk2m_Rp_yy_o0_t7_l0) + rk2m_Rp_yy_o0_t8_l0) + rk2m_Rp_yy_o0_t9_l0) + rk2m_Rp_yy_o0_t10_l0) + rk2m_Rp_yy_o0_t11_l0) + rk2m_Rp_yy_o0_t12_l0) + rk2m_Rp_yy_o0_t13_l0) + rk2m_Rp_yy_o0_t14_l0) + rk2m_Rp_yy_o0_t15_l0) + rk2m_Rp_yy_o0_t16_l0) + rk2m_Rp_yy_o0_t17_l0) + rk2m_Rp_yy_o0_t18_l0) + rk2m_Rp_yy_o0_t19_l0) + rk2m_Rp_yy_o0_t20_l0) + rk2m_Rp_yy_o0_t21_l0) + rk2m_Rp_yy_o0_t22_l0) + rk2m_Rp_yy_o0_t23_l0) + rk2m_Rp_yy_o0_t24_l0) + rk2m_Rp_yy_o0_t25_l0) + rk2m_Rp_yy_o0_t26_l0) + rk2m_Rp_yy_o0_t27_l0) + rk2m_Rp_yy_o0_t28_l0) + rk2m_Rp_yy_o0_t29_l0) + rk2m_Rp_yy_o0_t30_l0) + rk2m_Rp_yy_o0_t31_l0) + rk2m_Rp_yy_o0_t32_l0) + rk2m_Rp_yy_o0_t33_l0) + rk2m_Rp_yy_o0_t34_l0) + rk2m_Rp_yy_o0_t35_l0) + rk2m_Rp_yy_o0_t36_l0) + rk2m_Rp_yy_o0_t37_l0) + rk2m_Rp_yy_o0_t38_l0) + rk2m_Rp_yy_o0_t39_l0) + rk2m_Rp_yy_o0_t40_l0) + rk2m_Rp_yy_o0_t41_l0) + rk2m_Rp_yy_o0_t42_l0) + rk2m_Rp_yy_o0_t43_l0) + rk2m_Rp_yy_o0_t44_l0) + rk2m_Rp_yy_o0_t45_l0) + rk2m_Rp_yy_o0_t46_l0) + rk2m_Rp_yy_o0_t47_l0) + rk2m_Rp_yy_o0_t48_l0) + rk2m_Rp_yy_o0_t49_l0;
						rk2R_yy = rk2Rc_yy + rk2Rp_yy;
						rk2m_Rp_yz_o0_t49_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t48_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t47_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t46_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t45_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t44_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t43_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t42_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t41_l0 = (-4.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t39_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zz * rk2C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t38_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zz * rk2C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t37_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zz * rk2C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t36_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zy * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t35_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zy * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t34_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zy * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t33_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zx * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t32_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zx * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t31_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zx * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t30_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yz * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t29_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yz * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t28_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yz * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t27_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yy * rk2C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t26_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yy * rk2C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t25_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yy * rk2C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t24_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yx * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t23_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yx * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t22_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yx * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t21_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xz * rk2C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t20_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xz * rk2C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t19_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xz * rk2C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t18_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xy * rk2C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t17_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xy * rk2C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t16_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xy * rk2C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t15_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xx * rk2C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t14_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xx * rk2C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t13_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xx * rk2C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t12_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t11_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk2m_Rp_yz_o0_t10_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk2m_Rp_yz_o0_t9_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t8_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk2m_Rp_yz_o0_t7_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk2m_Rp_yz_o0_t6_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk2m_Rp_yz_o0_t5_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk2m_Rp_yz_o0_t4_l0 = (-2.0) * vector(rk2gammac_yz, i, j, k) * rk2gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk2m_Rp_yz_o0_t3_l0 = 2.0 * rk2C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk2m_Rp_yz_o0_t2_l0 = 2.0 * rk2C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk2m_Rp_yz_o0_t1_l0 = 2.0 * rk2C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk2m_Rp_yz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
						rk2Rp_yz = ((((((((((((((((((((((((((((((((((((((((((((((((rk2m_Rp_yz_o0_t0_l0 + rk2m_Rp_yz_o0_t1_l0) + rk2m_Rp_yz_o0_t2_l0) + rk2m_Rp_yz_o0_t3_l0) + rk2m_Rp_yz_o0_t4_l0) + rk2m_Rp_yz_o0_t5_l0) + rk2m_Rp_yz_o0_t6_l0) + rk2m_Rp_yz_o0_t7_l0) + rk2m_Rp_yz_o0_t8_l0) + rk2m_Rp_yz_o0_t9_l0) + rk2m_Rp_yz_o0_t10_l0) + rk2m_Rp_yz_o0_t11_l0) + rk2m_Rp_yz_o0_t12_l0) + rk2m_Rp_yz_o0_t13_l0) + rk2m_Rp_yz_o0_t14_l0) + rk2m_Rp_yz_o0_t15_l0) + rk2m_Rp_yz_o0_t16_l0) + rk2m_Rp_yz_o0_t17_l0) + rk2m_Rp_yz_o0_t18_l0) + rk2m_Rp_yz_o0_t19_l0) + rk2m_Rp_yz_o0_t20_l0) + rk2m_Rp_yz_o0_t21_l0) + rk2m_Rp_yz_o0_t22_l0) + rk2m_Rp_yz_o0_t23_l0) + rk2m_Rp_yz_o0_t24_l0) + rk2m_Rp_yz_o0_t25_l0) + rk2m_Rp_yz_o0_t26_l0) + rk2m_Rp_yz_o0_t27_l0) + rk2m_Rp_yz_o0_t28_l0) + rk2m_Rp_yz_o0_t29_l0) + rk2m_Rp_yz_o0_t30_l0) + rk2m_Rp_yz_o0_t31_l0) + rk2m_Rp_yz_o0_t32_l0) + rk2m_Rp_yz_o0_t33_l0) + rk2m_Rp_yz_o0_t34_l0) + rk2m_Rp_yz_o0_t35_l0) + rk2m_Rp_yz_o0_t36_l0) + rk2m_Rp_yz_o0_t37_l0) + rk2m_Rp_yz_o0_t38_l0) + rk2m_Rp_yz_o0_t39_l0) + rk2m_Rp_yz_o0_t40_l0) + rk2m_Rp_yz_o0_t41_l0) + rk2m_Rp_yz_o0_t42_l0) + rk2m_Rp_yz_o0_t43_l0) + rk2m_Rp_yz_o0_t44_l0) + rk2m_Rp_yz_o0_t45_l0) + rk2m_Rp_yz_o0_t46_l0) + rk2m_Rp_yz_o0_t47_l0) + rk2m_Rp_yz_o0_t48_l0) + rk2m_Rp_yz_o0_t49_l0;
						rk2R_yz = rk2Rc_yz + rk2Rp_yz;
						rk2R = rk2gammau_xx * rk2R_xx + rk2gammau_yy * rk2R_yy + rk2gammau_zz * rk2R_zz + 2.0 * (rk2gammau_xy * rk2R_xy + rk2gammau_xz * rk2R_xz + rk2gammau_yz * rk2R_yz);
						rk2m_dalpha_yz_o0_t14_l0 = 2.0 * rk2gamma_yz * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yz_o0_t13_l0 = 2.0 * rk2gamma_yz * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yz_o0_t12_l0 = 2.0 * rk2gamma_yz * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yz_o0_t11_l0 = 2.0 * rk2gamma_yz * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yz_o0_t10_l0 = 2.0 * rk2gamma_yz * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yz_o0_t9_l0 = 2.0 * rk2gamma_yz * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yz_o0_t8_l0 = 2.0 * rk2gamma_yz * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yz_o0_t7_l0 = 2.0 * rk2gamma_yz * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yz_o0_t6_l0 = 2.0 * rk2gamma_yz * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yz_o0_t3_l0 = (-1.0) * rk2C_zyz * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yz_o0_t2_l0 = (-1.0) * rk2C_yyz * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yz_o0_t1_l0 = (-1.0) * rk2C_xyz * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_yz = (((((((((((((d_dalpha_yz_o0_t0_m0_l0 + rk2m_dalpha_yz_o0_t1_l0) + rk2m_dalpha_yz_o0_t2_l0) + rk2m_dalpha_yz_o0_t3_l0) + rk2m_dalpha_yz_o0_t4_l0) + rk2m_dalpha_yz_o0_t5_l0) + rk2m_dalpha_yz_o0_t6_l0) + rk2m_dalpha_yz_o0_t7_l0) + rk2m_dalpha_yz_o0_t8_l0) + rk2m_dalpha_yz_o0_t9_l0) + rk2m_dalpha_yz_o0_t10_l0) + rk2m_dalpha_yz_o0_t11_l0) + rk2m_dalpha_yz_o0_t12_l0) + rk2m_dalpha_yz_o0_t13_l0) + rk2m_dalpha_yz_o0_t14_l0;
						rk2m_dalpha_yy_o0_t14_l0 = 2.0 * rk2gamma_yy * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yy_o0_t13_l0 = 2.0 * rk2gamma_yy * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yy_o0_t12_l0 = 2.0 * rk2gamma_yy * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yy_o0_t11_l0 = 2.0 * rk2gamma_yy * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yy_o0_t10_l0 = 2.0 * rk2gamma_yy * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yy_o0_t9_l0 = 2.0 * rk2gamma_yy * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yy_o0_t8_l0 = 2.0 * rk2gamma_yy * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yy_o0_t7_l0 = 2.0 * rk2gamma_yy * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yy_o0_t6_l0 = 2.0 * rk2gamma_yy * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_yy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yy_o0_t3_l0 = (-1.0) * rk2C_zyy * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_yy_o0_t2_l0 = (-1.0) * rk2C_yyy * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_yy_o0_t1_l0 = (-1.0) * rk2C_xyy * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_yy = (((((((((((((d_dalpha_yy_o0_t0_m0_l0 + rk2m_dalpha_yy_o0_t1_l0) + rk2m_dalpha_yy_o0_t2_l0) + rk2m_dalpha_yy_o0_t3_l0) + rk2m_dalpha_yy_o0_t4_l0) + rk2m_dalpha_yy_o0_t4_l0) + rk2m_dalpha_yy_o0_t6_l0) + rk2m_dalpha_yy_o0_t7_l0) + rk2m_dalpha_yy_o0_t8_l0) + rk2m_dalpha_yy_o0_t9_l0) + rk2m_dalpha_yy_o0_t10_l0) + rk2m_dalpha_yy_o0_t11_l0) + rk2m_dalpha_yy_o0_t12_l0) + rk2m_dalpha_yy_o0_t13_l0) + rk2m_dalpha_yy_o0_t14_l0;
						rk2m_dalpha_zz_o0_t14_l0 = 2.0 * rk2gamma_zz * rk2gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_zz_o0_t13_l0 = 2.0 * rk2gamma_zz * rk2gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_zz_o0_t12_l0 = 2.0 * rk2gamma_zz * rk2gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_zz_o0_t11_l0 = 2.0 * rk2gamma_zz * rk2gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_zz_o0_t10_l0 = 2.0 * rk2gamma_zz * rk2gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_zz_o0_t9_l0 = 2.0 * rk2gamma_zz * rk2gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_zz_o0_t8_l0 = 2.0 * rk2gamma_zz * rk2gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_zz_o0_t7_l0 = 2.0 * rk2gamma_zz * rk2gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_zz_o0_t6_l0 = 2.0 * rk2gamma_zz * rk2gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk2m_dalpha_zz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_zz_o0_t3_l0 = (-1.0) * rk2C_zzz * d_dalpha_xx_o0_t3_m0_l0;
						rk2m_dalpha_zz_o0_t2_l0 = (-1.0) * rk2C_yzz * d_dalpha_xx_o0_t2_m0_l0;
						rk2m_dalpha_zz_o0_t1_l0 = (-1.0) * rk2C_xzz * d_dalpha_xx_o0_t1_m0_l0;
						rk2dalpha_zz = (((((((((((((d_dalpha_zz_o0_t0_m0_l0 + rk2m_dalpha_zz_o0_t1_l0) + rk2m_dalpha_zz_o0_t2_l0) + rk2m_dalpha_zz_o0_t3_l0) + rk2m_dalpha_zz_o0_t4_l0) + rk2m_dalpha_zz_o0_t4_l0) + rk2m_dalpha_zz_o0_t6_l0) + rk2m_dalpha_zz_o0_t7_l0) + rk2m_dalpha_zz_o0_t8_l0) + rk2m_dalpha_zz_o0_t9_l0) + rk2m_dalpha_zz_o0_t10_l0) + rk2m_dalpha_zz_o0_t11_l0) + rk2m_dalpha_zz_o0_t12_l0) + rk2m_dalpha_zz_o0_t13_l0) + rk2m_dalpha_zz_o0_t14_l0;
						rk2trdalpha = rk2gammau_xx * rk2dalpha_xx + 2.0 * rk2gammau_xy * rk2dalpha_xy + 2.0 * rk2gammau_xz * rk2dalpha_xz + rk2gammau_yy * rk2dalpha_yy + 2.0 * rk2gammau_yz * rk2dalpha_yz + rk2gammau_zz * rk2dalpha_zz;
						rk2Psi1TF_yz = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_yz) + vector(rk2alpha, i, j, k) * rk2R_yz + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						rk2Psi1TF_yy = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_yy) + vector(rk2alpha, i, j, k) * rk2R_yy + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						rk2Psi1TF_xy = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_xy) + vector(rk2alpha, i, j, k) * rk2R_xy + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						rk2Psi1TF_xx = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_xx) + vector(rk2alpha, i, j, k) * rk2R_xx + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						rk2Psi1TF_xz = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_xz) + vector(rk2alpha, i, j, k) * rk2R_xz + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						rk2Psi1TF_zz = exp(-4.0 * vector(rk2Phi, i, j, k)) * ((-rk2dalpha_zz) + vector(rk2alpha, i, j, k) * rk2R_zz + 1.0 / 3.0 * rk2trdalpha - 1.0 / 3.0 * vector(rk2alpha, i, j, k) * rk2R);
						d_gammac_xx_o2_t3_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_xx, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_xx, i, j, k) * rk2div_beta;
						d_gammac_xy_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_xy, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_xy, i, j, k) * rk2div_beta;
						d_gammac_xz_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_xz, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_xz, i, j, k) * rk2div_beta;
						d_gammac_yy_o2_t3_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_yy, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_yy, i, j, k) * rk2div_beta;
						d_gammac_yx_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_xy, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_yx, i, j, k) * rk2div_beta;
						d_gammac_yz_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_yz, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_yz, i, j, k) * rk2div_beta;
						d_gammac_zz_o2_t3_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_zz, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_zz, i, j, k) * rk2div_beta;
						d_gammac_zx_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_xz, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_zx, i, j, k) * rk2div_beta;
						d_gammac_zy_o2_t6_m0_l0 = (-2.0) * vector(rk2alpha, i, j, k) * vector(rk2A_yz, i, j, k) + (-0.6666666666666667) * vector(rk2gammac_zy, i, j, k) * rk2div_beta;
						d_A_xx_o2_t3_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_xx, i, j, k) - 2.0 * (vector(rk2A_xx, i, j, k) * rk2Am_xx + vector(rk2A_xy, i, j, k) * rk2Am_yx + vector(rk2A_xz, i, j, k) * rk2Am_zx)) + rk2Psi1TF_xx + (-0.6666666666666667) * vector(rk2A_xx, i, j, k) * rk2div_beta;
						d_A_xy_o2_t6_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_xy, i, j, k) - 2.0 * (vector(rk2A_xx, i, j, k) * rk2Am_xy + vector(rk2A_xy, i, j, k) * rk2Am_yy + vector(rk2A_xz, i, j, k) * rk2Am_zy)) + rk2Psi1TF_xy + (-0.6666666666666667) * vector(rk2A_xy, i, j, k) * rk2div_beta;
						d_A_xz_o2_t6_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_xz, i, j, k) - 2.0 * (vector(rk2A_xx, i, j, k) * rk2Am_xz + vector(rk2A_xy, i, j, k) * rk2Am_yz + vector(rk2A_xz, i, j, k) * rk2Am_zz)) + rk2Psi1TF_xz + (-0.6666666666666667) * vector(rk2A_xz, i, j, k) * rk2div_beta;
						d_A_yy_o2_t3_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_yy, i, j, k) - 2.0 * (vector(rk2A_xy, i, j, k) * rk2Am_xy + vector(rk2A_yy, i, j, k) * rk2Am_yy + vector(rk2A_yz, i, j, k) * rk2Am_zy)) + rk2Psi1TF_yy + (-0.6666666666666667) * vector(rk2A_yy, i, j, k) * rk2div_beta;
						d_A_yz_o2_t6_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_yz, i, j, k) - 2.0 * (vector(rk2A_xy, i, j, k) * rk2Am_xz + vector(rk2A_yy, i, j, k) * rk2Am_yz + vector(rk2A_yz, i, j, k) * rk2Am_zz)) + rk2Psi1TF_yz + (-0.6666666666666667) * vector(rk2A_yz, i, j, k) * rk2div_beta;
						d_A_zz_o2_t3_m0_l0 = vector(rk2alpha, i, j, k) * (vector(rk2trK, i, j, k) * vector(rk2A_zz, i, j, k) - 2.0 * (vector(rk2A_xz, i, j, k) * rk2Am_xz + vector(rk2A_yz, i, j, k) * rk2Am_yz + vector(rk2A_zz, i, j, k) * rk2Am_zz)) + rk2Psi1TF_zz + (-0.6666666666666667) * vector(rk2A_zz, i, j, k) * rk2div_beta;
						d_Phi_o2_t0_m0_l0 = (-0.16666666666666666) * vector(rk2alpha, i, j, k) * vector(rk2trK, i, j, k) + 0.1666666666666666 * rk2div_beta;
						d_trK_o2_t0_m0_l0 = 0.166666666666666 * rk2div_beta + vector(rk2alpha, i, j, k) * (vector(rk2A_xx, i, j, k) * rk2Au_xx + vector(rk2A_yy, i, j, k) * rk2Au_yy + vector(rk2A_zz, i, j, k) * rk2Au_zz + 2.0 * (vector(rk2A_xy, i, j, k) * rk2Au_xy + vector(rk2A_xz, i, j, k) * rk2Au_xz + vector(rk2A_yz, i, j, k) * rk2Au_yz) + 0.3333333333333 * (vector(rk2trK, i, j, k) * vector(rk2trK, i, j, k))) + (-(rk2gammau_xx * rk2dalpha_xx + rk2gammau_yy * rk2dalpha_yy + rk2gammau_zz * rk2dalpha_zz + 2.0 * rk2gammau_xy * rk2dalpha_xy + 2.0 * rk2gammau_xz * rk2dalpha_xz + 2.0 * rk2gammau_yz * rk2dalpha_yz));
						d_beta_x_o0_t0_m0_l0 = 0.0;
						d_alpha_o2_t0_m0_l0 = (-vector(rk2alpha, i, j, k) * vector(rk2alpha, i, j, k) * rk2falpha * vector(rk2trK, i, j, k)) + 0.166666666666 * rk2div_beta;
						d_Gam_x_o0_t33_m0_l0 = 2.0 * vector(rk2alpha, i, j, k) * (rk2C_xxx * rk2Au_xx + rk2C_xyy * rk2Au_yy + rk2C_xzz * rk2Au_zz + 2.0 * rk2C_xxy * rk2Au_xy + 2.0 * rk2C_xxz * rk2Au_xz + 2.0 * rk2C_xyz * rk2Au_yz) + 0.666666666666 * vector(rk2Gam_x, i, j, k) * rk2div_beta;
						d_Gam_y_o0_t33_m0_l0 = 2.0 * vector(rk2alpha, i, j, k) * (rk2C_yxx * rk2Au_xx + rk2C_yyy * rk2Au_yy + rk2C_yzz * rk2Au_zz + 2.0 * rk2C_yxy * rk2Au_xy + 2.0 * rk2C_yxz * rk2Au_xz + 2.0 * rk2C_yyz * rk2Au_yz) + 0.666666666666 * vector(rk2Gam_y, i, j, k) * rk2div_beta;
						d_Gam_z_o0_t33_m0_l0 = 2.0 * vector(rk2alpha, i, j, k) * (rk2C_zxx * rk2Au_xx + rk2C_zyy * rk2Au_yy + rk2C_zzz * rk2Au_zz + 2.0 * rk2C_zxy * rk2Au_xy + 2.0 * rk2C_zxz * rk2Au_xz + 2.0 * rk2C_zyz * rk2Au_yz) + 0.666666666666 * vector(rk2Gam_z, i, j, k) * rk2div_beta;
						m_Gam_z_o0_t32_l0 = (-2.0) * rk2Au_zz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_z_o0_t31_l0 = (-2.0) * rk2Au_yz * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_z_o0_t30_l0 = (-2.0) * rk2Au_xz * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_z_o0_t29_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_zz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_z_o0_t28_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_zy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_z_o0_t27_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_zx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_z_o0_t26_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_zz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_z_o0_t25_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_yz * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_z_o0_t24_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_xz * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_z_o0_t23_l0 = (-1.0) * vector(rk2Gam_z, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_Gam_z_o0_t22_l0 = (-1.0) * vector(rk2Gam_y, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_Gam_z_o0_t21_l0 = (-1.0) * vector(rk2Gam_x, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_Gam_z_o0_t20_l0 = vector(rk2beta_z, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Gam_z_o0_t19_l0 = vector(rk2beta_y, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Gam_z_o0_t18_l0 = vector(rk2beta_x, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Gam_z_o0_t17_l0 = 0.3333333333333 * rk2gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t16_l0 = 0.3333333333333 * rk2gammacu_zz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_z_o0_t15_l0 = 0.3333333333333 * rk2gammacu_zz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_z_o0_t14_l0 = 0.3333333333333 * rk2gammacu_zy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t13_l0 = 0.3333333333333 * rk2gammacu_zy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_z_o0_t12_l0 = 0.3333333333333 * rk2gammacu_zy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_z_o0_t11_l0 = 0.3333333333333 * rk2gammacu_zx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t10_l0 = 0.3333333333333 * rk2gammacu_zx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_z_o0_t9_l0 = 0.3333333333333 * rk2gammacu_zx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_z_o0_t8_l0 = rk2gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t7_l0 = rk2gammacu_zy * d_Gam_z_o0_t7_m0_l0;
						m_Gam_z_o0_t6_l0 = rk2gammacu_zx * d_Gam_z_o0_t6_m0_l0;
						m_Gam_z_o0_t5_l0 = rk2gammacu_yz * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t4_l0 = rk2gammacu_yy * d_Gam_z_o0_t4_m0_l0;
						m_Gam_z_o0_t3_l0 = rk2gammacu_yx * d_Gam_z_o0_t3_m0_l0;
						m_Gam_z_o0_t2_l0 = rk2gammacu_xz * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t1_l0 = rk2gammacu_xy * d_Gam_z_o0_t1_m0_l0;
						m_Gam_z_o0_t0_l0 = rk2gammacu_xx * d_Gam_z_o0_t0_m0_l0;
						m_Gam_y_o0_t32_l0 = (-2.0) * rk2Au_yz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_y_o0_t31_l0 = (-2.0) * rk2Au_yy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_y_o0_t30_l0 = (-2.0) * rk2Au_xy * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_y_o0_t29_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_yz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_y_o0_t28_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_yy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_y_o0_t27_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_yx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_y_o0_t26_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_yz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_y_o0_t25_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_yy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_y_o0_t24_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_xy * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_y_o0_t23_l0 = (-1.0) * vector(rk2Gam_z, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_Gam_y_o0_t22_l0 = (-1.0) * vector(rk2Gam_y, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_Gam_y_o0_t21_l0 = (-1.0) * vector(rk2Gam_x, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_Gam_y_o0_t20_l0 = vector(rk2beta_z, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Gam_y_o0_t19_l0 = vector(rk2beta_y, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Gam_y_o0_t18_l0 = vector(rk2beta_x, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Gam_y_o0_t17_l0 = 0.3333333333333 * rk2gammacu_yz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_y_o0_t16_l0 = 0.3333333333333 * rk2gammacu_yz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t15_l0 = 0.3333333333333 * rk2gammacu_yz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_y_o0_t14_l0 = 0.3333333333333 * rk2gammacu_yy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_y_o0_t13_l0 = 0.3333333333333 * rk2gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t12_l0 = 0.3333333333333 * rk2gammacu_yy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_y_o0_t11_l0 = 0.3333333333333 * rk2gammacu_yx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_y_o0_t10_l0 = 0.3333333333333 * rk2gammacu_yx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t9_l0 = 0.3333333333333 * rk2gammacu_yx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_y_o0_t8_l0 = rk2gammacu_zz * d_Gam_y_o0_t8_m0_l0;
						m_Gam_y_o0_t7_l0 = rk2gammacu_zy * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t6_l0 = rk2gammacu_zx * d_Gam_y_o0_t6_m0_l0;
						m_Gam_y_o0_t5_l0 = rk2gammacu_yz * d_Gam_y_o0_t5_m0_l0;
						m_Gam_y_o0_t4_l0 = rk2gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t3_l0 = rk2gammacu_yx * d_Gam_y_o0_t3_m0_l0;
						m_Gam_y_o0_t2_l0 = rk2gammacu_xz * d_Gam_y_o0_t2_m0_l0;
						m_Gam_y_o0_t1_l0 = rk2gammacu_xy * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t0_l0 = rk2gammacu_xx * d_Gam_y_o0_t0_m0_l0;
						m_Gam_x_o0_t32_l0 = (-2.0) * rk2Au_xz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_x_o0_t31_l0 = (-2.0) * rk2Au_xy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_x_o0_t30_l0 = (-2.0) * rk2Au_xx * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_x_o0_t29_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_xz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_x_o0_t28_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_xy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_x_o0_t27_l0 = (-2.0) * vector(rk2alpha, i, j, k) * 0.666666666666 * rk2gammacu_xx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_x_o0_t26_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_xz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_x_o0_t25_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_xy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t24_l0 = 2.0 * vector(rk2alpha, i, j, k) * 6.0 * rk2Au_xx * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_x_o0_t23_l0 = (-1.0) * vector(rk2Gam_z, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_Gam_x_o0_t22_l0 = (-1.0) * vector(rk2Gam_y, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_Gam_x_o0_t21_l0 = (-1.0) * vector(rk2Gam_x, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_Gam_x_o0_t20_l0 = vector(rk2beta_z, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Gam_x_o0_t19_l0 = vector(rk2beta_y, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Gam_x_o0_t18_l0 = vector(rk2beta_x, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t17_l0 = 0.3333333333333 * rk2gammacu_xz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_x_o0_t16_l0 = 0.3333333333333 * rk2gammacu_xz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_x_o0_t15_l0 = 0.3333333333333 * rk2gammacu_xz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t14_l0 = 0.3333333333333 * rk2gammacu_xy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_x_o0_t13_l0 = 0.3333333333333 * rk2gammacu_xy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_x_o0_t12_l0 = 0.3333333333333 * rk2gammacu_xy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t11_l0 = 0.3333333333333 * rk2gammacu_xx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_x_o0_t10_l0 = 0.3333333333333 * rk2gammacu_xx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_x_o0_t9_l0 = 0.3333333333333 * rk2gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_x_o0_t8_l0 = rk2gammacu_zz * d_Gam_x_o0_t8_m0_l0;
						m_Gam_x_o0_t7_l0 = rk2gammacu_zy * d_Gam_x_o0_t7_m0_l0;
						m_Gam_x_o0_t6_l0 = rk2gammacu_zx * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t5_l0 = rk2gammacu_yz * d_Gam_x_o0_t5_m0_l0;
						m_Gam_x_o0_t4_l0 = rk2gammacu_yy * d_Gam_x_o0_t4_m0_l0;
						m_Gam_x_o0_t3_l0 = rk2gammacu_yx * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t2_l0 = rk2gammacu_xz * d_Gam_x_o0_t2_m0_l0;
						m_Gam_x_o0_t1_l0 = rk2gammacu_xy * d_Gam_x_o0_t1_m0_l0;
						m_Gam_x_o0_t0_l0 = rk2gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_alpha_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_alpha_o1_t2_m0_l0;
						m_alpha_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_alpha_o1_t1_m0_l0;
						m_alpha_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_alpha_o1_t0_m0_l0;
						m_alpha_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_alpha_o0_t2_m0_l0;
						m_alpha_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_alpha_o0_t1_m0_l0;
						m_alpha_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_alpha_o0_t0_m0_l0;
						m_trK_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_trK_o1_t2_m0_l0;
						m_trK_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_trK_o1_t1_m0_l0;
						m_trK_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_trK_o1_t0_m0_l0;
						m_trK_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_trK_o0_t2_m0_l0;
						m_trK_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_trK_o0_t1_m0_l0;
						m_trK_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_trK_o0_t0_m0_l0;
						m_Phi_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_Phi_o1_t2_m0_l0;
						m_Phi_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_Phi_o1_t1_m0_l0;
						m_Phi_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_Phi_o1_t0_m0_l0;
						m_Phi_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_Phi_o0_t2_m0_l0;
						m_Phi_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_Phi_o0_t1_m0_l0;
						m_Phi_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_Phi_o0_t0_m0_l0;
						m_A_zz_o2_t2_l0 = 2.0 * vector(rk2A_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_zz_o2_t1_l0 = 2.0 * vector(rk2A_yz, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_zz_o2_t0_l0 = 2.0 * vector(rk2A_xz, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_zz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_zz_o1_t2_m0_l0;
						m_A_zz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_zz_o1_t1_m0_l0;
						m_A_zz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_zz_o1_t0_m0_l0;
						m_A_zz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_zz_o0_t2_m0_l0;
						m_A_zz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_zz_o0_t1_m0_l0;
						m_A_zz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_zz_o0_t0_m0_l0;
						m_A_yz_o2_t5_l0 = vector(rk2A_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yz_o2_t4_l0 = vector(rk2A_yz, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yz_o2_t3_l0 = vector(rk2A_xz, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yz_o2_t2_l0 = vector(rk2A_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_yz_o2_t1_l0 = vector(rk2A_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_yz_o2_t0_l0 = vector(rk2A_xy, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_yz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_yz_o1_t2_m0_l0;
						m_A_yz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_yz_o1_t1_m0_l0;
						m_A_yz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_yz_o1_t0_m0_l0;
						m_A_yz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_yz_o0_t2_m0_l0;
						m_A_yz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_yz_o0_t1_m0_l0;
						m_A_yz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_yz_o0_t0_m0_l0;
						m_A_yy_o2_t2_l0 = 2.0 * vector(rk2A_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yy_o2_t1_l0 = 2.0 * vector(rk2A_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yy_o2_t0_l0 = 2.0 * vector(rk2A_xy, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yy_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_yy_o1_t2_m0_l0;
						m_A_yy_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_yy_o1_t1_m0_l0;
						m_A_yy_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_yy_o1_t0_m0_l0;
						m_A_yy_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_yy_o0_t2_m0_l0;
						m_A_yy_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_yy_o0_t1_m0_l0;
						m_A_yy_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_yy_o0_t0_m0_l0;
						m_A_xz_o2_t5_l0 = vector(rk2A_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xz_o2_t4_l0 = vector(rk2A_yz, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xz_o2_t3_l0 = vector(rk2A_xz, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xz_o2_t2_l0 = vector(rk2A_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_xz_o2_t1_l0 = vector(rk2A_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_xz_o2_t0_l0 = vector(rk2A_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_xz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_xz_o1_t2_m0_l0;
						m_A_xz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_xz_o1_t1_m0_l0;
						m_A_xz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_xz_o1_t0_m0_l0;
						m_A_xz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_xz_o0_t2_m0_l0;
						m_A_xz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_xz_o0_t1_m0_l0;
						m_A_xz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_xz_o0_t0_m0_l0;
						m_A_xy_o2_t5_l0 = vector(rk2A_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xy_o2_t4_l0 = vector(rk2A_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xy_o2_t3_l0 = vector(rk2A_xy, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xy_o2_t2_l0 = vector(rk2A_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_xy_o2_t1_l0 = vector(rk2A_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_xy_o2_t0_l0 = vector(rk2A_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_xy_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_xy_o1_t2_m0_l0;
						m_A_xy_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_xy_o1_t1_m0_l0;
						m_A_xy_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_xy_o1_t0_m0_l0;
						m_A_xy_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_xy_o0_t2_m0_l0;
						m_A_xy_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_xy_o0_t1_m0_l0;
						m_A_xy_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_xy_o0_t0_m0_l0;
						m_A_xx_o2_t2_l0 = 2.0 * vector(rk2A_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xx_o2_t1_l0 = 2.0 * vector(rk2A_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xx_o2_t0_l0 = 2.0 * vector(rk2A_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xx_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_A_xx_o1_t2_m0_l0;
						m_A_xx_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_A_xx_o1_t1_m0_l0;
						m_A_xx_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_A_xx_o1_t0_m0_l0;
						m_A_xx_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_A_xx_o0_t2_m0_l0;
						m_A_xx_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_A_xx_o0_t1_m0_l0;
						m_A_xx_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_A_xx_o0_t0_m0_l0;
						m_gammac_zy_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zy_o1_t2_m0_l0;
						m_gammac_zy_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zy_o1_t1_m0_l0;
						m_gammac_zy_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zy_o1_t0_m0_l0;
						m_gammac_zy_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zy_o0_t2_m0_l0;
						m_gammac_zy_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zy_o0_t1_m0_l0;
						m_gammac_zy_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zy_o0_t0_m0_l0;
						m_gammac_zx_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zx_o1_t2_m0_l0;
						m_gammac_zx_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zx_o1_t1_m0_l0;
						m_gammac_zx_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zx_o1_t0_m0_l0;
						m_gammac_zx_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zx_o0_t2_m0_l0;
						m_gammac_zx_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zx_o0_t1_m0_l0;
						m_gammac_zx_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zx_o0_t0_m0_l0;
						m_gammac_zz_o2_t2_l0 = 2.0 * vector(rk2gammac_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_zz_o2_t1_l0 = 2.0 * vector(rk2gammac_zy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_zz_o2_t0_l0 = 2.0 * vector(rk2gammac_zx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_zz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zz_o1_t2_m0_l0;
						m_gammac_zz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zz_o1_t1_m0_l0;
						m_gammac_zz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zz_o1_t0_m0_l0;
						m_gammac_zz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_zz_o0_t2_m0_l0;
						m_gammac_zz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_zz_o0_t1_m0_l0;
						m_gammac_zz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_zz_o0_t0_m0_l0;
						m_gammac_yz_o2_t5_l0 = vector(rk2gammac_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yz_o2_t4_l0 = vector(rk2gammac_zy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yz_o2_t3_l0 = vector(rk2gammac_zx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yz_o2_t2_l0 = vector(rk2gammac_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_yz_o2_t1_l0 = vector(rk2gammac_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_yz_o2_t0_l0 = vector(rk2gammac_yx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_yz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yz_o1_t2_m0_l0;
						m_gammac_yz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yz_o1_t1_m0_l0;
						m_gammac_yz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yz_o1_t0_m0_l0;
						m_gammac_yz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yz_o0_t2_m0_l0;
						m_gammac_yz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yz_o0_t1_m0_l0;
						m_gammac_yz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yz_o0_t0_m0_l0;
						m_gammac_yx_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yx_o1_t2_m0_l0;
						m_gammac_yx_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yx_o1_t1_m0_l0;
						m_gammac_yx_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yx_o1_t0_m0_l0;
						m_gammac_yx_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yx_o0_t2_m0_l0;
						m_gammac_yx_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yx_o0_t1_m0_l0;
						m_gammac_yx_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yx_o0_t0_m0_l0;
						m_gammac_yy_o2_t2_l0 = 2.0 * vector(rk2gammac_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yy_o2_t1_l0 = 2.0 * vector(rk2gammac_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yy_o2_t0_l0 = 2.0 * vector(rk2gammac_yx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yy_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yy_o1_t2_m0_l0;
						m_gammac_yy_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yy_o1_t1_m0_l0;
						m_gammac_yy_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yy_o1_t0_m0_l0;
						m_gammac_yy_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_yy_o0_t2_m0_l0;
						m_gammac_yy_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_yy_o0_t1_m0_l0;
						m_gammac_yy_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_yy_o0_t0_m0_l0;
						m_gammac_xz_o2_t5_l0 = vector(rk2gammac_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xz_o2_t4_l0 = vector(rk2gammac_zy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xz_o2_t3_l0 = vector(rk2gammac_zx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xz_o2_t2_l0 = vector(rk2gammac_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_xz_o2_t1_l0 = vector(rk2gammac_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_xz_o2_t0_l0 = vector(rk2gammac_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_xz_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xz_o1_t2_m0_l0;
						m_gammac_xz_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xz_o1_t1_m0_l0;
						m_gammac_xz_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xz_o1_t0_m0_l0;
						m_gammac_xz_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xz_o0_t2_m0_l0;
						m_gammac_xz_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xz_o0_t1_m0_l0;
						m_gammac_xz_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xz_o0_t0_m0_l0;
						m_gammac_xy_o2_t5_l0 = vector(rk2gammac_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xy_o2_t4_l0 = vector(rk2gammac_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xy_o2_t3_l0 = vector(rk2gammac_yx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xy_o2_t2_l0 = vector(rk2gammac_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_xy_o2_t1_l0 = vector(rk2gammac_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_xy_o2_t0_l0 = vector(rk2gammac_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_xy_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xy_o1_t2_m0_l0;
						m_gammac_xy_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xy_o1_t1_m0_l0;
						m_gammac_xy_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xy_o1_t0_m0_l0;
						m_gammac_xy_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xy_o0_t2_m0_l0;
						m_gammac_xy_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xy_o0_t1_m0_l0;
						m_gammac_xy_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xy_o0_t0_m0_l0;
						m_gammac_xx_o2_t2_l0 = 2.0 * vector(rk2gammac_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xx_o2_t1_l0 = 2.0 * vector(rk2gammac_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xx_o2_t0_l0 = 2.0 * vector(rk2gammac_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xx_o1_t2_l0 = MIN(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xx_o1_t2_m0_l0;
						m_gammac_xx_o1_t1_l0 = MIN(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xx_o1_t1_m0_l0;
						m_gammac_xx_o1_t0_l0 = MIN(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xx_o1_t0_m0_l0;
						m_gammac_xx_o0_t2_l0 = MAX(0.0, vector(rk2beta_z, i, j, k)) * d_gammac_xx_o0_t2_m0_l0;
						m_gammac_xx_o0_t1_l0 = MAX(0.0, vector(rk2beta_y, i, j, k)) * d_gammac_xx_o0_t1_m0_l0;
						m_gammac_xx_o0_t0_l0 = MAX(0.0, vector(rk2beta_x, i, j, k)) * d_gammac_xx_o0_t0_m0_l0;
						RHS_gammac_xx = ((((((((m_gammac_xx_o0_t0_l0 + m_gammac_xx_o0_t1_l0) + m_gammac_xx_o0_t2_l0) + m_gammac_xx_o1_t0_l0) + m_gammac_xx_o1_t1_l0) + m_gammac_xx_o1_t2_l0) + m_gammac_xx_o2_t0_l0) + m_gammac_xx_o2_t1_l0) + m_gammac_xx_o2_t2_l0) + d_gammac_xx_o2_t3_m0_l0;
						RHS_gammac_xy = (((((((((((m_gammac_xy_o0_t0_l0 + m_gammac_xy_o0_t1_l0) + m_gammac_xy_o0_t2_l0) + m_gammac_xy_o1_t0_l0) + m_gammac_xy_o1_t1_l0) + m_gammac_xy_o1_t2_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + d_gammac_xy_o2_t6_m0_l0;
						RHS_gammac_xz = (((((((((((m_gammac_xz_o0_t0_l0 + m_gammac_xz_o0_t1_l0) + m_gammac_xz_o0_t2_l0) + m_gammac_xz_o1_t0_l0) + m_gammac_xz_o1_t1_l0) + m_gammac_xz_o1_t2_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + d_gammac_xz_o2_t6_m0_l0;
						RHS_gammac_yy = ((((((((m_gammac_yy_o0_t0_l0 + m_gammac_yy_o0_t1_l0) + m_gammac_yy_o0_t2_l0) + m_gammac_yy_o1_t0_l0) + m_gammac_yy_o1_t1_l0) + m_gammac_yy_o1_t2_l0) + m_gammac_yy_o2_t0_l0) + m_gammac_yy_o2_t1_l0) + m_gammac_yy_o2_t2_l0) + d_gammac_yy_o2_t3_m0_l0;
						RHS_gammac_yx = (((((((((((m_gammac_yx_o0_t0_l0 + m_gammac_yx_o0_t1_l0) + m_gammac_yx_o0_t2_l0) + m_gammac_yx_o1_t0_l0) + m_gammac_yx_o1_t1_l0) + m_gammac_yx_o1_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + d_gammac_yx_o2_t6_m0_l0;
						RHS_gammac_yz = (((((((((((m_gammac_yz_o0_t0_l0 + m_gammac_yz_o0_t1_l0) + m_gammac_yz_o0_t2_l0) + m_gammac_yz_o1_t0_l0) + m_gammac_yz_o1_t1_l0) + m_gammac_yz_o1_t2_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + d_gammac_yz_o2_t6_m0_l0;
						RHS_gammac_zz = ((((((((m_gammac_zz_o0_t0_l0 + m_gammac_zz_o0_t1_l0) + m_gammac_zz_o0_t2_l0) + m_gammac_zz_o1_t0_l0) + m_gammac_zz_o1_t1_l0) + m_gammac_zz_o1_t2_l0) + m_gammac_zz_o2_t0_l0) + m_gammac_zz_o2_t1_l0) + m_gammac_zz_o2_t2_l0) + d_gammac_zz_o2_t3_m0_l0;
						RHS_gammac_zx = (((((((((((m_gammac_zx_o0_t0_l0 + m_gammac_zx_o0_t1_l0) + m_gammac_zx_o0_t2_l0) + m_gammac_zx_o1_t0_l0) + m_gammac_zx_o1_t1_l0) + m_gammac_zx_o1_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + d_gammac_zx_o2_t6_m0_l0;
						RHS_gammac_zy = (((((((((((m_gammac_zy_o0_t0_l0 + m_gammac_zy_o0_t1_l0) + m_gammac_zy_o0_t2_l0) + m_gammac_zy_o1_t0_l0) + m_gammac_zy_o1_t1_l0) + m_gammac_zy_o1_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + d_gammac_zy_o2_t6_m0_l0;
						RHS_A_xx = ((((((((m_A_xx_o0_t0_l0 + m_A_xx_o0_t1_l0) + m_A_xx_o0_t2_l0) + m_A_xx_o1_t0_l0) + m_A_xx_o1_t1_l0) + m_A_xx_o1_t2_l0) + m_A_xx_o2_t0_l0) + m_A_xx_o2_t1_l0) + m_A_xx_o2_t2_l0) + d_A_xx_o2_t3_m0_l0;
						RHS_A_xy = (((((((((((m_A_xy_o0_t0_l0 + m_A_xy_o0_t1_l0) + m_A_xy_o0_t2_l0) + m_A_xy_o1_t0_l0) + m_A_xy_o1_t1_l0) + m_A_xy_o1_t2_l0) + m_A_xy_o2_t0_l0) + m_A_xy_o2_t1_l0) + m_A_xy_o2_t2_l0) + m_A_xy_o2_t3_l0) + m_A_xy_o2_t4_l0) + m_A_xy_o2_t5_l0) + d_A_xy_o2_t6_m0_l0;
						RHS_A_xz = (((((((((((m_A_xz_o0_t0_l0 + m_A_xz_o0_t1_l0) + m_A_xz_o0_t2_l0) + m_A_xz_o1_t0_l0) + m_A_xz_o1_t1_l0) + m_A_xz_o1_t2_l0) + m_A_xz_o2_t0_l0) + m_A_xz_o2_t1_l0) + m_A_xz_o2_t2_l0) + m_A_xz_o2_t3_l0) + m_A_xz_o2_t4_l0) + m_A_xz_o2_t5_l0) + d_A_xz_o2_t6_m0_l0;
						RHS_A_yy = ((((((((m_A_yy_o0_t0_l0 + m_A_yy_o0_t1_l0) + m_A_yy_o0_t2_l0) + m_A_yy_o1_t0_l0) + m_A_yy_o1_t1_l0) + m_A_yy_o1_t2_l0) + m_A_yy_o2_t0_l0) + m_A_yy_o2_t1_l0) + m_A_yy_o2_t2_l0) + d_A_yy_o2_t3_m0_l0;
						RHS_A_yz = (((((((((((m_A_yz_o0_t0_l0 + m_A_yz_o0_t1_l0) + m_A_yz_o0_t2_l0) + m_A_yz_o1_t0_l0) + m_A_yz_o1_t1_l0) + m_A_yz_o1_t2_l0) + m_A_yz_o2_t0_l0) + m_A_yz_o2_t1_l0) + m_A_yz_o2_t2_l0) + m_A_yz_o2_t3_l0) + m_A_yz_o2_t4_l0) + m_A_yz_o2_t5_l0) + d_A_yz_o2_t6_m0_l0;
						RHS_A_zz = ((((((((m_A_zz_o0_t0_l0 + m_A_zz_o0_t1_l0) + m_A_zz_o0_t2_l0) + m_A_zz_o1_t0_l0) + m_A_zz_o1_t1_l0) + m_A_zz_o1_t2_l0) + m_A_zz_o2_t0_l0) + m_A_zz_o2_t1_l0) + m_A_zz_o2_t2_l0) + d_A_zz_o2_t3_m0_l0;
						RHS_Phi = (((((m_Phi_o0_t0_l0 + m_Phi_o0_t1_l0) + m_Phi_o0_t2_l0) + m_Phi_o1_t0_l0) + m_Phi_o1_t1_l0) + m_Phi_o1_t2_l0) + d_Phi_o2_t0_m0_l0;
						RHS_trK = (((((m_trK_o0_t0_l0 + m_trK_o0_t1_l0) + m_trK_o0_t2_l0) + m_trK_o1_t0_l0) + m_trK_o1_t1_l0) + m_trK_o1_t2_l0) + d_trK_o2_t0_m0_l0;
						RHS_beta_x = d_beta_x_o0_t0_m0_l0;
						RHS_beta_y = d_beta_x_o0_t0_m0_l0;
						RHS_beta_z = d_beta_x_o0_t0_m0_l0;
						RHS_alpha = (((((m_alpha_o0_t0_l0 + m_alpha_o0_t1_l0) + m_alpha_o0_t2_l0) + m_alpha_o1_t0_l0) + m_alpha_o1_t1_l0) + m_alpha_o1_t2_l0) + d_alpha_o2_t0_m0_l0;
						RHS_Gam_x = ((((((((((((((((((((((((((((((((m_Gam_x_o0_t0_l0 + m_Gam_x_o0_t1_l0) + m_Gam_x_o0_t2_l0) + m_Gam_x_o0_t3_l0) + m_Gam_x_o0_t4_l0) + m_Gam_x_o0_t5_l0) + m_Gam_x_o0_t6_l0) + m_Gam_x_o0_t7_l0) + m_Gam_x_o0_t8_l0) + m_Gam_x_o0_t9_l0) + m_Gam_x_o0_t10_l0) + m_Gam_x_o0_t11_l0) + m_Gam_x_o0_t12_l0) + m_Gam_x_o0_t13_l0) + m_Gam_x_o0_t14_l0) + m_Gam_x_o0_t15_l0) + m_Gam_x_o0_t16_l0) + m_Gam_x_o0_t17_l0) + m_Gam_x_o0_t18_l0) + m_Gam_x_o0_t19_l0) + m_Gam_x_o0_t20_l0) + m_Gam_x_o0_t21_l0) + m_Gam_x_o0_t22_l0) + m_Gam_x_o0_t23_l0) + m_Gam_x_o0_t24_l0) + m_Gam_x_o0_t25_l0) + m_Gam_x_o0_t26_l0) + m_Gam_x_o0_t27_l0) + m_Gam_x_o0_t28_l0) + m_Gam_x_o0_t29_l0) + m_Gam_x_o0_t30_l0) + m_Gam_x_o0_t31_l0) + m_Gam_x_o0_t32_l0) + d_Gam_x_o0_t33_m0_l0;
						RHS_Gam_y = ((((((((((((((((((((((((((((((((m_Gam_y_o0_t0_l0 + m_Gam_y_o0_t1_l0) + m_Gam_y_o0_t2_l0) + m_Gam_y_o0_t3_l0) + m_Gam_y_o0_t4_l0) + m_Gam_y_o0_t5_l0) + m_Gam_y_o0_t6_l0) + m_Gam_y_o0_t7_l0) + m_Gam_y_o0_t8_l0) + m_Gam_y_o0_t9_l0) + m_Gam_y_o0_t10_l0) + m_Gam_y_o0_t11_l0) + m_Gam_y_o0_t12_l0) + m_Gam_y_o0_t13_l0) + m_Gam_y_o0_t14_l0) + m_Gam_y_o0_t15_l0) + m_Gam_y_o0_t16_l0) + m_Gam_y_o0_t17_l0) + m_Gam_y_o0_t18_l0) + m_Gam_y_o0_t19_l0) + m_Gam_y_o0_t20_l0) + m_Gam_y_o0_t21_l0) + m_Gam_y_o0_t22_l0) + m_Gam_y_o0_t23_l0) + m_Gam_y_o0_t24_l0) + m_Gam_y_o0_t25_l0) + m_Gam_y_o0_t26_l0) + m_Gam_y_o0_t27_l0) + m_Gam_y_o0_t28_l0) + m_Gam_y_o0_t29_l0) + m_Gam_y_o0_t30_l0) + m_Gam_y_o0_t31_l0) + m_Gam_y_o0_t32_l0) + d_Gam_y_o0_t33_m0_l0;
						RHS_Gam_z = ((((((((((((((((((((((((((((((((m_Gam_z_o0_t0_l0 + m_Gam_z_o0_t1_l0) + m_Gam_z_o0_t2_l0) + m_Gam_z_o0_t3_l0) + m_Gam_z_o0_t4_l0) + m_Gam_z_o0_t5_l0) + m_Gam_z_o0_t6_l0) + m_Gam_z_o0_t7_l0) + m_Gam_z_o0_t8_l0) + m_Gam_z_o0_t9_l0) + m_Gam_z_o0_t10_l0) + m_Gam_z_o0_t11_l0) + m_Gam_z_o0_t12_l0) + m_Gam_z_o0_t13_l0) + m_Gam_z_o0_t14_l0) + m_Gam_z_o0_t15_l0) + m_Gam_z_o0_t16_l0) + m_Gam_z_o0_t17_l0) + m_Gam_z_o0_t18_l0) + m_Gam_z_o0_t19_l0) + m_Gam_z_o0_t20_l0) + m_Gam_z_o0_t21_l0) + m_Gam_z_o0_t22_l0) + m_Gam_z_o0_t23_l0) + m_Gam_z_o0_t24_l0) + m_Gam_z_o0_t25_l0) + m_Gam_z_o0_t26_l0) + m_Gam_z_o0_t27_l0) + m_Gam_z_o0_t28_l0) + m_Gam_z_o0_t29_l0) + m_Gam_z_o0_t30_l0) + m_Gam_z_o0_t31_l0) + m_Gam_z_o0_t32_l0) + d_Gam_z_o0_t33_m0_l0;
						if (dissipation_factor_gammac_xx > 0.0) {
							RHS_gammac_xx = RHS_gammac_xx + dissipation_factor_gammac_xx * (meshDissipation_i(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xy > 0.0) {
							RHS_gammac_xy = RHS_gammac_xy + dissipation_factor_gammac_xy * (meshDissipation_i(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xz > 0.0) {
							RHS_gammac_xz = RHS_gammac_xz + dissipation_factor_gammac_xz * (meshDissipation_i(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yy > 0.0) {
							RHS_gammac_yy = RHS_gammac_yy + dissipation_factor_gammac_yy * (meshDissipation_i(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yx > 0.0) {
							RHS_gammac_yx = RHS_gammac_yx + dissipation_factor_gammac_yx * (meshDissipation_i(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yz > 0.0) {
							RHS_gammac_yz = RHS_gammac_yz + dissipation_factor_gammac_yz * (meshDissipation_i(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zz > 0.0) {
							RHS_gammac_zz = RHS_gammac_zz + dissipation_factor_gammac_zz * (meshDissipation_i(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zx > 0.0) {
							RHS_gammac_zx = RHS_gammac_zx + dissipation_factor_gammac_zx * (meshDissipation_i(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zy > 0.0) {
							RHS_gammac_zy = RHS_gammac_zy + dissipation_factor_gammac_zy * (meshDissipation_i(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xx > 0.0) {
							RHS_A_xx = RHS_A_xx + dissipation_factor_A_xx * (meshDissipation_i(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xy > 0.0) {
							RHS_A_xy = RHS_A_xy + dissipation_factor_A_xy * (meshDissipation_i(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xz > 0.0) {
							RHS_A_xz = RHS_A_xz + dissipation_factor_A_xz * (meshDissipation_i(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yy > 0.0) {
							RHS_A_yy = RHS_A_yy + dissipation_factor_A_yy * (meshDissipation_i(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yz > 0.0) {
							RHS_A_yz = RHS_A_yz + dissipation_factor_A_yz * (meshDissipation_i(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_zz > 0.0) {
							RHS_A_zz = RHS_A_zz + dissipation_factor_A_zz * (meshDissipation_i(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2A_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Phi > 0.0) {
							RHS_Phi = RHS_Phi + dissipation_factor_Phi * (meshDissipation_i(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2Phi, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_trK > 0.0) {
							RHS_trK = RHS_trK + dissipation_factor_trK * (meshDissipation_i(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2trK, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_x > 0.0) {
							RHS_beta_x = RHS_beta_x + dissipation_factor_beta_x * (meshDissipation_i(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2beta_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_y > 0.0) {
							RHS_beta_y = RHS_beta_y + dissipation_factor_beta_y * (meshDissipation_i(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2beta_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_z > 0.0) {
							RHS_beta_z = RHS_beta_z + dissipation_factor_beta_z * (meshDissipation_i(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2beta_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_alpha > 0.0) {
							RHS_alpha = RHS_alpha + dissipation_factor_alpha * (meshDissipation_i(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2alpha, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_x > 0.0) {
							RHS_Gam_x = RHS_Gam_x + dissipation_factor_Gam_x * (meshDissipation_i(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_y > 0.0) {
							RHS_Gam_y = RHS_Gam_y + dissipation_factor_Gam_y * (meshDissipation_i(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_z > 0.0) {
							RHS_Gam_z = RHS_Gam_z + dissipation_factor_Gam_z * (meshDissipation_i(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk2Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						vector(rk3gammac_xx, i, j, k) = RK4P3_(RHS_gammac_xx, vector(gammac_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_xy, i, j, k) = RK4P3_(RHS_gammac_xy, vector(gammac_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_xz, i, j, k) = RK4P3_(RHS_gammac_xz, vector(gammac_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_yy, i, j, k) = RK4P3_(RHS_gammac_yy, vector(gammac_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_yx, i, j, k) = RK4P3_(RHS_gammac_yx, vector(gammac_yx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_yz, i, j, k) = RK4P3_(RHS_gammac_yz, vector(gammac_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_zz, i, j, k) = RK4P3_(RHS_gammac_zz, vector(gammac_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_zx, i, j, k) = RK4P3_(RHS_gammac_zx, vector(gammac_zx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3gammac_zy, i, j, k) = RK4P3_(RHS_gammac_zy, vector(gammac_zy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_xx, i, j, k) = RK4P3_(RHS_A_xx, vector(A_xx_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_xy, i, j, k) = RK4P3_(RHS_A_xy, vector(A_xy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_xz, i, j, k) = RK4P3_(RHS_A_xz, vector(A_xz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_yy, i, j, k) = RK4P3_(RHS_A_yy, vector(A_yy_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_yz, i, j, k) = RK4P3_(RHS_A_yz, vector(A_yz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3A_zz, i, j, k) = RK4P3_(RHS_A_zz, vector(A_zz_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3Phi, i, j, k) = RK4P3_(RHS_Phi, vector(Phi_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3trK, i, j, k) = RK4P3_(RHS_trK, vector(trK_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3beta_x, i, j, k) = RK4P3_(RHS_beta_x, vector(beta_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3beta_y, i, j, k) = RK4P3_(RHS_beta_y, vector(beta_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3beta_z, i, j, k) = RK4P3_(RHS_beta_z, vector(beta_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3alpha, i, j, k) = RK4P3_(RHS_alpha, vector(alpha_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3Gam_x, i, j, k) = RK4P3_(RHS_Gam_x, vector(Gam_x_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3Gam_y, i, j, k) = RK4P3_(RHS_Gam_y, vector(Gam_y_p, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(rk3Gam_z, i, j, k) = RK4P3_(RHS_Gam_z, vector(Gam_z_p, i, j, k), dx, simPlat_dt, ilast, jlast);
					}
				}
			}
		}
	}
	//Fill ghosts and periodical boundaries
	time_interpolate_operator_mesh1->setStep(3);
	d_bdry_sched_advance11[ln]->fillData(current_time + simPlat_dt, false);
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		//Hard region field distance variables
		double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
	
		double* rk3gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xx_id).get())->getPointer();
		double* rk3gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xy_id).get())->getPointer();
		double* rk3gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xz_id).get())->getPointer();
		double* rk3gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yy_id).get())->getPointer();
		double* rk3gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yx_id).get())->getPointer();
		double* rk3gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yz_id).get())->getPointer();
		double* rk3gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zz_id).get())->getPointer();
		double* rk3gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zx_id).get())->getPointer();
		double* rk3gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zy_id).get())->getPointer();
		double* rk3A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xx_id).get())->getPointer();
		double* rk3A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xy_id).get())->getPointer();
		double* rk3A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xz_id).get())->getPointer();
		double* rk3A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yy_id).get())->getPointer();
		double* rk3A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yz_id).get())->getPointer();
		double* rk3A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_zz_id).get())->getPointer();
		double* rk3Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Phi_id).get())->getPointer();
		double* rk3trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3trK_id).get())->getPointer();
		double* rk3beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_x_id).get())->getPointer();
		double* rk3beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_y_id).get())->getPointer();
		double* rk3beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_z_id).get())->getPointer();
		double* rk3alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3alpha_id).get())->getPointer();
		double* rk3Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_x_id).get())->getPointer();
		double* rk3Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_y_id).get())->getPointer();
		double* rk3Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_z_id).get())->getPointer();
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((vector(FOV_xLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_xUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, rk3Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
				}
			}
		}
	}
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		double* rk3beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_x_id).get())->getPointer();
		double* rk3beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_y_id).get())->getPointer();
		double* rk3beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3beta_z_id).get())->getPointer();
		double* rk3gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xx_id).get())->getPointer();
		double* rk3gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yx_id).get())->getPointer();
		double* rk3gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zx_id).get())->getPointer();
		double* rk3gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xy_id).get())->getPointer();
		double* rk3gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yy_id).get())->getPointer();
		double* rk3gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zy_id).get())->getPointer();
		double* rk3gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_xz_id).get())->getPointer();
		double* rk3gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_yz_id).get())->getPointer();
		double* rk3gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3gammac_zz_id).get())->getPointer();
		double* rk3alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3alpha_id).get())->getPointer();
		double* rk3Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Phi_id).get())->getPointer();
		double* rk3Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_x_id).get())->getPointer();
		double* rk3Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_y_id).get())->getPointer();
		double* rk3Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3Gam_z_id).get())->getPointer();
		double* rk3A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xx_id).get())->getPointer();
		double* rk3A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xy_id).get())->getPointer();
		double* rk3A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_xz_id).get())->getPointer();
		double* rk3A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yy_id).get())->getPointer();
		double* rk3A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_yz_id).get())->getPointer();
		double* rk3A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3A_zz_id).get())->getPointer();
		double* rk3trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk3trK_id).get())->getPointer();
		double* gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_id).get())->getPointer();
		double* gammac_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_p_id).get())->getPointer();
		double* rk1gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xx_id).get())->getPointer();
		double* rk2gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xx_id).get())->getPointer();
		double* gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_id).get())->getPointer();
		double* gammac_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_p_id).get())->getPointer();
		double* rk1gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xy_id).get())->getPointer();
		double* rk2gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xy_id).get())->getPointer();
		double* gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_id).get())->getPointer();
		double* gammac_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_p_id).get())->getPointer();
		double* rk1gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_xz_id).get())->getPointer();
		double* rk2gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_xz_id).get())->getPointer();
		double* gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_id).get())->getPointer();
		double* gammac_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_p_id).get())->getPointer();
		double* rk1gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yy_id).get())->getPointer();
		double* rk2gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yy_id).get())->getPointer();
		double* gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_id).get())->getPointer();
		double* gammac_yx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_p_id).get())->getPointer();
		double* rk1gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yx_id).get())->getPointer();
		double* rk2gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yx_id).get())->getPointer();
		double* gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_id).get())->getPointer();
		double* gammac_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_p_id).get())->getPointer();
		double* rk1gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_yz_id).get())->getPointer();
		double* rk2gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_yz_id).get())->getPointer();
		double* gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_id).get())->getPointer();
		double* gammac_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_p_id).get())->getPointer();
		double* rk1gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zz_id).get())->getPointer();
		double* rk2gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zz_id).get())->getPointer();
		double* gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_id).get())->getPointer();
		double* gammac_zx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_p_id).get())->getPointer();
		double* rk1gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zx_id).get())->getPointer();
		double* rk2gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zx_id).get())->getPointer();
		double* gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_id).get())->getPointer();
		double* gammac_zy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_p_id).get())->getPointer();
		double* rk1gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1gammac_zy_id).get())->getPointer();
		double* rk2gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2gammac_zy_id).get())->getPointer();
		double* A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_id).get())->getPointer();
		double* A_xx_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_p_id).get())->getPointer();
		double* rk1A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xx_id).get())->getPointer();
		double* rk2A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xx_id).get())->getPointer();
		double* A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_id).get())->getPointer();
		double* A_xy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_p_id).get())->getPointer();
		double* rk1A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xy_id).get())->getPointer();
		double* rk2A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xy_id).get())->getPointer();
		double* A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_id).get())->getPointer();
		double* A_xz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_p_id).get())->getPointer();
		double* rk1A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_xz_id).get())->getPointer();
		double* rk2A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_xz_id).get())->getPointer();
		double* A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_id).get())->getPointer();
		double* A_yy_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_p_id).get())->getPointer();
		double* rk1A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yy_id).get())->getPointer();
		double* rk2A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yy_id).get())->getPointer();
		double* A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_id).get())->getPointer();
		double* A_yz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_p_id).get())->getPointer();
		double* rk1A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_yz_id).get())->getPointer();
		double* rk2A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_yz_id).get())->getPointer();
		double* A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_id).get())->getPointer();
		double* A_zz_p = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_p_id).get())->getPointer();
		double* rk1A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1A_zz_id).get())->getPointer();
		double* rk2A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2A_zz_id).get())->getPointer();
		double* Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_id).get())->getPointer();
		double* Phi_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_p_id).get())->getPointer();
		double* rk1Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Phi_id).get())->getPointer();
		double* rk2Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Phi_id).get())->getPointer();
		double* trK = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_id).get())->getPointer();
		double* trK_p = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_p_id).get())->getPointer();
		double* rk1trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1trK_id).get())->getPointer();
		double* rk2trK = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2trK_id).get())->getPointer();
		double* beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_id).get())->getPointer();
		double* beta_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_p_id).get())->getPointer();
		double* rk1beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_x_id).get())->getPointer();
		double* rk2beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_x_id).get())->getPointer();
		double* beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_id).get())->getPointer();
		double* beta_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_p_id).get())->getPointer();
		double* rk1beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_y_id).get())->getPointer();
		double* rk2beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_y_id).get())->getPointer();
		double* beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_id).get())->getPointer();
		double* beta_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_p_id).get())->getPointer();
		double* rk1beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1beta_z_id).get())->getPointer();
		double* rk2beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2beta_z_id).get())->getPointer();
		double* alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_id).get())->getPointer();
		double* alpha_p = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_p_id).get())->getPointer();
		double* rk1alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1alpha_id).get())->getPointer();
		double* rk2alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2alpha_id).get())->getPointer();
		double* Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_id).get())->getPointer();
		double* Gam_x_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_p_id).get())->getPointer();
		double* rk1Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_x_id).get())->getPointer();
		double* rk2Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_x_id).get())->getPointer();
		double* Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_id).get())->getPointer();
		double* Gam_y_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_p_id).get())->getPointer();
		double* rk1Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_y_id).get())->getPointer();
		double* rk2Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_y_id).get())->getPointer();
		double* Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_id).get())->getPointer();
		double* Gam_z_p = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_p_id).get())->getPointer();
		double* rk1Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk1Gam_z_id).get())->getPointer();
		double* rk2Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_rk2Gam_z_id).get())->getPointer();
		double d_div_beta_o0_t0_m0_l0, d_gammac_xy_o2_t0_m0_l0, d_gammac_xz_o2_t0_m0_l0, d_Gam_x_o0_t0_m0_l0, d_Gam_x_o0_t3_m0_l0, d_Gam_x_o0_t6_m0_l0, d_Gam_x_o0_t1_m0_l0, d_Gam_x_o0_t4_m0_l0, d_Gam_x_o0_t7_m0_l0, d_Gam_x_o0_t2_m0_l0, d_Gam_x_o0_t5_m0_l0, d_Gam_x_o0_t8_m0_l0, d_gammac_xx_o2_t1_m0_l0, d_div_beta_o0_t1_m0_l0, d_gammac_xz_o2_t1_m0_l0, d_Gam_y_o0_t0_m0_l0, d_Gam_y_o0_t3_m0_l0, d_Gam_y_o0_t6_m0_l0, d_Gam_x_o0_t10_m0_l0, d_Gam_x_o0_t13_m0_l0, d_Gam_x_o0_t16_m0_l0, d_Gam_y_o0_t2_m0_l0, d_Gam_y_o0_t5_m0_l0, d_Gam_y_o0_t8_m0_l0, d_gammac_xx_o2_t2_m0_l0, d_gammac_xy_o2_t2_m0_l0, d_div_beta_o0_t2_m0_l0, d_Gam_z_o0_t0_m0_l0, d_Gam_z_o0_t3_m0_l0, d_Gam_z_o0_t6_m0_l0, d_Gam_z_o0_t1_m0_l0, d_Gam_z_o0_t4_m0_l0, d_Gam_z_o0_t7_m0_l0, d_Gam_x_o0_t11_m0_l0, d_Gam_x_o0_t14_m0_l0, d_Gam_x_o0_t17_m0_l0, d_C_xxx_o0_t0_m0_l0, d_gammac_xx_o0_t0_m0_l0, d_gammac_xx_o1_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_gammac_xx_o0_t1_m0_l0, d_gammac_xx_o1_t1_m0_l0, d_C_xxx_o0_t8_m0_l0, d_gammac_xx_o0_t2_m0_l0, d_gammac_xx_o1_t2_m0_l0, d_C_xxx_o0_t3_m0_l0, d_gammac_yx_o0_t0_m0_l0, d_gammac_yx_o1_t0_m0_l0, d_C_xxy_o0_t4_m0_l0, d_gammac_yx_o0_t1_m0_l0, d_gammac_yx_o1_t1_m0_l0, d_C_xxz_o0_t4_m0_l0, d_gammac_yx_o0_t2_m0_l0, d_gammac_yx_o1_t2_m0_l0, d_C_xxx_o0_t6_m0_l0, d_gammac_zx_o0_t0_m0_l0, d_gammac_zx_o1_t0_m0_l0, d_C_xxy_o0_t7_m0_l0, d_gammac_zx_o0_t1_m0_l0, d_gammac_zx_o1_t1_m0_l0, d_C_xxz_o0_t7_m0_l0, d_gammac_zx_o0_t2_m0_l0, d_gammac_zx_o1_t2_m0_l0, d_C_xxy_o0_t0_m0_l0, d_gammac_xy_o0_t0_m0_l0, d_gammac_xy_o1_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_gammac_xy_o0_t1_m0_l0, d_gammac_xy_o1_t1_m0_l0, d_C_xxy_o0_t8_m0_l0, d_gammac_xy_o0_t2_m0_l0, d_gammac_xy_o1_t2_m0_l0, d_C_xxy_o0_t3_m0_l0, d_gammac_yy_o0_t0_m0_l0, d_gammac_yy_o1_t0_m0_l0, d_C_xyy_o0_t3_m0_l0, d_gammac_yy_o0_t1_m0_l0, d_gammac_yy_o1_t1_m0_l0, d_C_xyy_o0_t8_m0_l0, d_gammac_yy_o0_t2_m0_l0, d_gammac_yy_o1_t2_m0_l0, d_C_xxy_o0_t6_m0_l0, d_gammac_zy_o0_t0_m0_l0, d_gammac_zy_o1_t0_m0_l0, d_C_xyy_o0_t6_m0_l0, d_gammac_zy_o0_t1_m0_l0, d_gammac_zy_o1_t1_m0_l0, d_C_xyz_o0_t7_m0_l0, d_gammac_zy_o0_t2_m0_l0, d_gammac_zy_o1_t2_m0_l0, d_C_xxz_o0_t0_m0_l0, d_gammac_xz_o0_t0_m0_l0, d_gammac_xz_o1_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_gammac_xz_o0_t1_m0_l0, d_gammac_xz_o1_t1_m0_l0, d_C_xxz_o0_t8_m0_l0, d_gammac_xz_o0_t2_m0_l0, d_gammac_xz_o1_t2_m0_l0, d_C_xxz_o0_t3_m0_l0, d_gammac_yz_o0_t0_m0_l0, d_gammac_yz_o1_t0_m0_l0, d_C_xyz_o0_t3_m0_l0, d_gammac_yz_o0_t1_m0_l0, d_gammac_yz_o1_t1_m0_l0, d_C_xyz_o0_t8_m0_l0, d_gammac_yz_o0_t2_m0_l0, d_gammac_yz_o1_t2_m0_l0, d_C_xxz_o0_t6_m0_l0, d_gammac_zz_o0_t0_m0_l0, d_gammac_zz_o1_t0_m0_l0, d_C_xyz_o0_t6_m0_l0, d_gammac_zz_o0_t1_m0_l0, d_gammac_zz_o1_t1_m0_l0, d_C_xzz_o0_t6_m0_l0, d_gammac_zz_o0_t2_m0_l0, d_gammac_zz_o1_t2_m0_l0, d_dalpha_xx_o0_t1_m0_l0, d_alpha_o0_t0_m0_l0, d_alpha_o1_t0_m0_l0, d_dalpha_xx_o0_t2_m0_l0, d_alpha_o0_t1_m0_l0, d_alpha_o1_t1_m0_l0, d_dalpha_xx_o0_t3_m0_l0, d_alpha_o0_t2_m0_l0, d_alpha_o1_t2_m0_l0, d_dalpha_xx_o0_t0_m0_l0, d_dalpha_xy_o0_t0_m0_l0, d_dalpha_yy_o0_t0_m0_l0, d_dalpha_xz_o0_t0_m0_l0, d_dalpha_yz_o0_t0_m0_l0, d_dalpha_zz_o0_t0_m0_l0, d_dalpha_xx_o0_t4_m0_l0, d_Phi_o0_t0_m0_l0, d_Phi_o1_t0_m0_l0, d_dalpha_xx_o0_t9_m0_l0, d_Phi_o0_t1_m0_l0, d_Phi_o1_t1_m0_l0, d_dalpha_xx_o0_t12_m0_l0, d_Phi_o0_t2_m0_l0, d_Phi_o1_t2_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_A_xx_o0_t0_m0_l0, d_A_xx_o1_t0_m0_l0, d_A_xx_o0_t1_m0_l0, d_A_xx_o1_t1_m0_l0, d_A_xx_o0_t2_m0_l0, d_A_xx_o1_t2_m0_l0, d_A_xy_o0_t0_m0_l0, d_A_xy_o1_t0_m0_l0, d_A_xy_o0_t1_m0_l0, d_A_xy_o1_t1_m0_l0, d_A_xy_o0_t2_m0_l0, d_A_xy_o1_t2_m0_l0, d_A_xz_o0_t0_m0_l0, d_A_xz_o1_t0_m0_l0, d_A_xz_o0_t1_m0_l0, d_A_xz_o1_t1_m0_l0, d_A_xz_o0_t2_m0_l0, d_A_xz_o1_t2_m0_l0, d_A_yy_o0_t0_m0_l0, d_A_yy_o1_t0_m0_l0, d_A_yy_o0_t1_m0_l0, d_A_yy_o1_t1_m0_l0, d_A_yy_o0_t2_m0_l0, d_A_yy_o1_t2_m0_l0, d_A_yz_o0_t0_m0_l0, d_A_yz_o1_t0_m0_l0, d_A_yz_o0_t1_m0_l0, d_A_yz_o1_t1_m0_l0, d_A_yz_o0_t2_m0_l0, d_A_yz_o1_t2_m0_l0, d_A_zz_o0_t0_m0_l0, d_A_zz_o1_t0_m0_l0, d_A_zz_o0_t1_m0_l0, d_A_zz_o1_t1_m0_l0, d_A_zz_o0_t2_m0_l0, d_A_zz_o1_t2_m0_l0, d_trK_o0_t0_m0_l0, d_trK_o1_t0_m0_l0, d_Gam_x_o0_t27_m0_l0, d_trK_o0_t1_m0_l0, d_trK_o1_t1_m0_l0, d_Gam_x_o0_t28_m0_l0, d_trK_o0_t2_m0_l0, d_trK_o1_t2_m0_l0, d_Gam_x_o0_t29_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, rk3div_beta, rk3Detgammac, rk3gamma_zz, rk3iDetgammac, rk3gamma_yy, rk3gamma_yz, rk3gamma_xx, rk3gamma_xy, rk3gamma_xz, rk3Detgamma, rk3iDetgamma, rk3gammacu_zz, rk3gammau_xx, rk3gammau_xy, rk3gammau_xz, rk3gammacu_yy, rk3gammacu_yz, rk3gammacu_zy, rk3gammau_yx, rk3gammau_yy, rk3gammau_yz, rk3gammacu_xz, rk3gammacu_zx, rk3Am_zx, rk3Am_zz, rk3Am_zy, rk3Au_zz, rk3gammacu_xx, rk3gammacu_xy, rk3m_C_xxx_o0_t8_l0, rk3m_C_xxx_o0_t6_l0, rk3m_C_xxx_o0_t5_l0, rk3m_C_xxx_o0_t3_l0, rk3m_C_xxx_o0_t2_l0, rk3m_C_xxx_o0_t0_l0, rk3C_xxx, rk3m_C_xxz_o0_t8_l0, rk3m_C_xxz_o0_t7_l0, rk3m_C_xxz_o0_t6_l0, rk3m_C_xxz_o0_t5_l0, rk3m_C_xxz_o0_t4_l0, rk3m_C_xxz_o0_t3_l0, rk3m_C_xxz_o0_t2_l0, rk3m_C_xxz_o0_t1_l0, rk3m_C_xxz_o0_t0_l0, rk3C_xxz, rk3m_C_zxz_o0_t8_l0, rk3m_C_zxz_o0_t7_l0, rk3m_C_zxz_o0_t6_l0, rk3m_C_zxz_o0_t5_l0, rk3m_C_zxz_o0_t4_l0, rk3m_C_zxz_o0_t3_l0, rk3m_C_zxz_o0_t2_l0, rk3m_C_zxz_o0_t1_l0, rk3m_C_zxz_o0_t0_l0, rk3C_zxz, rk3m_C_xxy_o0_t8_l0, rk3m_C_xxy_o0_t7_l0, rk3m_C_xxy_o0_t6_l0, rk3m_C_xxy_o0_t5_l0, rk3m_C_xxy_o0_t4_l0, rk3m_C_xxy_o0_t3_l0, rk3m_C_xxy_o0_t2_l0, rk3m_C_xxy_o0_t1_l0, rk3m_C_xxy_o0_t0_l0, rk3C_xxy, rk3gammacu_yx, rk3m_C_yxy_o0_t8_l0, rk3m_C_yxy_o0_t7_l0, rk3m_C_yxy_o0_t6_l0, rk3m_C_yxy_o0_t5_l0, rk3m_C_yxy_o0_t4_l0, rk3m_C_yxy_o0_t3_l0, rk3m_C_yxy_o0_t2_l0, rk3m_C_yxy_o0_t1_l0, rk3m_C_yxy_o0_t0_l0, rk3C_yxy, rk3m_C_yxz_o0_t8_l0, rk3m_C_yxz_o0_t7_l0, rk3m_C_yxz_o0_t6_l0, rk3m_C_yxz_o0_t5_l0, rk3m_C_yxz_o0_t4_l0, rk3m_C_yxz_o0_t3_l0, rk3m_C_yxz_o0_t2_l0, rk3m_C_yxz_o0_t1_l0, rk3m_C_yxz_o0_t0_l0, rk3C_yxz, rk3Cd_xxz, rk3Cd_yxz, rk3Cd_zxz, rk3m_C_yxx_o0_t8_l0, rk3m_C_yxx_o0_t6_l0, rk3m_C_yxx_o0_t5_l0, rk3m_C_yxx_o0_t3_l0, rk3m_C_yxx_o0_t2_l0, rk3m_C_yxx_o0_t0_l0, rk3C_yxx, rk3m_C_xyy_o0_t8_l0, rk3m_C_xyy_o0_t6_l0, rk3m_C_xyy_o0_t5_l0, rk3m_C_xyy_o0_t3_l0, rk3m_C_xyy_o0_t2_l0, rk3m_C_xyy_o0_t0_l0, rk3C_xyy, rk3m_C_zyy_o0_t8_l0, rk3m_C_zyy_o0_t6_l0, rk3m_C_zyy_o0_t5_l0, rk3m_C_zyy_o0_t3_l0, rk3m_C_zyy_o0_t2_l0, rk3m_C_zyy_o0_t0_l0, rk3C_zyy, rk3m_C_yyy_o0_t8_l0, rk3m_C_yyy_o0_t6_l0, rk3m_C_yyy_o0_t5_l0, rk3m_C_yyy_o0_t3_l0, rk3m_C_yyy_o0_t2_l0, rk3m_C_yyy_o0_t0_l0, rk3C_yyy, rk3Cd_xyy, rk3Cd_yyy, rk3Cd_zyy, rk3m_C_xyz_o0_t8_l0, rk3m_C_xyz_o0_t7_l0, rk3m_C_xyz_o0_t6_l0, rk3m_C_xyz_o0_t5_l0, rk3m_C_xyz_o0_t4_l0, rk3m_C_xyz_o0_t3_l0, rk3m_C_xyz_o0_t2_l0, rk3m_C_xyz_o0_t1_l0, rk3m_C_xyz_o0_t0_l0, rk3C_xyz, rk3m_C_zyz_o0_t8_l0, rk3m_C_zyz_o0_t7_l0, rk3m_C_zyz_o0_t6_l0, rk3m_C_zyz_o0_t5_l0, rk3m_C_zyz_o0_t4_l0, rk3m_C_zyz_o0_t3_l0, rk3m_C_zyz_o0_t2_l0, rk3m_C_zyz_o0_t1_l0, rk3m_C_zyz_o0_t0_l0, rk3C_zyz, rk3m_C_yyz_o0_t8_l0, rk3m_C_yyz_o0_t7_l0, rk3m_C_yyz_o0_t6_l0, rk3m_C_yyz_o0_t5_l0, rk3m_C_yyz_o0_t4_l0, rk3m_C_yyz_o0_t3_l0, rk3m_C_yyz_o0_t2_l0, rk3m_C_yyz_o0_t1_l0, rk3m_C_yyz_o0_t0_l0, rk3C_yyz, rk3Cd_xyz, rk3Cd_yyz, rk3m_C_xzz_o0_t8_l0, rk3m_C_xzz_o0_t6_l0, rk3m_C_xzz_o0_t5_l0, rk3m_C_xzz_o0_t3_l0, rk3m_C_xzz_o0_t2_l0, rk3m_C_xzz_o0_t0_l0, rk3C_xzz, rk3m_C_zzz_o0_t8_l0, rk3m_C_zzz_o0_t6_l0, rk3m_C_zzz_o0_t5_l0, rk3m_C_zzz_o0_t3_l0, rk3m_C_zzz_o0_t2_l0, rk3m_C_zzz_o0_t0_l0, rk3C_zzz, rk3m_C_yzz_o0_t8_l0, rk3m_C_yzz_o0_t6_l0, rk3m_C_yzz_o0_t5_l0, rk3m_C_yzz_o0_t3_l0, rk3m_C_yzz_o0_t2_l0, rk3m_C_yzz_o0_t0_l0, rk3C_yzz, rk3Cd_xzz, rk3Cd_yzz, rk3Cd_zzz, rk3Cd_zyz, rk3Am_yy, rk3Am_yx, rk3Am_yz, rk3Au_yz, rk3m_C_zxx_o0_t8_l0, rk3m_C_zxx_o0_t6_l0, rk3m_C_zxx_o0_t5_l0, rk3m_C_zxx_o0_t3_l0, rk3m_C_zxx_o0_t2_l0, rk3m_C_zxx_o0_t0_l0, rk3C_zxx, rk3Cd_xxx, rk3Cd_yxx, rk3Cd_zxx, rk3m_C_zxy_o0_t8_l0, rk3m_C_zxy_o0_t7_l0, rk3m_C_zxy_o0_t6_l0, rk3m_C_zxy_o0_t5_l0, rk3m_C_zxy_o0_t4_l0, rk3m_C_zxy_o0_t3_l0, rk3m_C_zxy_o0_t2_l0, rk3m_C_zxy_o0_t1_l0, rk3m_C_zxy_o0_t0_l0, rk3C_zxy, rk3Cd_xxy, rk3Cd_yxy, rk3Cd_zxy, rk3Au_yy, rk3falpha, rk3d_Rc_xx_o0_t15_m0_l0, rk3m_Rc_xx_o0_t11_l0, rk3m_Rc_xx_o0_t10_l0, rk3m_Rc_xx_o0_t9_l0, rk3m_Rc_xx_o0_t8_l0, rk3m_Rc_xx_o0_t7_l0, rk3m_Rc_xx_o0_t6_l0, rk3m_Rc_xx_o0_t5_l0, rk3m_Rc_xx_o0_t4_l0, rk3m_Rc_xx_o0_t3_l0, rk3m_Rc_xx_o0_t2_l0, rk3m_Rc_xx_o0_t1_l0, rk3m_Rc_xx_o0_t0_l0, rk3Rc_xx, rk3gammau_zy, rk3d_Rc_xy_o0_t15_m0_l0, rk3m_Rc_xy_o0_t14_l0, rk3m_Rc_xy_o0_t13_l0, rk3m_Rc_xy_o0_t12_l0, rk3m_Rc_xy_o0_t11_l0, rk3m_Rc_xy_o0_t10_l0, rk3m_Rc_xy_o0_t9_l0, rk3m_Rc_xy_o0_t8_l0, rk3m_Rc_xy_o0_t7_l0, rk3m_Rc_xy_o0_t6_l0, rk3m_Rc_xy_o0_t5_l0, rk3m_Rc_xy_o0_t4_l0, rk3m_Rc_xy_o0_t3_l0, rk3m_Rc_xy_o0_t2_l0, rk3m_Rc_xy_o0_t1_l0, rk3m_Rc_xy_o0_t0_l0, rk3Rc_xy, rk3d_Rc_yy_o0_t15_m0_l0, rk3m_Rc_yy_o0_t11_l0, rk3m_Rc_yy_o0_t10_l0, rk3m_Rc_yy_o0_t9_l0, rk3m_Rc_yy_o0_t8_l0, rk3m_Rc_yy_o0_t7_l0, rk3m_Rc_yy_o0_t6_l0, rk3m_Rc_yy_o0_t5_l0, rk3m_Rc_yy_o0_t4_l0, rk3m_Rc_yy_o0_t3_l0, rk3m_Rc_yy_o0_t2_l0, rk3m_Rc_yy_o0_t1_l0, rk3m_Rc_yy_o0_t0_l0, rk3Rc_yy, rk3gammau_zz, rk3Am_xx, rk3Am_xz, rk3Am_xy, rk3Au_xz, rk3Au_xy, rk3d_Rc_xz_o0_t15_m0_l0, rk3m_Rc_xz_o0_t14_l0, rk3m_Rc_xz_o0_t13_l0, rk3m_Rc_xz_o0_t12_l0, rk3m_Rc_xz_o0_t11_l0, rk3m_Rc_xz_o0_t10_l0, rk3m_Rc_xz_o0_t9_l0, rk3m_Rc_xz_o0_t8_l0, rk3m_Rc_xz_o0_t7_l0, rk3m_Rc_xz_o0_t6_l0, rk3m_Rc_xz_o0_t5_l0, rk3m_Rc_xz_o0_t4_l0, rk3m_Rc_xz_o0_t3_l0, rk3m_Rc_xz_o0_t2_l0, rk3m_Rc_xz_o0_t1_l0, rk3m_Rc_xz_o0_t0_l0, rk3Rc_xz, rk3d_Rc_yz_o0_t15_m0_l0, rk3m_Rc_yz_o0_t14_l0, rk3m_Rc_yz_o0_t13_l0, rk3m_Rc_yz_o0_t12_l0, rk3m_Rc_yz_o0_t11_l0, rk3m_Rc_yz_o0_t10_l0, rk3m_Rc_yz_o0_t9_l0, rk3m_Rc_yz_o0_t8_l0, rk3m_Rc_yz_o0_t7_l0, rk3m_Rc_yz_o0_t6_l0, rk3m_Rc_yz_o0_t5_l0, rk3m_Rc_yz_o0_t4_l0, rk3m_Rc_yz_o0_t3_l0, rk3m_Rc_yz_o0_t2_l0, rk3m_Rc_yz_o0_t1_l0, rk3m_Rc_yz_o0_t0_l0, rk3Rc_yz, rk3d_Rc_zz_o0_t15_m0_l0, rk3m_Rc_zz_o0_t11_l0, rk3m_Rc_zz_o0_t10_l0, rk3m_Rc_zz_o0_t9_l0, rk3m_Rc_zz_o0_t8_l0, rk3m_Rc_zz_o0_t7_l0, rk3m_Rc_zz_o0_t6_l0, rk3m_Rc_zz_o0_t5_l0, rk3m_Rc_zz_o0_t4_l0, rk3m_Rc_zz_o0_t3_l0, rk3m_Rc_zz_o0_t2_l0, rk3m_Rc_zz_o0_t1_l0, rk3m_Rc_zz_o0_t0_l0, rk3Rc_zz, rk3Au_xx, rk3gammau_zx, rk3m_dalpha_xx_o0_t14_l0, rk3m_dalpha_xx_o0_t13_l0, rk3m_dalpha_xx_o0_t12_l0, rk3m_dalpha_xx_o0_t11_l0, rk3m_dalpha_xx_o0_t10_l0, rk3m_dalpha_xx_o0_t9_l0, rk3m_dalpha_xx_o0_t8_l0, rk3m_dalpha_xx_o0_t7_l0, rk3m_dalpha_xx_o0_t6_l0, rk3m_dalpha_xx_o0_t4_l0, rk3m_dalpha_xx_o0_t3_l0, rk3m_dalpha_xx_o0_t2_l0, rk3m_dalpha_xx_o0_t1_l0, rk3dalpha_xx, rk3m_dalpha_xz_o0_t14_l0, rk3m_dalpha_xz_o0_t13_l0, rk3m_dalpha_xz_o0_t12_l0, rk3m_dalpha_xz_o0_t11_l0, rk3m_dalpha_xz_o0_t10_l0, rk3m_dalpha_xz_o0_t9_l0, rk3m_dalpha_xz_o0_t8_l0, rk3m_dalpha_xz_o0_t7_l0, rk3m_dalpha_xz_o0_t6_l0, rk3m_dalpha_xz_o0_t5_l0, rk3m_dalpha_xz_o0_t4_l0, rk3m_dalpha_xz_o0_t3_l0, rk3m_dalpha_xz_o0_t2_l0, rk3m_dalpha_xz_o0_t1_l0, rk3dalpha_xz, rk3m_dalpha_xy_o0_t14_l0, rk3m_dalpha_xy_o0_t13_l0, rk3m_dalpha_xy_o0_t12_l0, rk3m_dalpha_xy_o0_t11_l0, rk3m_dalpha_xy_o0_t10_l0, rk3m_dalpha_xy_o0_t9_l0, rk3m_dalpha_xy_o0_t8_l0, rk3m_dalpha_xy_o0_t7_l0, rk3m_dalpha_xy_o0_t6_l0, rk3m_dalpha_xy_o0_t5_l0, rk3m_dalpha_xy_o0_t4_l0, rk3m_dalpha_xy_o0_t3_l0, rk3m_dalpha_xy_o0_t2_l0, rk3m_dalpha_xy_o0_t1_l0, rk3dalpha_xy, rk3m_Rp_xx_o0_t49_l0, rk3m_Rp_xx_o0_t48_l0, rk3m_Rp_xx_o0_t47_l0, rk3m_Rp_xx_o0_t46_l0, rk3m_Rp_xx_o0_t45_l0, rk3m_Rp_xx_o0_t44_l0, rk3m_Rp_xx_o0_t43_l0, rk3m_Rp_xx_o0_t42_l0, rk3m_Rp_xx_o0_t41_l0, rk3m_Rp_xx_o0_t40_l0, rk3m_Rp_xx_o0_t39_l0, rk3m_Rp_xx_o0_t38_l0, rk3m_Rp_xx_o0_t37_l0, rk3m_Rp_xx_o0_t36_l0, rk3m_Rp_xx_o0_t35_l0, rk3m_Rp_xx_o0_t34_l0, rk3m_Rp_xx_o0_t33_l0, rk3m_Rp_xx_o0_t32_l0, rk3m_Rp_xx_o0_t31_l0, rk3m_Rp_xx_o0_t30_l0, rk3m_Rp_xx_o0_t29_l0, rk3m_Rp_xx_o0_t28_l0, rk3m_Rp_xx_o0_t27_l0, rk3m_Rp_xx_o0_t26_l0, rk3m_Rp_xx_o0_t25_l0, rk3m_Rp_xx_o0_t24_l0, rk3m_Rp_xx_o0_t23_l0, rk3m_Rp_xx_o0_t22_l0, rk3m_Rp_xx_o0_t21_l0, rk3m_Rp_xx_o0_t20_l0, rk3m_Rp_xx_o0_t19_l0, rk3m_Rp_xx_o0_t18_l0, rk3m_Rp_xx_o0_t17_l0, rk3m_Rp_xx_o0_t16_l0, rk3m_Rp_xx_o0_t15_l0, rk3m_Rp_xx_o0_t14_l0, rk3m_Rp_xx_o0_t13_l0, rk3m_Rp_xx_o0_t12_l0, rk3m_Rp_xx_o0_t11_l0, rk3m_Rp_xx_o0_t10_l0, rk3m_Rp_xx_o0_t9_l0, rk3m_Rp_xx_o0_t8_l0, rk3m_Rp_xx_o0_t7_l0, rk3m_Rp_xx_o0_t6_l0, rk3m_Rp_xx_o0_t5_l0, rk3m_Rp_xx_o0_t4_l0, rk3m_Rp_xx_o0_t3_l0, rk3m_Rp_xx_o0_t2_l0, rk3m_Rp_xx_o0_t1_l0, rk3m_Rp_xx_o0_t0_l0, rk3Rp_xx, rk3m_Rp_zz_o0_t49_l0, rk3m_Rp_zz_o0_t48_l0, rk3m_Rp_zz_o0_t47_l0, rk3m_Rp_zz_o0_t46_l0, rk3m_Rp_zz_o0_t45_l0, rk3m_Rp_zz_o0_t44_l0, rk3m_Rp_zz_o0_t43_l0, rk3m_Rp_zz_o0_t42_l0, rk3m_Rp_zz_o0_t41_l0, rk3m_Rp_zz_o0_t40_l0, rk3m_Rp_zz_o0_t39_l0, rk3m_Rp_zz_o0_t38_l0, rk3m_Rp_zz_o0_t37_l0, rk3m_Rp_zz_o0_t36_l0, rk3m_Rp_zz_o0_t35_l0, rk3m_Rp_zz_o0_t34_l0, rk3m_Rp_zz_o0_t33_l0, rk3m_Rp_zz_o0_t32_l0, rk3m_Rp_zz_o0_t31_l0, rk3m_Rp_zz_o0_t30_l0, rk3m_Rp_zz_o0_t29_l0, rk3m_Rp_zz_o0_t28_l0, rk3m_Rp_zz_o0_t27_l0, rk3m_Rp_zz_o0_t26_l0, rk3m_Rp_zz_o0_t25_l0, rk3m_Rp_zz_o0_t24_l0, rk3m_Rp_zz_o0_t23_l0, rk3m_Rp_zz_o0_t22_l0, rk3m_Rp_zz_o0_t21_l0, rk3m_Rp_zz_o0_t20_l0, rk3m_Rp_zz_o0_t19_l0, rk3m_Rp_zz_o0_t18_l0, rk3m_Rp_zz_o0_t17_l0, rk3m_Rp_zz_o0_t16_l0, rk3m_Rp_zz_o0_t15_l0, rk3m_Rp_zz_o0_t14_l0, rk3m_Rp_zz_o0_t13_l0, rk3m_Rp_zz_o0_t12_l0, rk3m_Rp_zz_o0_t11_l0, rk3m_Rp_zz_o0_t10_l0, rk3m_Rp_zz_o0_t9_l0, rk3m_Rp_zz_o0_t8_l0, rk3m_Rp_zz_o0_t7_l0, rk3m_Rp_zz_o0_t6_l0, rk3m_Rp_zz_o0_t5_l0, rk3m_Rp_zz_o0_t4_l0, rk3m_Rp_zz_o0_t3_l0, rk3m_Rp_zz_o0_t2_l0, rk3m_Rp_zz_o0_t1_l0, rk3m_Rp_zz_o0_t0_l0, rk3Rp_zz, rk3R_zz, rk3R_xx, rk3m_Rp_xy_o0_t49_l0, rk3m_Rp_xy_o0_t48_l0, rk3m_Rp_xy_o0_t47_l0, rk3m_Rp_xy_o0_t46_l0, rk3m_Rp_xy_o0_t45_l0, rk3m_Rp_xy_o0_t44_l0, rk3m_Rp_xy_o0_t43_l0, rk3m_Rp_xy_o0_t42_l0, rk3m_Rp_xy_o0_t41_l0, rk3m_Rp_xy_o0_t40_l0, rk3m_Rp_xy_o0_t39_l0, rk3m_Rp_xy_o0_t38_l0, rk3m_Rp_xy_o0_t37_l0, rk3m_Rp_xy_o0_t36_l0, rk3m_Rp_xy_o0_t35_l0, rk3m_Rp_xy_o0_t34_l0, rk3m_Rp_xy_o0_t33_l0, rk3m_Rp_xy_o0_t32_l0, rk3m_Rp_xy_o0_t31_l0, rk3m_Rp_xy_o0_t30_l0, rk3m_Rp_xy_o0_t29_l0, rk3m_Rp_xy_o0_t28_l0, rk3m_Rp_xy_o0_t27_l0, rk3m_Rp_xy_o0_t26_l0, rk3m_Rp_xy_o0_t25_l0, rk3m_Rp_xy_o0_t24_l0, rk3m_Rp_xy_o0_t23_l0, rk3m_Rp_xy_o0_t22_l0, rk3m_Rp_xy_o0_t21_l0, rk3m_Rp_xy_o0_t20_l0, rk3m_Rp_xy_o0_t19_l0, rk3m_Rp_xy_o0_t18_l0, rk3m_Rp_xy_o0_t17_l0, rk3m_Rp_xy_o0_t16_l0, rk3m_Rp_xy_o0_t15_l0, rk3m_Rp_xy_o0_t14_l0, rk3m_Rp_xy_o0_t13_l0, rk3m_Rp_xy_o0_t12_l0, rk3m_Rp_xy_o0_t11_l0, rk3m_Rp_xy_o0_t10_l0, rk3m_Rp_xy_o0_t9_l0, rk3m_Rp_xy_o0_t8_l0, rk3m_Rp_xy_o0_t7_l0, rk3m_Rp_xy_o0_t6_l0, rk3m_Rp_xy_o0_t5_l0, rk3m_Rp_xy_o0_t4_l0, rk3m_Rp_xy_o0_t3_l0, rk3m_Rp_xy_o0_t2_l0, rk3m_Rp_xy_o0_t1_l0, rk3m_Rp_xy_o0_t0_l0, rk3Rp_xy, rk3R_xy, rk3m_Rp_xz_o0_t49_l0, rk3m_Rp_xz_o0_t48_l0, rk3m_Rp_xz_o0_t47_l0, rk3m_Rp_xz_o0_t46_l0, rk3m_Rp_xz_o0_t45_l0, rk3m_Rp_xz_o0_t44_l0, rk3m_Rp_xz_o0_t43_l0, rk3m_Rp_xz_o0_t42_l0, rk3m_Rp_xz_o0_t41_l0, rk3m_Rp_xz_o0_t40_l0, rk3m_Rp_xz_o0_t39_l0, rk3m_Rp_xz_o0_t38_l0, rk3m_Rp_xz_o0_t37_l0, rk3m_Rp_xz_o0_t36_l0, rk3m_Rp_xz_o0_t35_l0, rk3m_Rp_xz_o0_t34_l0, rk3m_Rp_xz_o0_t33_l0, rk3m_Rp_xz_o0_t32_l0, rk3m_Rp_xz_o0_t31_l0, rk3m_Rp_xz_o0_t30_l0, rk3m_Rp_xz_o0_t29_l0, rk3m_Rp_xz_o0_t28_l0, rk3m_Rp_xz_o0_t27_l0, rk3m_Rp_xz_o0_t26_l0, rk3m_Rp_xz_o0_t25_l0, rk3m_Rp_xz_o0_t24_l0, rk3m_Rp_xz_o0_t23_l0, rk3m_Rp_xz_o0_t22_l0, rk3m_Rp_xz_o0_t21_l0, rk3m_Rp_xz_o0_t20_l0, rk3m_Rp_xz_o0_t19_l0, rk3m_Rp_xz_o0_t18_l0, rk3m_Rp_xz_o0_t17_l0, rk3m_Rp_xz_o0_t16_l0, rk3m_Rp_xz_o0_t15_l0, rk3m_Rp_xz_o0_t14_l0, rk3m_Rp_xz_o0_t13_l0, rk3m_Rp_xz_o0_t12_l0, rk3m_Rp_xz_o0_t11_l0, rk3m_Rp_xz_o0_t10_l0, rk3m_Rp_xz_o0_t9_l0, rk3m_Rp_xz_o0_t8_l0, rk3m_Rp_xz_o0_t7_l0, rk3m_Rp_xz_o0_t6_l0, rk3m_Rp_xz_o0_t5_l0, rk3m_Rp_xz_o0_t4_l0, rk3m_Rp_xz_o0_t3_l0, rk3m_Rp_xz_o0_t2_l0, rk3m_Rp_xz_o0_t1_l0, rk3m_Rp_xz_o0_t0_l0, rk3Rp_xz, rk3R_xz, rk3m_Rp_yy_o0_t49_l0, rk3m_Rp_yy_o0_t48_l0, rk3m_Rp_yy_o0_t47_l0, rk3m_Rp_yy_o0_t46_l0, rk3m_Rp_yy_o0_t45_l0, rk3m_Rp_yy_o0_t44_l0, rk3m_Rp_yy_o0_t43_l0, rk3m_Rp_yy_o0_t42_l0, rk3m_Rp_yy_o0_t41_l0, rk3m_Rp_yy_o0_t40_l0, rk3m_Rp_yy_o0_t39_l0, rk3m_Rp_yy_o0_t38_l0, rk3m_Rp_yy_o0_t37_l0, rk3m_Rp_yy_o0_t36_l0, rk3m_Rp_yy_o0_t35_l0, rk3m_Rp_yy_o0_t34_l0, rk3m_Rp_yy_o0_t33_l0, rk3m_Rp_yy_o0_t32_l0, rk3m_Rp_yy_o0_t31_l0, rk3m_Rp_yy_o0_t30_l0, rk3m_Rp_yy_o0_t29_l0, rk3m_Rp_yy_o0_t28_l0, rk3m_Rp_yy_o0_t27_l0, rk3m_Rp_yy_o0_t26_l0, rk3m_Rp_yy_o0_t25_l0, rk3m_Rp_yy_o0_t24_l0, rk3m_Rp_yy_o0_t23_l0, rk3m_Rp_yy_o0_t22_l0, rk3m_Rp_yy_o0_t21_l0, rk3m_Rp_yy_o0_t20_l0, rk3m_Rp_yy_o0_t19_l0, rk3m_Rp_yy_o0_t18_l0, rk3m_Rp_yy_o0_t17_l0, rk3m_Rp_yy_o0_t16_l0, rk3m_Rp_yy_o0_t15_l0, rk3m_Rp_yy_o0_t14_l0, rk3m_Rp_yy_o0_t13_l0, rk3m_Rp_yy_o0_t12_l0, rk3m_Rp_yy_o0_t11_l0, rk3m_Rp_yy_o0_t10_l0, rk3m_Rp_yy_o0_t9_l0, rk3m_Rp_yy_o0_t8_l0, rk3m_Rp_yy_o0_t7_l0, rk3m_Rp_yy_o0_t6_l0, rk3m_Rp_yy_o0_t5_l0, rk3m_Rp_yy_o0_t4_l0, rk3m_Rp_yy_o0_t3_l0, rk3m_Rp_yy_o0_t2_l0, rk3m_Rp_yy_o0_t1_l0, rk3m_Rp_yy_o0_t0_l0, rk3Rp_yy, rk3R_yy, rk3m_Rp_yz_o0_t49_l0, rk3m_Rp_yz_o0_t48_l0, rk3m_Rp_yz_o0_t47_l0, rk3m_Rp_yz_o0_t46_l0, rk3m_Rp_yz_o0_t45_l0, rk3m_Rp_yz_o0_t44_l0, rk3m_Rp_yz_o0_t43_l0, rk3m_Rp_yz_o0_t42_l0, rk3m_Rp_yz_o0_t41_l0, rk3m_Rp_yz_o0_t40_l0, rk3m_Rp_yz_o0_t39_l0, rk3m_Rp_yz_o0_t38_l0, rk3m_Rp_yz_o0_t37_l0, rk3m_Rp_yz_o0_t36_l0, rk3m_Rp_yz_o0_t35_l0, rk3m_Rp_yz_o0_t34_l0, rk3m_Rp_yz_o0_t33_l0, rk3m_Rp_yz_o0_t32_l0, rk3m_Rp_yz_o0_t31_l0, rk3m_Rp_yz_o0_t30_l0, rk3m_Rp_yz_o0_t29_l0, rk3m_Rp_yz_o0_t28_l0, rk3m_Rp_yz_o0_t27_l0, rk3m_Rp_yz_o0_t26_l0, rk3m_Rp_yz_o0_t25_l0, rk3m_Rp_yz_o0_t24_l0, rk3m_Rp_yz_o0_t23_l0, rk3m_Rp_yz_o0_t22_l0, rk3m_Rp_yz_o0_t21_l0, rk3m_Rp_yz_o0_t20_l0, rk3m_Rp_yz_o0_t19_l0, rk3m_Rp_yz_o0_t18_l0, rk3m_Rp_yz_o0_t17_l0, rk3m_Rp_yz_o0_t16_l0, rk3m_Rp_yz_o0_t15_l0, rk3m_Rp_yz_o0_t14_l0, rk3m_Rp_yz_o0_t13_l0, rk3m_Rp_yz_o0_t12_l0, rk3m_Rp_yz_o0_t11_l0, rk3m_Rp_yz_o0_t10_l0, rk3m_Rp_yz_o0_t9_l0, rk3m_Rp_yz_o0_t8_l0, rk3m_Rp_yz_o0_t7_l0, rk3m_Rp_yz_o0_t6_l0, rk3m_Rp_yz_o0_t5_l0, rk3m_Rp_yz_o0_t4_l0, rk3m_Rp_yz_o0_t3_l0, rk3m_Rp_yz_o0_t2_l0, rk3m_Rp_yz_o0_t1_l0, rk3m_Rp_yz_o0_t0_l0, rk3Rp_yz, rk3R_yz, rk3R, rk3m_dalpha_yz_o0_t14_l0, rk3m_dalpha_yz_o0_t13_l0, rk3m_dalpha_yz_o0_t12_l0, rk3m_dalpha_yz_o0_t11_l0, rk3m_dalpha_yz_o0_t10_l0, rk3m_dalpha_yz_o0_t9_l0, rk3m_dalpha_yz_o0_t8_l0, rk3m_dalpha_yz_o0_t7_l0, rk3m_dalpha_yz_o0_t6_l0, rk3m_dalpha_yz_o0_t5_l0, rk3m_dalpha_yz_o0_t4_l0, rk3m_dalpha_yz_o0_t3_l0, rk3m_dalpha_yz_o0_t2_l0, rk3m_dalpha_yz_o0_t1_l0, rk3dalpha_yz, rk3m_dalpha_yy_o0_t14_l0, rk3m_dalpha_yy_o0_t13_l0, rk3m_dalpha_yy_o0_t12_l0, rk3m_dalpha_yy_o0_t11_l0, rk3m_dalpha_yy_o0_t10_l0, rk3m_dalpha_yy_o0_t9_l0, rk3m_dalpha_yy_o0_t8_l0, rk3m_dalpha_yy_o0_t7_l0, rk3m_dalpha_yy_o0_t6_l0, rk3m_dalpha_yy_o0_t4_l0, rk3m_dalpha_yy_o0_t3_l0, rk3m_dalpha_yy_o0_t2_l0, rk3m_dalpha_yy_o0_t1_l0, rk3dalpha_yy, rk3m_dalpha_zz_o0_t14_l0, rk3m_dalpha_zz_o0_t13_l0, rk3m_dalpha_zz_o0_t12_l0, rk3m_dalpha_zz_o0_t11_l0, rk3m_dalpha_zz_o0_t10_l0, rk3m_dalpha_zz_o0_t9_l0, rk3m_dalpha_zz_o0_t8_l0, rk3m_dalpha_zz_o0_t7_l0, rk3m_dalpha_zz_o0_t6_l0, rk3m_dalpha_zz_o0_t4_l0, rk3m_dalpha_zz_o0_t3_l0, rk3m_dalpha_zz_o0_t2_l0, rk3m_dalpha_zz_o0_t1_l0, rk3dalpha_zz, rk3trdalpha, rk3Psi1TF_yz, rk3Psi1TF_yy, rk3Psi1TF_xy, rk3Psi1TF_xx, rk3Psi1TF_xz, rk3Psi1TF_zz, d_gammac_xx_o2_t3_m0_l0, d_gammac_xy_o2_t6_m0_l0, d_gammac_xz_o2_t6_m0_l0, d_gammac_yy_o2_t3_m0_l0, d_gammac_yx_o2_t6_m0_l0, d_gammac_yz_o2_t6_m0_l0, d_gammac_zz_o2_t3_m0_l0, d_gammac_zx_o2_t6_m0_l0, d_gammac_zy_o2_t6_m0_l0, d_A_xx_o2_t3_m0_l0, d_A_xy_o2_t6_m0_l0, d_A_xz_o2_t6_m0_l0, d_A_yy_o2_t3_m0_l0, d_A_yz_o2_t6_m0_l0, d_A_zz_o2_t3_m0_l0, d_Phi_o2_t0_m0_l0, d_trK_o2_t0_m0_l0, d_beta_x_o0_t0_m0_l0, d_alpha_o2_t0_m0_l0, d_Gam_x_o0_t33_m0_l0, d_Gam_y_o0_t33_m0_l0, d_Gam_z_o0_t33_m0_l0, m_Gam_z_o0_t32_l0, m_Gam_z_o0_t31_l0, m_Gam_z_o0_t30_l0, m_Gam_z_o0_t29_l0, m_Gam_z_o0_t28_l0, m_Gam_z_o0_t27_l0, m_Gam_z_o0_t26_l0, m_Gam_z_o0_t25_l0, m_Gam_z_o0_t24_l0, m_Gam_z_o0_t23_l0, m_Gam_z_o0_t22_l0, m_Gam_z_o0_t21_l0, m_Gam_z_o0_t20_l0, m_Gam_z_o0_t19_l0, m_Gam_z_o0_t18_l0, m_Gam_z_o0_t17_l0, m_Gam_z_o0_t16_l0, m_Gam_z_o0_t15_l0, m_Gam_z_o0_t14_l0, m_Gam_z_o0_t13_l0, m_Gam_z_o0_t12_l0, m_Gam_z_o0_t11_l0, m_Gam_z_o0_t10_l0, m_Gam_z_o0_t9_l0, m_Gam_z_o0_t8_l0, m_Gam_z_o0_t7_l0, m_Gam_z_o0_t6_l0, m_Gam_z_o0_t5_l0, m_Gam_z_o0_t4_l0, m_Gam_z_o0_t3_l0, m_Gam_z_o0_t2_l0, m_Gam_z_o0_t1_l0, m_Gam_z_o0_t0_l0, m_Gam_y_o0_t32_l0, m_Gam_y_o0_t31_l0, m_Gam_y_o0_t30_l0, m_Gam_y_o0_t29_l0, m_Gam_y_o0_t28_l0, m_Gam_y_o0_t27_l0, m_Gam_y_o0_t26_l0, m_Gam_y_o0_t25_l0, m_Gam_y_o0_t24_l0, m_Gam_y_o0_t23_l0, m_Gam_y_o0_t22_l0, m_Gam_y_o0_t21_l0, m_Gam_y_o0_t20_l0, m_Gam_y_o0_t19_l0, m_Gam_y_o0_t18_l0, m_Gam_y_o0_t17_l0, m_Gam_y_o0_t16_l0, m_Gam_y_o0_t15_l0, m_Gam_y_o0_t14_l0, m_Gam_y_o0_t13_l0, m_Gam_y_o0_t12_l0, m_Gam_y_o0_t11_l0, m_Gam_y_o0_t10_l0, m_Gam_y_o0_t9_l0, m_Gam_y_o0_t8_l0, m_Gam_y_o0_t7_l0, m_Gam_y_o0_t6_l0, m_Gam_y_o0_t5_l0, m_Gam_y_o0_t4_l0, m_Gam_y_o0_t3_l0, m_Gam_y_o0_t2_l0, m_Gam_y_o0_t1_l0, m_Gam_y_o0_t0_l0, m_Gam_x_o0_t32_l0, m_Gam_x_o0_t31_l0, m_Gam_x_o0_t30_l0, m_Gam_x_o0_t29_l0, m_Gam_x_o0_t28_l0, m_Gam_x_o0_t27_l0, m_Gam_x_o0_t26_l0, m_Gam_x_o0_t25_l0, m_Gam_x_o0_t24_l0, m_Gam_x_o0_t23_l0, m_Gam_x_o0_t22_l0, m_Gam_x_o0_t21_l0, m_Gam_x_o0_t20_l0, m_Gam_x_o0_t19_l0, m_Gam_x_o0_t18_l0, m_Gam_x_o0_t17_l0, m_Gam_x_o0_t16_l0, m_Gam_x_o0_t15_l0, m_Gam_x_o0_t14_l0, m_Gam_x_o0_t13_l0, m_Gam_x_o0_t12_l0, m_Gam_x_o0_t11_l0, m_Gam_x_o0_t10_l0, m_Gam_x_o0_t9_l0, m_Gam_x_o0_t8_l0, m_Gam_x_o0_t7_l0, m_Gam_x_o0_t6_l0, m_Gam_x_o0_t5_l0, m_Gam_x_o0_t4_l0, m_Gam_x_o0_t3_l0, m_Gam_x_o0_t2_l0, m_Gam_x_o0_t1_l0, m_Gam_x_o0_t0_l0, m_alpha_o1_t2_l0, m_alpha_o1_t1_l0, m_alpha_o1_t0_l0, m_alpha_o0_t2_l0, m_alpha_o0_t1_l0, m_alpha_o0_t0_l0, m_trK_o1_t2_l0, m_trK_o1_t1_l0, m_trK_o1_t0_l0, m_trK_o0_t2_l0, m_trK_o0_t1_l0, m_trK_o0_t0_l0, m_Phi_o1_t2_l0, m_Phi_o1_t1_l0, m_Phi_o1_t0_l0, m_Phi_o0_t2_l0, m_Phi_o0_t1_l0, m_Phi_o0_t0_l0, m_A_zz_o2_t2_l0, m_A_zz_o2_t1_l0, m_A_zz_o2_t0_l0, m_A_zz_o1_t2_l0, m_A_zz_o1_t1_l0, m_A_zz_o1_t0_l0, m_A_zz_o0_t2_l0, m_A_zz_o0_t1_l0, m_A_zz_o0_t0_l0, m_A_yz_o2_t5_l0, m_A_yz_o2_t4_l0, m_A_yz_o2_t3_l0, m_A_yz_o2_t2_l0, m_A_yz_o2_t1_l0, m_A_yz_o2_t0_l0, m_A_yz_o1_t2_l0, m_A_yz_o1_t1_l0, m_A_yz_o1_t0_l0, m_A_yz_o0_t2_l0, m_A_yz_o0_t1_l0, m_A_yz_o0_t0_l0, m_A_yy_o2_t2_l0, m_A_yy_o2_t1_l0, m_A_yy_o2_t0_l0, m_A_yy_o1_t2_l0, m_A_yy_o1_t1_l0, m_A_yy_o1_t0_l0, m_A_yy_o0_t2_l0, m_A_yy_o0_t1_l0, m_A_yy_o0_t0_l0, m_A_xz_o2_t5_l0, m_A_xz_o2_t4_l0, m_A_xz_o2_t3_l0, m_A_xz_o2_t2_l0, m_A_xz_o2_t1_l0, m_A_xz_o2_t0_l0, m_A_xz_o1_t2_l0, m_A_xz_o1_t1_l0, m_A_xz_o1_t0_l0, m_A_xz_o0_t2_l0, m_A_xz_o0_t1_l0, m_A_xz_o0_t0_l0, m_A_xy_o2_t5_l0, m_A_xy_o2_t4_l0, m_A_xy_o2_t3_l0, m_A_xy_o2_t2_l0, m_A_xy_o2_t1_l0, m_A_xy_o2_t0_l0, m_A_xy_o1_t2_l0, m_A_xy_o1_t1_l0, m_A_xy_o1_t0_l0, m_A_xy_o0_t2_l0, m_A_xy_o0_t1_l0, m_A_xy_o0_t0_l0, m_A_xx_o2_t2_l0, m_A_xx_o2_t1_l0, m_A_xx_o2_t0_l0, m_A_xx_o1_t2_l0, m_A_xx_o1_t1_l0, m_A_xx_o1_t0_l0, m_A_xx_o0_t2_l0, m_A_xx_o0_t1_l0, m_A_xx_o0_t0_l0, m_gammac_zy_o1_t2_l0, m_gammac_zy_o1_t1_l0, m_gammac_zy_o1_t0_l0, m_gammac_zy_o0_t2_l0, m_gammac_zy_o0_t1_l0, m_gammac_zy_o0_t0_l0, m_gammac_zx_o1_t2_l0, m_gammac_zx_o1_t1_l0, m_gammac_zx_o1_t0_l0, m_gammac_zx_o0_t2_l0, m_gammac_zx_o0_t1_l0, m_gammac_zx_o0_t0_l0, m_gammac_zz_o2_t2_l0, m_gammac_zz_o2_t1_l0, m_gammac_zz_o2_t0_l0, m_gammac_zz_o1_t2_l0, m_gammac_zz_o1_t1_l0, m_gammac_zz_o1_t0_l0, m_gammac_zz_o0_t2_l0, m_gammac_zz_o0_t1_l0, m_gammac_zz_o0_t0_l0, m_gammac_yz_o2_t5_l0, m_gammac_yz_o2_t4_l0, m_gammac_yz_o2_t3_l0, m_gammac_yz_o2_t2_l0, m_gammac_yz_o2_t1_l0, m_gammac_yz_o2_t0_l0, m_gammac_yz_o1_t2_l0, m_gammac_yz_o1_t1_l0, m_gammac_yz_o1_t0_l0, m_gammac_yz_o0_t2_l0, m_gammac_yz_o0_t1_l0, m_gammac_yz_o0_t0_l0, m_gammac_yx_o1_t2_l0, m_gammac_yx_o1_t1_l0, m_gammac_yx_o1_t0_l0, m_gammac_yx_o0_t2_l0, m_gammac_yx_o0_t1_l0, m_gammac_yx_o0_t0_l0, m_gammac_yy_o2_t2_l0, m_gammac_yy_o2_t1_l0, m_gammac_yy_o2_t0_l0, m_gammac_yy_o1_t2_l0, m_gammac_yy_o1_t1_l0, m_gammac_yy_o1_t0_l0, m_gammac_yy_o0_t2_l0, m_gammac_yy_o0_t1_l0, m_gammac_yy_o0_t0_l0, m_gammac_xz_o2_t5_l0, m_gammac_xz_o2_t4_l0, m_gammac_xz_o2_t3_l0, m_gammac_xz_o2_t2_l0, m_gammac_xz_o2_t1_l0, m_gammac_xz_o2_t0_l0, m_gammac_xz_o1_t2_l0, m_gammac_xz_o1_t1_l0, m_gammac_xz_o1_t0_l0, m_gammac_xz_o0_t2_l0, m_gammac_xz_o0_t1_l0, m_gammac_xz_o0_t0_l0, m_gammac_xy_o2_t5_l0, m_gammac_xy_o2_t4_l0, m_gammac_xy_o2_t3_l0, m_gammac_xy_o2_t2_l0, m_gammac_xy_o2_t1_l0, m_gammac_xy_o2_t0_l0, m_gammac_xy_o1_t2_l0, m_gammac_xy_o1_t1_l0, m_gammac_xy_o1_t0_l0, m_gammac_xy_o0_t2_l0, m_gammac_xy_o0_t1_l0, m_gammac_xy_o0_t0_l0, m_gammac_xx_o2_t2_l0, m_gammac_xx_o2_t1_l0, m_gammac_xx_o2_t0_l0, m_gammac_xx_o1_t2_l0, m_gammac_xx_o1_t1_l0, m_gammac_xx_o1_t0_l0, m_gammac_xx_o0_t2_l0, m_gammac_xx_o0_t1_l0, m_gammac_xx_o0_t0_l0, RHS_gammac_xx, RHS_gammac_xy, RHS_gammac_xz, RHS_gammac_yy, RHS_gammac_yx, RHS_gammac_yz, RHS_gammac_zz, RHS_gammac_zx, RHS_gammac_zy, RHS_A_xx, RHS_A_xy, RHS_A_xz, RHS_A_yy, RHS_A_yz, RHS_A_zz, RHS_Phi, RHS_trK, RHS_beta_x, RHS_beta_y, RHS_beta_z, RHS_alpha, RHS_Gam_x, RHS_Gam_y, RHS_Gam_z;
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((i + 3 < ilast && i - 3 >= 0 && j + 3 < jlast && j - 3 >= 0 && k + 3 < klast && k - 3 >= 0)) {
						d_div_beta_o0_t0_m0_l0 = D1CDO4_i(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t0_m0_l0 = D1CDO4_j(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t0_m0_l0 = D1CDO4_k(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t0_m0_l0 = D2CDO4_i(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t4_m0_l0 = D2CDO4_j(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t8_m0_l0 = D2CDO4_k(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t1_m0_l0 = D1CDO4_i(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t1_m0_l0 = D1CDO4_j(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o2_t1_m0_l0 = D1CDO4_k(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t0_m0_l0 = D2CDO4_i(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t10_m0_l0 = D1CDO4crossed_ji(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t13_m0_l0 = D2CDO4_j(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t16_m0_l0 = D1CDO4crossed_jk(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_y_o0_t8_m0_l0 = D2CDO4_k(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o2_t2_m0_l0 = D1CDO4_i(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o2_t2_m0_l0 = D1CDO4_j(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_div_beta_o0_t2_m0_l0 = D1CDO4_k(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t0_m0_l0 = D2CDO4_i(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t4_m0_l0 = D2CDO4_j(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_z_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t11_m0_l0 = D1CDO4crossed_ki(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t14_m0_l0 = D1CDO4crossed_kj(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t17_m0_l0 = D2CDO4_k(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t0_m0_l0 = lieforward_i(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t0_m0_l0 = liebackward_i(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t1_m0_l0 = lieforward_j(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t1_m0_l0 = liebackward_j(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o0_t2_m0_l0 = lieforward_k(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xx_o1_t2_m0_l0 = liebackward_k(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t0_m0_l0 = lieforward_i(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t0_m0_l0 = liebackward_i(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t1_m0_l0 = lieforward_j(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t1_m0_l0 = liebackward_j(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o0_t2_m0_l0 = lieforward_k(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yx_o1_t2_m0_l0 = liebackward_k(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t0_m0_l0 = lieforward_i(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t0_m0_l0 = liebackward_i(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t1_m0_l0 = lieforward_j(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t1_m0_l0 = liebackward_j(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o0_t2_m0_l0 = lieforward_k(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zx_o1_t2_m0_l0 = liebackward_k(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t0_m0_l0 = lieforward_i(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t0_m0_l0 = liebackward_i(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t1_m0_l0 = lieforward_j(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t1_m0_l0 = liebackward_j(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o0_t2_m0_l0 = lieforward_k(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xy_o1_t2_m0_l0 = liebackward_k(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t0_m0_l0 = lieforward_i(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t0_m0_l0 = liebackward_i(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t1_m0_l0 = lieforward_j(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t1_m0_l0 = liebackward_j(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o0_t2_m0_l0 = lieforward_k(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yy_o1_t2_m0_l0 = liebackward_k(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t0_m0_l0 = lieforward_i(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t0_m0_l0 = liebackward_i(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t1_m0_l0 = lieforward_j(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t1_m0_l0 = liebackward_j(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o0_t2_m0_l0 = lieforward_k(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zy_o1_t2_m0_l0 = liebackward_k(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t0_m0_l0 = lieforward_i(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t0_m0_l0 = liebackward_i(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t1_m0_l0 = lieforward_j(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t1_m0_l0 = liebackward_j(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o0_t2_m0_l0 = lieforward_k(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_xz_o1_t2_m0_l0 = liebackward_k(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t0_m0_l0 = lieforward_i(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t0_m0_l0 = liebackward_i(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t1_m0_l0 = lieforward_j(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t1_m0_l0 = liebackward_j(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o0_t2_m0_l0 = lieforward_k(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_yz_o1_t2_m0_l0 = liebackward_k(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t0_m0_l0 = lieforward_i(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t0_m0_l0 = liebackward_i(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t1_m0_l0 = lieforward_j(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t1_m0_l0 = liebackward_j(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o0_t2_m0_l0 = lieforward_k(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_gammac_zz_o1_t2_m0_l0 = liebackward_k(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t1_m0_l0 = D1CDO4_i(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t0_m0_l0 = lieforward_i(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t0_m0_l0 = liebackward_i(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t2_m0_l0 = D1CDO4_j(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t1_m0_l0 = lieforward_j(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t1_m0_l0 = liebackward_j(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t3_m0_l0 = D1CDO4_k(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o0_t2_m0_l0 = lieforward_k(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_alpha_o1_t2_m0_l0 = liebackward_k(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t0_m0_l0 = D2CDO4_i(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xy_o0_t0_m0_l0 = D1CDO4crossed_ji(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yy_o0_t0_m0_l0 = D2CDO4_j(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xz_o0_t0_m0_l0 = D1CDO4crossed_ki(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_yz_o0_t0_m0_l0 = D1CDO4crossed_kj(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_zz_o0_t0_m0_l0 = D2CDO4_k(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t4_m0_l0 = D1CDO4_i(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t0_m0_l0 = lieforward_i(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t0_m0_l0 = liebackward_i(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t9_m0_l0 = D1CDO4_j(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t1_m0_l0 = lieforward_j(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t1_m0_l0 = liebackward_j(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_dalpha_xx_o0_t12_m0_l0 = D1CDO4_k(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o0_t2_m0_l0 = lieforward_k(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Phi_o1_t2_m0_l0 = liebackward_k(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t0_m0_l0 = lieforward_i(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t0_m0_l0 = liebackward_i(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t1_m0_l0 = lieforward_j(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t1_m0_l0 = liebackward_j(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o0_t2_m0_l0 = lieforward_k(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xx_o1_t2_m0_l0 = liebackward_k(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t0_m0_l0 = lieforward_i(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t0_m0_l0 = liebackward_i(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t1_m0_l0 = lieforward_j(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t1_m0_l0 = liebackward_j(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o0_t2_m0_l0 = lieforward_k(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xy_o1_t2_m0_l0 = liebackward_k(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t0_m0_l0 = lieforward_i(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t0_m0_l0 = liebackward_i(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t1_m0_l0 = lieforward_j(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t1_m0_l0 = liebackward_j(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o0_t2_m0_l0 = lieforward_k(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_xz_o1_t2_m0_l0 = liebackward_k(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t0_m0_l0 = lieforward_i(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t0_m0_l0 = liebackward_i(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t1_m0_l0 = lieforward_j(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t1_m0_l0 = liebackward_j(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o0_t2_m0_l0 = lieforward_k(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yy_o1_t2_m0_l0 = liebackward_k(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t0_m0_l0 = lieforward_i(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t0_m0_l0 = liebackward_i(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t1_m0_l0 = lieforward_j(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t1_m0_l0 = liebackward_j(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o0_t2_m0_l0 = lieforward_k(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_yz_o1_t2_m0_l0 = liebackward_k(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t0_m0_l0 = lieforward_i(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t0_m0_l0 = liebackward_i(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t1_m0_l0 = lieforward_j(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t1_m0_l0 = liebackward_j(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o0_t2_m0_l0 = lieforward_k(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_A_zz_o1_t2_m0_l0 = liebackward_k(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t0_m0_l0 = lieforward_i(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t0_m0_l0 = liebackward_i(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t27_m0_l0 = D1CDO4_i(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t1_m0_l0 = lieforward_j(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t1_m0_l0 = liebackward_j(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t28_m0_l0 = D1CDO4_j(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o0_t2_m0_l0 = lieforward_k(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_trK_o1_t2_m0_l0 = liebackward_k(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Gam_x_o0_t29_m0_l0 = D1CDO4_k(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
						rk3div_beta = (d_div_beta_o0_t0_m0_l0 + d_div_beta_o0_t1_m0_l0) + d_div_beta_o0_t2_m0_l0;
						rk3Detgammac = vector(rk3gammac_yy, i, j, k) * vector(rk3gammac_zz, i, j, k) * vector(rk3gammac_xx, i, j, k) + (-vector(rk3gammac_yy, i, j, k) * (vector(rk3gammac_xz, i, j, k) * vector(rk3gammac_xz, i, j, k))) + (-vector(rk3gammac_zz, i, j, k) * (vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_xy, i, j, k))) + (-(vector(rk3gammac_yz, i, j, k) * vector(rk3gammac_yz, i, j, k)) * vector(rk3gammac_xx, i, j, k)) + 2.0 * vector(rk3gammac_yz, i, j, k) * vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_xz, i, j, k);
						rk3gamma_zz = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_zz, i, j, k);
						rk3iDetgammac = 1.0 / rk3Detgammac;
						rk3gamma_yy = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_yy, i, j, k);
						rk3gamma_yz = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_yz, i, j, k);
						rk3gamma_xx = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_xx, i, j, k);
						rk3gamma_xy = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_xy, i, j, k);
						rk3gamma_xz = exp(4.0 * vector(rk3Phi, i, j, k)) * vector(rk3gammac_xz, i, j, k);
						rk3Detgamma = rk3gamma_yy * rk3gamma_zz * rk3gamma_xx + (-rk3gamma_yy * (rk3gamma_xz * rk3gamma_xz)) + (-rk3gamma_zz * (rk3gamma_xy * rk3gamma_xy)) + (-(rk3gamma_yz * rk3gamma_yz) * rk3gamma_xx) + 2.0 * rk3gamma_yz * rk3gamma_xy * rk3gamma_xz;
						rk3iDetgamma = 1.0 / rk3Detgamma;
						rk3gammacu_zz = rk3iDetgammac * (vector(rk3gammac_xx, i, j, k) * vector(rk3gammac_yy, i, j, k) - vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_xy, i, j, k));
						rk3gammau_xx = rk3iDetgamma * (rk3gamma_yy * rk3gamma_zz - rk3gamma_yz * rk3gamma_yz);
						rk3gammau_xy = rk3iDetgamma * ((-rk3gamma_xy * rk3gamma_zz) + rk3gamma_yz * rk3gamma_xz);
						rk3gammau_xz = rk3iDetgamma * (rk3gamma_xy * rk3gamma_yz - rk3gamma_yy * rk3gamma_xz);
						rk3gammacu_yy = rk3iDetgammac * (vector(rk3gammac_xx, i, j, k) * vector(rk3gammac_zz, i, j, k) - vector(rk3gammac_xz, i, j, k) * vector(rk3gammac_xz, i, j, k));
						rk3gammacu_yz = rk3iDetgammac * ((-vector(rk3gammac_xx, i, j, k) * vector(rk3gammac_yz, i, j, k)) + vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_xz, i, j, k));
						rk3gammacu_zy = rk3gammacu_yz;
						rk3gammau_yx = rk3gammau_xy;
						rk3gammau_yy = rk3iDetgamma * (rk3gamma_xx * rk3gamma_zz - rk3gamma_xz * rk3gamma_xz);
						rk3gammau_yz = rk3iDetgamma * ((-rk3gamma_xx * rk3gamma_yz) + rk3gamma_xy * rk3gamma_xz);
						rk3gammacu_xz = rk3iDetgammac * (vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_yz, i, j, k) - vector(rk3gammac_yy, i, j, k) * vector(rk3gammac_xz, i, j, k));
						rk3gammacu_zx = rk3gammacu_xz;
						rk3Am_zx = rk3gammacu_zx * vector(rk3A_xx, i, j, k) + rk3gammacu_zy * vector(rk3A_xy, i, j, k) + rk3gammacu_zz * vector(rk3A_xz, i, j, k);
						rk3Am_zz = rk3gammacu_zx * vector(rk3A_xz, i, j, k) + rk3gammacu_zy * vector(rk3A_yz, i, j, k) + rk3gammacu_zz * vector(rk3A_zz, i, j, k);
						rk3Am_zy = rk3gammacu_zx * vector(rk3A_xy, i, j, k) + rk3gammacu_zy * vector(rk3A_yy, i, j, k) + rk3gammacu_zz * vector(rk3A_yz, i, j, k);
						rk3Au_zz = rk3gammacu_zx * rk3Am_zx + rk3gammacu_zy * rk3Am_zy + rk3gammacu_zz * rk3Am_zz;
						rk3gammacu_xx = rk3iDetgammac * (vector(rk3gammac_yy, i, j, k) * vector(rk3gammac_zz, i, j, k) - vector(rk3gammac_yz, i, j, k) * vector(rk3gammac_yz, i, j, k));
						rk3gammacu_xy = rk3iDetgammac * ((-vector(rk3gammac_xy, i, j, k) * vector(rk3gammac_zz, i, j, k)) + vector(rk3gammac_yz, i, j, k) * vector(rk3gammac_xz, i, j, k));
						rk3m_C_xxx_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_xxx_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xxx_o0_t6_m0_l0;
						rk3m_C_xxx_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_xxx_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xxx_o0_t3_m0_l0;
						rk3m_C_xxx_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk3m_C_xxx_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxx_o0_t0_m0_l0;
						rk3C_xxx = (((((((rk3m_C_xxx_o0_t0_l0 + rk3m_C_xxx_o0_t0_l0) + rk3m_C_xxx_o0_t2_l0) + rk3m_C_xxx_o0_t3_l0) + rk3m_C_xxx_o0_t3_l0) + rk3m_C_xxx_o0_t5_l0) + rk3m_C_xxx_o0_t6_l0) + rk3m_C_xxx_o0_t6_l0) + rk3m_C_xxx_o0_t8_l0;
						rk3m_C_xxz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xxz_o0_t8_m0_l0;
						rk3m_C_xxz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xxz_o0_t7_m0_l0;
						rk3m_C_xxz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_xxz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xxz_o0_t5_m0_l0;
						rk3m_C_xxz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xxz_o0_t4_m0_l0;
						rk3m_C_xxz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_xxz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk3m_C_xxz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_xxz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxz_o0_t0_m0_l0;
						rk3C_xxz = (((((((rk3m_C_xxz_o0_t0_l0 + rk3m_C_xxz_o0_t1_l0) + rk3m_C_xxz_o0_t2_l0) + rk3m_C_xxz_o0_t3_l0) + rk3m_C_xxz_o0_t4_l0) + rk3m_C_xxz_o0_t5_l0) + rk3m_C_xxz_o0_t6_l0) + rk3m_C_xxz_o0_t7_l0) + rk3m_C_xxz_o0_t8_l0;
						rk3m_C_zxz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xxz_o0_t8_m0_l0;
						rk3m_C_zxz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xxz_o0_t7_m0_l0;
						rk3m_C_zxz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_zxz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xxz_o0_t5_m0_l0;
						rk3m_C_zxz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xxz_o0_t4_m0_l0;
						rk3m_C_zxz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_zxz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk3m_C_zxz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_zxz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxz_o0_t0_m0_l0;
						rk3C_zxz = (((((((rk3m_C_zxz_o0_t0_l0 + rk3m_C_zxz_o0_t1_l0) + rk3m_C_zxz_o0_t2_l0) + rk3m_C_zxz_o0_t3_l0) + rk3m_C_zxz_o0_t4_l0) + rk3m_C_zxz_o0_t5_l0) + rk3m_C_zxz_o0_t6_l0) + rk3m_C_zxz_o0_t7_l0) + rk3m_C_zxz_o0_t8_l0;
						rk3m_C_xxy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_xxy_o0_t7_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xxy_o0_t7_m0_l0;
						rk3m_C_xxy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xxy_o0_t6_m0_l0;
						rk3m_C_xxy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xxy_o0_t5_m0_l0;
						rk3m_C_xxy_o0_t4_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xxy_o0_t4_m0_l0;
						rk3m_C_xxy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_xxy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk3m_C_xxy_o0_t1_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_xxy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxy_o0_t0_m0_l0;
						rk3C_xxy = (((((((rk3m_C_xxy_o0_t0_l0 + rk3m_C_xxy_o0_t1_l0) + rk3m_C_xxy_o0_t2_l0) + rk3m_C_xxy_o0_t3_l0) + rk3m_C_xxy_o0_t4_l0) + rk3m_C_xxy_o0_t5_l0) + rk3m_C_xxy_o0_t6_l0) + rk3m_C_xxy_o0_t7_l0) + rk3m_C_xxy_o0_t8_l0;
						rk3gammacu_yx = rk3gammacu_xy;
						rk3m_C_yxy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_yxy_o0_t7_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xxy_o0_t7_m0_l0;
						rk3m_C_yxy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xxy_o0_t6_m0_l0;
						rk3m_C_yxy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xxy_o0_t5_m0_l0;
						rk3m_C_yxy_o0_t4_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xxy_o0_t4_m0_l0;
						rk3m_C_yxy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_yxy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk3m_C_yxy_o0_t1_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_yxy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxy_o0_t0_m0_l0;
						rk3C_yxy = (((((((rk3m_C_yxy_o0_t0_l0 + rk3m_C_yxy_o0_t1_l0) + rk3m_C_yxy_o0_t2_l0) + rk3m_C_yxy_o0_t3_l0) + rk3m_C_yxy_o0_t4_l0) + rk3m_C_yxy_o0_t5_l0) + rk3m_C_yxy_o0_t6_l0) + rk3m_C_yxy_o0_t7_l0) + rk3m_C_yxy_o0_t8_l0;
						rk3m_C_yxz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xxz_o0_t8_m0_l0;
						rk3m_C_yxz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xxz_o0_t7_m0_l0;
						rk3m_C_yxz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_yxz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xxz_o0_t5_m0_l0;
						rk3m_C_yxz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xxz_o0_t4_m0_l0;
						rk3m_C_yxz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_yxz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk3m_C_yxz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_yxz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxz_o0_t0_m0_l0;
						rk3C_yxz = (((((((rk3m_C_yxz_o0_t0_l0 + rk3m_C_yxz_o0_t1_l0) + rk3m_C_yxz_o0_t2_l0) + rk3m_C_yxz_o0_t3_l0) + rk3m_C_yxz_o0_t4_l0) + rk3m_C_yxz_o0_t5_l0) + rk3m_C_yxz_o0_t6_l0) + rk3m_C_yxz_o0_t7_l0) + rk3m_C_yxz_o0_t8_l0;
						rk3Cd_xxz = vector(rk3gammac_xx, i, j, k) * rk3C_xxz + vector(rk3gammac_xy, i, j, k) * rk3C_yxz + vector(rk3gammac_xz, i, j, k) * rk3C_zxz;
						rk3Cd_yxz = vector(rk3gammac_yx, i, j, k) * rk3C_xxz + vector(rk3gammac_yy, i, j, k) * rk3C_yxz + vector(rk3gammac_yz, i, j, k) * rk3C_zxz;
						rk3Cd_zxz = vector(rk3gammac_zx, i, j, k) * rk3C_xxz + vector(rk3gammac_zy, i, j, k) * rk3C_yxz + vector(rk3gammac_zz, i, j, k) * rk3C_zxz;
						rk3m_C_yxx_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_yxx_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xxx_o0_t6_m0_l0;
						rk3m_C_yxx_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_yxx_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xxx_o0_t3_m0_l0;
						rk3m_C_yxx_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk3m_C_yxx_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxx_o0_t0_m0_l0;
						rk3C_yxx = (((((((rk3m_C_yxx_o0_t0_l0 + rk3m_C_yxx_o0_t0_l0) + rk3m_C_yxx_o0_t2_l0) + rk3m_C_yxx_o0_t3_l0) + rk3m_C_yxx_o0_t3_l0) + rk3m_C_yxx_o0_t5_l0) + rk3m_C_yxx_o0_t6_l0) + rk3m_C_yxx_o0_t6_l0) + rk3m_C_yxx_o0_t8_l0;
						rk3m_C_xyy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_xyy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xyy_o0_t6_m0_l0;
						rk3m_C_xyy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_xyy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_xyy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_xyy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxy_o0_t5_m0_l0;
						rk3C_xyy = (((((((rk3m_C_xyy_o0_t0_l0 + rk3m_C_xyy_o0_t0_l0) + rk3m_C_xyy_o0_t2_l0) + rk3m_C_xyy_o0_t3_l0) + rk3m_C_xyy_o0_t3_l0) + rk3m_C_xyy_o0_t5_l0) + rk3m_C_xyy_o0_t6_l0) + rk3m_C_xyy_o0_t6_l0) + rk3m_C_xyy_o0_t8_l0;
						rk3m_C_zyy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_zyy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xyy_o0_t6_m0_l0;
						rk3m_C_zyy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_zyy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_zyy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_zyy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxy_o0_t5_m0_l0;
						rk3C_zyy = (((((((rk3m_C_zyy_o0_t0_l0 + rk3m_C_zyy_o0_t0_l0) + rk3m_C_zyy_o0_t2_l0) + rk3m_C_zyy_o0_t3_l0) + rk3m_C_zyy_o0_t3_l0) + rk3m_C_zyy_o0_t5_l0) + rk3m_C_zyy_o0_t6_l0) + rk3m_C_zyy_o0_t6_l0) + rk3m_C_zyy_o0_t8_l0;
						rk3m_C_yyy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_yyy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xyy_o0_t6_m0_l0;
						rk3m_C_yyy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_yyy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xyy_o0_t3_m0_l0;
						rk3m_C_yyy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_yyy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxy_o0_t5_m0_l0;
						rk3C_yyy = (((((((rk3m_C_yyy_o0_t0_l0 + rk3m_C_yyy_o0_t0_l0) + rk3m_C_yyy_o0_t2_l0) + rk3m_C_yyy_o0_t3_l0) + rk3m_C_yyy_o0_t3_l0) + rk3m_C_yyy_o0_t5_l0) + rk3m_C_yyy_o0_t6_l0) + rk3m_C_yyy_o0_t6_l0) + rk3m_C_yyy_o0_t8_l0;
						rk3Cd_xyy = vector(rk3gammac_xx, i, j, k) * rk3C_xyy + vector(rk3gammac_xy, i, j, k) * rk3C_yyy + vector(rk3gammac_xz, i, j, k) * rk3C_zyy;
						rk3Cd_yyy = vector(rk3gammac_yx, i, j, k) * rk3C_xyy + vector(rk3gammac_yy, i, j, k) * rk3C_yyy + vector(rk3gammac_yz, i, j, k) * rk3C_zyy;
						rk3Cd_zyy = vector(rk3gammac_zx, i, j, k) * rk3C_xyy + vector(rk3gammac_zy, i, j, k) * rk3C_yyy + vector(rk3gammac_zz, i, j, k) * rk3C_zyy;
						rk3m_C_xyz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_xyz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xyz_o0_t7_m0_l0;
						rk3m_C_xyz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_xyz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_xyz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_xyz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_xyz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_xyz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_xyz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxz_o0_t5_m0_l0;
						rk3C_xyz = (((((((rk3m_C_xyz_o0_t0_l0 + rk3m_C_xyz_o0_t1_l0) + rk3m_C_xyz_o0_t2_l0) + rk3m_C_xyz_o0_t3_l0) + rk3m_C_xyz_o0_t4_l0) + rk3m_C_xyz_o0_t5_l0) + rk3m_C_xyz_o0_t6_l0) + rk3m_C_xyz_o0_t7_l0) + rk3m_C_xyz_o0_t8_l0;
						rk3m_C_zyz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_zyz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xyz_o0_t7_m0_l0;
						rk3m_C_zyz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_zyz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_zyz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_zyz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_zyz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_zyz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_zyz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxz_o0_t5_m0_l0;
						rk3C_zyz = (((((((rk3m_C_zyz_o0_t0_l0 + rk3m_C_zyz_o0_t1_l0) + rk3m_C_zyz_o0_t2_l0) + rk3m_C_zyz_o0_t3_l0) + rk3m_C_zyz_o0_t4_l0) + rk3m_C_zyz_o0_t5_l0) + rk3m_C_zyz_o0_t6_l0) + rk3m_C_zyz_o0_t7_l0) + rk3m_C_zyz_o0_t8_l0;
						rk3m_C_yyz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_yyz_o0_t7_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xyz_o0_t7_m0_l0;
						rk3m_C_yyz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_yyz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_yyz_o0_t4_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xyy_o0_t8_m0_l0;
						rk3m_C_yyz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xyz_o0_t3_m0_l0;
						rk3m_C_yyz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxz_o0_t3_m0_l0;
						rk3m_C_yyz_o0_t1_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_yyz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxz_o0_t5_m0_l0;
						rk3C_yyz = (((((((rk3m_C_yyz_o0_t0_l0 + rk3m_C_yyz_o0_t1_l0) + rk3m_C_yyz_o0_t2_l0) + rk3m_C_yyz_o0_t3_l0) + rk3m_C_yyz_o0_t4_l0) + rk3m_C_yyz_o0_t5_l0) + rk3m_C_yyz_o0_t6_l0) + rk3m_C_yyz_o0_t7_l0) + rk3m_C_yyz_o0_t8_l0;
						rk3Cd_xyz = vector(rk3gammac_xx, i, j, k) * rk3C_xyz + vector(rk3gammac_xy, i, j, k) * rk3C_yyz + vector(rk3gammac_xz, i, j, k) * rk3C_zyz;
						rk3Cd_yyz = vector(rk3gammac_yx, i, j, k) * rk3C_xyz + vector(rk3gammac_yy, i, j, k) * rk3C_yyz + vector(rk3gammac_yz, i, j, k) * rk3C_zyz;
						rk3m_C_xzz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_xzz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_xz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_xzz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_xy * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_xzz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_xy * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_xzz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_xx * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_xzz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_xx * d_C_xxz_o0_t8_m0_l0;
						rk3C_xzz = (((((((rk3m_C_xzz_o0_t0_l0 + rk3m_C_xzz_o0_t0_l0) + rk3m_C_xzz_o0_t2_l0) + rk3m_C_xzz_o0_t3_l0) + rk3m_C_xzz_o0_t3_l0) + rk3m_C_xzz_o0_t5_l0) + rk3m_C_xzz_o0_t6_l0) + rk3m_C_xzz_o0_t6_l0) + rk3m_C_xzz_o0_t8_l0;
						rk3m_C_zzz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_zzz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_zzz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_zzz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_zzz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_zzz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxz_o0_t8_m0_l0;
						rk3C_zzz = (((((((rk3m_C_zzz_o0_t0_l0 + rk3m_C_zzz_o0_t0_l0) + rk3m_C_zzz_o0_t2_l0) + rk3m_C_zzz_o0_t3_l0) + rk3m_C_zzz_o0_t3_l0) + rk3m_C_zzz_o0_t5_l0) + rk3m_C_zzz_o0_t6_l0) + rk3m_C_zzz_o0_t6_l0) + rk3m_C_zzz_o0_t8_l0;
						rk3m_C_yzz_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_yzz_o0_t6_l0 = 0.5000000000000 * rk3gammacu_yz * d_C_xzz_o0_t6_m0_l0;
						rk3m_C_yzz_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_yy * d_C_xyz_o0_t6_m0_l0;
						rk3m_C_yzz_o0_t3_l0 = 0.5000000000000 * rk3gammacu_yy * d_C_xyz_o0_t8_m0_l0;
						rk3m_C_yzz_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_yx * d_C_xxz_o0_t6_m0_l0;
						rk3m_C_yzz_o0_t0_l0 = 0.5000000000000 * rk3gammacu_yx * d_C_xxz_o0_t8_m0_l0;
						rk3C_yzz = (((((((rk3m_C_yzz_o0_t0_l0 + rk3m_C_yzz_o0_t0_l0) + rk3m_C_yzz_o0_t2_l0) + rk3m_C_yzz_o0_t3_l0) + rk3m_C_yzz_o0_t3_l0) + rk3m_C_yzz_o0_t5_l0) + rk3m_C_yzz_o0_t6_l0) + rk3m_C_yzz_o0_t6_l0) + rk3m_C_yzz_o0_t8_l0;
						rk3Cd_xzz = vector(rk3gammac_xx, i, j, k) * rk3C_xzz + vector(rk3gammac_xy, i, j, k) * rk3C_yzz + vector(rk3gammac_xz, i, j, k) * rk3C_zzz;
						rk3Cd_yzz = vector(rk3gammac_yx, i, j, k) * rk3C_xzz + vector(rk3gammac_yy, i, j, k) * rk3C_yzz + vector(rk3gammac_yz, i, j, k) * rk3C_zzz;
						rk3Cd_zzz = vector(rk3gammac_zx, i, j, k) * rk3C_xzz + vector(rk3gammac_zy, i, j, k) * rk3C_yzz + vector(rk3gammac_zz, i, j, k) * rk3C_zzz;
						rk3Cd_zyz = vector(rk3gammac_zx, i, j, k) * rk3C_xyz + vector(rk3gammac_zy, i, j, k) * rk3C_yyz + vector(rk3gammac_zz, i, j, k) * rk3C_zyz;
						rk3Am_yy = rk3gammacu_yx * vector(rk3A_xy, i, j, k) + rk3gammacu_yy * vector(rk3A_yy, i, j, k) + rk3gammacu_yz * vector(rk3A_yz, i, j, k);
						rk3Am_yx = rk3gammacu_yx * vector(rk3A_xx, i, j, k) + rk3gammacu_yy * vector(rk3A_xy, i, j, k) + rk3gammacu_yz * vector(rk3A_xz, i, j, k);
						rk3Am_yz = rk3gammacu_yx * vector(rk3A_xz, i, j, k) + rk3gammacu_yy * vector(rk3A_yz, i, j, k) + rk3gammacu_yz * vector(rk3A_zz, i, j, k);
						rk3Au_yz = rk3gammacu_yx * rk3Am_zx + rk3gammacu_yy * rk3Am_zy + rk3gammacu_yz * rk3Am_zz;
						rk3m_C_zxx_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xxx_o0_t8_m0_l0;
						rk3m_C_zxx_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xxx_o0_t6_m0_l0;
						rk3m_C_zxx_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_zxx_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xxx_o0_t3_m0_l0;
						rk3m_C_zxx_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk3m_C_zxx_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxx_o0_t0_m0_l0;
						rk3C_zxx = (((((((rk3m_C_zxx_o0_t0_l0 + rk3m_C_zxx_o0_t0_l0) + rk3m_C_zxx_o0_t2_l0) + rk3m_C_zxx_o0_t3_l0) + rk3m_C_zxx_o0_t3_l0) + rk3m_C_zxx_o0_t5_l0) + rk3m_C_zxx_o0_t6_l0) + rk3m_C_zxx_o0_t6_l0) + rk3m_C_zxx_o0_t8_l0;
						rk3Cd_xxx = vector(rk3gammac_xx, i, j, k) * rk3C_xxx + vector(rk3gammac_xy, i, j, k) * rk3C_yxx + vector(rk3gammac_xz, i, j, k) * rk3C_zxx;
						rk3Cd_yxx = vector(rk3gammac_yx, i, j, k) * rk3C_xxx + vector(rk3gammac_yy, i, j, k) * rk3C_yxx + vector(rk3gammac_yz, i, j, k) * rk3C_zxx;
						rk3Cd_zxx = vector(rk3gammac_zx, i, j, k) * rk3C_xxx + vector(rk3gammac_zy, i, j, k) * rk3C_yxx + vector(rk3gammac_zz, i, j, k) * rk3C_zxx;
						rk3m_C_zxy_o0_t8_l0 = (-0.5000000000000) * rk3gammacu_zz * d_C_xxy_o0_t8_m0_l0;
						rk3m_C_zxy_o0_t7_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xxy_o0_t7_m0_l0;
						rk3m_C_zxy_o0_t6_l0 = 0.5000000000000 * rk3gammacu_zz * d_C_xxy_o0_t6_m0_l0;
						rk3m_C_zxy_o0_t5_l0 = (-0.5000000000000) * rk3gammacu_zy * d_C_xxy_o0_t5_m0_l0;
						rk3m_C_zxy_o0_t4_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xxy_o0_t4_m0_l0;
						rk3m_C_zxy_o0_t3_l0 = 0.5000000000000 * rk3gammacu_zy * d_C_xxy_o0_t3_m0_l0;
						rk3m_C_zxy_o0_t2_l0 = (-0.5000000000000) * rk3gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk3m_C_zxy_o0_t1_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxx_o0_t5_m0_l0;
						rk3m_C_zxy_o0_t0_l0 = 0.5000000000000 * rk3gammacu_zx * d_C_xxy_o0_t0_m0_l0;
						rk3C_zxy = (((((((rk3m_C_zxy_o0_t0_l0 + rk3m_C_zxy_o0_t1_l0) + rk3m_C_zxy_o0_t2_l0) + rk3m_C_zxy_o0_t3_l0) + rk3m_C_zxy_o0_t4_l0) + rk3m_C_zxy_o0_t5_l0) + rk3m_C_zxy_o0_t6_l0) + rk3m_C_zxy_o0_t7_l0) + rk3m_C_zxy_o0_t8_l0;
						rk3Cd_xxy = vector(rk3gammac_xx, i, j, k) * rk3C_xxy + vector(rk3gammac_xy, i, j, k) * rk3C_yxy + vector(rk3gammac_xz, i, j, k) * rk3C_zxy;
						rk3Cd_yxy = vector(rk3gammac_yx, i, j, k) * rk3C_xxy + vector(rk3gammac_yy, i, j, k) * rk3C_yxy + vector(rk3gammac_yz, i, j, k) * rk3C_zxy;
						rk3Cd_zxy = vector(rk3gammac_zx, i, j, k) * rk3C_xxy + vector(rk3gammac_zy, i, j, k) * rk3C_yxy + vector(rk3gammac_zz, i, j, k) * rk3C_zxy;
						rk3Au_yy = rk3gammacu_yx * rk3Am_yx + rk3gammacu_yy * rk3Am_yy + rk3gammacu_yz * rk3Am_yz;
						rk3falpha = 1.0 + 1.0 / (vector(rk3alpha, i, j, k) * vector(rk3alpha, i, j, k));
						rk3d_Rc_xx_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxx * rk3Cd_xxz + rk3C_yxx * rk3Cd_yxz + rk3C_zxx * rk3Cd_zxz) + rk3gammacu_zy * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_yxz + rk3C_zxy * rk3Cd_zxz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_yxz + rk3C_zxz * rk3Cd_zxz)) + (rk3gammacu_yx * (rk3C_xxx * rk3Cd_xxy + rk3C_yxx * rk3Cd_yxy + rk3C_zxx * rk3Cd_zxy) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_zxy) + rk3gammacu_yz * (rk3C_xxz * rk3Cd_xxy + rk3C_yxz * rk3Cd_yxy + rk3C_zxz * rk3Cd_zxy)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_xxx + rk3C_yxx * rk3Cd_yxx + rk3C_zxx * rk3Cd_zxx) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_xxx + rk3C_yxy * rk3Cd_yxx + rk3C_zxy * rk3Cd_zxx) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_xxx + rk3C_yxz * rk3Cd_yxx + rk3C_zxz * rk3Cd_zxx)) + (rk3gammacu_zx * (rk3C_xxz * rk3Cd_xxx + rk3C_yxz * rk3Cd_xxy + rk3C_zxz * rk3Cd_xxz) + rk3gammacu_zy * (rk3C_xxz * rk3Cd_xxy + rk3C_yxz * rk3Cd_xyy + rk3C_zxz * rk3Cd_xyz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_xyz + rk3C_zxz * rk3Cd_xzz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_xxx + rk3C_yxy * rk3Cd_xxy + rk3C_zxy * rk3Cd_xxz) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_xyy + rk3C_zxy * rk3Cd_xyz) + rk3gammacu_yz * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_xyz + rk3C_zxy * rk3Cd_xzz)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_xxx + rk3C_yxx * rk3Cd_xxy + rk3C_zxx * rk3Cd_xxz) + rk3gammacu_xy * (rk3C_xxx * rk3Cd_xxy + rk3C_yxx * rk3Cd_xyy + rk3C_zxx * rk3Cd_xyz) + rk3gammacu_xz * (rk3C_xxx * rk3Cd_xxz + rk3C_yxx * rk3Cd_xyz + rk3C_zxx * rk3Cd_xzz)) + (rk3gammacu_zx * (rk3C_xxz * rk3Cd_xxx + rk3C_yxz * rk3Cd_xxy + rk3C_zxz * rk3Cd_xxz) + rk3gammacu_zy * (rk3C_xxz * rk3Cd_xxy + rk3C_yxz * rk3Cd_xyy + rk3C_zxz * rk3Cd_xyz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_xyz + rk3C_zxz * rk3Cd_xzz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_xxx + rk3C_yxy * rk3Cd_xxy + rk3C_zxy * rk3Cd_xxz) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_xyy + rk3C_zxy * rk3Cd_xyz) + rk3gammacu_yz * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_xyz + rk3C_zxy * rk3Cd_xzz)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_xxx + rk3C_yxx * rk3Cd_xxy + rk3C_zxx * rk3Cd_xxz) + rk3gammacu_xy * (rk3C_xxx * rk3Cd_xxy + rk3C_yxx * rk3Cd_xyy + rk3C_zxx * rk3Cd_xyz) + rk3gammacu_xz * (rk3C_xxx * rk3Cd_xxz + rk3C_yxx * rk3Cd_xyz + rk3C_zxx * rk3Cd_xzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_xxx + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_xxy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_xxz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_xxx + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_xxy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_xxz);
						rk3m_Rc_xx_o0_t11_l0 = 0.5 * vector(rk3gammac_zx, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk3m_Rc_xx_o0_t10_l0 = 0.5 * vector(rk3gammac_yx, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk3m_Rc_xx_o0_t9_l0 = 0.5 * vector(rk3gammac_xx, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk3m_Rc_xx_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_xx_o0_t8_m0_l0;
						rk3m_Rc_xx_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_xx_o0_t7_m0_l0;
						rk3m_Rc_xx_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_xx_o0_t6_m0_l0;
						rk3m_Rc_xx_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_xx_o0_t5_m0_l0;
						rk3m_Rc_xx_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_xx_o0_t4_m0_l0;
						rk3m_Rc_xx_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_xx_o0_t3_m0_l0;
						rk3m_Rc_xx_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_xx_o0_t2_m0_l0;
						rk3m_Rc_xx_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_xx_o0_t1_m0_l0;
						rk3m_Rc_xx_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_xx_o0_t0_m0_l0;
						rk3Rc_xx = ((((((((((((((rk3m_Rc_xx_o0_t0_l0 + rk3m_Rc_xx_o0_t1_l0) + rk3m_Rc_xx_o0_t2_l0) + rk3m_Rc_xx_o0_t3_l0) + rk3m_Rc_xx_o0_t4_l0) + rk3m_Rc_xx_o0_t5_l0) + rk3m_Rc_xx_o0_t6_l0) + rk3m_Rc_xx_o0_t7_l0) + rk3m_Rc_xx_o0_t8_l0) + rk3m_Rc_xx_o0_t9_l0) + rk3m_Rc_xx_o0_t10_l0) + rk3m_Rc_xx_o0_t11_l0) + rk3m_Rc_xx_o0_t9_l0) + rk3m_Rc_xx_o0_t10_l0) + rk3m_Rc_xx_o0_t11_l0) + rk3d_Rc_xx_o0_t15_m0_l0;
						rk3gammau_zy = rk3gammau_yz;
						rk3d_Rc_xy_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxx * rk3Cd_xyz + rk3C_yxx * rk3Cd_yyz + rk3C_zxx * rk3Cd_zyz) + rk3gammacu_zy * (rk3C_xxy * rk3Cd_xyz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_xyz + rk3C_yxz * rk3Cd_yyz + rk3C_zxz * rk3Cd_zyz)) + (rk3gammacu_yx * (rk3C_xxx * rk3Cd_xyy + rk3C_yxx * rk3Cd_yyy + rk3C_zxx * rk3Cd_zyy) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_xyy + rk3C_yxy * rk3Cd_yyy + rk3C_zxy * rk3Cd_zyy) + rk3gammacu_yz * (rk3C_xxz * rk3Cd_xyy + rk3C_yxz * rk3Cd_yyy + rk3C_zxz * rk3Cd_zyy)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_xxy + rk3C_yxx * rk3Cd_yxy + rk3C_zxx * rk3Cd_zxy) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_zxy) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_xxy + rk3C_yxz * rk3Cd_yxy + rk3C_zxz * rk3Cd_zxy)) + (rk3gammacu_zx * (rk3C_xyz * rk3Cd_xxx + rk3C_yyz * rk3Cd_xxy + rk3C_zyz * rk3Cd_xxz) + rk3gammacu_zy * (rk3C_xyz * rk3Cd_xxy + rk3C_yyz * rk3Cd_xyy + rk3C_zyz * rk3Cd_xyz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_xxz + rk3C_yyz * rk3Cd_xyz + rk3C_zyz * rk3Cd_xzz)) + (rk3gammacu_yx * (rk3C_xyy * rk3Cd_xxx + rk3C_yyy * rk3Cd_xxy + rk3C_zyy * rk3Cd_xxz) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_xxy + rk3C_yyy * rk3Cd_xyy + rk3C_zyy * rk3Cd_xyz) + rk3gammacu_yz * (rk3C_xyy * rk3Cd_xxz + rk3C_yyy * rk3Cd_xyz + rk3C_zyy * rk3Cd_xzz)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_xxx + rk3C_yxy * rk3Cd_xxy + rk3C_zxy * rk3Cd_xxz) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_xyy + rk3C_zxy * rk3Cd_xyz) + rk3gammacu_xz * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_xyz + rk3C_zxy * rk3Cd_xzz)) + (rk3gammacu_zx * (rk3C_xxz * rk3Cd_yxx + rk3C_yxz * rk3Cd_yxy + rk3C_zxz * rk3Cd_yxz) + rk3gammacu_zy * (rk3C_xxz * rk3Cd_yxy + rk3C_yxz * rk3Cd_yyy + rk3C_zxz * rk3Cd_yyz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_yxz + rk3C_yxz * rk3Cd_yyz + rk3C_zxz * rk3Cd_yzz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_yxx + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_yxz) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_yxy + rk3C_yxy * rk3Cd_yyy + rk3C_zxy * rk3Cd_yyz) + rk3gammacu_yz * (rk3C_xxy * rk3Cd_yxz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_yzz)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_yxx + rk3C_yxx * rk3Cd_yxy + rk3C_zxx * rk3Cd_yxz) + rk3gammacu_xy * (rk3C_xxx * rk3Cd_yxy + rk3C_yxx * rk3Cd_yyy + rk3C_zxx * rk3Cd_yyz) + rk3gammacu_xz * (rk3C_xxx * rk3Cd_yxz + rk3C_yxx * rk3Cd_yyz + rk3C_zxx * rk3Cd_yzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_yxx + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_yxy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_yxz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_xxy + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_xyy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_xyz);
						rk3m_Rc_xy_o0_t14_l0 = 0.5 * vector(rk3gammac_zy, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk3m_Rc_xy_o0_t13_l0 = 0.5 * vector(rk3gammac_yy, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk3m_Rc_xy_o0_t12_l0 = 0.5 * vector(rk3gammac_xy, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk3m_Rc_xy_o0_t11_l0 = 0.5 * vector(rk3gammac_zx, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk3m_Rc_xy_o0_t10_l0 = 0.5 * vector(rk3gammac_yx, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk3m_Rc_xy_o0_t9_l0 = 0.5 * vector(rk3gammac_xx, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk3m_Rc_xy_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_xy_o0_t8_m0_l0;
						rk3m_Rc_xy_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_xy_o0_t7_m0_l0;
						rk3m_Rc_xy_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_xy_o0_t6_m0_l0;
						rk3m_Rc_xy_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_xy_o0_t5_m0_l0;
						rk3m_Rc_xy_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_xy_o0_t4_m0_l0;
						rk3m_Rc_xy_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_xy_o0_t3_m0_l0;
						rk3m_Rc_xy_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_xy_o0_t2_m0_l0;
						rk3m_Rc_xy_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_xy_o0_t1_m0_l0;
						rk3m_Rc_xy_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_xy_o0_t0_m0_l0;
						rk3Rc_xy = ((((((((((((((rk3m_Rc_xy_o0_t0_l0 + rk3m_Rc_xy_o0_t1_l0) + rk3m_Rc_xy_o0_t2_l0) + rk3m_Rc_xy_o0_t3_l0) + rk3m_Rc_xy_o0_t4_l0) + rk3m_Rc_xy_o0_t5_l0) + rk3m_Rc_xy_o0_t6_l0) + rk3m_Rc_xy_o0_t7_l0) + rk3m_Rc_xy_o0_t8_l0) + rk3m_Rc_xy_o0_t9_l0) + rk3m_Rc_xy_o0_t10_l0) + rk3m_Rc_xy_o0_t11_l0) + rk3m_Rc_xy_o0_t12_l0) + rk3m_Rc_xy_o0_t13_l0) + rk3m_Rc_xy_o0_t14_l0) + rk3d_Rc_xy_o0_t15_m0_l0;
						rk3d_Rc_yy_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxy * rk3Cd_xyz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_zy * (rk3C_xyy * rk3Cd_xyz + rk3C_yyy * rk3Cd_yyz + rk3C_zyy * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_xyz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_zyz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_xyy + rk3C_yxy * rk3Cd_yyy + rk3C_zxy * rk3Cd_zyy) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_xyy + rk3C_yyy * rk3Cd_yyy + rk3C_zyy * rk3Cd_zyy) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_xyy + rk3C_yyz * rk3Cd_yyy + rk3C_zyz * rk3Cd_zyy)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_xxy + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_zxy) + rk3gammacu_xy * (rk3C_xyy * rk3Cd_xxy + rk3C_yyy * rk3Cd_yxy + rk3C_zyy * rk3Cd_zxy) + rk3gammacu_xz * (rk3C_xyz * rk3Cd_xxy + rk3C_yyz * rk3Cd_yxy + rk3C_zyz * rk3Cd_zxy)) + (rk3gammacu_zx * (rk3C_xyz * rk3Cd_yxx + rk3C_yyz * rk3Cd_yxy + rk3C_zyz * rk3Cd_yxz) + rk3gammacu_zy * (rk3C_xyz * rk3Cd_yxy + rk3C_yyz * rk3Cd_yyy + rk3C_zyz * rk3Cd_yyz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_yxz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_yzz)) + (rk3gammacu_yx * (rk3C_xyy * rk3Cd_yxx + rk3C_yyy * rk3Cd_yxy + rk3C_zyy * rk3Cd_yxz) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_yxy + rk3C_yyy * rk3Cd_yyy + rk3C_zyy * rk3Cd_yyz) + rk3gammacu_yz * (rk3C_xyy * rk3Cd_yxz + rk3C_yyy * rk3Cd_yyz + rk3C_zyy * rk3Cd_yzz)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_yxx + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_yxz) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_yxy + rk3C_yxy * rk3Cd_yyy + rk3C_zxy * rk3Cd_yyz) + rk3gammacu_xz * (rk3C_xxy * rk3Cd_yxz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_yzz)) + (rk3gammacu_zx * (rk3C_xyz * rk3Cd_yxx + rk3C_yyz * rk3Cd_yxy + rk3C_zyz * rk3Cd_yxz) + rk3gammacu_zy * (rk3C_xyz * rk3Cd_yxy + rk3C_yyz * rk3Cd_yyy + rk3C_zyz * rk3Cd_yyz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_yxz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_yzz)) + (rk3gammacu_yx * (rk3C_xyy * rk3Cd_yxx + rk3C_yyy * rk3Cd_yxy + rk3C_zyy * rk3Cd_yxz) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_yxy + rk3C_yyy * rk3Cd_yyy + rk3C_zyy * rk3Cd_yyz) + rk3gammacu_yz * (rk3C_xyy * rk3Cd_yxz + rk3C_yyy * rk3Cd_yyz + rk3C_zyy * rk3Cd_yzz)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_yxx + rk3C_yxy * rk3Cd_yxy + rk3C_zxy * rk3Cd_yxz) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_yxy + rk3C_yxy * rk3Cd_yyy + rk3C_zxy * rk3Cd_yyz) + rk3gammacu_xz * (rk3C_xxy * rk3Cd_yxz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_yzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_yxy + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_yyy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_yyz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_yxy + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_yyy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_yyz);
						rk3m_Rc_yy_o0_t11_l0 = 0.5 * vector(rk3gammac_zy, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk3m_Rc_yy_o0_t10_l0 = 0.5 * vector(rk3gammac_yy, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk3m_Rc_yy_o0_t9_l0 = 0.5 * vector(rk3gammac_xy, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk3m_Rc_yy_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_yy_o0_t8_m0_l0;
						rk3m_Rc_yy_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_yy_o0_t7_m0_l0;
						rk3m_Rc_yy_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_yy_o0_t6_m0_l0;
						rk3m_Rc_yy_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_yy_o0_t5_m0_l0;
						rk3m_Rc_yy_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_yy_o0_t4_m0_l0;
						rk3m_Rc_yy_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_yy_o0_t3_m0_l0;
						rk3m_Rc_yy_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_yy_o0_t2_m0_l0;
						rk3m_Rc_yy_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_yy_o0_t1_m0_l0;
						rk3m_Rc_yy_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_yy_o0_t0_m0_l0;
						rk3Rc_yy = ((((((((((((((rk3m_Rc_yy_o0_t0_l0 + rk3m_Rc_yy_o0_t1_l0) + rk3m_Rc_yy_o0_t2_l0) + rk3m_Rc_yy_o0_t3_l0) + rk3m_Rc_yy_o0_t4_l0) + rk3m_Rc_yy_o0_t5_l0) + rk3m_Rc_yy_o0_t6_l0) + rk3m_Rc_yy_o0_t7_l0) + rk3m_Rc_yy_o0_t8_l0) + rk3m_Rc_yy_o0_t9_l0) + rk3m_Rc_yy_o0_t10_l0) + rk3m_Rc_yy_o0_t11_l0) + rk3m_Rc_yy_o0_t9_l0) + rk3m_Rc_yy_o0_t10_l0) + rk3m_Rc_yy_o0_t11_l0) + rk3d_Rc_yy_o0_t15_m0_l0;
						rk3gammau_zz = rk3iDetgamma * (rk3gamma_xx * rk3gamma_yy - rk3gamma_xy * rk3gamma_xy);
						rk3Am_xx = rk3gammacu_xx * vector(rk3A_xx, i, j, k) + rk3gammacu_xy * vector(rk3A_xy, i, j, k) + rk3gammacu_xz * vector(rk3A_xz, i, j, k);
						rk3Am_xz = rk3gammacu_xx * vector(rk3A_xz, i, j, k) + rk3gammacu_xy * vector(rk3A_yz, i, j, k) + rk3gammacu_xz * vector(rk3A_zz, i, j, k);
						rk3Am_xy = rk3gammacu_xx * vector(rk3A_xy, i, j, k) + rk3gammacu_xy * vector(rk3A_yy, i, j, k) + rk3gammacu_xz * vector(rk3A_yz, i, j, k);
						rk3Au_xz = rk3gammacu_xx * rk3Am_zx + rk3gammacu_xy * rk3Am_zy + rk3gammacu_xz * rk3Am_zz;
						rk3Au_xy = rk3gammacu_xx * rk3Am_yx + rk3gammacu_xy * rk3Am_yy + rk3gammacu_xz * rk3Am_yz;
						rk3d_Rc_xz_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxx * rk3Cd_xzz + rk3C_yxx * rk3Cd_yzz + rk3C_zxx * rk3Cd_zzz) + rk3gammacu_zy * (rk3C_xxy * rk3Cd_xzz + rk3C_yxy * rk3Cd_yzz + rk3C_zxy * rk3Cd_zzz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_xzz + rk3C_yxz * rk3Cd_yzz + rk3C_zxz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xxx * rk3Cd_xyz + rk3C_yxx * rk3Cd_yyz + rk3C_zxx * rk3Cd_zyz) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_xyz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xxz * rk3Cd_xyz + rk3C_yxz * rk3Cd_yyz + rk3C_zxz * rk3Cd_zyz)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_xxz + rk3C_yxx * rk3Cd_yxz + rk3C_zxx * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_yxz + rk3C_zxy * rk3Cd_zxz) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_yxz + rk3C_zxz * rk3Cd_zxz)) + (rk3gammacu_zx * (rk3C_xzz * rk3Cd_xxx + rk3C_yzz * rk3Cd_xxy + rk3C_zzz * rk3Cd_xxz) + rk3gammacu_zy * (rk3C_xzz * rk3Cd_xxy + rk3C_yzz * rk3Cd_xyy + rk3C_zzz * rk3Cd_xyz) + rk3gammacu_zz * (rk3C_xzz * rk3Cd_xxz + rk3C_yzz * rk3Cd_xyz + rk3C_zzz * rk3Cd_xzz)) + (rk3gammacu_yx * (rk3C_xyz * rk3Cd_xxx + rk3C_yyz * rk3Cd_xxy + rk3C_zyz * rk3Cd_xxz) + rk3gammacu_yy * (rk3C_xyz * rk3Cd_xxy + rk3C_yyz * rk3Cd_xyy + rk3C_zyz * rk3Cd_xyz) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_xxz + rk3C_yyz * rk3Cd_xyz + rk3C_zyz * rk3Cd_xzz)) + (rk3gammacu_xx * (rk3C_xxz * rk3Cd_xxx + rk3C_yxz * rk3Cd_xxy + rk3C_zxz * rk3Cd_xxz) + rk3gammacu_xy * (rk3C_xxz * rk3Cd_xxy + rk3C_yxz * rk3Cd_xyy + rk3C_zxz * rk3Cd_xyz) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_xyz + rk3C_zxz * rk3Cd_xzz)) + (rk3gammacu_zx * (rk3C_xxz * rk3Cd_zxx + rk3C_yxz * rk3Cd_zxy + rk3C_zxz * rk3Cd_zxz) + rk3gammacu_zy * (rk3C_xxz * rk3Cd_zxy + rk3C_yxz * rk3Cd_zyy + rk3C_zxz * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xxz * rk3Cd_zxz + rk3C_yxz * rk3Cd_zyz + rk3C_zxz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_zxx + rk3C_yxy * rk3Cd_zxy + rk3C_zxy * rk3Cd_zxz) + rk3gammacu_yy * (rk3C_xxy * rk3Cd_zxy + rk3C_yxy * rk3Cd_zyy + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xxy * rk3Cd_zxz + rk3C_yxy * rk3Cd_zyz + rk3C_zxy * rk3Cd_zzz)) + (rk3gammacu_xx * (rk3C_xxx * rk3Cd_zxx + rk3C_yxx * rk3Cd_zxy + rk3C_zxx * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xxx * rk3Cd_zxy + rk3C_yxx * rk3Cd_zyy + rk3C_zxx * rk3Cd_zyz) + rk3gammacu_xz * (rk3C_xxx * rk3Cd_zxz + rk3C_yxx * rk3Cd_zyz + rk3C_zxx * rk3Cd_zzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_zxx + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_zxy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_zxz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_xxz + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_xyz + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_xzz);
						rk3m_Rc_xz_o0_t14_l0 = 0.5 * vector(rk3gammac_zz, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						rk3m_Rc_xz_o0_t13_l0 = 0.5 * vector(rk3gammac_yz, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						rk3m_Rc_xz_o0_t12_l0 = 0.5 * vector(rk3gammac_xz, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						rk3m_Rc_xz_o0_t11_l0 = 0.5 * vector(rk3gammac_zx, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk3m_Rc_xz_o0_t10_l0 = 0.5 * vector(rk3gammac_yx, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk3m_Rc_xz_o0_t9_l0 = 0.5 * vector(rk3gammac_xx, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk3m_Rc_xz_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_xz_o0_t8_m0_l0;
						rk3m_Rc_xz_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_xz_o0_t7_m0_l0;
						rk3m_Rc_xz_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_xz_o0_t6_m0_l0;
						rk3m_Rc_xz_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_xz_o0_t5_m0_l0;
						rk3m_Rc_xz_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_xz_o0_t4_m0_l0;
						rk3m_Rc_xz_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_xz_o0_t3_m0_l0;
						rk3m_Rc_xz_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_xz_o0_t2_m0_l0;
						rk3m_Rc_xz_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_xz_o0_t1_m0_l0;
						rk3m_Rc_xz_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_xz_o0_t0_m0_l0;
						rk3Rc_xz = ((((((((((((((rk3m_Rc_xz_o0_t0_l0 + rk3m_Rc_xz_o0_t1_l0) + rk3m_Rc_xz_o0_t2_l0) + rk3m_Rc_xz_o0_t3_l0) + rk3m_Rc_xz_o0_t4_l0) + rk3m_Rc_xz_o0_t5_l0) + rk3m_Rc_xz_o0_t6_l0) + rk3m_Rc_xz_o0_t7_l0) + rk3m_Rc_xz_o0_t8_l0) + rk3m_Rc_xz_o0_t9_l0) + rk3m_Rc_xz_o0_t10_l0) + rk3m_Rc_xz_o0_t11_l0) + rk3m_Rc_xz_o0_t12_l0) + rk3m_Rc_xz_o0_t13_l0) + rk3m_Rc_xz_o0_t14_l0) + rk3d_Rc_xz_o0_t15_m0_l0;
						rk3d_Rc_yz_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxy * rk3Cd_xzz + rk3C_yxy * rk3Cd_yzz + rk3C_zxy * rk3Cd_zzz) + rk3gammacu_zy * (rk3C_xyy * rk3Cd_xzz + rk3C_yyy * rk3Cd_yzz + rk3C_zyy * rk3Cd_zzz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_xzz + rk3C_yyz * rk3Cd_yzz + rk3C_zyz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xxy * rk3Cd_xyz + rk3C_yxy * rk3Cd_yyz + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_xyz + rk3C_yyy * rk3Cd_yyz + rk3C_zyy * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_xyz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_zyz)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_xxz + rk3C_yxy * rk3Cd_yxz + rk3C_zxy * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xyy * rk3Cd_xxz + rk3C_yyy * rk3Cd_yxz + rk3C_zyy * rk3Cd_zxz) + rk3gammacu_xz * (rk3C_xyz * rk3Cd_xxz + rk3C_yyz * rk3Cd_yxz + rk3C_zyz * rk3Cd_zxz)) + (rk3gammacu_zx * (rk3C_xzz * rk3Cd_yxx + rk3C_yzz * rk3Cd_yxy + rk3C_zzz * rk3Cd_yxz) + rk3gammacu_zy * (rk3C_xzz * rk3Cd_yxy + rk3C_yzz * rk3Cd_yyy + rk3C_zzz * rk3Cd_yyz) + rk3gammacu_zz * (rk3C_xzz * rk3Cd_yxz + rk3C_yzz * rk3Cd_yyz + rk3C_zzz * rk3Cd_yzz)) + (rk3gammacu_yx * (rk3C_xyz * rk3Cd_yxx + rk3C_yyz * rk3Cd_yxy + rk3C_zyz * rk3Cd_yxz) + rk3gammacu_yy * (rk3C_xyz * rk3Cd_yxy + rk3C_yyz * rk3Cd_yyy + rk3C_zyz * rk3Cd_yyz) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_yxz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_yzz)) + (rk3gammacu_xx * (rk3C_xxz * rk3Cd_yxx + rk3C_yxz * rk3Cd_yxy + rk3C_zxz * rk3Cd_yxz) + rk3gammacu_xy * (rk3C_xxz * rk3Cd_yxy + rk3C_yxz * rk3Cd_yyy + rk3C_zxz * rk3Cd_yyz) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_yxz + rk3C_yxz * rk3Cd_yyz + rk3C_zxz * rk3Cd_yzz)) + (rk3gammacu_zx * (rk3C_xyz * rk3Cd_zxx + rk3C_yyz * rk3Cd_zxy + rk3C_zyz * rk3Cd_zxz) + rk3gammacu_zy * (rk3C_xyz * rk3Cd_zxy + rk3C_yyz * rk3Cd_zyy + rk3C_zyz * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xyz * rk3Cd_zxz + rk3C_yyz * rk3Cd_zyz + rk3C_zyz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xyy * rk3Cd_zxx + rk3C_yyy * rk3Cd_zxy + rk3C_zyy * rk3Cd_zxz) + rk3gammacu_yy * (rk3C_xyy * rk3Cd_zxy + rk3C_yyy * rk3Cd_zyy + rk3C_zyy * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xyy * rk3Cd_zxz + rk3C_yyy * rk3Cd_zyz + rk3C_zyy * rk3Cd_zzz)) + (rk3gammacu_xx * (rk3C_xxy * rk3Cd_zxx + rk3C_yxy * rk3Cd_zxy + rk3C_zxy * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xxy * rk3Cd_zxy + rk3C_yxy * rk3Cd_zyy + rk3C_zxy * rk3Cd_zyz) + rk3gammacu_xz * (rk3C_xxy * rk3Cd_zxz + rk3C_yxy * rk3Cd_zyz + rk3C_zxy * rk3Cd_zzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_zxy + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_zyy + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_zyz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_yxz + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_yyz + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_yzz);
						rk3m_Rc_yz_o0_t14_l0 = 0.5 * vector(rk3gammac_zz, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						rk3m_Rc_yz_o0_t13_l0 = 0.5 * vector(rk3gammac_yz, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						rk3m_Rc_yz_o0_t12_l0 = 0.5 * vector(rk3gammac_xz, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						rk3m_Rc_yz_o0_t11_l0 = 0.5 * vector(rk3gammac_zy, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk3m_Rc_yz_o0_t10_l0 = 0.5 * vector(rk3gammac_yy, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk3m_Rc_yz_o0_t9_l0 = 0.5 * vector(rk3gammac_xy, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk3m_Rc_yz_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_yz_o0_t8_m0_l0;
						rk3m_Rc_yz_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_yz_o0_t7_m0_l0;
						rk3m_Rc_yz_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_yz_o0_t6_m0_l0;
						rk3m_Rc_yz_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_yz_o0_t5_m0_l0;
						rk3m_Rc_yz_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_yz_o0_t4_m0_l0;
						rk3m_Rc_yz_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_yz_o0_t3_m0_l0;
						rk3m_Rc_yz_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_yz_o0_t2_m0_l0;
						rk3m_Rc_yz_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_yz_o0_t1_m0_l0;
						rk3m_Rc_yz_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_yz_o0_t0_m0_l0;
						rk3Rc_yz = ((((((((((((((rk3m_Rc_yz_o0_t0_l0 + rk3m_Rc_yz_o0_t1_l0) + rk3m_Rc_yz_o0_t2_l0) + rk3m_Rc_yz_o0_t3_l0) + rk3m_Rc_yz_o0_t4_l0) + rk3m_Rc_yz_o0_t5_l0) + rk3m_Rc_yz_o0_t6_l0) + rk3m_Rc_yz_o0_t7_l0) + rk3m_Rc_yz_o0_t8_l0) + rk3m_Rc_yz_o0_t9_l0) + rk3m_Rc_yz_o0_t10_l0) + rk3m_Rc_yz_o0_t11_l0) + rk3m_Rc_yz_o0_t12_l0) + rk3m_Rc_yz_o0_t13_l0) + rk3m_Rc_yz_o0_t14_l0) + rk3d_Rc_yz_o0_t15_m0_l0;
						rk3d_Rc_zz_o0_t15_m0_l0 = (rk3gammacu_zx * (rk3C_xxz * rk3Cd_xzz + rk3C_yxz * rk3Cd_yzz + rk3C_zxz * rk3Cd_zzz) + rk3gammacu_zy * (rk3C_xyz * rk3Cd_xzz + rk3C_yyz * rk3Cd_yzz + rk3C_zyz * rk3Cd_zzz) + rk3gammacu_zz * (rk3C_xzz * rk3Cd_xzz + rk3C_yzz * rk3Cd_yzz + rk3C_zzz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xxz * rk3Cd_xyz + rk3C_yxz * rk3Cd_yyz + rk3C_zxz * rk3Cd_zyz) + rk3gammacu_yy * (rk3C_xyz * rk3Cd_xyz + rk3C_yyz * rk3Cd_yyz + rk3C_zyz * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xzz * rk3Cd_xyz + rk3C_yzz * rk3Cd_yyz + rk3C_zzz * rk3Cd_zyz)) + (rk3gammacu_xx * (rk3C_xxz * rk3Cd_xxz + rk3C_yxz * rk3Cd_yxz + rk3C_zxz * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xyz * rk3Cd_xxz + rk3C_yyz * rk3Cd_yxz + rk3C_zyz * rk3Cd_zxz) + rk3gammacu_xz * (rk3C_xzz * rk3Cd_xxz + rk3C_yzz * rk3Cd_yxz + rk3C_zzz * rk3Cd_zxz)) + (rk3gammacu_zx * (rk3C_xzz * rk3Cd_zxx + rk3C_yzz * rk3Cd_zxy + rk3C_zzz * rk3Cd_zxz) + rk3gammacu_zy * (rk3C_xzz * rk3Cd_zxy + rk3C_yzz * rk3Cd_zyy + rk3C_zzz * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xzz * rk3Cd_zxz + rk3C_yzz * rk3Cd_zyz + rk3C_zzz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xyz * rk3Cd_zxx + rk3C_yyz * rk3Cd_zxy + rk3C_zyz * rk3Cd_zxz) + rk3gammacu_yy * (rk3C_xyz * rk3Cd_zxy + rk3C_yyz * rk3Cd_zyy + rk3C_zyz * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_zxz + rk3C_yyz * rk3Cd_zyz + rk3C_zyz * rk3Cd_zzz)) + (rk3gammacu_xx * (rk3C_xxz * rk3Cd_zxx + rk3C_yxz * rk3Cd_zxy + rk3C_zxz * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xxz * rk3Cd_zxy + rk3C_yxz * rk3Cd_zyy + rk3C_zxz * rk3Cd_zyz) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_zxz + rk3C_yxz * rk3Cd_zyz + rk3C_zxz * rk3Cd_zzz)) + (rk3gammacu_zx * (rk3C_xzz * rk3Cd_zxx + rk3C_yzz * rk3Cd_zxy + rk3C_zzz * rk3Cd_zxz) + rk3gammacu_zy * (rk3C_xzz * rk3Cd_zxy + rk3C_yzz * rk3Cd_zyy + rk3C_zzz * rk3Cd_zyz) + rk3gammacu_zz * (rk3C_xzz * rk3Cd_zxz + rk3C_yzz * rk3Cd_zyz + rk3C_zzz * rk3Cd_zzz)) + (rk3gammacu_yx * (rk3C_xyz * rk3Cd_zxx + rk3C_yyz * rk3Cd_zxy + rk3C_zyz * rk3Cd_zxz) + rk3gammacu_yy * (rk3C_xyz * rk3Cd_zxy + rk3C_yyz * rk3Cd_zyy + rk3C_zyz * rk3Cd_zyz) + rk3gammacu_yz * (rk3C_xyz * rk3Cd_zxz + rk3C_yyz * rk3Cd_zyz + rk3C_zyz * rk3Cd_zzz)) + (rk3gammacu_xx * (rk3C_xxz * rk3Cd_zxx + rk3C_yxz * rk3Cd_zxy + rk3C_zxz * rk3Cd_zxz) + rk3gammacu_xy * (rk3C_xxz * rk3Cd_zxy + rk3C_yxz * rk3Cd_zyy + rk3C_zxz * rk3Cd_zyz) + rk3gammacu_xz * (rk3C_xxz * rk3Cd_zxz + rk3C_yxz * rk3Cd_zyz + rk3C_zxz * rk3Cd_zzz)) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_zxz + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_zyz + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_zzz) + (0.5 * vector(rk3Gam_x, i, j, k) * rk3Cd_zxz + 0.5 * vector(rk3Gam_y, i, j, k) * rk3Cd_zyz + 0.5 * vector(rk3Gam_z, i, j, k) * rk3Cd_zzz);
						rk3m_Rc_zz_o0_t11_l0 = 0.5 * vector(rk3gammac_zz, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						rk3m_Rc_zz_o0_t10_l0 = 0.5 * vector(rk3gammac_yz, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						rk3m_Rc_zz_o0_t9_l0 = 0.5 * vector(rk3gammac_xz, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						rk3m_Rc_zz_o0_t8_l0 = (-0.5) * rk3gammacu_zz * d_Rc_zz_o0_t8_m0_l0;
						rk3m_Rc_zz_o0_t7_l0 = (-0.5) * rk3gammacu_zy * d_Rc_zz_o0_t7_m0_l0;
						rk3m_Rc_zz_o0_t6_l0 = (-0.5) * rk3gammacu_zx * d_Rc_zz_o0_t6_m0_l0;
						rk3m_Rc_zz_o0_t5_l0 = (-0.5) * rk3gammacu_yz * d_Rc_zz_o0_t5_m0_l0;
						rk3m_Rc_zz_o0_t4_l0 = (-0.5) * rk3gammacu_yy * d_Rc_zz_o0_t4_m0_l0;
						rk3m_Rc_zz_o0_t3_l0 = (-0.5) * rk3gammacu_yx * d_Rc_zz_o0_t3_m0_l0;
						rk3m_Rc_zz_o0_t2_l0 = (-0.5) * rk3gammacu_xz * d_Rc_zz_o0_t2_m0_l0;
						rk3m_Rc_zz_o0_t1_l0 = (-0.5) * rk3gammacu_xy * d_Rc_zz_o0_t1_m0_l0;
						rk3m_Rc_zz_o0_t0_l0 = (-0.5) * rk3gammacu_xx * d_Rc_zz_o0_t0_m0_l0;
						rk3Rc_zz = ((((((((((((((rk3m_Rc_zz_o0_t0_l0 + rk3m_Rc_zz_o0_t1_l0) + rk3m_Rc_zz_o0_t2_l0) + rk3m_Rc_zz_o0_t3_l0) + rk3m_Rc_zz_o0_t4_l0) + rk3m_Rc_zz_o0_t5_l0) + rk3m_Rc_zz_o0_t6_l0) + rk3m_Rc_zz_o0_t7_l0) + rk3m_Rc_zz_o0_t8_l0) + rk3m_Rc_zz_o0_t9_l0) + rk3m_Rc_zz_o0_t10_l0) + rk3m_Rc_zz_o0_t11_l0) + rk3m_Rc_zz_o0_t9_l0) + rk3m_Rc_zz_o0_t10_l0) + rk3m_Rc_zz_o0_t11_l0) + rk3d_Rc_zz_o0_t15_m0_l0;
						rk3Au_xx = rk3gammacu_xx * rk3Am_xx + rk3gammacu_xy * rk3Am_xy + rk3gammacu_xz * rk3Am_xz;
						rk3gammau_zx = rk3gammau_xz;
						rk3m_dalpha_xx_o0_t14_l0 = 2.0 * rk3gamma_xx * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xx_o0_t13_l0 = 2.0 * rk3gamma_xx * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xx_o0_t12_l0 = 2.0 * rk3gamma_xx * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xx_o0_t11_l0 = 2.0 * rk3gamma_xx * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xx_o0_t10_l0 = 2.0 * rk3gamma_xx * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xx_o0_t9_l0 = 2.0 * rk3gamma_xx * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xx_o0_t8_l0 = 2.0 * rk3gamma_xx * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xx_o0_t7_l0 = 2.0 * rk3gamma_xx * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xx_o0_t6_l0 = 2.0 * rk3gamma_xx * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xx_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xx_o0_t3_l0 = (-1.0) * rk3C_zxx * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xx_o0_t2_l0 = (-1.0) * rk3C_yxx * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xx_o0_t1_l0 = (-1.0) * rk3C_xxx * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_xx = (((((((((((((d_dalpha_xx_o0_t0_m0_l0 + rk3m_dalpha_xx_o0_t1_l0) + rk3m_dalpha_xx_o0_t2_l0) + rk3m_dalpha_xx_o0_t3_l0) + rk3m_dalpha_xx_o0_t4_l0) + rk3m_dalpha_xx_o0_t4_l0) + rk3m_dalpha_xx_o0_t6_l0) + rk3m_dalpha_xx_o0_t7_l0) + rk3m_dalpha_xx_o0_t8_l0) + rk3m_dalpha_xx_o0_t9_l0) + rk3m_dalpha_xx_o0_t10_l0) + rk3m_dalpha_xx_o0_t11_l0) + rk3m_dalpha_xx_o0_t12_l0) + rk3m_dalpha_xx_o0_t13_l0) + rk3m_dalpha_xx_o0_t14_l0;
						rk3m_dalpha_xz_o0_t14_l0 = 2.0 * rk3gamma_xz * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xz_o0_t13_l0 = 2.0 * rk3gamma_xz * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xz_o0_t12_l0 = 2.0 * rk3gamma_xz * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xz_o0_t11_l0 = 2.0 * rk3gamma_xz * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xz_o0_t10_l0 = 2.0 * rk3gamma_xz * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xz_o0_t9_l0 = 2.0 * rk3gamma_xz * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xz_o0_t8_l0 = 2.0 * rk3gamma_xz * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xz_o0_t7_l0 = 2.0 * rk3gamma_xz * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xz_o0_t6_l0 = 2.0 * rk3gamma_xz * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xz_o0_t3_l0 = (-1.0) * rk3C_zxz * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xz_o0_t2_l0 = (-1.0) * rk3C_yxz * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xz_o0_t1_l0 = (-1.0) * rk3C_xxz * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_xz = (((((((((((((d_dalpha_xz_o0_t0_m0_l0 + rk3m_dalpha_xz_o0_t1_l0) + rk3m_dalpha_xz_o0_t2_l0) + rk3m_dalpha_xz_o0_t3_l0) + rk3m_dalpha_xz_o0_t4_l0) + rk3m_dalpha_xz_o0_t5_l0) + rk3m_dalpha_xz_o0_t6_l0) + rk3m_dalpha_xz_o0_t7_l0) + rk3m_dalpha_xz_o0_t8_l0) + rk3m_dalpha_xz_o0_t9_l0) + rk3m_dalpha_xz_o0_t10_l0) + rk3m_dalpha_xz_o0_t11_l0) + rk3m_dalpha_xz_o0_t12_l0) + rk3m_dalpha_xz_o0_t13_l0) + rk3m_dalpha_xz_o0_t14_l0;
						rk3m_dalpha_xy_o0_t14_l0 = 2.0 * rk3gamma_xy * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xy_o0_t13_l0 = 2.0 * rk3gamma_xy * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xy_o0_t12_l0 = 2.0 * rk3gamma_xy * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xy_o0_t11_l0 = 2.0 * rk3gamma_xy * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xy_o0_t10_l0 = 2.0 * rk3gamma_xy * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xy_o0_t9_l0 = 2.0 * rk3gamma_xy * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xy_o0_t8_l0 = 2.0 * rk3gamma_xy * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xy_o0_t7_l0 = 2.0 * rk3gamma_xy * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xy_o0_t6_l0 = 2.0 * rk3gamma_xy * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xy_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_xy_o0_t3_l0 = (-1.0) * rk3C_zxy * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_xy_o0_t2_l0 = (-1.0) * rk3C_yxy * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_xy_o0_t1_l0 = (-1.0) * rk3C_xxy * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_xy = (((((((((((((d_dalpha_xy_o0_t0_m0_l0 + rk3m_dalpha_xy_o0_t1_l0) + rk3m_dalpha_xy_o0_t2_l0) + rk3m_dalpha_xy_o0_t3_l0) + rk3m_dalpha_xy_o0_t4_l0) + rk3m_dalpha_xy_o0_t5_l0) + rk3m_dalpha_xy_o0_t6_l0) + rk3m_dalpha_xy_o0_t7_l0) + rk3m_dalpha_xy_o0_t8_l0) + rk3m_dalpha_xy_o0_t9_l0) + rk3m_dalpha_xy_o0_t10_l0) + rk3m_dalpha_xy_o0_t11_l0) + rk3m_dalpha_xy_o0_t12_l0) + rk3m_dalpha_xy_o0_t13_l0) + rk3m_dalpha_xy_o0_t14_l0;
						rk3m_Rp_xx_o0_t49_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t48_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t47_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t46_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t45_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t44_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t43_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t42_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t41_l0 = (-4.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t39_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t38_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t37_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t36_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t35_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t34_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t33_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t32_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t31_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t30_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t29_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t28_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t27_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t26_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t25_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t24_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t23_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t22_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t21_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t20_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t19_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t18_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t17_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t16_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t15_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t14_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t13_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t12_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t11_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_xx_o0_t10_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_xx_o0_t9_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t8_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_xx_o0_t7_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_xx_o0_t6_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_xx_o0_t5_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_xx_o0_t4_l0 = (-2.0) * vector(rk3gammac_xx, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_xx_o0_t3_l0 = 2.0 * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xx_o0_t2_l0 = 2.0 * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xx_o0_t1_l0 = 2.0 * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xx_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
						rk3Rp_xx = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_xx_o0_t0_l0 + rk3m_Rp_xx_o0_t1_l0) + rk3m_Rp_xx_o0_t2_l0) + rk3m_Rp_xx_o0_t3_l0) + rk3m_Rp_xx_o0_t4_l0) + rk3m_Rp_xx_o0_t5_l0) + rk3m_Rp_xx_o0_t6_l0) + rk3m_Rp_xx_o0_t7_l0) + rk3m_Rp_xx_o0_t8_l0) + rk3m_Rp_xx_o0_t9_l0) + rk3m_Rp_xx_o0_t10_l0) + rk3m_Rp_xx_o0_t11_l0) + rk3m_Rp_xx_o0_t12_l0) + rk3m_Rp_xx_o0_t13_l0) + rk3m_Rp_xx_o0_t14_l0) + rk3m_Rp_xx_o0_t15_l0) + rk3m_Rp_xx_o0_t16_l0) + rk3m_Rp_xx_o0_t17_l0) + rk3m_Rp_xx_o0_t18_l0) + rk3m_Rp_xx_o0_t19_l0) + rk3m_Rp_xx_o0_t20_l0) + rk3m_Rp_xx_o0_t21_l0) + rk3m_Rp_xx_o0_t22_l0) + rk3m_Rp_xx_o0_t23_l0) + rk3m_Rp_xx_o0_t24_l0) + rk3m_Rp_xx_o0_t25_l0) + rk3m_Rp_xx_o0_t26_l0) + rk3m_Rp_xx_o0_t27_l0) + rk3m_Rp_xx_o0_t28_l0) + rk3m_Rp_xx_o0_t29_l0) + rk3m_Rp_xx_o0_t30_l0) + rk3m_Rp_xx_o0_t31_l0) + rk3m_Rp_xx_o0_t32_l0) + rk3m_Rp_xx_o0_t33_l0) + rk3m_Rp_xx_o0_t34_l0) + rk3m_Rp_xx_o0_t35_l0) + rk3m_Rp_xx_o0_t36_l0) + rk3m_Rp_xx_o0_t37_l0) + rk3m_Rp_xx_o0_t38_l0) + rk3m_Rp_xx_o0_t39_l0) + rk3m_Rp_xx_o0_t40_l0) + rk3m_Rp_xx_o0_t41_l0) + rk3m_Rp_xx_o0_t42_l0) + rk3m_Rp_xx_o0_t43_l0) + rk3m_Rp_xx_o0_t44_l0) + rk3m_Rp_xx_o0_t45_l0) + rk3m_Rp_xx_o0_t46_l0) + rk3m_Rp_xx_o0_t47_l0) + rk3m_Rp_xx_o0_t48_l0) + rk3m_Rp_xx_o0_t49_l0;
						rk3m_Rp_zz_o0_t49_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t48_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t47_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t46_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t45_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t44_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t43_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t42_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t41_l0 = (-4.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t39_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t38_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t37_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t36_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t35_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t34_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t33_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t32_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t31_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t30_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t29_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t28_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t27_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t26_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t25_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t24_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t23_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t22_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t21_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t20_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t19_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t18_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t17_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t16_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t15_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t14_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t13_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t12_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t11_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_zz_o0_t10_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_zz_o0_t9_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t8_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_zz_o0_t7_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_zz_o0_t6_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_zz_o0_t5_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_zz_o0_t4_l0 = (-2.0) * vector(rk3gammac_zz, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_zz_o0_t3_l0 = 2.0 * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_zz_o0_t2_l0 = 2.0 * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_zz_o0_t1_l0 = 2.0 * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_zz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
						rk3Rp_zz = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_zz_o0_t0_l0 + rk3m_Rp_zz_o0_t1_l0) + rk3m_Rp_zz_o0_t2_l0) + rk3m_Rp_zz_o0_t3_l0) + rk3m_Rp_zz_o0_t4_l0) + rk3m_Rp_zz_o0_t5_l0) + rk3m_Rp_zz_o0_t6_l0) + rk3m_Rp_zz_o0_t7_l0) + rk3m_Rp_zz_o0_t8_l0) + rk3m_Rp_zz_o0_t9_l0) + rk3m_Rp_zz_o0_t10_l0) + rk3m_Rp_zz_o0_t11_l0) + rk3m_Rp_zz_o0_t12_l0) + rk3m_Rp_zz_o0_t13_l0) + rk3m_Rp_zz_o0_t14_l0) + rk3m_Rp_zz_o0_t15_l0) + rk3m_Rp_zz_o0_t16_l0) + rk3m_Rp_zz_o0_t17_l0) + rk3m_Rp_zz_o0_t18_l0) + rk3m_Rp_zz_o0_t19_l0) + rk3m_Rp_zz_o0_t20_l0) + rk3m_Rp_zz_o0_t21_l0) + rk3m_Rp_zz_o0_t22_l0) + rk3m_Rp_zz_o0_t23_l0) + rk3m_Rp_zz_o0_t24_l0) + rk3m_Rp_zz_o0_t25_l0) + rk3m_Rp_zz_o0_t26_l0) + rk3m_Rp_zz_o0_t27_l0) + rk3m_Rp_zz_o0_t28_l0) + rk3m_Rp_zz_o0_t29_l0) + rk3m_Rp_zz_o0_t30_l0) + rk3m_Rp_zz_o0_t31_l0) + rk3m_Rp_zz_o0_t32_l0) + rk3m_Rp_zz_o0_t33_l0) + rk3m_Rp_zz_o0_t34_l0) + rk3m_Rp_zz_o0_t35_l0) + rk3m_Rp_zz_o0_t36_l0) + rk3m_Rp_zz_o0_t37_l0) + rk3m_Rp_zz_o0_t38_l0) + rk3m_Rp_zz_o0_t39_l0) + rk3m_Rp_zz_o0_t40_l0) + rk3m_Rp_zz_o0_t41_l0) + rk3m_Rp_zz_o0_t42_l0) + rk3m_Rp_zz_o0_t43_l0) + rk3m_Rp_zz_o0_t44_l0) + rk3m_Rp_zz_o0_t45_l0) + rk3m_Rp_zz_o0_t46_l0) + rk3m_Rp_zz_o0_t47_l0) + rk3m_Rp_zz_o0_t48_l0) + rk3m_Rp_zz_o0_t49_l0;
						rk3R_zz = rk3Rc_zz + rk3Rp_zz;
						rk3R_xx = rk3Rc_xx + rk3Rp_xx;
						rk3m_Rp_xy_o0_t49_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t48_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t47_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t46_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t45_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t44_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t43_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t42_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t41_l0 = (-4.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t39_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t38_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t37_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t36_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t35_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t34_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t33_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t32_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t31_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t30_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t29_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t28_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t27_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t26_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t25_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t24_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t23_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t22_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t21_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t20_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t19_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t18_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t17_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t16_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t15_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t14_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t13_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t12_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t11_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_xy_o0_t10_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_xy_o0_t9_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t8_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_xy_o0_t7_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_xy_o0_t6_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_xy_o0_t5_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_xy_o0_t4_l0 = (-2.0) * vector(rk3gammac_xy, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_xy_o0_t3_l0 = 2.0 * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xy_o0_t2_l0 = 2.0 * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xy_o0_t1_l0 = 2.0 * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
						rk3Rp_xy = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_xy_o0_t0_l0 + rk3m_Rp_xy_o0_t1_l0) + rk3m_Rp_xy_o0_t2_l0) + rk3m_Rp_xy_o0_t3_l0) + rk3m_Rp_xy_o0_t4_l0) + rk3m_Rp_xy_o0_t5_l0) + rk3m_Rp_xy_o0_t6_l0) + rk3m_Rp_xy_o0_t7_l0) + rk3m_Rp_xy_o0_t8_l0) + rk3m_Rp_xy_o0_t9_l0) + rk3m_Rp_xy_o0_t10_l0) + rk3m_Rp_xy_o0_t11_l0) + rk3m_Rp_xy_o0_t12_l0) + rk3m_Rp_xy_o0_t13_l0) + rk3m_Rp_xy_o0_t14_l0) + rk3m_Rp_xy_o0_t15_l0) + rk3m_Rp_xy_o0_t16_l0) + rk3m_Rp_xy_o0_t17_l0) + rk3m_Rp_xy_o0_t18_l0) + rk3m_Rp_xy_o0_t19_l0) + rk3m_Rp_xy_o0_t20_l0) + rk3m_Rp_xy_o0_t21_l0) + rk3m_Rp_xy_o0_t22_l0) + rk3m_Rp_xy_o0_t23_l0) + rk3m_Rp_xy_o0_t24_l0) + rk3m_Rp_xy_o0_t25_l0) + rk3m_Rp_xy_o0_t26_l0) + rk3m_Rp_xy_o0_t27_l0) + rk3m_Rp_xy_o0_t28_l0) + rk3m_Rp_xy_o0_t29_l0) + rk3m_Rp_xy_o0_t30_l0) + rk3m_Rp_xy_o0_t31_l0) + rk3m_Rp_xy_o0_t32_l0) + rk3m_Rp_xy_o0_t33_l0) + rk3m_Rp_xy_o0_t34_l0) + rk3m_Rp_xy_o0_t35_l0) + rk3m_Rp_xy_o0_t36_l0) + rk3m_Rp_xy_o0_t37_l0) + rk3m_Rp_xy_o0_t38_l0) + rk3m_Rp_xy_o0_t39_l0) + rk3m_Rp_xy_o0_t40_l0) + rk3m_Rp_xy_o0_t41_l0) + rk3m_Rp_xy_o0_t42_l0) + rk3m_Rp_xy_o0_t43_l0) + rk3m_Rp_xy_o0_t44_l0) + rk3m_Rp_xy_o0_t45_l0) + rk3m_Rp_xy_o0_t46_l0) + rk3m_Rp_xy_o0_t47_l0) + rk3m_Rp_xy_o0_t48_l0) + rk3m_Rp_xy_o0_t49_l0;
						rk3R_xy = rk3Rc_xy + rk3Rp_xy;
						rk3m_Rp_xz_o0_t49_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t48_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t47_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t46_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t45_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t44_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t43_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t42_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t41_l0 = (-4.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t39_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t38_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t37_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t36_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t35_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t34_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t33_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t32_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t31_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t30_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t29_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t28_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t27_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t26_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t25_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t24_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t23_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t22_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t21_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t20_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t19_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t18_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t17_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t16_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t15_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t14_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t13_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t12_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t11_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_xz_o0_t10_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_xz_o0_t9_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t8_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_xz_o0_t7_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_xz_o0_t6_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_xz_o0_t5_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_xz_o0_t4_l0 = (-2.0) * vector(rk3gammac_xz, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_xz_o0_t3_l0 = 2.0 * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_xz_o0_t2_l0 = 2.0 * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_xz_o0_t1_l0 = 2.0 * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_xz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
						rk3Rp_xz = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_xz_o0_t0_l0 + rk3m_Rp_xz_o0_t1_l0) + rk3m_Rp_xz_o0_t2_l0) + rk3m_Rp_xz_o0_t3_l0) + rk3m_Rp_xz_o0_t4_l0) + rk3m_Rp_xz_o0_t5_l0) + rk3m_Rp_xz_o0_t6_l0) + rk3m_Rp_xz_o0_t7_l0) + rk3m_Rp_xz_o0_t8_l0) + rk3m_Rp_xz_o0_t9_l0) + rk3m_Rp_xz_o0_t10_l0) + rk3m_Rp_xz_o0_t11_l0) + rk3m_Rp_xz_o0_t12_l0) + rk3m_Rp_xz_o0_t13_l0) + rk3m_Rp_xz_o0_t14_l0) + rk3m_Rp_xz_o0_t15_l0) + rk3m_Rp_xz_o0_t16_l0) + rk3m_Rp_xz_o0_t17_l0) + rk3m_Rp_xz_o0_t18_l0) + rk3m_Rp_xz_o0_t19_l0) + rk3m_Rp_xz_o0_t20_l0) + rk3m_Rp_xz_o0_t21_l0) + rk3m_Rp_xz_o0_t22_l0) + rk3m_Rp_xz_o0_t23_l0) + rk3m_Rp_xz_o0_t24_l0) + rk3m_Rp_xz_o0_t25_l0) + rk3m_Rp_xz_o0_t26_l0) + rk3m_Rp_xz_o0_t27_l0) + rk3m_Rp_xz_o0_t28_l0) + rk3m_Rp_xz_o0_t29_l0) + rk3m_Rp_xz_o0_t30_l0) + rk3m_Rp_xz_o0_t31_l0) + rk3m_Rp_xz_o0_t32_l0) + rk3m_Rp_xz_o0_t33_l0) + rk3m_Rp_xz_o0_t34_l0) + rk3m_Rp_xz_o0_t35_l0) + rk3m_Rp_xz_o0_t36_l0) + rk3m_Rp_xz_o0_t37_l0) + rk3m_Rp_xz_o0_t38_l0) + rk3m_Rp_xz_o0_t39_l0) + rk3m_Rp_xz_o0_t40_l0) + rk3m_Rp_xz_o0_t41_l0) + rk3m_Rp_xz_o0_t42_l0) + rk3m_Rp_xz_o0_t43_l0) + rk3m_Rp_xz_o0_t44_l0) + rk3m_Rp_xz_o0_t45_l0) + rk3m_Rp_xz_o0_t46_l0) + rk3m_Rp_xz_o0_t47_l0) + rk3m_Rp_xz_o0_t48_l0) + rk3m_Rp_xz_o0_t49_l0;
						rk3R_xz = rk3Rc_xz + rk3Rp_xz;
						rk3m_Rp_yy_o0_t49_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t48_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t47_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t46_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t45_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t44_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t43_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t42_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t41_l0 = (-4.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t39_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t38_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t37_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t36_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t35_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t34_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t33_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t32_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t31_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t30_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t29_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t28_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t27_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t26_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t25_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t24_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t23_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t22_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t21_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t20_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t19_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t18_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t17_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t16_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t15_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t14_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t13_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t12_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t11_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_yy_o0_t10_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_yy_o0_t9_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t8_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_yy_o0_t7_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_yy_o0_t6_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_yy_o0_t5_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_yy_o0_t4_l0 = (-2.0) * vector(rk3gammac_yy, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_yy_o0_t3_l0 = 2.0 * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yy_o0_t2_l0 = 2.0 * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yy_o0_t1_l0 = 2.0 * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
						rk3Rp_yy = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_yy_o0_t0_l0 + rk3m_Rp_yy_o0_t1_l0) + rk3m_Rp_yy_o0_t2_l0) + rk3m_Rp_yy_o0_t3_l0) + rk3m_Rp_yy_o0_t4_l0) + rk3m_Rp_yy_o0_t5_l0) + rk3m_Rp_yy_o0_t6_l0) + rk3m_Rp_yy_o0_t7_l0) + rk3m_Rp_yy_o0_t8_l0) + rk3m_Rp_yy_o0_t9_l0) + rk3m_Rp_yy_o0_t10_l0) + rk3m_Rp_yy_o0_t11_l0) + rk3m_Rp_yy_o0_t12_l0) + rk3m_Rp_yy_o0_t13_l0) + rk3m_Rp_yy_o0_t14_l0) + rk3m_Rp_yy_o0_t15_l0) + rk3m_Rp_yy_o0_t16_l0) + rk3m_Rp_yy_o0_t17_l0) + rk3m_Rp_yy_o0_t18_l0) + rk3m_Rp_yy_o0_t19_l0) + rk3m_Rp_yy_o0_t20_l0) + rk3m_Rp_yy_o0_t21_l0) + rk3m_Rp_yy_o0_t22_l0) + rk3m_Rp_yy_o0_t23_l0) + rk3m_Rp_yy_o0_t24_l0) + rk3m_Rp_yy_o0_t25_l0) + rk3m_Rp_yy_o0_t26_l0) + rk3m_Rp_yy_o0_t27_l0) + rk3m_Rp_yy_o0_t28_l0) + rk3m_Rp_yy_o0_t29_l0) + rk3m_Rp_yy_o0_t30_l0) + rk3m_Rp_yy_o0_t31_l0) + rk3m_Rp_yy_o0_t32_l0) + rk3m_Rp_yy_o0_t33_l0) + rk3m_Rp_yy_o0_t34_l0) + rk3m_Rp_yy_o0_t35_l0) + rk3m_Rp_yy_o0_t36_l0) + rk3m_Rp_yy_o0_t37_l0) + rk3m_Rp_yy_o0_t38_l0) + rk3m_Rp_yy_o0_t39_l0) + rk3m_Rp_yy_o0_t40_l0) + rk3m_Rp_yy_o0_t41_l0) + rk3m_Rp_yy_o0_t42_l0) + rk3m_Rp_yy_o0_t43_l0) + rk3m_Rp_yy_o0_t44_l0) + rk3m_Rp_yy_o0_t45_l0) + rk3m_Rp_yy_o0_t46_l0) + rk3m_Rp_yy_o0_t47_l0) + rk3m_Rp_yy_o0_t48_l0) + rk3m_Rp_yy_o0_t49_l0;
						rk3R_yy = rk3Rc_yy + rk3Rp_yy;
						rk3m_Rp_yz_o0_t49_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t48_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zy * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t47_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zx * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t46_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yz * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t45_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t44_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yx * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t43_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xz * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t42_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xy * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t41_l0 = (-4.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t40_l0 = 4.0 * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t39_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zz * rk3C_zzz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t38_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zz * rk3C_yzz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t37_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zz * rk3C_xzz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t36_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zy * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t35_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zy * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t34_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zy * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t33_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zx * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t32_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zx * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t31_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zx * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t30_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yz * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t29_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yz * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t28_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yz * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t27_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yy * rk3C_zyy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t26_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yy * rk3C_yyy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t25_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yy * rk3C_xyy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t24_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yx * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t23_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yx * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t22_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yx * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t21_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xz * rk3C_zxz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t20_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xz * rk3C_yxz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t19_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xz * rk3C_xxz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t18_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xy * rk3C_zxy * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t17_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xy * rk3C_yxy * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t16_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xy * rk3C_xxy * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t15_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xx * rk3C_zxx * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t14_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xx * rk3C_yxx * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t13_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xx * rk3C_xxx * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t12_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t11_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
						rk3m_Rp_yz_o0_t10_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
						rk3m_Rp_yz_o0_t9_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t8_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
						rk3m_Rp_yz_o0_t7_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
						rk3m_Rp_yz_o0_t6_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
						rk3m_Rp_yz_o0_t5_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
						rk3m_Rp_yz_o0_t4_l0 = (-2.0) * vector(rk3gammac_yz, i, j, k) * rk3gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
						rk3m_Rp_yz_o0_t3_l0 = 2.0 * rk3C_zyz * d_dalpha_xx_o0_t12_m0_l0;
						rk3m_Rp_yz_o0_t2_l0 = 2.0 * rk3C_yyz * d_dalpha_xx_o0_t9_m0_l0;
						rk3m_Rp_yz_o0_t1_l0 = 2.0 * rk3C_xyz * d_dalpha_xx_o0_t4_m0_l0;
						rk3m_Rp_yz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
						rk3Rp_yz = ((((((((((((((((((((((((((((((((((((((((((((((((rk3m_Rp_yz_o0_t0_l0 + rk3m_Rp_yz_o0_t1_l0) + rk3m_Rp_yz_o0_t2_l0) + rk3m_Rp_yz_o0_t3_l0) + rk3m_Rp_yz_o0_t4_l0) + rk3m_Rp_yz_o0_t5_l0) + rk3m_Rp_yz_o0_t6_l0) + rk3m_Rp_yz_o0_t7_l0) + rk3m_Rp_yz_o0_t8_l0) + rk3m_Rp_yz_o0_t9_l0) + rk3m_Rp_yz_o0_t10_l0) + rk3m_Rp_yz_o0_t11_l0) + rk3m_Rp_yz_o0_t12_l0) + rk3m_Rp_yz_o0_t13_l0) + rk3m_Rp_yz_o0_t14_l0) + rk3m_Rp_yz_o0_t15_l0) + rk3m_Rp_yz_o0_t16_l0) + rk3m_Rp_yz_o0_t17_l0) + rk3m_Rp_yz_o0_t18_l0) + rk3m_Rp_yz_o0_t19_l0) + rk3m_Rp_yz_o0_t20_l0) + rk3m_Rp_yz_o0_t21_l0) + rk3m_Rp_yz_o0_t22_l0) + rk3m_Rp_yz_o0_t23_l0) + rk3m_Rp_yz_o0_t24_l0) + rk3m_Rp_yz_o0_t25_l0) + rk3m_Rp_yz_o0_t26_l0) + rk3m_Rp_yz_o0_t27_l0) + rk3m_Rp_yz_o0_t28_l0) + rk3m_Rp_yz_o0_t29_l0) + rk3m_Rp_yz_o0_t30_l0) + rk3m_Rp_yz_o0_t31_l0) + rk3m_Rp_yz_o0_t32_l0) + rk3m_Rp_yz_o0_t33_l0) + rk3m_Rp_yz_o0_t34_l0) + rk3m_Rp_yz_o0_t35_l0) + rk3m_Rp_yz_o0_t36_l0) + rk3m_Rp_yz_o0_t37_l0) + rk3m_Rp_yz_o0_t38_l0) + rk3m_Rp_yz_o0_t39_l0) + rk3m_Rp_yz_o0_t40_l0) + rk3m_Rp_yz_o0_t41_l0) + rk3m_Rp_yz_o0_t42_l0) + rk3m_Rp_yz_o0_t43_l0) + rk3m_Rp_yz_o0_t44_l0) + rk3m_Rp_yz_o0_t45_l0) + rk3m_Rp_yz_o0_t46_l0) + rk3m_Rp_yz_o0_t47_l0) + rk3m_Rp_yz_o0_t48_l0) + rk3m_Rp_yz_o0_t49_l0;
						rk3R_yz = rk3Rc_yz + rk3Rp_yz;
						rk3R = rk3gammau_xx * rk3R_xx + rk3gammau_yy * rk3R_yy + rk3gammau_zz * rk3R_zz + 2.0 * (rk3gammau_xy * rk3R_xy + rk3gammau_xz * rk3R_xz + rk3gammau_yz * rk3R_yz);
						rk3m_dalpha_yz_o0_t14_l0 = 2.0 * rk3gamma_yz * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yz_o0_t13_l0 = 2.0 * rk3gamma_yz * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yz_o0_t12_l0 = 2.0 * rk3gamma_yz * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yz_o0_t11_l0 = 2.0 * rk3gamma_yz * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yz_o0_t10_l0 = 2.0 * rk3gamma_yz * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yz_o0_t9_l0 = 2.0 * rk3gamma_yz * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yz_o0_t8_l0 = 2.0 * rk3gamma_yz * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yz_o0_t7_l0 = 2.0 * rk3gamma_yz * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yz_o0_t6_l0 = 2.0 * rk3gamma_yz * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yz_o0_t5_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yz_o0_t3_l0 = (-1.0) * rk3C_zyz * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yz_o0_t2_l0 = (-1.0) * rk3C_yyz * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yz_o0_t1_l0 = (-1.0) * rk3C_xyz * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_yz = (((((((((((((d_dalpha_yz_o0_t0_m0_l0 + rk3m_dalpha_yz_o0_t1_l0) + rk3m_dalpha_yz_o0_t2_l0) + rk3m_dalpha_yz_o0_t3_l0) + rk3m_dalpha_yz_o0_t4_l0) + rk3m_dalpha_yz_o0_t5_l0) + rk3m_dalpha_yz_o0_t6_l0) + rk3m_dalpha_yz_o0_t7_l0) + rk3m_dalpha_yz_o0_t8_l0) + rk3m_dalpha_yz_o0_t9_l0) + rk3m_dalpha_yz_o0_t10_l0) + rk3m_dalpha_yz_o0_t11_l0) + rk3m_dalpha_yz_o0_t12_l0) + rk3m_dalpha_yz_o0_t13_l0) + rk3m_dalpha_yz_o0_t14_l0;
						rk3m_dalpha_yy_o0_t14_l0 = 2.0 * rk3gamma_yy * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yy_o0_t13_l0 = 2.0 * rk3gamma_yy * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yy_o0_t12_l0 = 2.0 * rk3gamma_yy * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yy_o0_t11_l0 = 2.0 * rk3gamma_yy * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yy_o0_t10_l0 = 2.0 * rk3gamma_yy * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yy_o0_t9_l0 = 2.0 * rk3gamma_yy * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yy_o0_t8_l0 = 2.0 * rk3gamma_yy * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yy_o0_t7_l0 = 2.0 * rk3gamma_yy * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yy_o0_t6_l0 = 2.0 * rk3gamma_yy * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_yy_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yy_o0_t3_l0 = (-1.0) * rk3C_zyy * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_yy_o0_t2_l0 = (-1.0) * rk3C_yyy * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_yy_o0_t1_l0 = (-1.0) * rk3C_xyy * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_yy = (((((((((((((d_dalpha_yy_o0_t0_m0_l0 + rk3m_dalpha_yy_o0_t1_l0) + rk3m_dalpha_yy_o0_t2_l0) + rk3m_dalpha_yy_o0_t3_l0) + rk3m_dalpha_yy_o0_t4_l0) + rk3m_dalpha_yy_o0_t4_l0) + rk3m_dalpha_yy_o0_t6_l0) + rk3m_dalpha_yy_o0_t7_l0) + rk3m_dalpha_yy_o0_t8_l0) + rk3m_dalpha_yy_o0_t9_l0) + rk3m_dalpha_yy_o0_t10_l0) + rk3m_dalpha_yy_o0_t11_l0) + rk3m_dalpha_yy_o0_t12_l0) + rk3m_dalpha_yy_o0_t13_l0) + rk3m_dalpha_yy_o0_t14_l0;
						rk3m_dalpha_zz_o0_t14_l0 = 2.0 * rk3gamma_zz * rk3gammau_zz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_zz_o0_t13_l0 = 2.0 * rk3gamma_zz * rk3gammau_yz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_zz_o0_t12_l0 = 2.0 * rk3gamma_zz * rk3gammau_xz * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_zz_o0_t11_l0 = 2.0 * rk3gamma_zz * rk3gammau_zy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_zz_o0_t10_l0 = 2.0 * rk3gamma_zz * rk3gammau_yy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_zz_o0_t9_l0 = 2.0 * rk3gamma_zz * rk3gammau_xy * d_dalpha_xx_o0_t9_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_zz_o0_t8_l0 = 2.0 * rk3gamma_zz * rk3gammau_zx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_zz_o0_t7_l0 = 2.0 * rk3gamma_zz * rk3gammau_yx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_zz_o0_t6_l0 = 2.0 * rk3gamma_zz * rk3gammau_xx * d_dalpha_xx_o0_t4_m0_l0 * d_dalpha_xx_o0_t1_m0_l0;
						rk3m_dalpha_zz_o0_t4_l0 = (-2.0) * d_dalpha_xx_o0_t12_m0_l0 * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_zz_o0_t3_l0 = (-1.0) * rk3C_zzz * d_dalpha_xx_o0_t3_m0_l0;
						rk3m_dalpha_zz_o0_t2_l0 = (-1.0) * rk3C_yzz * d_dalpha_xx_o0_t2_m0_l0;
						rk3m_dalpha_zz_o0_t1_l0 = (-1.0) * rk3C_xzz * d_dalpha_xx_o0_t1_m0_l0;
						rk3dalpha_zz = (((((((((((((d_dalpha_zz_o0_t0_m0_l0 + rk3m_dalpha_zz_o0_t1_l0) + rk3m_dalpha_zz_o0_t2_l0) + rk3m_dalpha_zz_o0_t3_l0) + rk3m_dalpha_zz_o0_t4_l0) + rk3m_dalpha_zz_o0_t4_l0) + rk3m_dalpha_zz_o0_t6_l0) + rk3m_dalpha_zz_o0_t7_l0) + rk3m_dalpha_zz_o0_t8_l0) + rk3m_dalpha_zz_o0_t9_l0) + rk3m_dalpha_zz_o0_t10_l0) + rk3m_dalpha_zz_o0_t11_l0) + rk3m_dalpha_zz_o0_t12_l0) + rk3m_dalpha_zz_o0_t13_l0) + rk3m_dalpha_zz_o0_t14_l0;
						rk3trdalpha = rk3gammau_xx * rk3dalpha_xx + 2.0 * rk3gammau_xy * rk3dalpha_xy + 2.0 * rk3gammau_xz * rk3dalpha_xz + rk3gammau_yy * rk3dalpha_yy + 2.0 * rk3gammau_yz * rk3dalpha_yz + rk3gammau_zz * rk3dalpha_zz;
						rk3Psi1TF_yz = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_yz) + vector(rk3alpha, i, j, k) * rk3R_yz + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						rk3Psi1TF_yy = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_yy) + vector(rk3alpha, i, j, k) * rk3R_yy + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						rk3Psi1TF_xy = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_xy) + vector(rk3alpha, i, j, k) * rk3R_xy + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						rk3Psi1TF_xx = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_xx) + vector(rk3alpha, i, j, k) * rk3R_xx + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						rk3Psi1TF_xz = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_xz) + vector(rk3alpha, i, j, k) * rk3R_xz + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						rk3Psi1TF_zz = exp(-4.0 * vector(rk3Phi, i, j, k)) * ((-rk3dalpha_zz) + vector(rk3alpha, i, j, k) * rk3R_zz + 1.0 / 3.0 * rk3trdalpha - 1.0 / 3.0 * vector(rk3alpha, i, j, k) * rk3R);
						d_gammac_xx_o2_t3_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_xx, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_xx, i, j, k) * rk3div_beta;
						d_gammac_xy_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_xy, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_xy, i, j, k) * rk3div_beta;
						d_gammac_xz_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_xz, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_xz, i, j, k) * rk3div_beta;
						d_gammac_yy_o2_t3_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_yy, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_yy, i, j, k) * rk3div_beta;
						d_gammac_yx_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_xy, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_yx, i, j, k) * rk3div_beta;
						d_gammac_yz_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_yz, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_yz, i, j, k) * rk3div_beta;
						d_gammac_zz_o2_t3_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_zz, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_zz, i, j, k) * rk3div_beta;
						d_gammac_zx_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_xz, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_zx, i, j, k) * rk3div_beta;
						d_gammac_zy_o2_t6_m0_l0 = (-2.0) * vector(rk3alpha, i, j, k) * vector(rk3A_yz, i, j, k) + (-0.6666666666666667) * vector(rk3gammac_zy, i, j, k) * rk3div_beta;
						d_A_xx_o2_t3_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_xx, i, j, k) - 2.0 * (vector(rk3A_xx, i, j, k) * rk3Am_xx + vector(rk3A_xy, i, j, k) * rk3Am_yx + vector(rk3A_xz, i, j, k) * rk3Am_zx)) + rk3Psi1TF_xx + (-0.6666666666666667) * vector(rk3A_xx, i, j, k) * rk3div_beta;
						d_A_xy_o2_t6_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_xy, i, j, k) - 2.0 * (vector(rk3A_xx, i, j, k) * rk3Am_xy + vector(rk3A_xy, i, j, k) * rk3Am_yy + vector(rk3A_xz, i, j, k) * rk3Am_zy)) + rk3Psi1TF_xy + (-0.6666666666666667) * vector(rk3A_xy, i, j, k) * rk3div_beta;
						d_A_xz_o2_t6_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_xz, i, j, k) - 2.0 * (vector(rk3A_xx, i, j, k) * rk3Am_xz + vector(rk3A_xy, i, j, k) * rk3Am_yz + vector(rk3A_xz, i, j, k) * rk3Am_zz)) + rk3Psi1TF_xz + (-0.6666666666666667) * vector(rk3A_xz, i, j, k) * rk3div_beta;
						d_A_yy_o2_t3_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_yy, i, j, k) - 2.0 * (vector(rk3A_xy, i, j, k) * rk3Am_xy + vector(rk3A_yy, i, j, k) * rk3Am_yy + vector(rk3A_yz, i, j, k) * rk3Am_zy)) + rk3Psi1TF_yy + (-0.6666666666666667) * vector(rk3A_yy, i, j, k) * rk3div_beta;
						d_A_yz_o2_t6_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_yz, i, j, k) - 2.0 * (vector(rk3A_xy, i, j, k) * rk3Am_xz + vector(rk3A_yy, i, j, k) * rk3Am_yz + vector(rk3A_yz, i, j, k) * rk3Am_zz)) + rk3Psi1TF_yz + (-0.6666666666666667) * vector(rk3A_yz, i, j, k) * rk3div_beta;
						d_A_zz_o2_t3_m0_l0 = vector(rk3alpha, i, j, k) * (vector(rk3trK, i, j, k) * vector(rk3A_zz, i, j, k) - 2.0 * (vector(rk3A_xz, i, j, k) * rk3Am_xz + vector(rk3A_yz, i, j, k) * rk3Am_yz + vector(rk3A_zz, i, j, k) * rk3Am_zz)) + rk3Psi1TF_zz + (-0.6666666666666667) * vector(rk3A_zz, i, j, k) * rk3div_beta;
						d_Phi_o2_t0_m0_l0 = (-0.16666666666666666) * vector(rk3alpha, i, j, k) * vector(rk3trK, i, j, k) + 0.1666666666666666 * rk3div_beta;
						d_trK_o2_t0_m0_l0 = 0.166666666666666 * rk3div_beta + vector(rk3alpha, i, j, k) * (vector(rk3A_xx, i, j, k) * rk3Au_xx + vector(rk3A_yy, i, j, k) * rk3Au_yy + vector(rk3A_zz, i, j, k) * rk3Au_zz + 2.0 * (vector(rk3A_xy, i, j, k) * rk3Au_xy + vector(rk3A_xz, i, j, k) * rk3Au_xz + vector(rk3A_yz, i, j, k) * rk3Au_yz) + 0.3333333333333 * (vector(rk3trK, i, j, k) * vector(rk3trK, i, j, k))) + (-(rk3gammau_xx * rk3dalpha_xx + rk3gammau_yy * rk3dalpha_yy + rk3gammau_zz * rk3dalpha_zz + 2.0 * rk3gammau_xy * rk3dalpha_xy + 2.0 * rk3gammau_xz * rk3dalpha_xz + 2.0 * rk3gammau_yz * rk3dalpha_yz));
						d_beta_x_o0_t0_m0_l0 = 0.0;
						d_alpha_o2_t0_m0_l0 = (-vector(rk3alpha, i, j, k) * vector(rk3alpha, i, j, k) * rk3falpha * vector(rk3trK, i, j, k)) + 0.166666666666 * rk3div_beta;
						d_Gam_x_o0_t33_m0_l0 = 2.0 * vector(rk3alpha, i, j, k) * (rk3C_xxx * rk3Au_xx + rk3C_xyy * rk3Au_yy + rk3C_xzz * rk3Au_zz + 2.0 * rk3C_xxy * rk3Au_xy + 2.0 * rk3C_xxz * rk3Au_xz + 2.0 * rk3C_xyz * rk3Au_yz) + 0.666666666666 * vector(rk3Gam_x, i, j, k) * rk3div_beta;
						d_Gam_y_o0_t33_m0_l0 = 2.0 * vector(rk3alpha, i, j, k) * (rk3C_yxx * rk3Au_xx + rk3C_yyy * rk3Au_yy + rk3C_yzz * rk3Au_zz + 2.0 * rk3C_yxy * rk3Au_xy + 2.0 * rk3C_yxz * rk3Au_xz + 2.0 * rk3C_yyz * rk3Au_yz) + 0.666666666666 * vector(rk3Gam_y, i, j, k) * rk3div_beta;
						d_Gam_z_o0_t33_m0_l0 = 2.0 * vector(rk3alpha, i, j, k) * (rk3C_zxx * rk3Au_xx + rk3C_zyy * rk3Au_yy + rk3C_zzz * rk3Au_zz + 2.0 * rk3C_zxy * rk3Au_xy + 2.0 * rk3C_zxz * rk3Au_xz + 2.0 * rk3C_zyz * rk3Au_yz) + 0.666666666666 * vector(rk3Gam_z, i, j, k) * rk3div_beta;
						m_Gam_z_o0_t32_l0 = (-2.0) * rk3Au_zz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_z_o0_t31_l0 = (-2.0) * rk3Au_yz * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_z_o0_t30_l0 = (-2.0) * rk3Au_xz * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_z_o0_t29_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_zz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_z_o0_t28_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_zy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_z_o0_t27_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_zx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_z_o0_t26_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_zz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_z_o0_t25_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_yz * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_z_o0_t24_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_xz * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_z_o0_t23_l0 = (-1.0) * vector(rk3Gam_z, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_Gam_z_o0_t22_l0 = (-1.0) * vector(rk3Gam_y, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_Gam_z_o0_t21_l0 = (-1.0) * vector(rk3Gam_x, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_Gam_z_o0_t20_l0 = vector(rk3beta_z, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
						m_Gam_z_o0_t19_l0 = vector(rk3beta_y, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
						m_Gam_z_o0_t18_l0 = vector(rk3beta_x, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
						m_Gam_z_o0_t17_l0 = 0.3333333333333 * rk3gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t16_l0 = 0.3333333333333 * rk3gammacu_zz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_z_o0_t15_l0 = 0.3333333333333 * rk3gammacu_zz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_z_o0_t14_l0 = 0.3333333333333 * rk3gammacu_zy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t13_l0 = 0.3333333333333 * rk3gammacu_zy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_z_o0_t12_l0 = 0.3333333333333 * rk3gammacu_zy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_z_o0_t11_l0 = 0.3333333333333 * rk3gammacu_zx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t10_l0 = 0.3333333333333 * rk3gammacu_zx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_z_o0_t9_l0 = 0.3333333333333 * rk3gammacu_zx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_z_o0_t8_l0 = rk3gammacu_zz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_z_o0_t7_l0 = rk3gammacu_zy * d_Gam_z_o0_t7_m0_l0;
						m_Gam_z_o0_t6_l0 = rk3gammacu_zx * d_Gam_z_o0_t6_m0_l0;
						m_Gam_z_o0_t5_l0 = rk3gammacu_yz * d_Gam_x_o0_t14_m0_l0;
						m_Gam_z_o0_t4_l0 = rk3gammacu_yy * d_Gam_z_o0_t4_m0_l0;
						m_Gam_z_o0_t3_l0 = rk3gammacu_yx * d_Gam_z_o0_t3_m0_l0;
						m_Gam_z_o0_t2_l0 = rk3gammacu_xz * d_Gam_x_o0_t11_m0_l0;
						m_Gam_z_o0_t1_l0 = rk3gammacu_xy * d_Gam_z_o0_t1_m0_l0;
						m_Gam_z_o0_t0_l0 = rk3gammacu_xx * d_Gam_z_o0_t0_m0_l0;
						m_Gam_y_o0_t32_l0 = (-2.0) * rk3Au_yz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_y_o0_t31_l0 = (-2.0) * rk3Au_yy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_y_o0_t30_l0 = (-2.0) * rk3Au_xy * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_y_o0_t29_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_yz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_y_o0_t28_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_yy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_y_o0_t27_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_yx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_y_o0_t26_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_yz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_y_o0_t25_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_yy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_y_o0_t24_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_xy * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_y_o0_t23_l0 = (-1.0) * vector(rk3Gam_z, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_Gam_y_o0_t22_l0 = (-1.0) * vector(rk3Gam_y, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_Gam_y_o0_t21_l0 = (-1.0) * vector(rk3Gam_x, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_Gam_y_o0_t20_l0 = vector(rk3beta_z, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
						m_Gam_y_o0_t19_l0 = vector(rk3beta_y, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
						m_Gam_y_o0_t18_l0 = vector(rk3beta_x, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
						m_Gam_y_o0_t17_l0 = 0.3333333333333 * rk3gammacu_yz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_y_o0_t16_l0 = 0.3333333333333 * rk3gammacu_yz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t15_l0 = 0.3333333333333 * rk3gammacu_yz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_y_o0_t14_l0 = 0.3333333333333 * rk3gammacu_yy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_y_o0_t13_l0 = 0.3333333333333 * rk3gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t12_l0 = 0.3333333333333 * rk3gammacu_yy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_y_o0_t11_l0 = 0.3333333333333 * rk3gammacu_yx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_y_o0_t10_l0 = 0.3333333333333 * rk3gammacu_yx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t9_l0 = 0.3333333333333 * rk3gammacu_yx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_y_o0_t8_l0 = rk3gammacu_zz * d_Gam_y_o0_t8_m0_l0;
						m_Gam_y_o0_t7_l0 = rk3gammacu_zy * d_Gam_x_o0_t16_m0_l0;
						m_Gam_y_o0_t6_l0 = rk3gammacu_zx * d_Gam_y_o0_t6_m0_l0;
						m_Gam_y_o0_t5_l0 = rk3gammacu_yz * d_Gam_y_o0_t5_m0_l0;
						m_Gam_y_o0_t4_l0 = rk3gammacu_yy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_y_o0_t3_l0 = rk3gammacu_yx * d_Gam_y_o0_t3_m0_l0;
						m_Gam_y_o0_t2_l0 = rk3gammacu_xz * d_Gam_y_o0_t2_m0_l0;
						m_Gam_y_o0_t1_l0 = rk3gammacu_xy * d_Gam_x_o0_t10_m0_l0;
						m_Gam_y_o0_t0_l0 = rk3gammacu_xx * d_Gam_y_o0_t0_m0_l0;
						m_Gam_x_o0_t32_l0 = (-2.0) * rk3Au_xz * d_dalpha_xx_o0_t3_m0_l0;
						m_Gam_x_o0_t31_l0 = (-2.0) * rk3Au_xy * d_dalpha_xx_o0_t2_m0_l0;
						m_Gam_x_o0_t30_l0 = (-2.0) * rk3Au_xx * d_dalpha_xx_o0_t1_m0_l0;
						m_Gam_x_o0_t29_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_xz * d_Gam_x_o0_t29_m0_l0;
						m_Gam_x_o0_t28_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_xy * d_Gam_x_o0_t28_m0_l0;
						m_Gam_x_o0_t27_l0 = (-2.0) * vector(rk3alpha, i, j, k) * 0.666666666666 * rk3gammacu_xx * d_Gam_x_o0_t27_m0_l0;
						m_Gam_x_o0_t26_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_xz * d_dalpha_xx_o0_t12_m0_l0;
						m_Gam_x_o0_t25_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_xy * d_dalpha_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t24_l0 = 2.0 * vector(rk3alpha, i, j, k) * 6.0 * rk3Au_xx * d_dalpha_xx_o0_t4_m0_l0;
						m_Gam_x_o0_t23_l0 = (-1.0) * vector(rk3Gam_z, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_Gam_x_o0_t22_l0 = (-1.0) * vector(rk3Gam_y, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_Gam_x_o0_t21_l0 = (-1.0) * vector(rk3Gam_x, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_Gam_x_o0_t20_l0 = vector(rk3beta_z, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
						m_Gam_x_o0_t19_l0 = vector(rk3beta_y, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
						m_Gam_x_o0_t18_l0 = vector(rk3beta_x, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
						m_Gam_x_o0_t17_l0 = 0.3333333333333 * rk3gammacu_xz * d_Gam_x_o0_t17_m0_l0;
						m_Gam_x_o0_t16_l0 = 0.3333333333333 * rk3gammacu_xz * d_Gam_x_o0_t16_m0_l0;
						m_Gam_x_o0_t15_l0 = 0.3333333333333 * rk3gammacu_xz * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t14_l0 = 0.3333333333333 * rk3gammacu_xy * d_Gam_x_o0_t14_m0_l0;
						m_Gam_x_o0_t13_l0 = 0.3333333333333 * rk3gammacu_xy * d_Gam_x_o0_t13_m0_l0;
						m_Gam_x_o0_t12_l0 = 0.3333333333333 * rk3gammacu_xy * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t11_l0 = 0.3333333333333 * rk3gammacu_xx * d_Gam_x_o0_t11_m0_l0;
						m_Gam_x_o0_t10_l0 = 0.3333333333333 * rk3gammacu_xx * d_Gam_x_o0_t10_m0_l0;
						m_Gam_x_o0_t9_l0 = 0.3333333333333 * rk3gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_Gam_x_o0_t8_l0 = rk3gammacu_zz * d_Gam_x_o0_t8_m0_l0;
						m_Gam_x_o0_t7_l0 = rk3gammacu_zy * d_Gam_x_o0_t7_m0_l0;
						m_Gam_x_o0_t6_l0 = rk3gammacu_zx * d_Gam_x_o0_t6_m0_l0;
						m_Gam_x_o0_t5_l0 = rk3gammacu_yz * d_Gam_x_o0_t5_m0_l0;
						m_Gam_x_o0_t4_l0 = rk3gammacu_yy * d_Gam_x_o0_t4_m0_l0;
						m_Gam_x_o0_t3_l0 = rk3gammacu_yx * d_Gam_x_o0_t3_m0_l0;
						m_Gam_x_o0_t2_l0 = rk3gammacu_xz * d_Gam_x_o0_t2_m0_l0;
						m_Gam_x_o0_t1_l0 = rk3gammacu_xy * d_Gam_x_o0_t1_m0_l0;
						m_Gam_x_o0_t0_l0 = rk3gammacu_xx * d_Gam_x_o0_t0_m0_l0;
						m_alpha_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_alpha_o1_t2_m0_l0;
						m_alpha_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_alpha_o1_t1_m0_l0;
						m_alpha_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_alpha_o1_t0_m0_l0;
						m_alpha_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_alpha_o0_t2_m0_l0;
						m_alpha_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_alpha_o0_t1_m0_l0;
						m_alpha_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_alpha_o0_t0_m0_l0;
						m_trK_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_trK_o1_t2_m0_l0;
						m_trK_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_trK_o1_t1_m0_l0;
						m_trK_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_trK_o1_t0_m0_l0;
						m_trK_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_trK_o0_t2_m0_l0;
						m_trK_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_trK_o0_t1_m0_l0;
						m_trK_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_trK_o0_t0_m0_l0;
						m_Phi_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_Phi_o1_t2_m0_l0;
						m_Phi_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_Phi_o1_t1_m0_l0;
						m_Phi_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_Phi_o1_t0_m0_l0;
						m_Phi_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_Phi_o0_t2_m0_l0;
						m_Phi_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_Phi_o0_t1_m0_l0;
						m_Phi_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_Phi_o0_t0_m0_l0;
						m_A_zz_o2_t2_l0 = 2.0 * vector(rk3A_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_zz_o2_t1_l0 = 2.0 * vector(rk3A_yz, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_zz_o2_t0_l0 = 2.0 * vector(rk3A_xz, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_zz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_zz_o1_t2_m0_l0;
						m_A_zz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_zz_o1_t1_m0_l0;
						m_A_zz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_zz_o1_t0_m0_l0;
						m_A_zz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_zz_o0_t2_m0_l0;
						m_A_zz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_zz_o0_t1_m0_l0;
						m_A_zz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_zz_o0_t0_m0_l0;
						m_A_yz_o2_t5_l0 = vector(rk3A_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yz_o2_t4_l0 = vector(rk3A_yz, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yz_o2_t3_l0 = vector(rk3A_xz, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yz_o2_t2_l0 = vector(rk3A_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_yz_o2_t1_l0 = vector(rk3A_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_yz_o2_t0_l0 = vector(rk3A_xy, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_yz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_yz_o1_t2_m0_l0;
						m_A_yz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_yz_o1_t1_m0_l0;
						m_A_yz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_yz_o1_t0_m0_l0;
						m_A_yz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_yz_o0_t2_m0_l0;
						m_A_yz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_yz_o0_t1_m0_l0;
						m_A_yz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_yz_o0_t0_m0_l0;
						m_A_yy_o2_t2_l0 = 2.0 * vector(rk3A_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_yy_o2_t1_l0 = 2.0 * vector(rk3A_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_yy_o2_t0_l0 = 2.0 * vector(rk3A_xy, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_yy_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_yy_o1_t2_m0_l0;
						m_A_yy_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_yy_o1_t1_m0_l0;
						m_A_yy_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_yy_o1_t0_m0_l0;
						m_A_yy_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_yy_o0_t2_m0_l0;
						m_A_yy_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_yy_o0_t1_m0_l0;
						m_A_yy_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_yy_o0_t0_m0_l0;
						m_A_xz_o2_t5_l0 = vector(rk3A_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xz_o2_t4_l0 = vector(rk3A_yz, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xz_o2_t3_l0 = vector(rk3A_xz, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xz_o2_t2_l0 = vector(rk3A_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_A_xz_o2_t1_l0 = vector(rk3A_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_A_xz_o2_t0_l0 = vector(rk3A_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_A_xz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_xz_o1_t2_m0_l0;
						m_A_xz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_xz_o1_t1_m0_l0;
						m_A_xz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_xz_o1_t0_m0_l0;
						m_A_xz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_xz_o0_t2_m0_l0;
						m_A_xz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_xz_o0_t1_m0_l0;
						m_A_xz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_xz_o0_t0_m0_l0;
						m_A_xy_o2_t5_l0 = vector(rk3A_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xy_o2_t4_l0 = vector(rk3A_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xy_o2_t3_l0 = vector(rk3A_xy, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xy_o2_t2_l0 = vector(rk3A_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_A_xy_o2_t1_l0 = vector(rk3A_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_A_xy_o2_t0_l0 = vector(rk3A_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_A_xy_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_xy_o1_t2_m0_l0;
						m_A_xy_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_xy_o1_t1_m0_l0;
						m_A_xy_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_xy_o1_t0_m0_l0;
						m_A_xy_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_xy_o0_t2_m0_l0;
						m_A_xy_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_xy_o0_t1_m0_l0;
						m_A_xy_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_xy_o0_t0_m0_l0;
						m_A_xx_o2_t2_l0 = 2.0 * vector(rk3A_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_A_xx_o2_t1_l0 = 2.0 * vector(rk3A_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_A_xx_o2_t0_l0 = 2.0 * vector(rk3A_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_A_xx_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_A_xx_o1_t2_m0_l0;
						m_A_xx_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_A_xx_o1_t1_m0_l0;
						m_A_xx_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_A_xx_o1_t0_m0_l0;
						m_A_xx_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_A_xx_o0_t2_m0_l0;
						m_A_xx_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_A_xx_o0_t1_m0_l0;
						m_A_xx_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_A_xx_o0_t0_m0_l0;
						m_gammac_zy_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zy_o1_t2_m0_l0;
						m_gammac_zy_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zy_o1_t1_m0_l0;
						m_gammac_zy_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zy_o1_t0_m0_l0;
						m_gammac_zy_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zy_o0_t2_m0_l0;
						m_gammac_zy_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zy_o0_t1_m0_l0;
						m_gammac_zy_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zy_o0_t0_m0_l0;
						m_gammac_zx_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zx_o1_t2_m0_l0;
						m_gammac_zx_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zx_o1_t1_m0_l0;
						m_gammac_zx_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zx_o1_t0_m0_l0;
						m_gammac_zx_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zx_o0_t2_m0_l0;
						m_gammac_zx_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zx_o0_t1_m0_l0;
						m_gammac_zx_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zx_o0_t0_m0_l0;
						m_gammac_zz_o2_t2_l0 = 2.0 * vector(rk3gammac_zz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_zz_o2_t1_l0 = 2.0 * vector(rk3gammac_zy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_zz_o2_t0_l0 = 2.0 * vector(rk3gammac_zx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_zz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zz_o1_t2_m0_l0;
						m_gammac_zz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zz_o1_t1_m0_l0;
						m_gammac_zz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zz_o1_t0_m0_l0;
						m_gammac_zz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_zz_o0_t2_m0_l0;
						m_gammac_zz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_zz_o0_t1_m0_l0;
						m_gammac_zz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_zz_o0_t0_m0_l0;
						m_gammac_yz_o2_t5_l0 = vector(rk3gammac_zz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yz_o2_t4_l0 = vector(rk3gammac_zy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yz_o2_t3_l0 = vector(rk3gammac_zx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yz_o2_t2_l0 = vector(rk3gammac_yz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_yz_o2_t1_l0 = vector(rk3gammac_yy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_yz_o2_t0_l0 = vector(rk3gammac_yx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_yz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yz_o1_t2_m0_l0;
						m_gammac_yz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yz_o1_t1_m0_l0;
						m_gammac_yz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yz_o1_t0_m0_l0;
						m_gammac_yz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yz_o0_t2_m0_l0;
						m_gammac_yz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yz_o0_t1_m0_l0;
						m_gammac_yz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yz_o0_t0_m0_l0;
						m_gammac_yx_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yx_o1_t2_m0_l0;
						m_gammac_yx_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yx_o1_t1_m0_l0;
						m_gammac_yx_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yx_o1_t0_m0_l0;
						m_gammac_yx_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yx_o0_t2_m0_l0;
						m_gammac_yx_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yx_o0_t1_m0_l0;
						m_gammac_yx_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yx_o0_t0_m0_l0;
						m_gammac_yy_o2_t2_l0 = 2.0 * vector(rk3gammac_yz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_yy_o2_t1_l0 = 2.0 * vector(rk3gammac_yy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_yy_o2_t0_l0 = 2.0 * vector(rk3gammac_yx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_yy_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yy_o1_t2_m0_l0;
						m_gammac_yy_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yy_o1_t1_m0_l0;
						m_gammac_yy_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yy_o1_t0_m0_l0;
						m_gammac_yy_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_yy_o0_t2_m0_l0;
						m_gammac_yy_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_yy_o0_t1_m0_l0;
						m_gammac_yy_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_yy_o0_t0_m0_l0;
						m_gammac_xz_o2_t5_l0 = vector(rk3gammac_zz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xz_o2_t4_l0 = vector(rk3gammac_zy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xz_o2_t3_l0 = vector(rk3gammac_zx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xz_o2_t2_l0 = vector(rk3gammac_xz, i, j, k) * d_div_beta_o0_t2_m0_l0;
						m_gammac_xz_o2_t1_l0 = vector(rk3gammac_xy, i, j, k) * d_gammac_xz_o2_t1_m0_l0;
						m_gammac_xz_o2_t0_l0 = vector(rk3gammac_xx, i, j, k) * d_gammac_xz_o2_t0_m0_l0;
						m_gammac_xz_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xz_o1_t2_m0_l0;
						m_gammac_xz_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xz_o1_t1_m0_l0;
						m_gammac_xz_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xz_o1_t0_m0_l0;
						m_gammac_xz_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xz_o0_t2_m0_l0;
						m_gammac_xz_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xz_o0_t1_m0_l0;
						m_gammac_xz_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xz_o0_t0_m0_l0;
						m_gammac_xy_o2_t5_l0 = vector(rk3gammac_yz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xy_o2_t4_l0 = vector(rk3gammac_yy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xy_o2_t3_l0 = vector(rk3gammac_yx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xy_o2_t2_l0 = vector(rk3gammac_xz, i, j, k) * d_gammac_xy_o2_t2_m0_l0;
						m_gammac_xy_o2_t1_l0 = vector(rk3gammac_xy, i, j, k) * d_div_beta_o0_t1_m0_l0;
						m_gammac_xy_o2_t0_l0 = vector(rk3gammac_xx, i, j, k) * d_gammac_xy_o2_t0_m0_l0;
						m_gammac_xy_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xy_o1_t2_m0_l0;
						m_gammac_xy_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xy_o1_t1_m0_l0;
						m_gammac_xy_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xy_o1_t0_m0_l0;
						m_gammac_xy_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xy_o0_t2_m0_l0;
						m_gammac_xy_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xy_o0_t1_m0_l0;
						m_gammac_xy_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xy_o0_t0_m0_l0;
						m_gammac_xx_o2_t2_l0 = 2.0 * vector(rk3gammac_xz, i, j, k) * d_gammac_xx_o2_t2_m0_l0;
						m_gammac_xx_o2_t1_l0 = 2.0 * vector(rk3gammac_xy, i, j, k) * d_gammac_xx_o2_t1_m0_l0;
						m_gammac_xx_o2_t0_l0 = 2.0 * vector(rk3gammac_xx, i, j, k) * d_div_beta_o0_t0_m0_l0;
						m_gammac_xx_o1_t2_l0 = MIN(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xx_o1_t2_m0_l0;
						m_gammac_xx_o1_t1_l0 = MIN(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xx_o1_t1_m0_l0;
						m_gammac_xx_o1_t0_l0 = MIN(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xx_o1_t0_m0_l0;
						m_gammac_xx_o0_t2_l0 = MAX(0.0, vector(rk3beta_z, i, j, k)) * d_gammac_xx_o0_t2_m0_l0;
						m_gammac_xx_o0_t1_l0 = MAX(0.0, vector(rk3beta_y, i, j, k)) * d_gammac_xx_o0_t1_m0_l0;
						m_gammac_xx_o0_t0_l0 = MAX(0.0, vector(rk3beta_x, i, j, k)) * d_gammac_xx_o0_t0_m0_l0;
						RHS_gammac_xx = ((((((((m_gammac_xx_o0_t0_l0 + m_gammac_xx_o0_t1_l0) + m_gammac_xx_o0_t2_l0) + m_gammac_xx_o1_t0_l0) + m_gammac_xx_o1_t1_l0) + m_gammac_xx_o1_t2_l0) + m_gammac_xx_o2_t0_l0) + m_gammac_xx_o2_t1_l0) + m_gammac_xx_o2_t2_l0) + d_gammac_xx_o2_t3_m0_l0;
						RHS_gammac_xy = (((((((((((m_gammac_xy_o0_t0_l0 + m_gammac_xy_o0_t1_l0) + m_gammac_xy_o0_t2_l0) + m_gammac_xy_o1_t0_l0) + m_gammac_xy_o1_t1_l0) + m_gammac_xy_o1_t2_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + d_gammac_xy_o2_t6_m0_l0;
						RHS_gammac_xz = (((((((((((m_gammac_xz_o0_t0_l0 + m_gammac_xz_o0_t1_l0) + m_gammac_xz_o0_t2_l0) + m_gammac_xz_o1_t0_l0) + m_gammac_xz_o1_t1_l0) + m_gammac_xz_o1_t2_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + d_gammac_xz_o2_t6_m0_l0;
						RHS_gammac_yy = ((((((((m_gammac_yy_o0_t0_l0 + m_gammac_yy_o0_t1_l0) + m_gammac_yy_o0_t2_l0) + m_gammac_yy_o1_t0_l0) + m_gammac_yy_o1_t1_l0) + m_gammac_yy_o1_t2_l0) + m_gammac_yy_o2_t0_l0) + m_gammac_yy_o2_t1_l0) + m_gammac_yy_o2_t2_l0) + d_gammac_yy_o2_t3_m0_l0;
						RHS_gammac_yx = (((((((((((m_gammac_yx_o0_t0_l0 + m_gammac_yx_o0_t1_l0) + m_gammac_yx_o0_t2_l0) + m_gammac_yx_o1_t0_l0) + m_gammac_yx_o1_t1_l0) + m_gammac_yx_o1_t2_l0) + m_gammac_xy_o2_t3_l0) + m_gammac_xy_o2_t4_l0) + m_gammac_xy_o2_t5_l0) + m_gammac_xy_o2_t0_l0) + m_gammac_xy_o2_t1_l0) + m_gammac_xy_o2_t2_l0) + d_gammac_yx_o2_t6_m0_l0;
						RHS_gammac_yz = (((((((((((m_gammac_yz_o0_t0_l0 + m_gammac_yz_o0_t1_l0) + m_gammac_yz_o0_t2_l0) + m_gammac_yz_o1_t0_l0) + m_gammac_yz_o1_t1_l0) + m_gammac_yz_o1_t2_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + d_gammac_yz_o2_t6_m0_l0;
						RHS_gammac_zz = ((((((((m_gammac_zz_o0_t0_l0 + m_gammac_zz_o0_t1_l0) + m_gammac_zz_o0_t2_l0) + m_gammac_zz_o1_t0_l0) + m_gammac_zz_o1_t1_l0) + m_gammac_zz_o1_t2_l0) + m_gammac_zz_o2_t0_l0) + m_gammac_zz_o2_t1_l0) + m_gammac_zz_o2_t2_l0) + d_gammac_zz_o2_t3_m0_l0;
						RHS_gammac_zx = (((((((((((m_gammac_zx_o0_t0_l0 + m_gammac_zx_o0_t1_l0) + m_gammac_zx_o0_t2_l0) + m_gammac_zx_o1_t0_l0) + m_gammac_zx_o1_t1_l0) + m_gammac_zx_o1_t2_l0) + m_gammac_xz_o2_t3_l0) + m_gammac_xz_o2_t4_l0) + m_gammac_xz_o2_t5_l0) + m_gammac_xz_o2_t0_l0) + m_gammac_xz_o2_t1_l0) + m_gammac_xz_o2_t2_l0) + d_gammac_zx_o2_t6_m0_l0;
						RHS_gammac_zy = (((((((((((m_gammac_zy_o0_t0_l0 + m_gammac_zy_o0_t1_l0) + m_gammac_zy_o0_t2_l0) + m_gammac_zy_o1_t0_l0) + m_gammac_zy_o1_t1_l0) + m_gammac_zy_o1_t2_l0) + m_gammac_yz_o2_t3_l0) + m_gammac_yz_o2_t4_l0) + m_gammac_yz_o2_t5_l0) + m_gammac_yz_o2_t0_l0) + m_gammac_yz_o2_t1_l0) + m_gammac_yz_o2_t2_l0) + d_gammac_zy_o2_t6_m0_l0;
						RHS_A_xx = ((((((((m_A_xx_o0_t0_l0 + m_A_xx_o0_t1_l0) + m_A_xx_o0_t2_l0) + m_A_xx_o1_t0_l0) + m_A_xx_o1_t1_l0) + m_A_xx_o1_t2_l0) + m_A_xx_o2_t0_l0) + m_A_xx_o2_t1_l0) + m_A_xx_o2_t2_l0) + d_A_xx_o2_t3_m0_l0;
						RHS_A_xy = (((((((((((m_A_xy_o0_t0_l0 + m_A_xy_o0_t1_l0) + m_A_xy_o0_t2_l0) + m_A_xy_o1_t0_l0) + m_A_xy_o1_t1_l0) + m_A_xy_o1_t2_l0) + m_A_xy_o2_t0_l0) + m_A_xy_o2_t1_l0) + m_A_xy_o2_t2_l0) + m_A_xy_o2_t3_l0) + m_A_xy_o2_t4_l0) + m_A_xy_o2_t5_l0) + d_A_xy_o2_t6_m0_l0;
						RHS_A_xz = (((((((((((m_A_xz_o0_t0_l0 + m_A_xz_o0_t1_l0) + m_A_xz_o0_t2_l0) + m_A_xz_o1_t0_l0) + m_A_xz_o1_t1_l0) + m_A_xz_o1_t2_l0) + m_A_xz_o2_t0_l0) + m_A_xz_o2_t1_l0) + m_A_xz_o2_t2_l0) + m_A_xz_o2_t3_l0) + m_A_xz_o2_t4_l0) + m_A_xz_o2_t5_l0) + d_A_xz_o2_t6_m0_l0;
						RHS_A_yy = ((((((((m_A_yy_o0_t0_l0 + m_A_yy_o0_t1_l0) + m_A_yy_o0_t2_l0) + m_A_yy_o1_t0_l0) + m_A_yy_o1_t1_l0) + m_A_yy_o1_t2_l0) + m_A_yy_o2_t0_l0) + m_A_yy_o2_t1_l0) + m_A_yy_o2_t2_l0) + d_A_yy_o2_t3_m0_l0;
						RHS_A_yz = (((((((((((m_A_yz_o0_t0_l0 + m_A_yz_o0_t1_l0) + m_A_yz_o0_t2_l0) + m_A_yz_o1_t0_l0) + m_A_yz_o1_t1_l0) + m_A_yz_o1_t2_l0) + m_A_yz_o2_t0_l0) + m_A_yz_o2_t1_l0) + m_A_yz_o2_t2_l0) + m_A_yz_o2_t3_l0) + m_A_yz_o2_t4_l0) + m_A_yz_o2_t5_l0) + d_A_yz_o2_t6_m0_l0;
						RHS_A_zz = ((((((((m_A_zz_o0_t0_l0 + m_A_zz_o0_t1_l0) + m_A_zz_o0_t2_l0) + m_A_zz_o1_t0_l0) + m_A_zz_o1_t1_l0) + m_A_zz_o1_t2_l0) + m_A_zz_o2_t0_l0) + m_A_zz_o2_t1_l0) + m_A_zz_o2_t2_l0) + d_A_zz_o2_t3_m0_l0;
						RHS_Phi = (((((m_Phi_o0_t0_l0 + m_Phi_o0_t1_l0) + m_Phi_o0_t2_l0) + m_Phi_o1_t0_l0) + m_Phi_o1_t1_l0) + m_Phi_o1_t2_l0) + d_Phi_o2_t0_m0_l0;
						RHS_trK = (((((m_trK_o0_t0_l0 + m_trK_o0_t1_l0) + m_trK_o0_t2_l0) + m_trK_o1_t0_l0) + m_trK_o1_t1_l0) + m_trK_o1_t2_l0) + d_trK_o2_t0_m0_l0;
						RHS_beta_x = d_beta_x_o0_t0_m0_l0;
						RHS_beta_y = d_beta_x_o0_t0_m0_l0;
						RHS_beta_z = d_beta_x_o0_t0_m0_l0;
						RHS_alpha = (((((m_alpha_o0_t0_l0 + m_alpha_o0_t1_l0) + m_alpha_o0_t2_l0) + m_alpha_o1_t0_l0) + m_alpha_o1_t1_l0) + m_alpha_o1_t2_l0) + d_alpha_o2_t0_m0_l0;
						RHS_Gam_x = ((((((((((((((((((((((((((((((((m_Gam_x_o0_t0_l0 + m_Gam_x_o0_t1_l0) + m_Gam_x_o0_t2_l0) + m_Gam_x_o0_t3_l0) + m_Gam_x_o0_t4_l0) + m_Gam_x_o0_t5_l0) + m_Gam_x_o0_t6_l0) + m_Gam_x_o0_t7_l0) + m_Gam_x_o0_t8_l0) + m_Gam_x_o0_t9_l0) + m_Gam_x_o0_t10_l0) + m_Gam_x_o0_t11_l0) + m_Gam_x_o0_t12_l0) + m_Gam_x_o0_t13_l0) + m_Gam_x_o0_t14_l0) + m_Gam_x_o0_t15_l0) + m_Gam_x_o0_t16_l0) + m_Gam_x_o0_t17_l0) + m_Gam_x_o0_t18_l0) + m_Gam_x_o0_t19_l0) + m_Gam_x_o0_t20_l0) + m_Gam_x_o0_t21_l0) + m_Gam_x_o0_t22_l0) + m_Gam_x_o0_t23_l0) + m_Gam_x_o0_t24_l0) + m_Gam_x_o0_t25_l0) + m_Gam_x_o0_t26_l0) + m_Gam_x_o0_t27_l0) + m_Gam_x_o0_t28_l0) + m_Gam_x_o0_t29_l0) + m_Gam_x_o0_t30_l0) + m_Gam_x_o0_t31_l0) + m_Gam_x_o0_t32_l0) + d_Gam_x_o0_t33_m0_l0;
						RHS_Gam_y = ((((((((((((((((((((((((((((((((m_Gam_y_o0_t0_l0 + m_Gam_y_o0_t1_l0) + m_Gam_y_o0_t2_l0) + m_Gam_y_o0_t3_l0) + m_Gam_y_o0_t4_l0) + m_Gam_y_o0_t5_l0) + m_Gam_y_o0_t6_l0) + m_Gam_y_o0_t7_l0) + m_Gam_y_o0_t8_l0) + m_Gam_y_o0_t9_l0) + m_Gam_y_o0_t10_l0) + m_Gam_y_o0_t11_l0) + m_Gam_y_o0_t12_l0) + m_Gam_y_o0_t13_l0) + m_Gam_y_o0_t14_l0) + m_Gam_y_o0_t15_l0) + m_Gam_y_o0_t16_l0) + m_Gam_y_o0_t17_l0) + m_Gam_y_o0_t18_l0) + m_Gam_y_o0_t19_l0) + m_Gam_y_o0_t20_l0) + m_Gam_y_o0_t21_l0) + m_Gam_y_o0_t22_l0) + m_Gam_y_o0_t23_l0) + m_Gam_y_o0_t24_l0) + m_Gam_y_o0_t25_l0) + m_Gam_y_o0_t26_l0) + m_Gam_y_o0_t27_l0) + m_Gam_y_o0_t28_l0) + m_Gam_y_o0_t29_l0) + m_Gam_y_o0_t30_l0) + m_Gam_y_o0_t31_l0) + m_Gam_y_o0_t32_l0) + d_Gam_y_o0_t33_m0_l0;
						RHS_Gam_z = ((((((((((((((((((((((((((((((((m_Gam_z_o0_t0_l0 + m_Gam_z_o0_t1_l0) + m_Gam_z_o0_t2_l0) + m_Gam_z_o0_t3_l0) + m_Gam_z_o0_t4_l0) + m_Gam_z_o0_t5_l0) + m_Gam_z_o0_t6_l0) + m_Gam_z_o0_t7_l0) + m_Gam_z_o0_t8_l0) + m_Gam_z_o0_t9_l0) + m_Gam_z_o0_t10_l0) + m_Gam_z_o0_t11_l0) + m_Gam_z_o0_t12_l0) + m_Gam_z_o0_t13_l0) + m_Gam_z_o0_t14_l0) + m_Gam_z_o0_t15_l0) + m_Gam_z_o0_t16_l0) + m_Gam_z_o0_t17_l0) + m_Gam_z_o0_t18_l0) + m_Gam_z_o0_t19_l0) + m_Gam_z_o0_t20_l0) + m_Gam_z_o0_t21_l0) + m_Gam_z_o0_t22_l0) + m_Gam_z_o0_t23_l0) + m_Gam_z_o0_t24_l0) + m_Gam_z_o0_t25_l0) + m_Gam_z_o0_t26_l0) + m_Gam_z_o0_t27_l0) + m_Gam_z_o0_t28_l0) + m_Gam_z_o0_t29_l0) + m_Gam_z_o0_t30_l0) + m_Gam_z_o0_t31_l0) + m_Gam_z_o0_t32_l0) + d_Gam_z_o0_t33_m0_l0;
						if (dissipation_factor_gammac_xx > 0.0) {
							RHS_gammac_xx = RHS_gammac_xx + dissipation_factor_gammac_xx * (meshDissipation_i(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xy > 0.0) {
							RHS_gammac_xy = RHS_gammac_xy + dissipation_factor_gammac_xy * (meshDissipation_i(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_xz > 0.0) {
							RHS_gammac_xz = RHS_gammac_xz + dissipation_factor_gammac_xz * (meshDissipation_i(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yy > 0.0) {
							RHS_gammac_yy = RHS_gammac_yy + dissipation_factor_gammac_yy * (meshDissipation_i(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yx > 0.0) {
							RHS_gammac_yx = RHS_gammac_yx + dissipation_factor_gammac_yx * (meshDissipation_i(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_yz > 0.0) {
							RHS_gammac_yz = RHS_gammac_yz + dissipation_factor_gammac_yz * (meshDissipation_i(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zz > 0.0) {
							RHS_gammac_zz = RHS_gammac_zz + dissipation_factor_gammac_zz * (meshDissipation_i(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zx > 0.0) {
							RHS_gammac_zx = RHS_gammac_zx + dissipation_factor_gammac_zx * (meshDissipation_i(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_gammac_zy > 0.0) {
							RHS_gammac_zy = RHS_gammac_zy + dissipation_factor_gammac_zy * (meshDissipation_i(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xx > 0.0) {
							RHS_A_xx = RHS_A_xx + dissipation_factor_A_xx * (meshDissipation_i(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_xx, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xy > 0.0) {
							RHS_A_xy = RHS_A_xy + dissipation_factor_A_xy * (meshDissipation_i(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_xy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_xz > 0.0) {
							RHS_A_xz = RHS_A_xz + dissipation_factor_A_xz * (meshDissipation_i(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_xz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yy > 0.0) {
							RHS_A_yy = RHS_A_yy + dissipation_factor_A_yy * (meshDissipation_i(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_yy, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_yz > 0.0) {
							RHS_A_yz = RHS_A_yz + dissipation_factor_A_yz * (meshDissipation_i(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_yz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_A_zz > 0.0) {
							RHS_A_zz = RHS_A_zz + dissipation_factor_A_zz * (meshDissipation_i(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3A_zz, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Phi > 0.0) {
							RHS_Phi = RHS_Phi + dissipation_factor_Phi * (meshDissipation_i(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3Phi, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_trK > 0.0) {
							RHS_trK = RHS_trK + dissipation_factor_trK * (meshDissipation_i(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3trK, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_x > 0.0) {
							RHS_beta_x = RHS_beta_x + dissipation_factor_beta_x * (meshDissipation_i(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3beta_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_y > 0.0) {
							RHS_beta_y = RHS_beta_y + dissipation_factor_beta_y * (meshDissipation_i(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3beta_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_beta_z > 0.0) {
							RHS_beta_z = RHS_beta_z + dissipation_factor_beta_z * (meshDissipation_i(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3beta_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_alpha > 0.0) {
							RHS_alpha = RHS_alpha + dissipation_factor_alpha * (meshDissipation_i(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3alpha, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_x > 0.0) {
							RHS_Gam_x = RHS_Gam_x + dissipation_factor_Gam_x * (meshDissipation_i(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_y > 0.0) {
							RHS_Gam_y = RHS_Gam_y + dissipation_factor_Gam_y * (meshDissipation_i(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						if (dissipation_factor_Gam_z > 0.0) {
							RHS_Gam_z = RHS_Gam_z + dissipation_factor_Gam_z * (meshDissipation_i(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_j(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast) + meshDissipation_k(rk3Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast));
						}
						vector(gammac_xx, i, j, k) = RK4P4_(RHS_gammac_xx, vector(gammac_xx_p, i, j, k), vector(rk1gammac_xx, i, j, k), vector(rk2gammac_xx, i, j, k), vector(rk3gammac_xx, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_xy, i, j, k) = RK4P4_(RHS_gammac_xy, vector(gammac_xy_p, i, j, k), vector(rk1gammac_xy, i, j, k), vector(rk2gammac_xy, i, j, k), vector(rk3gammac_xy, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_xz, i, j, k) = RK4P4_(RHS_gammac_xz, vector(gammac_xz_p, i, j, k), vector(rk1gammac_xz, i, j, k), vector(rk2gammac_xz, i, j, k), vector(rk3gammac_xz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_yy, i, j, k) = RK4P4_(RHS_gammac_yy, vector(gammac_yy_p, i, j, k), vector(rk1gammac_yy, i, j, k), vector(rk2gammac_yy, i, j, k), vector(rk3gammac_yy, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_yx, i, j, k) = RK4P4_(RHS_gammac_yx, vector(gammac_yx_p, i, j, k), vector(rk1gammac_yx, i, j, k), vector(rk2gammac_yx, i, j, k), vector(rk3gammac_yx, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_yz, i, j, k) = RK4P4_(RHS_gammac_yz, vector(gammac_yz_p, i, j, k), vector(rk1gammac_yz, i, j, k), vector(rk2gammac_yz, i, j, k), vector(rk3gammac_yz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_zz, i, j, k) = RK4P4_(RHS_gammac_zz, vector(gammac_zz_p, i, j, k), vector(rk1gammac_zz, i, j, k), vector(rk2gammac_zz, i, j, k), vector(rk3gammac_zz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_zx, i, j, k) = RK4P4_(RHS_gammac_zx, vector(gammac_zx_p, i, j, k), vector(rk1gammac_zx, i, j, k), vector(rk2gammac_zx, i, j, k), vector(rk3gammac_zx, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(gammac_zy, i, j, k) = RK4P4_(RHS_gammac_zy, vector(gammac_zy_p, i, j, k), vector(rk1gammac_zy, i, j, k), vector(rk2gammac_zy, i, j, k), vector(rk3gammac_zy, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_xx, i, j, k) = RK4P4_(RHS_A_xx, vector(A_xx_p, i, j, k), vector(rk1A_xx, i, j, k), vector(rk2A_xx, i, j, k), vector(rk3A_xx, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_xy, i, j, k) = RK4P4_(RHS_A_xy, vector(A_xy_p, i, j, k), vector(rk1A_xy, i, j, k), vector(rk2A_xy, i, j, k), vector(rk3A_xy, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_xz, i, j, k) = RK4P4_(RHS_A_xz, vector(A_xz_p, i, j, k), vector(rk1A_xz, i, j, k), vector(rk2A_xz, i, j, k), vector(rk3A_xz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_yy, i, j, k) = RK4P4_(RHS_A_yy, vector(A_yy_p, i, j, k), vector(rk1A_yy, i, j, k), vector(rk2A_yy, i, j, k), vector(rk3A_yy, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_yz, i, j, k) = RK4P4_(RHS_A_yz, vector(A_yz_p, i, j, k), vector(rk1A_yz, i, j, k), vector(rk2A_yz, i, j, k), vector(rk3A_yz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(A_zz, i, j, k) = RK4P4_(RHS_A_zz, vector(A_zz_p, i, j, k), vector(rk1A_zz, i, j, k), vector(rk2A_zz, i, j, k), vector(rk3A_zz, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(Phi, i, j, k) = RK4P4_(RHS_Phi, vector(Phi_p, i, j, k), vector(rk1Phi, i, j, k), vector(rk2Phi, i, j, k), vector(rk3Phi, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(trK, i, j, k) = RK4P4_(RHS_trK, vector(trK_p, i, j, k), vector(rk1trK, i, j, k), vector(rk2trK, i, j, k), vector(rk3trK, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(beta_x, i, j, k) = RK4P4_(RHS_beta_x, vector(beta_x_p, i, j, k), vector(rk1beta_x, i, j, k), vector(rk2beta_x, i, j, k), vector(rk3beta_x, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(beta_y, i, j, k) = RK4P4_(RHS_beta_y, vector(beta_y_p, i, j, k), vector(rk1beta_y, i, j, k), vector(rk2beta_y, i, j, k), vector(rk3beta_y, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(beta_z, i, j, k) = RK4P4_(RHS_beta_z, vector(beta_z_p, i, j, k), vector(rk1beta_z, i, j, k), vector(rk2beta_z, i, j, k), vector(rk3beta_z, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(alpha, i, j, k) = RK4P4_(RHS_alpha, vector(alpha_p, i, j, k), vector(rk1alpha, i, j, k), vector(rk2alpha, i, j, k), vector(rk3alpha, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(Gam_x, i, j, k) = RK4P4_(RHS_Gam_x, vector(Gam_x_p, i, j, k), vector(rk1Gam_x, i, j, k), vector(rk2Gam_x, i, j, k), vector(rk3Gam_x, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(Gam_y, i, j, k) = RK4P4_(RHS_Gam_y, vector(Gam_y_p, i, j, k), vector(rk1Gam_y, i, j, k), vector(rk2Gam_y, i, j, k), vector(rk3Gam_y, i, j, k), dx, simPlat_dt, ilast, jlast);
						vector(Gam_z, i, j, k) = RK4P4_(RHS_Gam_z, vector(Gam_z_p, i, j, k), vector(rk1Gam_z, i, j, k), vector(rk2Gam_z, i, j, k), vector(rk3Gam_z, i, j, k), dx, simPlat_dt, ilast, jlast);
					}
				}
			}
		}
	}
	//Fill ghosts and periodical boundaries
	time_interpolate_operator_mesh1->setStep(4);
	d_bdry_sched_advance16[ln]->fillData(current_time + simPlat_dt, false);
	for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
		const std::shared_ptr<hier::Patch >& patch = *p_it;
		double* FOV_1 = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_1_id).get())->getPointer();
		double* FOV_xLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xLower_id).get())->getPointer();
		double* FOV_xUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_xUpper_id).get())->getPointer();
		double* FOV_yLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yLower_id).get())->getPointer();
		double* FOV_yUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_yUpper_id).get())->getPointer();
		double* FOV_zLower = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zLower_id).get())->getPointer();
		double* FOV_zUpper = ((pdat::NodeData<double> *) patch->getPatchData(d_FOV_zUpper_id).get())->getPointer();
	
		//Hard region field distance variables
		double* d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
		double* d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi_id).get())->getPointer();
	
		double* gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_id).get())->getPointer();
		double* gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_id).get())->getPointer();
		double* gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_id).get())->getPointer();
		double* gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_id).get())->getPointer();
		double* gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_id).get())->getPointer();
		double* gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_id).get())->getPointer();
		double* gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_id).get())->getPointer();
		double* gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_id).get())->getPointer();
		double* gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_id).get())->getPointer();
		double* A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_id).get())->getPointer();
		double* A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_id).get())->getPointer();
		double* A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_id).get())->getPointer();
		double* A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_id).get())->getPointer();
		double* A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_id).get())->getPointer();
		double* A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_id).get())->getPointer();
		double* Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_id).get())->getPointer();
		double* trK = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_id).get())->getPointer();
		double* beta_x = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_x_id).get())->getPointer();
		double* beta_y = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_y_id).get())->getPointer();
		double* beta_z = ((pdat::NodeData<double> *) patch->getPatchData(d_beta_z_id).get())->getPointer();
		double* alpha = ((pdat::NodeData<double> *) patch->getPatchData(d_alpha_id).get())->getPointer();
		double* Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_id).get())->getPointer();
		double* Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_id).get())->getPointer();
		double* Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_id).get())->getPointer();
	
		//Get the dimensions of the patch
		const hier::Index boxfirst = patch->getBox().lower();
		const hier::Index boxlast = patch->getBox().upper();
	
		//Get delta spaces into an array. dx, dy, dz.
		std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
		const double* dx  = patch_geom->getDx();
	
		//Auxiliary definitions
		int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
		int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
		int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
		for(int k = 0; k < klast; k++) {
			for(int j = 0; j < jlast; j++) {
				for(int i = 0; i < ilast; i++) {
					if ((vector(FOV_xLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_xUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_yUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zLower, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
					if ((vector(FOV_zUpper, i, j, k) > 0)) {
						//Region field extrapolations
						if ((vector(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0 || vector(d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, j, k) != 0)) {
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Phi, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, gammac_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xx, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_xz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yy, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_yz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, A_zz, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, trK, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, alpha, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, beta_z, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_x, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_y, FOV_1, dx, ilast, jlast);
							extrapolate_field(d_i_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, i, d_j_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, j, d_k_trK_beta_x_beta_y_beta_z_alpha_Gam_x_Gam_y_Gam_z_gammac_xx_gammac_xy_gammac_xz_gammac_yy_gammac_yx_gammac_yz_gammac_zz_gammac_zx_gammac_zy_A_xx_A_xy_A_xz_A_yy_A_yz_A_zz_Phi, k, Gam_z, FOV_1, dx, ilast, jlast);
						}
					}
				}
			}
		}
	}
	if (d_refinedTimeStepping) {
		if (!hierarchy->finerLevelExists(ln) && last_step) {
			int currentLevelNumber = ln;
			while (currentLevelNumber > 0 && current_iteration[currentLevelNumber] % hierarchy->getRatioToCoarserLevel(currentLevelNumber).max() == 0) {
				d_coarsen_schedule[currentLevelNumber]->coarsenData();
				d_bdry_sched_postCoarsen[currentLevelNumber - 1]->fillData(current_time, false);
				currentLevelNumber--;
			}
		}
	} else {
		if (ln > 0) {
			d_coarsen_schedule[ln]->coarsenData();
			d_bdry_sched_postCoarsen[ln - 1]->fillData(current_time, false);
		}
	}
	

	t_step->stop();
	//Analysis
	bool calculate = false;
	if (previous_iteration < next_mesh_dump_iteration && outputCycle >= next_mesh_dump_iteration) {
		calculate = true;
	}
	for (int i = 0; i < next_slice_dump_iteration.size(); i++) {
		if (analysis_slice_dump[i] && previous_iteration < next_slice_dump_iteration[i] && outputCycle >= next_slice_dump_iteration[i]) {
			calculate = true;
		}
	}
	for (int i = 0; i < next_sphere_dump_iteration.size(); i++) {
		if (analysis_sphere_dump[i] && previous_iteration < next_sphere_dump_iteration[i] && outputCycle >= next_sphere_dump_iteration[i]) {
			calculate = true;
		}
	}
	for (int i = 0; i < next_integration_dump_iteration.size(); i++) {
		if (analysis_integration_dump[i] && previous_iteration < next_integration_dump_iteration[i] && outputCycle >= next_integration_dump_iteration[i]) {
			calculate = true;
		}
	}
	for (int i = 0; i < next_point_dump_iteration.size(); i++) {
		if (analysis_point_dump[i] && previous_iteration < next_point_dump_iteration[i] && outputCycle >= next_point_dump_iteration[i]) {
			calculate = true;
		}
	}
	if (calculate) {
		for (int ln=0; ln<=d_patch_hierarchy->getFinestLevelNumber(); ++ln ) {
			std::shared_ptr<hier::PatchLevel > level(d_patch_hierarchy->getPatchLevel(ln));
			for (hier::PatchLevel::iterator p_it(level->begin()); p_it != level->end(); ++p_it) {
				const std::shared_ptr<hier::Patch >& patch = *p_it;
		
				double* gammac_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xx_id).get())->getPointer();
				double* gammac_yx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yx_id).get())->getPointer();
				double* gammac_zx = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zx_id).get())->getPointer();
				double* gammac_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xy_id).get())->getPointer();
				double* gammac_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yy_id).get())->getPointer();
				double* gammac_zy = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zy_id).get())->getPointer();
				double* gammac_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_xz_id).get())->getPointer();
				double* gammac_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_yz_id).get())->getPointer();
				double* gammac_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_gammac_zz_id).get())->getPointer();
				double* Gam_x = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_x_id).get())->getPointer();
				double* Gam_y = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_y_id).get())->getPointer();
				double* Gam_z = ((pdat::NodeData<double> *) patch->getPatchData(d_Gam_z_id).get())->getPointer();
				double* Phi = ((pdat::NodeData<double> *) patch->getPatchData(d_Phi_id).get())->getPointer();
				double* A_xx = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xx_id).get())->getPointer();
				double* A_xy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xy_id).get())->getPointer();
				double* A_xz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_xz_id).get())->getPointer();
				double* trK = ((pdat::NodeData<double> *) patch->getPatchData(d_trK_id).get())->getPointer();
				double* A_yy = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yy_id).get())->getPointer();
				double* A_yz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_yz_id).get())->getPointer();
				double* A_zz = ((pdat::NodeData<double> *) patch->getPatchData(d_A_zz_id).get())->getPointer();
				double* Rscalar = ((pdat::NodeData<double> *) patch->getPatchData(d_Rscalar_id).get())->getPointer();
				double* HamCon = ((pdat::NodeData<double> *) patch->getPatchData(d_HamCon_id).get())->getPointer();
				double* MomCon_x = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_x_id).get())->getPointer();
				double* MomCon_y = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_y_id).get())->getPointer();
				double* MomCon_z = ((pdat::NodeData<double> *) patch->getPatchData(d_MomCon_z_id).get())->getPointer();
				double d_C_xxx_o0_t0_m0_l0, d_C_xxx_o0_t5_m0_l0, d_C_xxx_o0_t8_m0_l0, d_Rc_xx_o0_t0_m0_l0, d_Rc_xx_o0_t3_m0_l0, d_Rc_xx_o0_t6_m0_l0, d_Rc_xx_o0_t1_m0_l0, d_Rc_xx_o0_t4_m0_l0, d_Rc_xx_o0_t7_m0_l0, d_Rc_xx_o0_t2_m0_l0, d_Rc_xx_o0_t5_m0_l0, d_Rc_xx_o0_t8_m0_l0, d_C_xxx_o0_t3_m0_l0, d_C_xxy_o0_t4_m0_l0, d_C_xxz_o0_t4_m0_l0, d_C_xxx_o0_t6_m0_l0, d_C_xxy_o0_t7_m0_l0, d_C_xxz_o0_t7_m0_l0, d_C_xxy_o0_t0_m0_l0, d_C_xxy_o0_t5_m0_l0, d_C_xxy_o0_t8_m0_l0, d_Rc_xy_o0_t0_m0_l0, d_Rc_xy_o0_t3_m0_l0, d_Rc_xy_o0_t6_m0_l0, d_Rc_xy_o0_t1_m0_l0, d_Rc_xy_o0_t4_m0_l0, d_Rc_xy_o0_t7_m0_l0, d_Rc_xy_o0_t2_m0_l0, d_Rc_xy_o0_t5_m0_l0, d_Rc_xy_o0_t8_m0_l0, d_C_xxy_o0_t3_m0_l0, d_C_xyy_o0_t3_m0_l0, d_C_xyy_o0_t8_m0_l0, d_Rc_yy_o0_t0_m0_l0, d_Rc_yy_o0_t3_m0_l0, d_Rc_yy_o0_t6_m0_l0, d_Rc_yy_o0_t1_m0_l0, d_Rc_yy_o0_t4_m0_l0, d_Rc_yy_o0_t7_m0_l0, d_Rc_yy_o0_t2_m0_l0, d_Rc_yy_o0_t5_m0_l0, d_Rc_yy_o0_t8_m0_l0, d_C_xxy_o0_t6_m0_l0, d_C_xyy_o0_t6_m0_l0, d_C_xyz_o0_t7_m0_l0, d_C_xxz_o0_t0_m0_l0, d_C_xxz_o0_t5_m0_l0, d_C_xxz_o0_t8_m0_l0, d_Rc_xz_o0_t0_m0_l0, d_Rc_xz_o0_t3_m0_l0, d_Rc_xz_o0_t6_m0_l0, d_Rc_xz_o0_t1_m0_l0, d_Rc_xz_o0_t4_m0_l0, d_Rc_xz_o0_t7_m0_l0, d_Rc_xz_o0_t2_m0_l0, d_Rc_xz_o0_t5_m0_l0, d_Rc_xz_o0_t8_m0_l0, d_C_xxz_o0_t3_m0_l0, d_C_xyz_o0_t3_m0_l0, d_C_xyz_o0_t8_m0_l0, d_Rc_yz_o0_t0_m0_l0, d_Rc_yz_o0_t3_m0_l0, d_Rc_yz_o0_t6_m0_l0, d_Rc_yz_o0_t1_m0_l0, d_Rc_yz_o0_t4_m0_l0, d_Rc_yz_o0_t7_m0_l0, d_Rc_yz_o0_t2_m0_l0, d_Rc_yz_o0_t5_m0_l0, d_Rc_yz_o0_t8_m0_l0, d_C_xxz_o0_t6_m0_l0, d_C_xyz_o0_t6_m0_l0, d_C_xzz_o0_t6_m0_l0, d_Rc_zz_o0_t0_m0_l0, d_Rc_zz_o0_t3_m0_l0, d_Rc_zz_o0_t6_m0_l0, d_Rc_zz_o0_t1_m0_l0, d_Rc_zz_o0_t4_m0_l0, d_Rc_zz_o0_t7_m0_l0, d_Rc_zz_o0_t2_m0_l0, d_Rc_zz_o0_t5_m0_l0, d_Rc_zz_o0_t8_m0_l0, d_Rc_xx_o0_t9_m0_l0, d_Rc_xy_o0_t9_m0_l0, d_Rc_xz_o0_t9_m0_l0, d_Rc_xx_o0_t10_m0_l0, d_Rc_xy_o0_t10_m0_l0, d_Rc_xz_o0_t10_m0_l0, d_Rc_xx_o0_t11_m0_l0, d_Rc_xy_o0_t11_m0_l0, d_Rc_xz_o0_t11_m0_l0, d_Rp_xx_o0_t1_m0_l0, d_Rp_xx_o0_t2_m0_l0, d_Rp_xx_o0_t3_m0_l0, d_Rp_xx_o0_t0_m0_l0, d_Rp_xx_o0_t5_m0_l0, d_Rp_xx_o0_t6_m0_l0, d_Rp_xx_o0_t7_m0_l0, d_Rp_xx_o0_t8_m0_l0, d_Rp_xx_o0_t9_m0_l0, d_Rp_xx_o0_t10_m0_l0, d_Rp_xx_o0_t11_m0_l0, d_Rp_xx_o0_t12_m0_l0, d_MomCon_x_o0_t0_m0_l0, d_MomCon_x_o0_t1_m0_l0, d_MomCon_x_o0_t2_m0_l0, d_MomCon_x_o0_t3_m0_l0, d_MomCon_x_o0_t4_m0_l0, d_MomCon_x_o0_t5_m0_l0, d_MomCon_x_o0_t6_m0_l0, d_MomCon_x_o0_t7_m0_l0, d_MomCon_x_o0_t8_m0_l0, d_MomCon_x_o0_t13_m0_l0, d_MomCon_x_o0_t16_m0_l0, d_MomCon_x_o0_t19_m0_l0, d_MomCon_y_o0_t3_m0_l0, d_MomCon_y_o0_t4_m0_l0, d_MomCon_y_o0_t5_m0_l0, d_MomCon_y_o0_t6_m0_l0, d_MomCon_y_o0_t7_m0_l0, d_MomCon_y_o0_t8_m0_l0, d_MomCon_z_o0_t6_m0_l0, d_MomCon_z_o0_t7_m0_l0, d_MomCon_z_o0_t8_m0_l0, Detgammac, gamma_zz, iDetgammac, gamma_yy, gamma_yz, K_yy, K_yz, gamma_xx, gamma_xy, gamma_xz, Detgamma, K_zz, iDetgamma, gammacu_zz, gammau_xx, gammau_xy, gammau_xz, K_xx, gammacu_yy, K_xy, gammacu_yz, gammacu_zy, K_xz, gammau_yy, gammau_yz, gammacu_xz, gammacu_zx, Am_zx, Am_zz, Am_zy, Au_zz, gammacu_xx, gammacu_xy, m_C_xxx_o0_t8_l0, m_C_xxx_o0_t6_l0, m_C_xxx_o0_t5_l0, m_C_xxx_o0_t3_l0, m_C_xxx_o0_t2_l0, m_C_xxx_o0_t0_l0, C_xxx, m_C_xxz_o0_t8_l0, m_C_xxz_o0_t7_l0, m_C_xxz_o0_t6_l0, m_C_xxz_o0_t5_l0, m_C_xxz_o0_t4_l0, m_C_xxz_o0_t3_l0, m_C_xxz_o0_t2_l0, m_C_xxz_o0_t1_l0, m_C_xxz_o0_t0_l0, C_xxz, m_C_zxz_o0_t8_l0, m_C_zxz_o0_t7_l0, m_C_zxz_o0_t6_l0, m_C_zxz_o0_t5_l0, m_C_zxz_o0_t4_l0, m_C_zxz_o0_t3_l0, m_C_zxz_o0_t2_l0, m_C_zxz_o0_t1_l0, m_C_zxz_o0_t0_l0, C_zxz, m_C_xxy_o0_t8_l0, m_C_xxy_o0_t7_l0, m_C_xxy_o0_t6_l0, m_C_xxy_o0_t5_l0, m_C_xxy_o0_t4_l0, m_C_xxy_o0_t3_l0, m_C_xxy_o0_t2_l0, m_C_xxy_o0_t1_l0, m_C_xxy_o0_t0_l0, C_xxy, gammacu_yx, m_C_yxy_o0_t8_l0, m_C_yxy_o0_t7_l0, m_C_yxy_o0_t6_l0, m_C_yxy_o0_t5_l0, m_C_yxy_o0_t4_l0, m_C_yxy_o0_t3_l0, m_C_yxy_o0_t2_l0, m_C_yxy_o0_t1_l0, m_C_yxy_o0_t0_l0, C_yxy, m_C_yxz_o0_t8_l0, m_C_yxz_o0_t7_l0, m_C_yxz_o0_t6_l0, m_C_yxz_o0_t5_l0, m_C_yxz_o0_t4_l0, m_C_yxz_o0_t3_l0, m_C_yxz_o0_t2_l0, m_C_yxz_o0_t1_l0, m_C_yxz_o0_t0_l0, C_yxz, Cd_xxz, Cd_yxz, Cd_zxz, m_C_yxx_o0_t8_l0, m_C_yxx_o0_t6_l0, m_C_yxx_o0_t5_l0, m_C_yxx_o0_t3_l0, m_C_yxx_o0_t2_l0, m_C_yxx_o0_t0_l0, C_yxx, m_C_xyy_o0_t8_l0, m_C_xyy_o0_t6_l0, m_C_xyy_o0_t5_l0, m_C_xyy_o0_t3_l0, m_C_xyy_o0_t2_l0, m_C_xyy_o0_t0_l0, C_xyy, m_C_zyy_o0_t8_l0, m_C_zyy_o0_t6_l0, m_C_zyy_o0_t5_l0, m_C_zyy_o0_t3_l0, m_C_zyy_o0_t2_l0, m_C_zyy_o0_t0_l0, C_zyy, m_C_yyy_o0_t8_l0, m_C_yyy_o0_t6_l0, m_C_yyy_o0_t5_l0, m_C_yyy_o0_t3_l0, m_C_yyy_o0_t2_l0, m_C_yyy_o0_t0_l0, C_yyy, Cd_xyy, Cd_yyy, Cd_zyy, m_C_xyz_o0_t8_l0, m_C_xyz_o0_t7_l0, m_C_xyz_o0_t6_l0, m_C_xyz_o0_t5_l0, m_C_xyz_o0_t4_l0, m_C_xyz_o0_t3_l0, m_C_xyz_o0_t2_l0, m_C_xyz_o0_t1_l0, m_C_xyz_o0_t0_l0, C_xyz, m_C_zyz_o0_t8_l0, m_C_zyz_o0_t7_l0, m_C_zyz_o0_t6_l0, m_C_zyz_o0_t5_l0, m_C_zyz_o0_t4_l0, m_C_zyz_o0_t3_l0, m_C_zyz_o0_t2_l0, m_C_zyz_o0_t1_l0, m_C_zyz_o0_t0_l0, C_zyz, m_C_yyz_o0_t8_l0, m_C_yyz_o0_t7_l0, m_C_yyz_o0_t6_l0, m_C_yyz_o0_t5_l0, m_C_yyz_o0_t4_l0, m_C_yyz_o0_t3_l0, m_C_yyz_o0_t2_l0, m_C_yyz_o0_t1_l0, m_C_yyz_o0_t0_l0, C_yyz, Cd_xyz, Cd_yyz, m_C_xzz_o0_t8_l0, m_C_xzz_o0_t6_l0, m_C_xzz_o0_t5_l0, m_C_xzz_o0_t3_l0, m_C_xzz_o0_t2_l0, m_C_xzz_o0_t0_l0, C_xzz, m_C_zzz_o0_t8_l0, m_C_zzz_o0_t6_l0, m_C_zzz_o0_t5_l0, m_C_zzz_o0_t3_l0, m_C_zzz_o0_t2_l0, m_C_zzz_o0_t0_l0, C_zzz, m_C_yzz_o0_t8_l0, m_C_yzz_o0_t6_l0, m_C_yzz_o0_t5_l0, m_C_yzz_o0_t3_l0, m_C_yzz_o0_t2_l0, m_C_yzz_o0_t0_l0, C_yzz, Cd_xzz, Cd_yzz, Cd_zzz, Cd_zyz, Am_yy, Am_yx, Am_yz, Au_yz, Ku_yz, m_C_zxx_o0_t8_l0, m_C_zxx_o0_t6_l0, m_C_zxx_o0_t5_l0, m_C_zxx_o0_t3_l0, m_C_zxx_o0_t2_l0, m_C_zxx_o0_t0_l0, C_zxx, Cd_xxx, Cd_yxx, Cd_zxx, m_C_zxy_o0_t8_l0, m_C_zxy_o0_t7_l0, m_C_zxy_o0_t6_l0, m_C_zxy_o0_t5_l0, m_C_zxy_o0_t4_l0, m_C_zxy_o0_t3_l0, m_C_zxy_o0_t2_l0, m_C_zxy_o0_t1_l0, m_C_zxy_o0_t0_l0, C_zxy, Cd_xxy, Cd_yxy, Cd_zxy, m_Rp_xx_o0_t49_l0, m_Rp_xx_o0_t48_l0, m_Rp_xx_o0_t47_l0, m_Rp_xx_o0_t46_l0, m_Rp_xx_o0_t45_l0, m_Rp_xx_o0_t44_l0, m_Rp_xx_o0_t43_l0, m_Rp_xx_o0_t42_l0, m_Rp_xx_o0_t41_l0, m_Rp_xx_o0_t40_l0, m_Rp_xx_o0_t39_l0, m_Rp_xx_o0_t38_l0, m_Rp_xx_o0_t37_l0, m_Rp_xx_o0_t36_l0, m_Rp_xx_o0_t35_l0, m_Rp_xx_o0_t34_l0, m_Rp_xx_o0_t33_l0, m_Rp_xx_o0_t32_l0, m_Rp_xx_o0_t31_l0, m_Rp_xx_o0_t30_l0, m_Rp_xx_o0_t29_l0, m_Rp_xx_o0_t28_l0, m_Rp_xx_o0_t27_l0, m_Rp_xx_o0_t26_l0, m_Rp_xx_o0_t25_l0, m_Rp_xx_o0_t24_l0, m_Rp_xx_o0_t23_l0, m_Rp_xx_o0_t22_l0, m_Rp_xx_o0_t21_l0, m_Rp_xx_o0_t20_l0, m_Rp_xx_o0_t19_l0, m_Rp_xx_o0_t18_l0, m_Rp_xx_o0_t17_l0, m_Rp_xx_o0_t16_l0, m_Rp_xx_o0_t15_l0, m_Rp_xx_o0_t14_l0, m_Rp_xx_o0_t13_l0, m_Rp_xx_o0_t12_l0, m_Rp_xx_o0_t11_l0, m_Rp_xx_o0_t10_l0, m_Rp_xx_o0_t9_l0, m_Rp_xx_o0_t8_l0, m_Rp_xx_o0_t7_l0, m_Rp_xx_o0_t6_l0, m_Rp_xx_o0_t5_l0, m_Rp_xx_o0_t4_l0, m_Rp_xx_o0_t3_l0, m_Rp_xx_o0_t2_l0, m_Rp_xx_o0_t1_l0, m_Rp_xx_o0_t0_l0, Rp_xx, m_Rp_zz_o0_t49_l0, m_Rp_zz_o0_t48_l0, m_Rp_zz_o0_t47_l0, m_Rp_zz_o0_t46_l0, m_Rp_zz_o0_t45_l0, m_Rp_zz_o0_t44_l0, m_Rp_zz_o0_t43_l0, m_Rp_zz_o0_t42_l0, m_Rp_zz_o0_t41_l0, m_Rp_zz_o0_t40_l0, m_Rp_zz_o0_t39_l0, m_Rp_zz_o0_t38_l0, m_Rp_zz_o0_t37_l0, m_Rp_zz_o0_t36_l0, m_Rp_zz_o0_t35_l0, m_Rp_zz_o0_t34_l0, m_Rp_zz_o0_t33_l0, m_Rp_zz_o0_t32_l0, m_Rp_zz_o0_t31_l0, m_Rp_zz_o0_t30_l0, m_Rp_zz_o0_t29_l0, m_Rp_zz_o0_t28_l0, m_Rp_zz_o0_t27_l0, m_Rp_zz_o0_t26_l0, m_Rp_zz_o0_t25_l0, m_Rp_zz_o0_t24_l0, m_Rp_zz_o0_t23_l0, m_Rp_zz_o0_t22_l0, m_Rp_zz_o0_t21_l0, m_Rp_zz_o0_t20_l0, m_Rp_zz_o0_t19_l0, m_Rp_zz_o0_t18_l0, m_Rp_zz_o0_t17_l0, m_Rp_zz_o0_t16_l0, m_Rp_zz_o0_t15_l0, m_Rp_zz_o0_t14_l0, m_Rp_zz_o0_t13_l0, m_Rp_zz_o0_t12_l0, m_Rp_zz_o0_t11_l0, m_Rp_zz_o0_t10_l0, m_Rp_zz_o0_t9_l0, m_Rp_zz_o0_t8_l0, m_Rp_zz_o0_t7_l0, m_Rp_zz_o0_t6_l0, m_Rp_zz_o0_t5_l0, m_Rp_zz_o0_t4_l0, m_Rp_zz_o0_t3_l0, m_Rp_zz_o0_t2_l0, m_Rp_zz_o0_t1_l0, m_Rp_zz_o0_t0_l0, Rp_zz, m_Rp_xy_o0_t49_l0, m_Rp_xy_o0_t48_l0, m_Rp_xy_o0_t47_l0, m_Rp_xy_o0_t46_l0, m_Rp_xy_o0_t45_l0, m_Rp_xy_o0_t44_l0, m_Rp_xy_o0_t43_l0, m_Rp_xy_o0_t42_l0, m_Rp_xy_o0_t41_l0, m_Rp_xy_o0_t40_l0, m_Rp_xy_o0_t39_l0, m_Rp_xy_o0_t38_l0, m_Rp_xy_o0_t37_l0, m_Rp_xy_o0_t36_l0, m_Rp_xy_o0_t35_l0, m_Rp_xy_o0_t34_l0, m_Rp_xy_o0_t33_l0, m_Rp_xy_o0_t32_l0, m_Rp_xy_o0_t31_l0, m_Rp_xy_o0_t30_l0, m_Rp_xy_o0_t29_l0, m_Rp_xy_o0_t28_l0, m_Rp_xy_o0_t27_l0, m_Rp_xy_o0_t26_l0, m_Rp_xy_o0_t25_l0, m_Rp_xy_o0_t24_l0, m_Rp_xy_o0_t23_l0, m_Rp_xy_o0_t22_l0, m_Rp_xy_o0_t21_l0, m_Rp_xy_o0_t20_l0, m_Rp_xy_o0_t19_l0, m_Rp_xy_o0_t18_l0, m_Rp_xy_o0_t17_l0, m_Rp_xy_o0_t16_l0, m_Rp_xy_o0_t15_l0, m_Rp_xy_o0_t14_l0, m_Rp_xy_o0_t13_l0, m_Rp_xy_o0_t12_l0, m_Rp_xy_o0_t11_l0, m_Rp_xy_o0_t10_l0, m_Rp_xy_o0_t9_l0, m_Rp_xy_o0_t8_l0, m_Rp_xy_o0_t7_l0, m_Rp_xy_o0_t6_l0, m_Rp_xy_o0_t5_l0, m_Rp_xy_o0_t4_l0, m_Rp_xy_o0_t3_l0, m_Rp_xy_o0_t2_l0, m_Rp_xy_o0_t1_l0, m_Rp_xy_o0_t0_l0, Rp_xy, m_Rp_xz_o0_t49_l0, m_Rp_xz_o0_t48_l0, m_Rp_xz_o0_t47_l0, m_Rp_xz_o0_t46_l0, m_Rp_xz_o0_t45_l0, m_Rp_xz_o0_t44_l0, m_Rp_xz_o0_t43_l0, m_Rp_xz_o0_t42_l0, m_Rp_xz_o0_t41_l0, m_Rp_xz_o0_t40_l0, m_Rp_xz_o0_t39_l0, m_Rp_xz_o0_t38_l0, m_Rp_xz_o0_t37_l0, m_Rp_xz_o0_t36_l0, m_Rp_xz_o0_t35_l0, m_Rp_xz_o0_t34_l0, m_Rp_xz_o0_t33_l0, m_Rp_xz_o0_t32_l0, m_Rp_xz_o0_t31_l0, m_Rp_xz_o0_t30_l0, m_Rp_xz_o0_t29_l0, m_Rp_xz_o0_t28_l0, m_Rp_xz_o0_t27_l0, m_Rp_xz_o0_t26_l0, m_Rp_xz_o0_t25_l0, m_Rp_xz_o0_t24_l0, m_Rp_xz_o0_t23_l0, m_Rp_xz_o0_t22_l0, m_Rp_xz_o0_t21_l0, m_Rp_xz_o0_t20_l0, m_Rp_xz_o0_t19_l0, m_Rp_xz_o0_t18_l0, m_Rp_xz_o0_t17_l0, m_Rp_xz_o0_t16_l0, m_Rp_xz_o0_t15_l0, m_Rp_xz_o0_t14_l0, m_Rp_xz_o0_t13_l0, m_Rp_xz_o0_t12_l0, m_Rp_xz_o0_t11_l0, m_Rp_xz_o0_t10_l0, m_Rp_xz_o0_t9_l0, m_Rp_xz_o0_t8_l0, m_Rp_xz_o0_t7_l0, m_Rp_xz_o0_t6_l0, m_Rp_xz_o0_t5_l0, m_Rp_xz_o0_t4_l0, m_Rp_xz_o0_t3_l0, m_Rp_xz_o0_t2_l0, m_Rp_xz_o0_t1_l0, m_Rp_xz_o0_t0_l0, Rp_xz, Au_yy, Ku_yy, d_Rc_xx_o0_t15_m0_l0, m_Rc_xx_o0_t11_l0, m_Rc_xx_o0_t10_l0, m_Rc_xx_o0_t9_l0, m_Rc_xx_o0_t8_l0, m_Rc_xx_o0_t7_l0, m_Rc_xx_o0_t6_l0, m_Rc_xx_o0_t5_l0, m_Rc_xx_o0_t4_l0, m_Rc_xx_o0_t3_l0, m_Rc_xx_o0_t2_l0, m_Rc_xx_o0_t1_l0, m_Rc_xx_o0_t0_l0, Rc_xx, R_xx, d_Rc_xy_o0_t15_m0_l0, m_Rc_xy_o0_t14_l0, m_Rc_xy_o0_t13_l0, m_Rc_xy_o0_t12_l0, m_Rc_xy_o0_t11_l0, m_Rc_xy_o0_t10_l0, m_Rc_xy_o0_t9_l0, m_Rc_xy_o0_t8_l0, m_Rc_xy_o0_t7_l0, m_Rc_xy_o0_t6_l0, m_Rc_xy_o0_t5_l0, m_Rc_xy_o0_t4_l0, m_Rc_xy_o0_t3_l0, m_Rc_xy_o0_t2_l0, m_Rc_xy_o0_t1_l0, m_Rc_xy_o0_t0_l0, Rc_xy, d_Rc_yy_o0_t15_m0_l0, m_Rc_yy_o0_t11_l0, m_Rc_yy_o0_t10_l0, m_Rc_yy_o0_t9_l0, m_Rc_yy_o0_t8_l0, m_Rc_yy_o0_t7_l0, m_Rc_yy_o0_t6_l0, m_Rc_yy_o0_t5_l0, m_Rc_yy_o0_t4_l0, m_Rc_yy_o0_t3_l0, m_Rc_yy_o0_t2_l0, m_Rc_yy_o0_t1_l0, m_Rc_yy_o0_t0_l0, Rc_yy, R_xy, gammau_zz, Ku_zz, m_Rp_yy_o0_t49_l0, m_Rp_yy_o0_t48_l0, m_Rp_yy_o0_t47_l0, m_Rp_yy_o0_t46_l0, m_Rp_yy_o0_t45_l0, m_Rp_yy_o0_t44_l0, m_Rp_yy_o0_t43_l0, m_Rp_yy_o0_t42_l0, m_Rp_yy_o0_t41_l0, m_Rp_yy_o0_t40_l0, m_Rp_yy_o0_t39_l0, m_Rp_yy_o0_t38_l0, m_Rp_yy_o0_t37_l0, m_Rp_yy_o0_t36_l0, m_Rp_yy_o0_t35_l0, m_Rp_yy_o0_t34_l0, m_Rp_yy_o0_t33_l0, m_Rp_yy_o0_t32_l0, m_Rp_yy_o0_t31_l0, m_Rp_yy_o0_t30_l0, m_Rp_yy_o0_t29_l0, m_Rp_yy_o0_t28_l0, m_Rp_yy_o0_t27_l0, m_Rp_yy_o0_t26_l0, m_Rp_yy_o0_t25_l0, m_Rp_yy_o0_t24_l0, m_Rp_yy_o0_t23_l0, m_Rp_yy_o0_t22_l0, m_Rp_yy_o0_t21_l0, m_Rp_yy_o0_t20_l0, m_Rp_yy_o0_t19_l0, m_Rp_yy_o0_t18_l0, m_Rp_yy_o0_t17_l0, m_Rp_yy_o0_t16_l0, m_Rp_yy_o0_t15_l0, m_Rp_yy_o0_t14_l0, m_Rp_yy_o0_t13_l0, m_Rp_yy_o0_t12_l0, m_Rp_yy_o0_t11_l0, m_Rp_yy_o0_t10_l0, m_Rp_yy_o0_t9_l0, m_Rp_yy_o0_t8_l0, m_Rp_yy_o0_t7_l0, m_Rp_yy_o0_t6_l0, m_Rp_yy_o0_t5_l0, m_Rp_yy_o0_t4_l0, m_Rp_yy_o0_t3_l0, m_Rp_yy_o0_t2_l0, m_Rp_yy_o0_t1_l0, m_Rp_yy_o0_t0_l0, Rp_yy, m_Rp_yz_o0_t49_l0, m_Rp_yz_o0_t48_l0, m_Rp_yz_o0_t47_l0, m_Rp_yz_o0_t46_l0, m_Rp_yz_o0_t45_l0, m_Rp_yz_o0_t44_l0, m_Rp_yz_o0_t43_l0, m_Rp_yz_o0_t42_l0, m_Rp_yz_o0_t41_l0, m_Rp_yz_o0_t40_l0, m_Rp_yz_o0_t39_l0, m_Rp_yz_o0_t38_l0, m_Rp_yz_o0_t37_l0, m_Rp_yz_o0_t36_l0, m_Rp_yz_o0_t35_l0, m_Rp_yz_o0_t34_l0, m_Rp_yz_o0_t33_l0, m_Rp_yz_o0_t32_l0, m_Rp_yz_o0_t31_l0, m_Rp_yz_o0_t30_l0, m_Rp_yz_o0_t29_l0, m_Rp_yz_o0_t28_l0, m_Rp_yz_o0_t27_l0, m_Rp_yz_o0_t26_l0, m_Rp_yz_o0_t25_l0, m_Rp_yz_o0_t24_l0, m_Rp_yz_o0_t23_l0, m_Rp_yz_o0_t22_l0, m_Rp_yz_o0_t21_l0, m_Rp_yz_o0_t20_l0, m_Rp_yz_o0_t19_l0, m_Rp_yz_o0_t18_l0, m_Rp_yz_o0_t17_l0, m_Rp_yz_o0_t16_l0, m_Rp_yz_o0_t15_l0, m_Rp_yz_o0_t14_l0, m_Rp_yz_o0_t13_l0, m_Rp_yz_o0_t12_l0, m_Rp_yz_o0_t11_l0, m_Rp_yz_o0_t10_l0, m_Rp_yz_o0_t9_l0, m_Rp_yz_o0_t8_l0, m_Rp_yz_o0_t7_l0, m_Rp_yz_o0_t6_l0, m_Rp_yz_o0_t5_l0, m_Rp_yz_o0_t4_l0, m_Rp_yz_o0_t3_l0, m_Rp_yz_o0_t2_l0, m_Rp_yz_o0_t1_l0, m_Rp_yz_o0_t0_l0, Rp_yz, Am_xx, Am_xz, Am_xy, R_yy, Au_xz, Ku_xz, Au_xy, Ku_xy, d_Rc_xz_o0_t15_m0_l0, m_Rc_xz_o0_t14_l0, m_Rc_xz_o0_t13_l0, m_Rc_xz_o0_t12_l0, m_Rc_xz_o0_t11_l0, m_Rc_xz_o0_t10_l0, m_Rc_xz_o0_t9_l0, m_Rc_xz_o0_t8_l0, m_Rc_xz_o0_t7_l0, m_Rc_xz_o0_t6_l0, m_Rc_xz_o0_t5_l0, m_Rc_xz_o0_t4_l0, m_Rc_xz_o0_t3_l0, m_Rc_xz_o0_t2_l0, m_Rc_xz_o0_t1_l0, m_Rc_xz_o0_t0_l0, Rc_xz, d_Rc_yz_o0_t15_m0_l0, m_Rc_yz_o0_t14_l0, m_Rc_yz_o0_t13_l0, m_Rc_yz_o0_t12_l0, m_Rc_yz_o0_t11_l0, m_Rc_yz_o0_t10_l0, m_Rc_yz_o0_t9_l0, m_Rc_yz_o0_t8_l0, m_Rc_yz_o0_t7_l0, m_Rc_yz_o0_t6_l0, m_Rc_yz_o0_t5_l0, m_Rc_yz_o0_t4_l0, m_Rc_yz_o0_t3_l0, m_Rc_yz_o0_t2_l0, m_Rc_yz_o0_t1_l0, m_Rc_yz_o0_t0_l0, Rc_yz, R_yz, d_Rc_zz_o0_t15_m0_l0, m_Rc_zz_o0_t11_l0, m_Rc_zz_o0_t10_l0, m_Rc_zz_o0_t9_l0, m_Rc_zz_o0_t8_l0, m_Rc_zz_o0_t7_l0, m_Rc_zz_o0_t6_l0, m_Rc_zz_o0_t5_l0, m_Rc_zz_o0_t4_l0, m_Rc_zz_o0_t3_l0, m_Rc_zz_o0_t2_l0, m_Rc_zz_o0_t1_l0, m_Rc_zz_o0_t0_l0, Rc_zz, R_zz, R_xz, R, Au_xx, Ku_xx, d_Rscalar_o0_t0_m0_l0, d_HamCon_o0_t0_m0_l0, d_MomCon_x_o0_t9_m0_l0, d_MomCon_y_o0_t9_m0_l0, d_MomCon_z_o0_t9_m0_l0, m_MomCon_z_o0_t21_l0, m_MomCon_z_o0_t20_l0, m_MomCon_z_o0_t19_l0, m_MomCon_z_o0_t18_l0, m_MomCon_z_o0_t17_l0, m_MomCon_z_o0_t16_l0, m_MomCon_z_o0_t15_l0, m_MomCon_z_o0_t14_l0, m_MomCon_z_o0_t13_l0, m_MomCon_z_o0_t12_l0, m_MomCon_z_o0_t11_l0, m_MomCon_z_o0_t10_l0, m_MomCon_z_o0_t8_l0, m_MomCon_z_o0_t7_l0, m_MomCon_z_o0_t6_l0, m_MomCon_z_o0_t5_l0, m_MomCon_z_o0_t4_l0, m_MomCon_z_o0_t3_l0, m_MomCon_z_o0_t2_l0, m_MomCon_z_o0_t1_l0, m_MomCon_z_o0_t0_l0, m_MomCon_y_o0_t21_l0, m_MomCon_y_o0_t20_l0, m_MomCon_y_o0_t19_l0, m_MomCon_y_o0_t18_l0, m_MomCon_y_o0_t17_l0, m_MomCon_y_o0_t16_l0, m_MomCon_y_o0_t15_l0, m_MomCon_y_o0_t14_l0, m_MomCon_y_o0_t13_l0, m_MomCon_y_o0_t12_l0, m_MomCon_y_o0_t11_l0, m_MomCon_y_o0_t10_l0, m_MomCon_y_o0_t8_l0, m_MomCon_y_o0_t7_l0, m_MomCon_y_o0_t6_l0, m_MomCon_y_o0_t5_l0, m_MomCon_y_o0_t4_l0, m_MomCon_y_o0_t3_l0, m_MomCon_y_o0_t2_l0, m_MomCon_y_o0_t1_l0, m_MomCon_y_o0_t0_l0, m_MomCon_x_o0_t21_l0, m_MomCon_x_o0_t20_l0, m_MomCon_x_o0_t19_l0, m_MomCon_x_o0_t18_l0, m_MomCon_x_o0_t17_l0, m_MomCon_x_o0_t16_l0, m_MomCon_x_o0_t15_l0, m_MomCon_x_o0_t14_l0, m_MomCon_x_o0_t13_l0, m_MomCon_x_o0_t12_l0, m_MomCon_x_o0_t11_l0, m_MomCon_x_o0_t10_l0, m_MomCon_x_o0_t8_l0, m_MomCon_x_o0_t7_l0, m_MomCon_x_o0_t6_l0, m_MomCon_x_o0_t5_l0, m_MomCon_x_o0_t4_l0, m_MomCon_x_o0_t3_l0, m_MomCon_x_o0_t2_l0, m_MomCon_x_o0_t1_l0, m_MomCon_x_o0_t0_l0;
		
				//Get the dimensions of the patch
				hier::Box pbox = patch->getBox();
				const hier::Index boxfirst = patch->getBox().lower();
				const hier::Index boxlast = patch->getBox().upper();
		
				//Get delta spaces into an array. dx, dy, dz.
				std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
				const double* dx  = patch_geom->getDx();
		
				//Auxiliary definitions
				int ilast = boxlast(0)-boxfirst(0) + 2 + 2 * d_ghost_width;
				int jlast = boxlast(1)-boxfirst(1) + 2 + 2 * d_ghost_width;
				int klast = boxlast(2)-boxfirst(2) + 2 + 2 * d_ghost_width;
			for(int k = 0; k < klast; k++) {
				for(int j = 0; j < jlast; j++) {
					for(int i = 0; i < ilast; i++) {
							if ((i + 2 < ilast && i - 2 >= 0 && j + 2 < jlast && j - 2 >= 0 && k + 2 < klast && k - 2 >= 0)) {
								d_C_xxx_o0_t0_m0_l0 = D1CDO4_i(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxx_o0_t5_m0_l0 = D1CDO4_j(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxx_o0_t8_m0_l0 = D1CDO4_k(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t0_m0_l0 = D2CDO4_i(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t4_m0_l0 = D2CDO4_j(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t8_m0_l0 = D2CDO4_k(gammac_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxx_o0_t3_m0_l0 = D1CDO4_i(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t4_m0_l0 = D1CDO4_j(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t4_m0_l0 = D1CDO4_k(gammac_yx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxx_o0_t6_m0_l0 = D1CDO4_i(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t7_m0_l0 = D1CDO4_j(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t7_m0_l0 = D1CDO4_k(gammac_zx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t0_m0_l0 = D1CDO4_i(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t5_m0_l0 = D1CDO4_j(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t8_m0_l0 = D1CDO4_k(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t0_m0_l0 = D2CDO4_i(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t4_m0_l0 = D2CDO4_j(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t8_m0_l0 = D2CDO4_k(gammac_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t3_m0_l0 = D1CDO4_i(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyy_o0_t3_m0_l0 = D1CDO4_j(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyy_o0_t8_m0_l0 = D1CDO4_k(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t0_m0_l0 = D2CDO4_i(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t4_m0_l0 = D2CDO4_j(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yy_o0_t8_m0_l0 = D2CDO4_k(gammac_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxy_o0_t6_m0_l0 = D1CDO4_i(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyy_o0_t6_m0_l0 = D1CDO4_j(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyz_o0_t7_m0_l0 = D1CDO4_k(gammac_zy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t0_m0_l0 = D1CDO4_i(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t5_m0_l0 = D1CDO4_j(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t8_m0_l0 = D1CDO4_k(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t0_m0_l0 = D2CDO4_i(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t4_m0_l0 = D2CDO4_j(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t8_m0_l0 = D2CDO4_k(gammac_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t3_m0_l0 = D1CDO4_i(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyz_o0_t3_m0_l0 = D1CDO4_j(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyz_o0_t8_m0_l0 = D1CDO4_k(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t0_m0_l0 = D2CDO4_i(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t4_m0_l0 = D2CDO4_j(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_yz_o0_t8_m0_l0 = D2CDO4_k(gammac_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xxz_o0_t6_m0_l0 = D1CDO4_i(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xyz_o0_t6_m0_l0 = D1CDO4_j(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_C_xzz_o0_t6_m0_l0 = D1CDO4_k(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t0_m0_l0 = D2CDO4_i(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t3_m0_l0 = D1CDO4crossed_ij(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t6_m0_l0 = D1CDO4crossed_ik(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t1_m0_l0 = D1CDO4crossed_ji(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t4_m0_l0 = D2CDO4_j(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t7_m0_l0 = D1CDO4crossed_jk(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t2_m0_l0 = D1CDO4crossed_ki(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t5_m0_l0 = D1CDO4crossed_kj(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_zz_o0_t8_m0_l0 = D2CDO4_k(gammac_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t9_m0_l0 = D1CDO4_i(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t9_m0_l0 = D1CDO4_j(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t9_m0_l0 = D1CDO4_k(Gam_x, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t10_m0_l0 = D1CDO4_i(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t10_m0_l0 = D1CDO4_j(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t10_m0_l0 = D1CDO4_k(Gam_y, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xx_o0_t11_m0_l0 = D1CDO4_i(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xy_o0_t11_m0_l0 = D1CDO4_j(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rc_xz_o0_t11_m0_l0 = D1CDO4_k(Gam_z, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t1_m0_l0 = D1CDO4_i(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t2_m0_l0 = D1CDO4_j(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t3_m0_l0 = D1CDO4_k(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t0_m0_l0 = D2CDO4_i(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t5_m0_l0 = D1CDO4crossed_ij(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t6_m0_l0 = D1CDO4crossed_ik(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t7_m0_l0 = D1CDO4crossed_ji(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t8_m0_l0 = D2CDO4_j(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t9_m0_l0 = D1CDO4crossed_jk(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t10_m0_l0 = D1CDO4crossed_ki(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t11_m0_l0 = D1CDO4crossed_kj(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_Rp_xx_o0_t12_m0_l0 = D2CDO4_k(Phi, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t0_m0_l0 = D1CDO4_i(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t1_m0_l0 = D1CDO4_j(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t2_m0_l0 = D1CDO4_k(A_xx, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t3_m0_l0 = D1CDO4_i(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t4_m0_l0 = D1CDO4_j(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t5_m0_l0 = D1CDO4_k(A_xy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t6_m0_l0 = D1CDO4_i(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t7_m0_l0 = D1CDO4_j(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t8_m0_l0 = D1CDO4_k(A_xz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t13_m0_l0 = D1CDO4_i(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t16_m0_l0 = D1CDO4_j(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_x_o0_t19_m0_l0 = D1CDO4_k(trK, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t3_m0_l0 = D1CDO4_i(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t4_m0_l0 = D1CDO4_j(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t5_m0_l0 = D1CDO4_k(A_yy, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t6_m0_l0 = D1CDO4_i(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t7_m0_l0 = D1CDO4_j(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_y_o0_t8_m0_l0 = D1CDO4_k(A_yz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_z_o0_t6_m0_l0 = D1CDO4_i(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_z_o0_t7_m0_l0 = D1CDO4_j(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								d_MomCon_z_o0_t8_m0_l0 = D1CDO4_k(A_zz, i, j, k, dx, simPlat_dt, ilast, jlast);
								Detgammac = vector(gammac_yy, i, j, k) * vector(gammac_zz, i, j, k) * vector(gammac_xx, i, j, k) + (-vector(gammac_yy, i, j, k) * (vector(gammac_xz, i, j, k) * vector(gammac_xz, i, j, k))) + (-vector(gammac_zz, i, j, k) * (vector(gammac_xy, i, j, k) * vector(gammac_xy, i, j, k))) + (-(vector(gammac_yz, i, j, k) * vector(gammac_yz, i, j, k)) * vector(gammac_xx, i, j, k)) + 2.0 * vector(gammac_yz, i, j, k) * vector(gammac_xy, i, j, k) * vector(gammac_xz, i, j, k);
								gamma_zz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_zz, i, j, k);
								iDetgammac = 1.0 / Detgammac;
								gamma_yy = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_yy, i, j, k);
								gamma_yz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_yz, i, j, k);
								K_yy = vector(A_yy, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_yy * vector(trK, i, j, k);
								K_yz = vector(A_yz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_yz * vector(trK, i, j, k);
								gamma_xx = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xx, i, j, k);
								gamma_xy = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xy, i, j, k);
								gamma_xz = exp(4.0 * vector(Phi, i, j, k)) * vector(gammac_xz, i, j, k);
								Detgamma = gamma_yy * gamma_zz * gamma_xx + (-gamma_yy * (gamma_xz * gamma_xz)) + (-gamma_zz * (gamma_xy * gamma_xy)) + (-(gamma_yz * gamma_yz) * gamma_xx) + 2.0 * gamma_yz * gamma_xy * gamma_xz;
								K_zz = vector(A_zz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_zz * vector(trK, i, j, k);
								iDetgamma = 1.0 / Detgamma;
								gammacu_zz = iDetgammac * (vector(gammac_xx, i, j, k) * vector(gammac_yy, i, j, k) - vector(gammac_xy, i, j, k) * vector(gammac_xy, i, j, k));
								gammau_xx = iDetgamma * (gamma_yy * gamma_zz - gamma_yz * gamma_yz);
								gammau_xy = iDetgamma * ((-gamma_xy * gamma_zz) + gamma_yz * gamma_xz);
								gammau_xz = iDetgamma * (gamma_xy * gamma_yz - gamma_yy * gamma_xz);
								K_xx = vector(A_xx, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xx * vector(trK, i, j, k);
								gammacu_yy = iDetgammac * (vector(gammac_xx, i, j, k) * vector(gammac_zz, i, j, k) - vector(gammac_xz, i, j, k) * vector(gammac_xz, i, j, k));
								K_xy = vector(A_xy, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xy * vector(trK, i, j, k);
								gammacu_yz = iDetgammac * ((-vector(gammac_xx, i, j, k) * vector(gammac_yz, i, j, k)) + vector(gammac_xy, i, j, k) * vector(gammac_xz, i, j, k));
								gammacu_zy = gammacu_yz;
								K_xz = vector(A_xz, i, j, k) * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gamma_xz * vector(trK, i, j, k);
								gammau_yy = iDetgamma * (gamma_xx * gamma_zz - gamma_xz * gamma_xz);
								gammau_yz = iDetgamma * ((-gamma_xx * gamma_yz) + gamma_xy * gamma_xz);
								gammacu_xz = iDetgammac * (vector(gammac_xy, i, j, k) * vector(gammac_yz, i, j, k) - vector(gammac_yy, i, j, k) * vector(gammac_xz, i, j, k));
								gammacu_zx = gammacu_xz;
								Am_zx = gammacu_zx * vector(A_xx, i, j, k) + gammacu_zy * vector(A_xy, i, j, k) + gammacu_zz * vector(A_xz, i, j, k);
								Am_zz = gammacu_zx * vector(A_xz, i, j, k) + gammacu_zy * vector(A_yz, i, j, k) + gammacu_zz * vector(A_zz, i, j, k);
								Am_zy = gammacu_zx * vector(A_xy, i, j, k) + gammacu_zy * vector(A_yy, i, j, k) + gammacu_zz * vector(A_yz, i, j, k);
								Au_zz = gammacu_zx * Am_zx + gammacu_zy * Am_zy + gammacu_zz * Am_zz;
								gammacu_xx = iDetgammac * (vector(gammac_yy, i, j, k) * vector(gammac_zz, i, j, k) - vector(gammac_yz, i, j, k) * vector(gammac_yz, i, j, k));
								gammacu_xy = iDetgammac * ((-vector(gammac_xy, i, j, k) * vector(gammac_zz, i, j, k)) + vector(gammac_yz, i, j, k) * vector(gammac_xz, i, j, k));
								m_C_xxx_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxx_o0_t8_m0_l0;
								m_C_xxx_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxx_o0_t6_m0_l0;
								m_C_xxx_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxx_o0_t5_m0_l0;
								m_C_xxx_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxx_o0_t3_m0_l0;
								m_C_xxx_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxx_o0_t0_m0_l0;
								m_C_xxx_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t0_m0_l0;
								C_xxx = (((((((m_C_xxx_o0_t0_l0 + m_C_xxx_o0_t0_l0) + m_C_xxx_o0_t2_l0) + m_C_xxx_o0_t3_l0) + m_C_xxx_o0_t3_l0) + m_C_xxx_o0_t5_l0) + m_C_xxx_o0_t6_l0) + m_C_xxx_o0_t6_l0) + m_C_xxx_o0_t8_l0;
								m_C_xxz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxz_o0_t8_m0_l0;
								m_C_xxz_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xxz_o0_t7_m0_l0;
								m_C_xxz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxz_o0_t6_m0_l0;
								m_C_xxz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxz_o0_t5_m0_l0;
								m_C_xxz_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xxz_o0_t4_m0_l0;
								m_C_xxz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxz_o0_t3_m0_l0;
								m_C_xxz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t0_m0_l0;
								m_C_xxz_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t8_m0_l0;
								m_C_xxz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t0_m0_l0;
								C_xxz = (((((((m_C_xxz_o0_t0_l0 + m_C_xxz_o0_t1_l0) + m_C_xxz_o0_t2_l0) + m_C_xxz_o0_t3_l0) + m_C_xxz_o0_t4_l0) + m_C_xxz_o0_t5_l0) + m_C_xxz_o0_t6_l0) + m_C_xxz_o0_t7_l0) + m_C_xxz_o0_t8_l0;
								m_C_zxz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxz_o0_t8_m0_l0;
								m_C_zxz_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xxz_o0_t7_m0_l0;
								m_C_zxz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxz_o0_t6_m0_l0;
								m_C_zxz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxz_o0_t5_m0_l0;
								m_C_zxz_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xxz_o0_t4_m0_l0;
								m_C_zxz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxz_o0_t3_m0_l0;
								m_C_zxz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t0_m0_l0;
								m_C_zxz_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t8_m0_l0;
								m_C_zxz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t0_m0_l0;
								C_zxz = (((((((m_C_zxz_o0_t0_l0 + m_C_zxz_o0_t1_l0) + m_C_zxz_o0_t2_l0) + m_C_zxz_o0_t3_l0) + m_C_zxz_o0_t4_l0) + m_C_zxz_o0_t5_l0) + m_C_zxz_o0_t6_l0) + m_C_zxz_o0_t7_l0) + m_C_zxz_o0_t8_l0;
								m_C_xxy_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xxy_o0_t8_m0_l0;
								m_C_xxy_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xxy_o0_t7_m0_l0;
								m_C_xxy_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xxy_o0_t6_m0_l0;
								m_C_xxy_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xxy_o0_t5_m0_l0;
								m_C_xxy_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xxy_o0_t4_m0_l0;
								m_C_xxy_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xxy_o0_t3_m0_l0;
								m_C_xxy_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxy_o0_t0_m0_l0;
								m_C_xxy_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxx_o0_t5_m0_l0;
								m_C_xxy_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t0_m0_l0;
								C_xxy = (((((((m_C_xxy_o0_t0_l0 + m_C_xxy_o0_t1_l0) + m_C_xxy_o0_t2_l0) + m_C_xxy_o0_t3_l0) + m_C_xxy_o0_t4_l0) + m_C_xxy_o0_t5_l0) + m_C_xxy_o0_t6_l0) + m_C_xxy_o0_t7_l0) + m_C_xxy_o0_t8_l0;
								gammacu_yx = gammacu_xy;
								m_C_yxy_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxy_o0_t8_m0_l0;
								m_C_yxy_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xxy_o0_t7_m0_l0;
								m_C_yxy_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxy_o0_t6_m0_l0;
								m_C_yxy_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxy_o0_t5_m0_l0;
								m_C_yxy_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xxy_o0_t4_m0_l0;
								m_C_yxy_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxy_o0_t3_m0_l0;
								m_C_yxy_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxy_o0_t0_m0_l0;
								m_C_yxy_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t5_m0_l0;
								m_C_yxy_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t0_m0_l0;
								C_yxy = (((((((m_C_yxy_o0_t0_l0 + m_C_yxy_o0_t1_l0) + m_C_yxy_o0_t2_l0) + m_C_yxy_o0_t3_l0) + m_C_yxy_o0_t4_l0) + m_C_yxy_o0_t5_l0) + m_C_yxy_o0_t6_l0) + m_C_yxy_o0_t7_l0) + m_C_yxy_o0_t8_l0;
								m_C_yxz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxz_o0_t8_m0_l0;
								m_C_yxz_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xxz_o0_t7_m0_l0;
								m_C_yxz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxz_o0_t6_m0_l0;
								m_C_yxz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxz_o0_t5_m0_l0;
								m_C_yxz_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xxz_o0_t4_m0_l0;
								m_C_yxz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxz_o0_t3_m0_l0;
								m_C_yxz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t0_m0_l0;
								m_C_yxz_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t8_m0_l0;
								m_C_yxz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t0_m0_l0;
								C_yxz = (((((((m_C_yxz_o0_t0_l0 + m_C_yxz_o0_t1_l0) + m_C_yxz_o0_t2_l0) + m_C_yxz_o0_t3_l0) + m_C_yxz_o0_t4_l0) + m_C_yxz_o0_t5_l0) + m_C_yxz_o0_t6_l0) + m_C_yxz_o0_t7_l0) + m_C_yxz_o0_t8_l0;
								Cd_xxz = vector(gammac_xx, i, j, k) * C_xxz + vector(gammac_xy, i, j, k) * C_yxz + vector(gammac_xz, i, j, k) * C_zxz;
								Cd_yxz = vector(gammac_yx, i, j, k) * C_xxz + vector(gammac_yy, i, j, k) * C_yxz + vector(gammac_yz, i, j, k) * C_zxz;
								Cd_zxz = vector(gammac_zx, i, j, k) * C_xxz + vector(gammac_zy, i, j, k) * C_yxz + vector(gammac_zz, i, j, k) * C_zxz;
								m_C_yxx_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xxx_o0_t8_m0_l0;
								m_C_yxx_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xxx_o0_t6_m0_l0;
								m_C_yxx_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xxx_o0_t5_m0_l0;
								m_C_yxx_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xxx_o0_t3_m0_l0;
								m_C_yxx_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxx_o0_t0_m0_l0;
								m_C_yxx_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxx_o0_t0_m0_l0;
								C_yxx = (((((((m_C_yxx_o0_t0_l0 + m_C_yxx_o0_t0_l0) + m_C_yxx_o0_t2_l0) + m_C_yxx_o0_t3_l0) + m_C_yxx_o0_t3_l0) + m_C_yxx_o0_t5_l0) + m_C_yxx_o0_t6_l0) + m_C_yxx_o0_t6_l0) + m_C_yxx_o0_t8_l0;
								m_C_xyy_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xyy_o0_t8_m0_l0;
								m_C_xyy_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xyy_o0_t6_m0_l0;
								m_C_xyy_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyy_o0_t3_m0_l0;
								m_C_xyy_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyy_o0_t3_m0_l0;
								m_C_xyy_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxy_o0_t3_m0_l0;
								m_C_xyy_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t5_m0_l0;
								C_xyy = (((((((m_C_xyy_o0_t0_l0 + m_C_xyy_o0_t0_l0) + m_C_xyy_o0_t2_l0) + m_C_xyy_o0_t3_l0) + m_C_xyy_o0_t3_l0) + m_C_xyy_o0_t5_l0) + m_C_xyy_o0_t6_l0) + m_C_xyy_o0_t6_l0) + m_C_xyy_o0_t8_l0;
								m_C_zyy_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xyy_o0_t8_m0_l0;
								m_C_zyy_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xyy_o0_t6_m0_l0;
								m_C_zyy_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyy_o0_t3_m0_l0;
								m_C_zyy_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyy_o0_t3_m0_l0;
								m_C_zyy_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxy_o0_t3_m0_l0;
								m_C_zyy_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t5_m0_l0;
								C_zyy = (((((((m_C_zyy_o0_t0_l0 + m_C_zyy_o0_t0_l0) + m_C_zyy_o0_t2_l0) + m_C_zyy_o0_t3_l0) + m_C_zyy_o0_t3_l0) + m_C_zyy_o0_t5_l0) + m_C_zyy_o0_t6_l0) + m_C_zyy_o0_t6_l0) + m_C_zyy_o0_t8_l0;
								m_C_yyy_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xyy_o0_t8_m0_l0;
								m_C_yyy_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xyy_o0_t6_m0_l0;
								m_C_yyy_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyy_o0_t3_m0_l0;
								m_C_yyy_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyy_o0_t3_m0_l0;
								m_C_yyy_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxy_o0_t3_m0_l0;
								m_C_yyy_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t5_m0_l0;
								C_yyy = (((((((m_C_yyy_o0_t0_l0 + m_C_yyy_o0_t0_l0) + m_C_yyy_o0_t2_l0) + m_C_yyy_o0_t3_l0) + m_C_yyy_o0_t3_l0) + m_C_yyy_o0_t5_l0) + m_C_yyy_o0_t6_l0) + m_C_yyy_o0_t6_l0) + m_C_yyy_o0_t8_l0;
								Cd_xyy = vector(gammac_xx, i, j, k) * C_xyy + vector(gammac_xy, i, j, k) * C_yyy + vector(gammac_xz, i, j, k) * C_zyy;
								Cd_yyy = vector(gammac_yx, i, j, k) * C_xyy + vector(gammac_yy, i, j, k) * C_yyy + vector(gammac_yz, i, j, k) * C_zyy;
								Cd_zyy = vector(gammac_zx, i, j, k) * C_xyy + vector(gammac_zy, i, j, k) * C_yyy + vector(gammac_zz, i, j, k) * C_zyy;
								m_C_xyz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xyz_o0_t8_m0_l0;
								m_C_xyz_o0_t7_l0 = 0.5000000000000 * gammacu_xz * d_C_xyz_o0_t7_m0_l0;
								m_C_xyz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xyz_o0_t6_m0_l0;
								m_C_xyz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyz_o0_t3_m0_l0;
								m_C_xyz_o0_t4_l0 = 0.5000000000000 * gammacu_xy * d_C_xyy_o0_t8_m0_l0;
								m_C_xyz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyz_o0_t3_m0_l0;
								m_C_xyz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t3_m0_l0;
								m_C_xyz_o0_t1_l0 = 0.5000000000000 * gammacu_xx * d_C_xxy_o0_t8_m0_l0;
								m_C_xyz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t5_m0_l0;
								C_xyz = (((((((m_C_xyz_o0_t0_l0 + m_C_xyz_o0_t1_l0) + m_C_xyz_o0_t2_l0) + m_C_xyz_o0_t3_l0) + m_C_xyz_o0_t4_l0) + m_C_xyz_o0_t5_l0) + m_C_xyz_o0_t6_l0) + m_C_xyz_o0_t7_l0) + m_C_xyz_o0_t8_l0;
								m_C_zyz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xyz_o0_t8_m0_l0;
								m_C_zyz_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xyz_o0_t7_m0_l0;
								m_C_zyz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xyz_o0_t6_m0_l0;
								m_C_zyz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyz_o0_t3_m0_l0;
								m_C_zyz_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xyy_o0_t8_m0_l0;
								m_C_zyz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyz_o0_t3_m0_l0;
								m_C_zyz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t3_m0_l0;
								m_C_zyz_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t8_m0_l0;
								m_C_zyz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t5_m0_l0;
								C_zyz = (((((((m_C_zyz_o0_t0_l0 + m_C_zyz_o0_t1_l0) + m_C_zyz_o0_t2_l0) + m_C_zyz_o0_t3_l0) + m_C_zyz_o0_t4_l0) + m_C_zyz_o0_t5_l0) + m_C_zyz_o0_t6_l0) + m_C_zyz_o0_t7_l0) + m_C_zyz_o0_t8_l0;
								m_C_yyz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xyz_o0_t8_m0_l0;
								m_C_yyz_o0_t7_l0 = 0.5000000000000 * gammacu_yz * d_C_xyz_o0_t7_m0_l0;
								m_C_yyz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xyz_o0_t6_m0_l0;
								m_C_yyz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyz_o0_t3_m0_l0;
								m_C_yyz_o0_t4_l0 = 0.5000000000000 * gammacu_yy * d_C_xyy_o0_t8_m0_l0;
								m_C_yyz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyz_o0_t3_m0_l0;
								m_C_yyz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t3_m0_l0;
								m_C_yyz_o0_t1_l0 = 0.5000000000000 * gammacu_yx * d_C_xxy_o0_t8_m0_l0;
								m_C_yyz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t5_m0_l0;
								C_yyz = (((((((m_C_yyz_o0_t0_l0 + m_C_yyz_o0_t1_l0) + m_C_yyz_o0_t2_l0) + m_C_yyz_o0_t3_l0) + m_C_yyz_o0_t4_l0) + m_C_yyz_o0_t5_l0) + m_C_yyz_o0_t6_l0) + m_C_yyz_o0_t7_l0) + m_C_yyz_o0_t8_l0;
								Cd_xyz = vector(gammac_xx, i, j, k) * C_xyz + vector(gammac_xy, i, j, k) * C_yyz + vector(gammac_xz, i, j, k) * C_zyz;
								Cd_yyz = vector(gammac_yx, i, j, k) * C_xyz + vector(gammac_yy, i, j, k) * C_yyz + vector(gammac_yz, i, j, k) * C_zyz;
								m_C_xzz_o0_t8_l0 = (-0.5000000000000) * gammacu_xz * d_C_xzz_o0_t6_m0_l0;
								m_C_xzz_o0_t6_l0 = 0.5000000000000 * gammacu_xz * d_C_xzz_o0_t6_m0_l0;
								m_C_xzz_o0_t5_l0 = (-0.5000000000000) * gammacu_xy * d_C_xyz_o0_t6_m0_l0;
								m_C_xzz_o0_t3_l0 = 0.5000000000000 * gammacu_xy * d_C_xyz_o0_t8_m0_l0;
								m_C_xzz_o0_t2_l0 = (-0.5000000000000) * gammacu_xx * d_C_xxz_o0_t6_m0_l0;
								m_C_xzz_o0_t0_l0 = 0.5000000000000 * gammacu_xx * d_C_xxz_o0_t8_m0_l0;
								C_xzz = (((((((m_C_xzz_o0_t0_l0 + m_C_xzz_o0_t0_l0) + m_C_xzz_o0_t2_l0) + m_C_xzz_o0_t3_l0) + m_C_xzz_o0_t3_l0) + m_C_xzz_o0_t5_l0) + m_C_xzz_o0_t6_l0) + m_C_xzz_o0_t6_l0) + m_C_xzz_o0_t8_l0;
								m_C_zzz_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xzz_o0_t6_m0_l0;
								m_C_zzz_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xzz_o0_t6_m0_l0;
								m_C_zzz_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xyz_o0_t6_m0_l0;
								m_C_zzz_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xyz_o0_t8_m0_l0;
								m_C_zzz_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxz_o0_t6_m0_l0;
								m_C_zzz_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxz_o0_t8_m0_l0;
								C_zzz = (((((((m_C_zzz_o0_t0_l0 + m_C_zzz_o0_t0_l0) + m_C_zzz_o0_t2_l0) + m_C_zzz_o0_t3_l0) + m_C_zzz_o0_t3_l0) + m_C_zzz_o0_t5_l0) + m_C_zzz_o0_t6_l0) + m_C_zzz_o0_t6_l0) + m_C_zzz_o0_t8_l0;
								m_C_yzz_o0_t8_l0 = (-0.5000000000000) * gammacu_yz * d_C_xzz_o0_t6_m0_l0;
								m_C_yzz_o0_t6_l0 = 0.5000000000000 * gammacu_yz * d_C_xzz_o0_t6_m0_l0;
								m_C_yzz_o0_t5_l0 = (-0.5000000000000) * gammacu_yy * d_C_xyz_o0_t6_m0_l0;
								m_C_yzz_o0_t3_l0 = 0.5000000000000 * gammacu_yy * d_C_xyz_o0_t8_m0_l0;
								m_C_yzz_o0_t2_l0 = (-0.5000000000000) * gammacu_yx * d_C_xxz_o0_t6_m0_l0;
								m_C_yzz_o0_t0_l0 = 0.5000000000000 * gammacu_yx * d_C_xxz_o0_t8_m0_l0;
								C_yzz = (((((((m_C_yzz_o0_t0_l0 + m_C_yzz_o0_t0_l0) + m_C_yzz_o0_t2_l0) + m_C_yzz_o0_t3_l0) + m_C_yzz_o0_t3_l0) + m_C_yzz_o0_t5_l0) + m_C_yzz_o0_t6_l0) + m_C_yzz_o0_t6_l0) + m_C_yzz_o0_t8_l0;
								Cd_xzz = vector(gammac_xx, i, j, k) * C_xzz + vector(gammac_xy, i, j, k) * C_yzz + vector(gammac_xz, i, j, k) * C_zzz;
								Cd_yzz = vector(gammac_yx, i, j, k) * C_xzz + vector(gammac_yy, i, j, k) * C_yzz + vector(gammac_yz, i, j, k) * C_zzz;
								Cd_zzz = vector(gammac_zx, i, j, k) * C_xzz + vector(gammac_zy, i, j, k) * C_yzz + vector(gammac_zz, i, j, k) * C_zzz;
								Cd_zyz = vector(gammac_zx, i, j, k) * C_xyz + vector(gammac_zy, i, j, k) * C_yyz + vector(gammac_zz, i, j, k) * C_zyz;
								Am_yy = gammacu_yx * vector(A_xy, i, j, k) + gammacu_yy * vector(A_yy, i, j, k) + gammacu_yz * vector(A_yz, i, j, k);
								Am_yx = gammacu_yx * vector(A_xx, i, j, k) + gammacu_yy * vector(A_xy, i, j, k) + gammacu_yz * vector(A_xz, i, j, k);
								Am_yz = gammacu_yx * vector(A_xz, i, j, k) + gammacu_yy * vector(A_yz, i, j, k) + gammacu_yz * vector(A_zz, i, j, k);
								Au_yz = gammacu_yx * Am_zx + gammacu_yy * Am_zy + gammacu_yz * Am_zz;
								Ku_yz = Au_yz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_yz * vector(trK, i, j, k);
								m_C_zxx_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxx_o0_t8_m0_l0;
								m_C_zxx_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxx_o0_t6_m0_l0;
								m_C_zxx_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxx_o0_t5_m0_l0;
								m_C_zxx_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxx_o0_t3_m0_l0;
								m_C_zxx_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxx_o0_t0_m0_l0;
								m_C_zxx_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t0_m0_l0;
								C_zxx = (((((((m_C_zxx_o0_t0_l0 + m_C_zxx_o0_t0_l0) + m_C_zxx_o0_t2_l0) + m_C_zxx_o0_t3_l0) + m_C_zxx_o0_t3_l0) + m_C_zxx_o0_t5_l0) + m_C_zxx_o0_t6_l0) + m_C_zxx_o0_t6_l0) + m_C_zxx_o0_t8_l0;
								Cd_xxx = vector(gammac_xx, i, j, k) * C_xxx + vector(gammac_xy, i, j, k) * C_yxx + vector(gammac_xz, i, j, k) * C_zxx;
								Cd_yxx = vector(gammac_yx, i, j, k) * C_xxx + vector(gammac_yy, i, j, k) * C_yxx + vector(gammac_yz, i, j, k) * C_zxx;
								Cd_zxx = vector(gammac_zx, i, j, k) * C_xxx + vector(gammac_zy, i, j, k) * C_yxx + vector(gammac_zz, i, j, k) * C_zxx;
								m_C_zxy_o0_t8_l0 = (-0.5000000000000) * gammacu_zz * d_C_xxy_o0_t8_m0_l0;
								m_C_zxy_o0_t7_l0 = 0.5000000000000 * gammacu_zz * d_C_xxy_o0_t7_m0_l0;
								m_C_zxy_o0_t6_l0 = 0.5000000000000 * gammacu_zz * d_C_xxy_o0_t6_m0_l0;
								m_C_zxy_o0_t5_l0 = (-0.5000000000000) * gammacu_zy * d_C_xxy_o0_t5_m0_l0;
								m_C_zxy_o0_t4_l0 = 0.5000000000000 * gammacu_zy * d_C_xxy_o0_t4_m0_l0;
								m_C_zxy_o0_t3_l0 = 0.5000000000000 * gammacu_zy * d_C_xxy_o0_t3_m0_l0;
								m_C_zxy_o0_t2_l0 = (-0.5000000000000) * gammacu_zx * d_C_xxy_o0_t0_m0_l0;
								m_C_zxy_o0_t1_l0 = 0.5000000000000 * gammacu_zx * d_C_xxx_o0_t5_m0_l0;
								m_C_zxy_o0_t0_l0 = 0.5000000000000 * gammacu_zx * d_C_xxy_o0_t0_m0_l0;
								C_zxy = (((((((m_C_zxy_o0_t0_l0 + m_C_zxy_o0_t1_l0) + m_C_zxy_o0_t2_l0) + m_C_zxy_o0_t3_l0) + m_C_zxy_o0_t4_l0) + m_C_zxy_o0_t5_l0) + m_C_zxy_o0_t6_l0) + m_C_zxy_o0_t7_l0) + m_C_zxy_o0_t8_l0;
								Cd_xxy = vector(gammac_xx, i, j, k) * C_xxy + vector(gammac_xy, i, j, k) * C_yxy + vector(gammac_xz, i, j, k) * C_zxy;
								Cd_yxy = vector(gammac_yx, i, j, k) * C_xxy + vector(gammac_yy, i, j, k) * C_yxy + vector(gammac_yz, i, j, k) * C_zxy;
								Cd_zxy = vector(gammac_zx, i, j, k) * C_xxy + vector(gammac_zy, i, j, k) * C_yxy + vector(gammac_zz, i, j, k) * C_zxy;
								m_Rp_xx_o0_t49_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t48_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t47_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t46_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t45_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t44_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t43_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t42_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t41_l0 = (-4.0) * vector(gammac_xx, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t39_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t38_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t37_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t36_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t35_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t34_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t33_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t32_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t31_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t30_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t29_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t28_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t27_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t26_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t25_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t24_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t23_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t22_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t21_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t20_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t19_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t18_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t17_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t16_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t15_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t14_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t13_l0 = 2.0 * vector(gammac_xx, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t12_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_xx_o0_t11_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_xx_o0_t10_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_xx_o0_t9_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_xx_o0_t8_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_xx_o0_t7_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_xx_o0_t6_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_xx_o0_t5_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_xx_o0_t4_l0 = (-2.0) * vector(gammac_xx, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_xx_o0_t3_l0 = 2.0 * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xx_o0_t2_l0 = 2.0 * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xx_o0_t1_l0 = 2.0 * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xx_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t0_m0_l0;
								Rp_xx = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xx_o0_t0_l0 + m_Rp_xx_o0_t1_l0) + m_Rp_xx_o0_t2_l0) + m_Rp_xx_o0_t3_l0) + m_Rp_xx_o0_t4_l0) + m_Rp_xx_o0_t5_l0) + m_Rp_xx_o0_t6_l0) + m_Rp_xx_o0_t7_l0) + m_Rp_xx_o0_t8_l0) + m_Rp_xx_o0_t9_l0) + m_Rp_xx_o0_t10_l0) + m_Rp_xx_o0_t11_l0) + m_Rp_xx_o0_t12_l0) + m_Rp_xx_o0_t13_l0) + m_Rp_xx_o0_t14_l0) + m_Rp_xx_o0_t15_l0) + m_Rp_xx_o0_t16_l0) + m_Rp_xx_o0_t17_l0) + m_Rp_xx_o0_t18_l0) + m_Rp_xx_o0_t19_l0) + m_Rp_xx_o0_t20_l0) + m_Rp_xx_o0_t21_l0) + m_Rp_xx_o0_t22_l0) + m_Rp_xx_o0_t23_l0) + m_Rp_xx_o0_t24_l0) + m_Rp_xx_o0_t25_l0) + m_Rp_xx_o0_t26_l0) + m_Rp_xx_o0_t27_l0) + m_Rp_xx_o0_t28_l0) + m_Rp_xx_o0_t29_l0) + m_Rp_xx_o0_t30_l0) + m_Rp_xx_o0_t31_l0) + m_Rp_xx_o0_t32_l0) + m_Rp_xx_o0_t33_l0) + m_Rp_xx_o0_t34_l0) + m_Rp_xx_o0_t35_l0) + m_Rp_xx_o0_t36_l0) + m_Rp_xx_o0_t37_l0) + m_Rp_xx_o0_t38_l0) + m_Rp_xx_o0_t39_l0) + m_Rp_xx_o0_t40_l0) + m_Rp_xx_o0_t41_l0) + m_Rp_xx_o0_t42_l0) + m_Rp_xx_o0_t43_l0) + m_Rp_xx_o0_t44_l0) + m_Rp_xx_o0_t45_l0) + m_Rp_xx_o0_t46_l0) + m_Rp_xx_o0_t47_l0) + m_Rp_xx_o0_t48_l0) + m_Rp_xx_o0_t49_l0;
								m_Rp_zz_o0_t49_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t48_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t47_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t46_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t45_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t44_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t43_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t42_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t41_l0 = (-4.0) * vector(gammac_zz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t39_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t38_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t37_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t36_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t35_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t34_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t33_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t32_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t31_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t30_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t29_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t28_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t27_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t26_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t25_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t24_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t23_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t22_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t21_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t20_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t19_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t18_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t17_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t16_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t15_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t14_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t13_l0 = 2.0 * vector(gammac_zz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t12_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_zz_o0_t11_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_zz_o0_t10_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_zz_o0_t9_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_zz_o0_t8_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_zz_o0_t7_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_zz_o0_t6_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_zz_o0_t5_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_zz_o0_t4_l0 = (-2.0) * vector(gammac_zz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_zz_o0_t3_l0 = 2.0 * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_zz_o0_t2_l0 = 2.0 * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_zz_o0_t1_l0 = 2.0 * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_zz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t12_m0_l0;
								Rp_zz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_zz_o0_t0_l0 + m_Rp_zz_o0_t1_l0) + m_Rp_zz_o0_t2_l0) + m_Rp_zz_o0_t3_l0) + m_Rp_zz_o0_t4_l0) + m_Rp_zz_o0_t5_l0) + m_Rp_zz_o0_t6_l0) + m_Rp_zz_o0_t7_l0) + m_Rp_zz_o0_t8_l0) + m_Rp_zz_o0_t9_l0) + m_Rp_zz_o0_t10_l0) + m_Rp_zz_o0_t11_l0) + m_Rp_zz_o0_t12_l0) + m_Rp_zz_o0_t13_l0) + m_Rp_zz_o0_t14_l0) + m_Rp_zz_o0_t15_l0) + m_Rp_zz_o0_t16_l0) + m_Rp_zz_o0_t17_l0) + m_Rp_zz_o0_t18_l0) + m_Rp_zz_o0_t19_l0) + m_Rp_zz_o0_t20_l0) + m_Rp_zz_o0_t21_l0) + m_Rp_zz_o0_t22_l0) + m_Rp_zz_o0_t23_l0) + m_Rp_zz_o0_t24_l0) + m_Rp_zz_o0_t25_l0) + m_Rp_zz_o0_t26_l0) + m_Rp_zz_o0_t27_l0) + m_Rp_zz_o0_t28_l0) + m_Rp_zz_o0_t29_l0) + m_Rp_zz_o0_t30_l0) + m_Rp_zz_o0_t31_l0) + m_Rp_zz_o0_t32_l0) + m_Rp_zz_o0_t33_l0) + m_Rp_zz_o0_t34_l0) + m_Rp_zz_o0_t35_l0) + m_Rp_zz_o0_t36_l0) + m_Rp_zz_o0_t37_l0) + m_Rp_zz_o0_t38_l0) + m_Rp_zz_o0_t39_l0) + m_Rp_zz_o0_t40_l0) + m_Rp_zz_o0_t41_l0) + m_Rp_zz_o0_t42_l0) + m_Rp_zz_o0_t43_l0) + m_Rp_zz_o0_t44_l0) + m_Rp_zz_o0_t45_l0) + m_Rp_zz_o0_t46_l0) + m_Rp_zz_o0_t47_l0) + m_Rp_zz_o0_t48_l0) + m_Rp_zz_o0_t49_l0;
								m_Rp_xy_o0_t49_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t48_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t47_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t46_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t45_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t44_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t43_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t42_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t41_l0 = (-4.0) * vector(gammac_xy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t39_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t38_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t37_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t36_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t35_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t34_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t33_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t32_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t31_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t30_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t29_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t28_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t27_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t26_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t25_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t24_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t23_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t22_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t21_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t20_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t19_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t18_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t17_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t16_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t15_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t14_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t13_l0 = 2.0 * vector(gammac_xy, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t12_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_xy_o0_t11_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_xy_o0_t10_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_xy_o0_t9_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_xy_o0_t8_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_xy_o0_t7_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_xy_o0_t6_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_xy_o0_t5_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_xy_o0_t4_l0 = (-2.0) * vector(gammac_xy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_xy_o0_t3_l0 = 2.0 * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xy_o0_t2_l0 = 2.0 * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xy_o0_t1_l0 = 2.0 * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t7_m0_l0;
								Rp_xy = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xy_o0_t0_l0 + m_Rp_xy_o0_t1_l0) + m_Rp_xy_o0_t2_l0) + m_Rp_xy_o0_t3_l0) + m_Rp_xy_o0_t4_l0) + m_Rp_xy_o0_t5_l0) + m_Rp_xy_o0_t6_l0) + m_Rp_xy_o0_t7_l0) + m_Rp_xy_o0_t8_l0) + m_Rp_xy_o0_t9_l0) + m_Rp_xy_o0_t10_l0) + m_Rp_xy_o0_t11_l0) + m_Rp_xy_o0_t12_l0) + m_Rp_xy_o0_t13_l0) + m_Rp_xy_o0_t14_l0) + m_Rp_xy_o0_t15_l0) + m_Rp_xy_o0_t16_l0) + m_Rp_xy_o0_t17_l0) + m_Rp_xy_o0_t18_l0) + m_Rp_xy_o0_t19_l0) + m_Rp_xy_o0_t20_l0) + m_Rp_xy_o0_t21_l0) + m_Rp_xy_o0_t22_l0) + m_Rp_xy_o0_t23_l0) + m_Rp_xy_o0_t24_l0) + m_Rp_xy_o0_t25_l0) + m_Rp_xy_o0_t26_l0) + m_Rp_xy_o0_t27_l0) + m_Rp_xy_o0_t28_l0) + m_Rp_xy_o0_t29_l0) + m_Rp_xy_o0_t30_l0) + m_Rp_xy_o0_t31_l0) + m_Rp_xy_o0_t32_l0) + m_Rp_xy_o0_t33_l0) + m_Rp_xy_o0_t34_l0) + m_Rp_xy_o0_t35_l0) + m_Rp_xy_o0_t36_l0) + m_Rp_xy_o0_t37_l0) + m_Rp_xy_o0_t38_l0) + m_Rp_xy_o0_t39_l0) + m_Rp_xy_o0_t40_l0) + m_Rp_xy_o0_t41_l0) + m_Rp_xy_o0_t42_l0) + m_Rp_xy_o0_t43_l0) + m_Rp_xy_o0_t44_l0) + m_Rp_xy_o0_t45_l0) + m_Rp_xy_o0_t46_l0) + m_Rp_xy_o0_t47_l0) + m_Rp_xy_o0_t48_l0) + m_Rp_xy_o0_t49_l0;
								m_Rp_xz_o0_t49_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t48_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t47_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t46_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t45_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t44_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t43_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t42_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t41_l0 = (-4.0) * vector(gammac_xz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t39_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t38_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t37_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t36_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t35_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t34_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t33_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t32_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t31_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t30_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t29_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t28_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t27_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t26_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t25_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t24_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t23_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t22_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t21_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t20_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t19_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t18_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t17_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t16_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t15_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t14_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t13_l0 = 2.0 * vector(gammac_xz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t12_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_xz_o0_t11_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_xz_o0_t10_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_xz_o0_t9_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_xz_o0_t8_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_xz_o0_t7_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_xz_o0_t6_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_xz_o0_t5_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_xz_o0_t4_l0 = (-2.0) * vector(gammac_xz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_xz_o0_t3_l0 = 2.0 * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_xz_o0_t2_l0 = 2.0 * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_xz_o0_t1_l0 = 2.0 * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_xz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t10_m0_l0;
								Rp_xz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_xz_o0_t0_l0 + m_Rp_xz_o0_t1_l0) + m_Rp_xz_o0_t2_l0) + m_Rp_xz_o0_t3_l0) + m_Rp_xz_o0_t4_l0) + m_Rp_xz_o0_t5_l0) + m_Rp_xz_o0_t6_l0) + m_Rp_xz_o0_t7_l0) + m_Rp_xz_o0_t8_l0) + m_Rp_xz_o0_t9_l0) + m_Rp_xz_o0_t10_l0) + m_Rp_xz_o0_t11_l0) + m_Rp_xz_o0_t12_l0) + m_Rp_xz_o0_t13_l0) + m_Rp_xz_o0_t14_l0) + m_Rp_xz_o0_t15_l0) + m_Rp_xz_o0_t16_l0) + m_Rp_xz_o0_t17_l0) + m_Rp_xz_o0_t18_l0) + m_Rp_xz_o0_t19_l0) + m_Rp_xz_o0_t20_l0) + m_Rp_xz_o0_t21_l0) + m_Rp_xz_o0_t22_l0) + m_Rp_xz_o0_t23_l0) + m_Rp_xz_o0_t24_l0) + m_Rp_xz_o0_t25_l0) + m_Rp_xz_o0_t26_l0) + m_Rp_xz_o0_t27_l0) + m_Rp_xz_o0_t28_l0) + m_Rp_xz_o0_t29_l0) + m_Rp_xz_o0_t30_l0) + m_Rp_xz_o0_t31_l0) + m_Rp_xz_o0_t32_l0) + m_Rp_xz_o0_t33_l0) + m_Rp_xz_o0_t34_l0) + m_Rp_xz_o0_t35_l0) + m_Rp_xz_o0_t36_l0) + m_Rp_xz_o0_t37_l0) + m_Rp_xz_o0_t38_l0) + m_Rp_xz_o0_t39_l0) + m_Rp_xz_o0_t40_l0) + m_Rp_xz_o0_t41_l0) + m_Rp_xz_o0_t42_l0) + m_Rp_xz_o0_t43_l0) + m_Rp_xz_o0_t44_l0) + m_Rp_xz_o0_t45_l0) + m_Rp_xz_o0_t46_l0) + m_Rp_xz_o0_t47_l0) + m_Rp_xz_o0_t48_l0) + m_Rp_xz_o0_t49_l0;
								Au_yy = gammacu_yx * Am_yx + gammacu_yy * Am_yy + gammacu_yz * Am_yz;
								Ku_yy = Au_yy * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_yy * vector(trK, i, j, k);
								d_Rc_xx_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xxz + C_yxx * Cd_yxz + C_zxx * Cd_zxz) + gammacu_zy * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz)) + (gammacu_yx * (C_xxx * Cd_xxy + C_yxx * Cd_yxy + C_zxx * Cd_zxy) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_yz * (C_xxz * Cd_xxy + C_yxz * Cd_yxy + C_zxz * Cd_zxy)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_yxx + C_zxx * Cd_zxx) + gammacu_xy * (C_xxy * Cd_xxx + C_yxy * Cd_yxx + C_zxy * Cd_zxx) + gammacu_xz * (C_xxz * Cd_xxx + C_yxz * Cd_yxx + C_zxz * Cd_zxx)) + (gammacu_zx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_zy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_yx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_yz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_xxy + C_zxx * Cd_xxz) + gammacu_xy * (C_xxx * Cd_xxy + C_yxx * Cd_xyy + C_zxx * Cd_xyz) + gammacu_xz * (C_xxx * Cd_xxz + C_yxx * Cd_xyz + C_zxx * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_zy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_zz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_yx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_yy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_yz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_xx * (C_xxx * Cd_xxx + C_yxx * Cd_xxy + C_zxx * Cd_xxz) + gammacu_xy * (C_xxx * Cd_xxy + C_yxx * Cd_xyy + C_zxx * Cd_xyz) + gammacu_xz * (C_xxx * Cd_xxz + C_yxx * Cd_xyz + C_zxx * Cd_xzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxx + 0.5 * vector(Gam_y, i, j, k) * Cd_xxy + 0.5 * vector(Gam_z, i, j, k) * Cd_xxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxx + 0.5 * vector(Gam_y, i, j, k) * Cd_xxy + 0.5 * vector(Gam_z, i, j, k) * Cd_xxz);
								m_Rc_xx_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
								m_Rc_xx_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
								m_Rc_xx_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
								m_Rc_xx_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xx_o0_t8_m0_l0;
								m_Rc_xx_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xx_o0_t7_m0_l0;
								m_Rc_xx_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xx_o0_t6_m0_l0;
								m_Rc_xx_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xx_o0_t5_m0_l0;
								m_Rc_xx_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xx_o0_t4_m0_l0;
								m_Rc_xx_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xx_o0_t3_m0_l0;
								m_Rc_xx_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xx_o0_t2_m0_l0;
								m_Rc_xx_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xx_o0_t1_m0_l0;
								m_Rc_xx_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xx_o0_t0_m0_l0;
								Rc_xx = ((((((((((((((m_Rc_xx_o0_t0_l0 + m_Rc_xx_o0_t1_l0) + m_Rc_xx_o0_t2_l0) + m_Rc_xx_o0_t3_l0) + m_Rc_xx_o0_t4_l0) + m_Rc_xx_o0_t5_l0) + m_Rc_xx_o0_t6_l0) + m_Rc_xx_o0_t7_l0) + m_Rc_xx_o0_t8_l0) + m_Rc_xx_o0_t9_l0) + m_Rc_xx_o0_t10_l0) + m_Rc_xx_o0_t11_l0) + m_Rc_xx_o0_t9_l0) + m_Rc_xx_o0_t10_l0) + m_Rc_xx_o0_t11_l0) + d_Rc_xx_o0_t15_m0_l0;
								R_xx = Rc_xx + Rp_xx;
								d_Rc_xy_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xyz + C_yxx * Cd_yyz + C_zxx * Cd_zyz) + gammacu_zy * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_zz * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz)) + (gammacu_yx * (C_xxx * Cd_xyy + C_yxx * Cd_yyy + C_zxx * Cd_zyy) + gammacu_yy * (C_xxy * Cd_xyy + C_yxy * Cd_yyy + C_zxy * Cd_zyy) + gammacu_yz * (C_xxz * Cd_xyy + C_yxz * Cd_yyy + C_zxz * Cd_zyy)) + (gammacu_xx * (C_xxx * Cd_xxy + C_yxx * Cd_yxy + C_zxx * Cd_zxy) + gammacu_xy * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_xz * (C_xxz * Cd_xxy + C_yxz * Cd_yxy + C_zxz * Cd_zxy)) + (gammacu_zx * (C_xyz * Cd_xxx + C_yyz * Cd_xxy + C_zyz * Cd_xxz) + gammacu_zy * (C_xyz * Cd_xxy + C_yyz * Cd_xyy + C_zyz * Cd_xyz) + gammacu_zz * (C_xyz * Cd_xxz + C_yyz * Cd_xyz + C_zyz * Cd_xzz)) + (gammacu_yx * (C_xyy * Cd_xxx + C_yyy * Cd_xxy + C_zyy * Cd_xxz) + gammacu_yy * (C_xyy * Cd_xxy + C_yyy * Cd_xyy + C_zyy * Cd_xyz) + gammacu_yz * (C_xyy * Cd_xxz + C_yyy * Cd_xyz + C_zyy * Cd_xzz)) + (gammacu_xx * (C_xxy * Cd_xxx + C_yxy * Cd_xxy + C_zxy * Cd_xxz) + gammacu_xy * (C_xxy * Cd_xxy + C_yxy * Cd_xyy + C_zxy * Cd_xyz) + gammacu_xz * (C_xxy * Cd_xxz + C_yxy * Cd_xyz + C_zxy * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_yxx + C_yxz * Cd_yxy + C_zxz * Cd_yxz) + gammacu_zy * (C_xxz * Cd_yxy + C_yxz * Cd_yyy + C_zxz * Cd_yyz) + gammacu_zz * (C_xxz * Cd_yxz + C_yxz * Cd_yyz + C_zxz * Cd_yzz)) + (gammacu_yx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_yy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_yz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (gammacu_xx * (C_xxx * Cd_yxx + C_yxx * Cd_yxy + C_zxx * Cd_yxz) + gammacu_xy * (C_xxx * Cd_yxy + C_yxx * Cd_yyy + C_zxx * Cd_yyz) + gammacu_xz * (C_xxx * Cd_yxz + C_yxx * Cd_yyz + C_zxx * Cd_yzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxx + 0.5 * vector(Gam_y, i, j, k) * Cd_yxy + 0.5 * vector(Gam_z, i, j, k) * Cd_yxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxy + 0.5 * vector(Gam_y, i, j, k) * Cd_xyy + 0.5 * vector(Gam_z, i, j, k) * Cd_xyz);
								m_Rc_xy_o0_t14_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
								m_Rc_xy_o0_t13_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
								m_Rc_xy_o0_t12_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
								m_Rc_xy_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
								m_Rc_xy_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
								m_Rc_xy_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
								m_Rc_xy_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xy_o0_t8_m0_l0;
								m_Rc_xy_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xy_o0_t7_m0_l0;
								m_Rc_xy_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xy_o0_t6_m0_l0;
								m_Rc_xy_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xy_o0_t5_m0_l0;
								m_Rc_xy_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xy_o0_t4_m0_l0;
								m_Rc_xy_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xy_o0_t3_m0_l0;
								m_Rc_xy_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xy_o0_t2_m0_l0;
								m_Rc_xy_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xy_o0_t1_m0_l0;
								m_Rc_xy_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xy_o0_t0_m0_l0;
								Rc_xy = ((((((((((((((m_Rc_xy_o0_t0_l0 + m_Rc_xy_o0_t1_l0) + m_Rc_xy_o0_t2_l0) + m_Rc_xy_o0_t3_l0) + m_Rc_xy_o0_t4_l0) + m_Rc_xy_o0_t5_l0) + m_Rc_xy_o0_t6_l0) + m_Rc_xy_o0_t7_l0) + m_Rc_xy_o0_t8_l0) + m_Rc_xy_o0_t9_l0) + m_Rc_xy_o0_t10_l0) + m_Rc_xy_o0_t11_l0) + m_Rc_xy_o0_t12_l0) + m_Rc_xy_o0_t13_l0) + m_Rc_xy_o0_t14_l0) + d_Rc_xy_o0_t15_m0_l0;
								d_Rc_yy_o0_t15_m0_l0 = (gammacu_zx * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_zy * (C_xyy * Cd_xyz + C_yyy * Cd_yyz + C_zyy * Cd_zyz) + gammacu_zz * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz)) + (gammacu_yx * (C_xxy * Cd_xyy + C_yxy * Cd_yyy + C_zxy * Cd_zyy) + gammacu_yy * (C_xyy * Cd_xyy + C_yyy * Cd_yyy + C_zyy * Cd_zyy) + gammacu_yz * (C_xyz * Cd_xyy + C_yyz * Cd_yyy + C_zyz * Cd_zyy)) + (gammacu_xx * (C_xxy * Cd_xxy + C_yxy * Cd_yxy + C_zxy * Cd_zxy) + gammacu_xy * (C_xyy * Cd_xxy + C_yyy * Cd_yxy + C_zyy * Cd_zxy) + gammacu_xz * (C_xyz * Cd_xxy + C_yyz * Cd_yxy + C_zyz * Cd_zxy)) + (gammacu_zx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_zy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_zz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_yx * (C_xyy * Cd_yxx + C_yyy * Cd_yxy + C_zyy * Cd_yxz) + gammacu_yy * (C_xyy * Cd_yxy + C_yyy * Cd_yyy + C_zyy * Cd_yyz) + gammacu_yz * (C_xyy * Cd_yxz + C_yyy * Cd_yyz + C_zyy * Cd_yzz)) + (gammacu_xx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_xy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_xz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (gammacu_zx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_zy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_zz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_yx * (C_xyy * Cd_yxx + C_yyy * Cd_yxy + C_zyy * Cd_yxz) + gammacu_yy * (C_xyy * Cd_yxy + C_yyy * Cd_yyy + C_zyy * Cd_yyz) + gammacu_yz * (C_xyy * Cd_yxz + C_yyy * Cd_yyz + C_zyy * Cd_yzz)) + (gammacu_xx * (C_xxy * Cd_yxx + C_yxy * Cd_yxy + C_zxy * Cd_yxz) + gammacu_xy * (C_xxy * Cd_yxy + C_yxy * Cd_yyy + C_zxy * Cd_yyz) + gammacu_xz * (C_xxy * Cd_yxz + C_yxy * Cd_yyz + C_zxy * Cd_yzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxy + 0.5 * vector(Gam_y, i, j, k) * Cd_yyy + 0.5 * vector(Gam_z, i, j, k) * Cd_yyz) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxy + 0.5 * vector(Gam_y, i, j, k) * Cd_yyy + 0.5 * vector(Gam_z, i, j, k) * Cd_yyz);
								m_Rc_yy_o0_t11_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
								m_Rc_yy_o0_t10_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
								m_Rc_yy_o0_t9_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
								m_Rc_yy_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_yy_o0_t8_m0_l0;
								m_Rc_yy_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_yy_o0_t7_m0_l0;
								m_Rc_yy_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_yy_o0_t6_m0_l0;
								m_Rc_yy_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_yy_o0_t5_m0_l0;
								m_Rc_yy_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_yy_o0_t4_m0_l0;
								m_Rc_yy_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_yy_o0_t3_m0_l0;
								m_Rc_yy_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_yy_o0_t2_m0_l0;
								m_Rc_yy_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_yy_o0_t1_m0_l0;
								m_Rc_yy_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_yy_o0_t0_m0_l0;
								Rc_yy = ((((((((((((((m_Rc_yy_o0_t0_l0 + m_Rc_yy_o0_t1_l0) + m_Rc_yy_o0_t2_l0) + m_Rc_yy_o0_t3_l0) + m_Rc_yy_o0_t4_l0) + m_Rc_yy_o0_t5_l0) + m_Rc_yy_o0_t6_l0) + m_Rc_yy_o0_t7_l0) + m_Rc_yy_o0_t8_l0) + m_Rc_yy_o0_t9_l0) + m_Rc_yy_o0_t10_l0) + m_Rc_yy_o0_t11_l0) + m_Rc_yy_o0_t9_l0) + m_Rc_yy_o0_t10_l0) + m_Rc_yy_o0_t11_l0) + d_Rc_yy_o0_t15_m0_l0;
								R_xy = Rc_xy + Rp_xy;
								gammau_zz = iDetgamma * (gamma_xx * gamma_yy - gamma_xy * gamma_xy);
								Ku_zz = Au_zz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_zz * vector(trK, i, j, k);
								m_Rp_yy_o0_t49_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t48_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t47_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t46_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t45_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t44_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t43_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t42_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t41_l0 = (-4.0) * vector(gammac_yy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t39_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t38_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t37_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t36_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t35_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t34_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t33_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t32_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t31_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t30_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t29_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t28_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t27_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t26_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t25_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t24_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t23_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t22_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t21_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t20_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t19_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t18_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t17_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t16_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t15_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t14_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t13_l0 = 2.0 * vector(gammac_yy, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t12_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_yy_o0_t11_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_yy_o0_t10_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_yy_o0_t9_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_yy_o0_t8_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_yy_o0_t7_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_yy_o0_t6_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_yy_o0_t5_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_yy_o0_t4_l0 = (-2.0) * vector(gammac_yy, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_yy_o0_t3_l0 = 2.0 * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yy_o0_t2_l0 = 2.0 * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yy_o0_t1_l0 = 2.0 * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yy_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t8_m0_l0;
								Rp_yy = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yy_o0_t0_l0 + m_Rp_yy_o0_t1_l0) + m_Rp_yy_o0_t2_l0) + m_Rp_yy_o0_t3_l0) + m_Rp_yy_o0_t4_l0) + m_Rp_yy_o0_t5_l0) + m_Rp_yy_o0_t6_l0) + m_Rp_yy_o0_t7_l0) + m_Rp_yy_o0_t8_l0) + m_Rp_yy_o0_t9_l0) + m_Rp_yy_o0_t10_l0) + m_Rp_yy_o0_t11_l0) + m_Rp_yy_o0_t12_l0) + m_Rp_yy_o0_t13_l0) + m_Rp_yy_o0_t14_l0) + m_Rp_yy_o0_t15_l0) + m_Rp_yy_o0_t16_l0) + m_Rp_yy_o0_t17_l0) + m_Rp_yy_o0_t18_l0) + m_Rp_yy_o0_t19_l0) + m_Rp_yy_o0_t20_l0) + m_Rp_yy_o0_t21_l0) + m_Rp_yy_o0_t22_l0) + m_Rp_yy_o0_t23_l0) + m_Rp_yy_o0_t24_l0) + m_Rp_yy_o0_t25_l0) + m_Rp_yy_o0_t26_l0) + m_Rp_yy_o0_t27_l0) + m_Rp_yy_o0_t28_l0) + m_Rp_yy_o0_t29_l0) + m_Rp_yy_o0_t30_l0) + m_Rp_yy_o0_t31_l0) + m_Rp_yy_o0_t32_l0) + m_Rp_yy_o0_t33_l0) + m_Rp_yy_o0_t34_l0) + m_Rp_yy_o0_t35_l0) + m_Rp_yy_o0_t36_l0) + m_Rp_yy_o0_t37_l0) + m_Rp_yy_o0_t38_l0) + m_Rp_yy_o0_t39_l0) + m_Rp_yy_o0_t40_l0) + m_Rp_yy_o0_t41_l0) + m_Rp_yy_o0_t42_l0) + m_Rp_yy_o0_t43_l0) + m_Rp_yy_o0_t44_l0) + m_Rp_yy_o0_t45_l0) + m_Rp_yy_o0_t46_l0) + m_Rp_yy_o0_t47_l0) + m_Rp_yy_o0_t48_l0) + m_Rp_yy_o0_t49_l0;
								m_Rp_yz_o0_t49_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t48_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t47_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t3_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t46_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t45_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t44_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t43_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t42_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t41_l0 = (-4.0) * vector(gammac_yz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t1_m0_l0 * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t40_l0 = 4.0 * d_Rp_xx_o0_t2_m0_l0 * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t39_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_zzz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t38_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_yzz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t37_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zz * C_xzz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t36_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t35_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t34_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zy * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t33_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t32_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t31_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_zx * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t30_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t29_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t28_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yz * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t27_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_zyy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t26_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_yyy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t25_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yy * C_xyy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t24_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t23_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t22_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_yx * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t21_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_zxz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t20_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_yxz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t19_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xz * C_xxz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t18_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_zxy * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t17_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_yxy * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t16_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xy * C_xxy * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t15_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_zxx * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t14_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_yxx * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t13_l0 = 2.0 * vector(gammac_yz, i, j, k) * gammacu_xx * C_xxx * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t12_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zz * d_Rp_xx_o0_t12_m0_l0;
								m_Rp_yz_o0_t11_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zy * d_Rp_xx_o0_t11_m0_l0;
								m_Rp_yz_o0_t10_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_zx * d_Rp_xx_o0_t10_m0_l0;
								m_Rp_yz_o0_t9_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yz * d_Rp_xx_o0_t9_m0_l0;
								m_Rp_yz_o0_t8_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yy * d_Rp_xx_o0_t8_m0_l0;
								m_Rp_yz_o0_t7_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_yx * d_Rp_xx_o0_t7_m0_l0;
								m_Rp_yz_o0_t6_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xz * d_Rp_xx_o0_t6_m0_l0;
								m_Rp_yz_o0_t5_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xy * d_Rp_xx_o0_t5_m0_l0;
								m_Rp_yz_o0_t4_l0 = (-2.0) * vector(gammac_yz, i, j, k) * gammacu_xx * d_Rp_xx_o0_t0_m0_l0;
								m_Rp_yz_o0_t3_l0 = 2.0 * C_zyz * d_Rp_xx_o0_t3_m0_l0;
								m_Rp_yz_o0_t2_l0 = 2.0 * C_yyz * d_Rp_xx_o0_t2_m0_l0;
								m_Rp_yz_o0_t1_l0 = 2.0 * C_xyz * d_Rp_xx_o0_t1_m0_l0;
								m_Rp_yz_o0_t0_l0 = (-2.0) * d_Rp_xx_o0_t11_m0_l0;
								Rp_yz = ((((((((((((((((((((((((((((((((((((((((((((((((m_Rp_yz_o0_t0_l0 + m_Rp_yz_o0_t1_l0) + m_Rp_yz_o0_t2_l0) + m_Rp_yz_o0_t3_l0) + m_Rp_yz_o0_t4_l0) + m_Rp_yz_o0_t5_l0) + m_Rp_yz_o0_t6_l0) + m_Rp_yz_o0_t7_l0) + m_Rp_yz_o0_t8_l0) + m_Rp_yz_o0_t9_l0) + m_Rp_yz_o0_t10_l0) + m_Rp_yz_o0_t11_l0) + m_Rp_yz_o0_t12_l0) + m_Rp_yz_o0_t13_l0) + m_Rp_yz_o0_t14_l0) + m_Rp_yz_o0_t15_l0) + m_Rp_yz_o0_t16_l0) + m_Rp_yz_o0_t17_l0) + m_Rp_yz_o0_t18_l0) + m_Rp_yz_o0_t19_l0) + m_Rp_yz_o0_t20_l0) + m_Rp_yz_o0_t21_l0) + m_Rp_yz_o0_t22_l0) + m_Rp_yz_o0_t23_l0) + m_Rp_yz_o0_t24_l0) + m_Rp_yz_o0_t25_l0) + m_Rp_yz_o0_t26_l0) + m_Rp_yz_o0_t27_l0) + m_Rp_yz_o0_t28_l0) + m_Rp_yz_o0_t29_l0) + m_Rp_yz_o0_t30_l0) + m_Rp_yz_o0_t31_l0) + m_Rp_yz_o0_t32_l0) + m_Rp_yz_o0_t33_l0) + m_Rp_yz_o0_t34_l0) + m_Rp_yz_o0_t35_l0) + m_Rp_yz_o0_t36_l0) + m_Rp_yz_o0_t37_l0) + m_Rp_yz_o0_t38_l0) + m_Rp_yz_o0_t39_l0) + m_Rp_yz_o0_t40_l0) + m_Rp_yz_o0_t41_l0) + m_Rp_yz_o0_t42_l0) + m_Rp_yz_o0_t43_l0) + m_Rp_yz_o0_t44_l0) + m_Rp_yz_o0_t45_l0) + m_Rp_yz_o0_t46_l0) + m_Rp_yz_o0_t47_l0) + m_Rp_yz_o0_t48_l0) + m_Rp_yz_o0_t49_l0;
								Am_xx = gammacu_xx * vector(A_xx, i, j, k) + gammacu_xy * vector(A_xy, i, j, k) + gammacu_xz * vector(A_xz, i, j, k);
								Am_xz = gammacu_xx * vector(A_xz, i, j, k) + gammacu_xy * vector(A_yz, i, j, k) + gammacu_xz * vector(A_zz, i, j, k);
								Am_xy = gammacu_xx * vector(A_xy, i, j, k) + gammacu_xy * vector(A_yy, i, j, k) + gammacu_xz * vector(A_yz, i, j, k);
								R_yy = Rc_yy + Rp_yy;
								Au_xz = gammacu_xx * Am_zx + gammacu_xy * Am_zy + gammacu_xz * Am_zz;
								Ku_xz = Au_xz * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xz * vector(trK, i, j, k);
								Au_xy = gammacu_xx * Am_yx + gammacu_xy * Am_yy + gammacu_xz * Am_yz;
								Ku_xy = Au_xy * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xy * vector(trK, i, j, k);
								d_Rc_xz_o0_t15_m0_l0 = (gammacu_zx * (C_xxx * Cd_xzz + C_yxx * Cd_yzz + C_zxx * Cd_zzz) + gammacu_zy * (C_xxy * Cd_xzz + C_yxy * Cd_yzz + C_zxy * Cd_zzz) + gammacu_zz * (C_xxz * Cd_xzz + C_yxz * Cd_yzz + C_zxz * Cd_zzz)) + (gammacu_yx * (C_xxx * Cd_xyz + C_yxx * Cd_yyz + C_zxx * Cd_zyz) + gammacu_yy * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_yz * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz)) + (gammacu_xx * (C_xxx * Cd_xxz + C_yxx * Cd_yxz + C_zxx * Cd_zxz) + gammacu_xy * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_xz * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_xxx + C_yzz * Cd_xxy + C_zzz * Cd_xxz) + gammacu_zy * (C_xzz * Cd_xxy + C_yzz * Cd_xyy + C_zzz * Cd_xyz) + gammacu_zz * (C_xzz * Cd_xxz + C_yzz * Cd_xyz + C_zzz * Cd_xzz)) + (gammacu_yx * (C_xyz * Cd_xxx + C_yyz * Cd_xxy + C_zyz * Cd_xxz) + gammacu_yy * (C_xyz * Cd_xxy + C_yyz * Cd_xyy + C_zyz * Cd_xyz) + gammacu_yz * (C_xyz * Cd_xxz + C_yyz * Cd_xyz + C_zyz * Cd_xzz)) + (gammacu_xx * (C_xxz * Cd_xxx + C_yxz * Cd_xxy + C_zxz * Cd_xxz) + gammacu_xy * (C_xxz * Cd_xxy + C_yxz * Cd_xyy + C_zxz * Cd_xyz) + gammacu_xz * (C_xxz * Cd_xxz + C_yxz * Cd_xyz + C_zxz * Cd_xzz)) + (gammacu_zx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_zy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_zz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (gammacu_yx * (C_xxy * Cd_zxx + C_yxy * Cd_zxy + C_zxy * Cd_zxz) + gammacu_yy * (C_xxy * Cd_zxy + C_yxy * Cd_zyy + C_zxy * Cd_zyz) + gammacu_yz * (C_xxy * Cd_zxz + C_yxy * Cd_zyz + C_zxy * Cd_zzz)) + (gammacu_xx * (C_xxx * Cd_zxx + C_yxx * Cd_zxy + C_zxx * Cd_zxz) + gammacu_xy * (C_xxx * Cd_zxy + C_yxx * Cd_zyy + C_zxx * Cd_zyz) + gammacu_xz * (C_xxx * Cd_zxz + C_yxx * Cd_zyz + C_zxx * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxx + 0.5 * vector(Gam_y, i, j, k) * Cd_zxy + 0.5 * vector(Gam_z, i, j, k) * Cd_zxz) + (0.5 * vector(Gam_x, i, j, k) * Cd_xxz + 0.5 * vector(Gam_y, i, j, k) * Cd_xyz + 0.5 * vector(Gam_z, i, j, k) * Cd_xzz);
								m_Rc_xz_o0_t14_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xx_o0_t11_m0_l0;
								m_Rc_xz_o0_t13_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xx_o0_t10_m0_l0;
								m_Rc_xz_o0_t12_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xx_o0_t9_m0_l0;
								m_Rc_xz_o0_t11_l0 = 0.5 * vector(gammac_zx, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
								m_Rc_xz_o0_t10_l0 = 0.5 * vector(gammac_yx, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
								m_Rc_xz_o0_t9_l0 = 0.5 * vector(gammac_xx, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
								m_Rc_xz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_xz_o0_t8_m0_l0;
								m_Rc_xz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_xz_o0_t7_m0_l0;
								m_Rc_xz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_xz_o0_t6_m0_l0;
								m_Rc_xz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_xz_o0_t5_m0_l0;
								m_Rc_xz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_xz_o0_t4_m0_l0;
								m_Rc_xz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_xz_o0_t3_m0_l0;
								m_Rc_xz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_xz_o0_t2_m0_l0;
								m_Rc_xz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_xz_o0_t1_m0_l0;
								m_Rc_xz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_xz_o0_t0_m0_l0;
								Rc_xz = ((((((((((((((m_Rc_xz_o0_t0_l0 + m_Rc_xz_o0_t1_l0) + m_Rc_xz_o0_t2_l0) + m_Rc_xz_o0_t3_l0) + m_Rc_xz_o0_t4_l0) + m_Rc_xz_o0_t5_l0) + m_Rc_xz_o0_t6_l0) + m_Rc_xz_o0_t7_l0) + m_Rc_xz_o0_t8_l0) + m_Rc_xz_o0_t9_l0) + m_Rc_xz_o0_t10_l0) + m_Rc_xz_o0_t11_l0) + m_Rc_xz_o0_t12_l0) + m_Rc_xz_o0_t13_l0) + m_Rc_xz_o0_t14_l0) + d_Rc_xz_o0_t15_m0_l0;
								d_Rc_yz_o0_t15_m0_l0 = (gammacu_zx * (C_xxy * Cd_xzz + C_yxy * Cd_yzz + C_zxy * Cd_zzz) + gammacu_zy * (C_xyy * Cd_xzz + C_yyy * Cd_yzz + C_zyy * Cd_zzz) + gammacu_zz * (C_xyz * Cd_xzz + C_yyz * Cd_yzz + C_zyz * Cd_zzz)) + (gammacu_yx * (C_xxy * Cd_xyz + C_yxy * Cd_yyz + C_zxy * Cd_zyz) + gammacu_yy * (C_xyy * Cd_xyz + C_yyy * Cd_yyz + C_zyy * Cd_zyz) + gammacu_yz * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz)) + (gammacu_xx * (C_xxy * Cd_xxz + C_yxy * Cd_yxz + C_zxy * Cd_zxz) + gammacu_xy * (C_xyy * Cd_xxz + C_yyy * Cd_yxz + C_zyy * Cd_zxz) + gammacu_xz * (C_xyz * Cd_xxz + C_yyz * Cd_yxz + C_zyz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_yxx + C_yzz * Cd_yxy + C_zzz * Cd_yxz) + gammacu_zy * (C_xzz * Cd_yxy + C_yzz * Cd_yyy + C_zzz * Cd_yyz) + gammacu_zz * (C_xzz * Cd_yxz + C_yzz * Cd_yyz + C_zzz * Cd_yzz)) + (gammacu_yx * (C_xyz * Cd_yxx + C_yyz * Cd_yxy + C_zyz * Cd_yxz) + gammacu_yy * (C_xyz * Cd_yxy + C_yyz * Cd_yyy + C_zyz * Cd_yyz) + gammacu_yz * (C_xyz * Cd_yxz + C_yyz * Cd_yyz + C_zyz * Cd_yzz)) + (gammacu_xx * (C_xxz * Cd_yxx + C_yxz * Cd_yxy + C_zxz * Cd_yxz) + gammacu_xy * (C_xxz * Cd_yxy + C_yxz * Cd_yyy + C_zxz * Cd_yyz) + gammacu_xz * (C_xxz * Cd_yxz + C_yxz * Cd_yyz + C_zxz * Cd_yzz)) + (gammacu_zx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_zy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_zz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_yx * (C_xyy * Cd_zxx + C_yyy * Cd_zxy + C_zyy * Cd_zxz) + gammacu_yy * (C_xyy * Cd_zxy + C_yyy * Cd_zyy + C_zyy * Cd_zyz) + gammacu_yz * (C_xyy * Cd_zxz + C_yyy * Cd_zyz + C_zyy * Cd_zzz)) + (gammacu_xx * (C_xxy * Cd_zxx + C_yxy * Cd_zxy + C_zxy * Cd_zxz) + gammacu_xy * (C_xxy * Cd_zxy + C_yxy * Cd_zyy + C_zxy * Cd_zyz) + gammacu_xz * (C_xxy * Cd_zxz + C_yxy * Cd_zyz + C_zxy * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxy + 0.5 * vector(Gam_y, i, j, k) * Cd_zyy + 0.5 * vector(Gam_z, i, j, k) * Cd_zyz) + (0.5 * vector(Gam_x, i, j, k) * Cd_yxz + 0.5 * vector(Gam_y, i, j, k) * Cd_yyz + 0.5 * vector(Gam_z, i, j, k) * Cd_yzz);
								m_Rc_yz_o0_t14_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xy_o0_t11_m0_l0;
								m_Rc_yz_o0_t13_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xy_o0_t10_m0_l0;
								m_Rc_yz_o0_t12_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xy_o0_t9_m0_l0;
								m_Rc_yz_o0_t11_l0 = 0.5 * vector(gammac_zy, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
								m_Rc_yz_o0_t10_l0 = 0.5 * vector(gammac_yy, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
								m_Rc_yz_o0_t9_l0 = 0.5 * vector(gammac_xy, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
								m_Rc_yz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_yz_o0_t8_m0_l0;
								m_Rc_yz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_yz_o0_t7_m0_l0;
								m_Rc_yz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_yz_o0_t6_m0_l0;
								m_Rc_yz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_yz_o0_t5_m0_l0;
								m_Rc_yz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_yz_o0_t4_m0_l0;
								m_Rc_yz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_yz_o0_t3_m0_l0;
								m_Rc_yz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_yz_o0_t2_m0_l0;
								m_Rc_yz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_yz_o0_t1_m0_l0;
								m_Rc_yz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_yz_o0_t0_m0_l0;
								Rc_yz = ((((((((((((((m_Rc_yz_o0_t0_l0 + m_Rc_yz_o0_t1_l0) + m_Rc_yz_o0_t2_l0) + m_Rc_yz_o0_t3_l0) + m_Rc_yz_o0_t4_l0) + m_Rc_yz_o0_t5_l0) + m_Rc_yz_o0_t6_l0) + m_Rc_yz_o0_t7_l0) + m_Rc_yz_o0_t8_l0) + m_Rc_yz_o0_t9_l0) + m_Rc_yz_o0_t10_l0) + m_Rc_yz_o0_t11_l0) + m_Rc_yz_o0_t12_l0) + m_Rc_yz_o0_t13_l0) + m_Rc_yz_o0_t14_l0) + d_Rc_yz_o0_t15_m0_l0;
								R_yz = Rc_yz + Rp_yz;
								d_Rc_zz_o0_t15_m0_l0 = (gammacu_zx * (C_xxz * Cd_xzz + C_yxz * Cd_yzz + C_zxz * Cd_zzz) + gammacu_zy * (C_xyz * Cd_xzz + C_yyz * Cd_yzz + C_zyz * Cd_zzz) + gammacu_zz * (C_xzz * Cd_xzz + C_yzz * Cd_yzz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xxz * Cd_xyz + C_yxz * Cd_yyz + C_zxz * Cd_zyz) + gammacu_yy * (C_xyz * Cd_xyz + C_yyz * Cd_yyz + C_zyz * Cd_zyz) + gammacu_yz * (C_xzz * Cd_xyz + C_yzz * Cd_yyz + C_zzz * Cd_zyz)) + (gammacu_xx * (C_xxz * Cd_xxz + C_yxz * Cd_yxz + C_zxz * Cd_zxz) + gammacu_xy * (C_xyz * Cd_xxz + C_yyz * Cd_yxz + C_zyz * Cd_zxz) + gammacu_xz * (C_xzz * Cd_xxz + C_yzz * Cd_yxz + C_zzz * Cd_zxz)) + (gammacu_zx * (C_xzz * Cd_zxx + C_yzz * Cd_zxy + C_zzz * Cd_zxz) + gammacu_zy * (C_xzz * Cd_zxy + C_yzz * Cd_zyy + C_zzz * Cd_zyz) + gammacu_zz * (C_xzz * Cd_zxz + C_yzz * Cd_zyz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_yy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_yz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_xx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_xy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_xz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (gammacu_zx * (C_xzz * Cd_zxx + C_yzz * Cd_zxy + C_zzz * Cd_zxz) + gammacu_zy * (C_xzz * Cd_zxy + C_yzz * Cd_zyy + C_zzz * Cd_zyz) + gammacu_zz * (C_xzz * Cd_zxz + C_yzz * Cd_zyz + C_zzz * Cd_zzz)) + (gammacu_yx * (C_xyz * Cd_zxx + C_yyz * Cd_zxy + C_zyz * Cd_zxz) + gammacu_yy * (C_xyz * Cd_zxy + C_yyz * Cd_zyy + C_zyz * Cd_zyz) + gammacu_yz * (C_xyz * Cd_zxz + C_yyz * Cd_zyz + C_zyz * Cd_zzz)) + (gammacu_xx * (C_xxz * Cd_zxx + C_yxz * Cd_zxy + C_zxz * Cd_zxz) + gammacu_xy * (C_xxz * Cd_zxy + C_yxz * Cd_zyy + C_zxz * Cd_zyz) + gammacu_xz * (C_xxz * Cd_zxz + C_yxz * Cd_zyz + C_zxz * Cd_zzz)) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxz + 0.5 * vector(Gam_y, i, j, k) * Cd_zyz + 0.5 * vector(Gam_z, i, j, k) * Cd_zzz) + (0.5 * vector(Gam_x, i, j, k) * Cd_zxz + 0.5 * vector(Gam_y, i, j, k) * Cd_zyz + 0.5 * vector(Gam_z, i, j, k) * Cd_zzz);
								m_Rc_zz_o0_t11_l0 = 0.5 * vector(gammac_zz, i, j, k) * d_Rc_xz_o0_t11_m0_l0;
								m_Rc_zz_o0_t10_l0 = 0.5 * vector(gammac_yz, i, j, k) * d_Rc_xz_o0_t10_m0_l0;
								m_Rc_zz_o0_t9_l0 = 0.5 * vector(gammac_xz, i, j, k) * d_Rc_xz_o0_t9_m0_l0;
								m_Rc_zz_o0_t8_l0 = (-0.5) * gammacu_zz * d_Rc_zz_o0_t8_m0_l0;
								m_Rc_zz_o0_t7_l0 = (-0.5) * gammacu_zy * d_Rc_zz_o0_t7_m0_l0;
								m_Rc_zz_o0_t6_l0 = (-0.5) * gammacu_zx * d_Rc_zz_o0_t6_m0_l0;
								m_Rc_zz_o0_t5_l0 = (-0.5) * gammacu_yz * d_Rc_zz_o0_t5_m0_l0;
								m_Rc_zz_o0_t4_l0 = (-0.5) * gammacu_yy * d_Rc_zz_o0_t4_m0_l0;
								m_Rc_zz_o0_t3_l0 = (-0.5) * gammacu_yx * d_Rc_zz_o0_t3_m0_l0;
								m_Rc_zz_o0_t2_l0 = (-0.5) * gammacu_xz * d_Rc_zz_o0_t2_m0_l0;
								m_Rc_zz_o0_t1_l0 = (-0.5) * gammacu_xy * d_Rc_zz_o0_t1_m0_l0;
								m_Rc_zz_o0_t0_l0 = (-0.5) * gammacu_xx * d_Rc_zz_o0_t0_m0_l0;
								Rc_zz = ((((((((((((((m_Rc_zz_o0_t0_l0 + m_Rc_zz_o0_t1_l0) + m_Rc_zz_o0_t2_l0) + m_Rc_zz_o0_t3_l0) + m_Rc_zz_o0_t4_l0) + m_Rc_zz_o0_t5_l0) + m_Rc_zz_o0_t6_l0) + m_Rc_zz_o0_t7_l0) + m_Rc_zz_o0_t8_l0) + m_Rc_zz_o0_t9_l0) + m_Rc_zz_o0_t10_l0) + m_Rc_zz_o0_t11_l0) + m_Rc_zz_o0_t9_l0) + m_Rc_zz_o0_t10_l0) + m_Rc_zz_o0_t11_l0) + d_Rc_zz_o0_t15_m0_l0;
								R_zz = Rc_zz + Rp_zz;
								R_xz = Rc_xz + Rp_xz;
								R = gammau_xx * R_xx + gammau_yy * R_yy + gammau_zz * R_zz + 2.0 * (gammau_xy * R_xy + gammau_xz * R_xz + gammau_yz * R_yz);
								Au_xx = gammacu_xx * Am_xx + gammacu_xy * Am_xy + gammacu_xz * Am_xz;
								Ku_xx = Au_xx * exp(4.0 * vector(Phi, i, j, k)) + 0.33333333333333 * gammau_xx * vector(trK, i, j, k);
								d_Rscalar_o0_t0_m0_l0 = R;
								d_HamCon_o0_t0_m0_l0 = R + vector(trK, i, j, k) * vector(trK, i, j, k) - (K_xx * Ku_xx + K_yy * Ku_yy + K_zz * Ku_zz + 2.0 * K_xy * Ku_xy + 2.0 * K_xz * Ku_xz + 2.0 * K_yz * Ku_yz);
								d_MomCon_x_o0_t9_m0_l0 = Cd_xxx * Au_xx + Cd_xyy * Au_yy + Cd_xzz * Au_zz + 2.0 * (Cd_xxy * Au_xy + Cd_xxz * Au_xz + Cd_xyz * Au_yz);
								d_MomCon_y_o0_t9_m0_l0 = Cd_yxx * Au_xx + Cd_yyy * Au_yy + Cd_yzz * Au_zz + 2.0 * (Cd_yxy * Au_xy + Cd_yxz * Au_xz + Cd_yyz * Au_yz);
								d_MomCon_z_o0_t9_m0_l0 = Cd_zxx * Au_xx + Cd_zyy * Au_yy + Cd_zzz * Au_zz + 2.0 * (Cd_zxy * Au_xy + Cd_zxz * Au_xz + Cd_zyz * Au_yz);
								m_MomCon_z_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_z_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_z_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_z_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_z_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_z_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_z_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_z_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_z_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xz, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_z_o0_t12_l0 = 6.0 * Am_zz * d_Rp_xx_o0_t3_m0_l0;
								m_MomCon_z_o0_t11_l0 = 6.0 * Am_yz * d_Rp_xx_o0_t2_m0_l0;
								m_MomCon_z_o0_t10_l0 = 6.0 * Am_xz * d_Rp_xx_o0_t1_m0_l0;
								m_MomCon_z_o0_t8_l0 = gammacu_zz * d_MomCon_z_o0_t8_m0_l0;
								m_MomCon_z_o0_t7_l0 = gammacu_zy * d_MomCon_z_o0_t7_m0_l0;
								m_MomCon_z_o0_t6_l0 = gammacu_zx * d_MomCon_z_o0_t6_m0_l0;
								m_MomCon_z_o0_t5_l0 = gammacu_yz * d_MomCon_y_o0_t8_m0_l0;
								m_MomCon_z_o0_t4_l0 = gammacu_yy * d_MomCon_y_o0_t7_m0_l0;
								m_MomCon_z_o0_t3_l0 = gammacu_yx * d_MomCon_y_o0_t6_m0_l0;
								m_MomCon_z_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t8_m0_l0;
								m_MomCon_z_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t7_m0_l0;
								m_MomCon_z_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t6_m0_l0;
								m_MomCon_y_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_y_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_y_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_y_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_y_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_y_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_y_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_y_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_y_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xy, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_y_o0_t12_l0 = 6.0 * Am_zy * d_Rp_xx_o0_t3_m0_l0;
								m_MomCon_y_o0_t11_l0 = 6.0 * Am_yy * d_Rp_xx_o0_t2_m0_l0;
								m_MomCon_y_o0_t10_l0 = 6.0 * Am_xy * d_Rp_xx_o0_t1_m0_l0;
								m_MomCon_y_o0_t8_l0 = gammacu_zz * d_MomCon_y_o0_t8_m0_l0;
								m_MomCon_y_o0_t7_l0 = gammacu_zy * d_MomCon_y_o0_t7_m0_l0;
								m_MomCon_y_o0_t6_l0 = gammacu_zx * d_MomCon_y_o0_t6_m0_l0;
								m_MomCon_y_o0_t5_l0 = gammacu_yz * d_MomCon_y_o0_t5_m0_l0;
								m_MomCon_y_o0_t4_l0 = gammacu_yy * d_MomCon_y_o0_t4_m0_l0;
								m_MomCon_y_o0_t3_l0 = gammacu_yx * d_MomCon_y_o0_t3_m0_l0;
								m_MomCon_y_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t5_m0_l0;
								m_MomCon_y_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t4_m0_l0;
								m_MomCon_y_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t3_m0_l0;
								m_MomCon_x_o0_t21_l0 = (-0.666666666) * gammacu_zz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_x_o0_t20_l0 = (-0.666666666) * gammacu_zy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_x_o0_t19_l0 = (-0.666666666) * gammacu_zx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t19_m0_l0;
								m_MomCon_x_o0_t18_l0 = (-0.666666666) * gammacu_yz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_x_o0_t17_l0 = (-0.666666666) * gammacu_yy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_x_o0_t16_l0 = (-0.666666666) * gammacu_yx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t16_m0_l0;
								m_MomCon_x_o0_t15_l0 = (-0.666666666) * gammacu_xz * vector(gammac_zx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_x_o0_t14_l0 = (-0.666666666) * gammacu_xy * vector(gammac_yx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_x_o0_t13_l0 = (-0.666666666) * gammacu_xx * vector(gammac_xx, i, j, k) * d_MomCon_x_o0_t13_m0_l0;
								m_MomCon_x_o0_t12_l0 = 6.0 * Am_zx * d_Rp_xx_o0_t3_m0_l0;
								m_MomCon_x_o0_t11_l0 = 6.0 * Am_yx * d_Rp_xx_o0_t2_m0_l0;
								m_MomCon_x_o0_t10_l0 = 6.0 * Am_xx * d_Rp_xx_o0_t1_m0_l0;
								m_MomCon_x_o0_t8_l0 = gammacu_zz * d_MomCon_x_o0_t8_m0_l0;
								m_MomCon_x_o0_t7_l0 = gammacu_zy * d_MomCon_x_o0_t7_m0_l0;
								m_MomCon_x_o0_t6_l0 = gammacu_zx * d_MomCon_x_o0_t6_m0_l0;
								m_MomCon_x_o0_t5_l0 = gammacu_yz * d_MomCon_x_o0_t5_m0_l0;
								m_MomCon_x_o0_t4_l0 = gammacu_yy * d_MomCon_x_o0_t4_m0_l0;
								m_MomCon_x_o0_t3_l0 = gammacu_yx * d_MomCon_x_o0_t3_m0_l0;
								m_MomCon_x_o0_t2_l0 = gammacu_xz * d_MomCon_x_o0_t2_m0_l0;
								m_MomCon_x_o0_t1_l0 = gammacu_xy * d_MomCon_x_o0_t1_m0_l0;
								m_MomCon_x_o0_t0_l0 = gammacu_xx * d_MomCon_x_o0_t0_m0_l0;
								vector(Rscalar, i, j, k) = d_Rscalar_o0_t0_m0_l0;
								vector(HamCon, i, j, k) = d_HamCon_o0_t0_m0_l0;
								vector(MomCon_x, i, j, k) = ((((((((((((((((((((m_MomCon_x_o0_t0_l0 + m_MomCon_x_o0_t1_l0) + m_MomCon_x_o0_t2_l0) + m_MomCon_x_o0_t3_l0) + m_MomCon_x_o0_t4_l0) + m_MomCon_x_o0_t5_l0) + m_MomCon_x_o0_t6_l0) + m_MomCon_x_o0_t7_l0) + m_MomCon_x_o0_t8_l0) + d_MomCon_x_o0_t9_m0_l0) + m_MomCon_x_o0_t10_l0) + m_MomCon_x_o0_t11_l0) + m_MomCon_x_o0_t12_l0) + m_MomCon_x_o0_t13_l0) + m_MomCon_x_o0_t14_l0) + m_MomCon_x_o0_t15_l0) + m_MomCon_x_o0_t16_l0) + m_MomCon_x_o0_t17_l0) + m_MomCon_x_o0_t18_l0) + m_MomCon_x_o0_t19_l0) + m_MomCon_x_o0_t20_l0) + m_MomCon_x_o0_t21_l0;
								vector(MomCon_y, i, j, k) = ((((((((((((((((((((m_MomCon_y_o0_t0_l0 + m_MomCon_y_o0_t1_l0) + m_MomCon_y_o0_t2_l0) + m_MomCon_y_o0_t3_l0) + m_MomCon_y_o0_t4_l0) + m_MomCon_y_o0_t5_l0) + m_MomCon_y_o0_t6_l0) + m_MomCon_y_o0_t7_l0) + m_MomCon_y_o0_t8_l0) + d_MomCon_y_o0_t9_m0_l0) + m_MomCon_y_o0_t10_l0) + m_MomCon_y_o0_t11_l0) + m_MomCon_y_o0_t12_l0) + m_MomCon_y_o0_t13_l0) + m_MomCon_y_o0_t14_l0) + m_MomCon_y_o0_t15_l0) + m_MomCon_y_o0_t16_l0) + m_MomCon_y_o0_t17_l0) + m_MomCon_y_o0_t18_l0) + m_MomCon_y_o0_t19_l0) + m_MomCon_y_o0_t20_l0) + m_MomCon_y_o0_t21_l0;
								vector(MomCon_z, i, j, k) = ((((((((((((((((((((m_MomCon_z_o0_t0_l0 + m_MomCon_z_o0_t1_l0) + m_MomCon_z_o0_t2_l0) + m_MomCon_z_o0_t3_l0) + m_MomCon_z_o0_t4_l0) + m_MomCon_z_o0_t5_l0) + m_MomCon_z_o0_t6_l0) + m_MomCon_z_o0_t7_l0) + m_MomCon_z_o0_t8_l0) + d_MomCon_z_o0_t9_m0_l0) + m_MomCon_z_o0_t10_l0) + m_MomCon_z_o0_t11_l0) + m_MomCon_z_o0_t12_l0) + m_MomCon_z_o0_t13_l0) + m_MomCon_z_o0_t14_l0) + m_MomCon_z_o0_t15_l0) + m_MomCon_z_o0_t16_l0) + m_MomCon_z_o0_t17_l0) + m_MomCon_z_o0_t18_l0) + m_MomCon_z_o0_t19_l0) + m_MomCon_z_o0_t20_l0) + m_MomCon_z_o0_t21_l0;
							}
						}
					}
				}
			}
		}
		

	}


	//Output
	t_output->start();
	if (ln == hierarchy->getFinestLevelNumber() && viz_mesh_dump_interval > 0) {
		if (previous_iteration < next_mesh_dump_iteration && outputCycle >= next_mesh_dump_iteration) {
			d_visit_data_writer->writePlotData(hierarchy, outputCycle, new_time);
			next_mesh_dump_iteration = next_mesh_dump_iteration + viz_mesh_dump_interval;
			while (outputCycle >= next_mesh_dump_iteration) {
				next_mesh_dump_iteration = next_mesh_dump_iteration + viz_mesh_dump_interval;
			}
		}
	}
	//Slicer output
	if (ln == hierarchy->getFinestLevelNumber() && d_slicer_output_period.size() > 0) {
		int i = 0;
		for (std::vector<std::shared_ptr<SlicerDataWriter> >::iterator it = d_sliceWriters.begin(); it != d_sliceWriters.end(); ++it) {
			if (d_slicer_output_period[i] > 0 && previous_iteration < next_slice_dump_iteration[i] && outputCycle >= next_slice_dump_iteration[i]) {
				(*it)->writePlotData(hierarchy, outputCycle, new_time);
				next_slice_dump_iteration[i] = next_slice_dump_iteration[i] + d_slicer_output_period[i];
				while (outputCycle >= next_slice_dump_iteration[i]) {
					next_slice_dump_iteration[i] = next_slice_dump_iteration[i] + d_slicer_output_period[i];
				}
			}
			i++;
		}
	}

	//Spherical output
	if (ln == hierarchy->getFinestLevelNumber() && d_sphere_output_period.size() > 0) {
		int i = 0;
		for (std::vector<std::shared_ptr<SphereDataWriter> >::iterator it = d_sphereWriters.begin(); it != d_sphereWriters.end(); ++it) {
			if (d_sphere_output_period[i] > 0 && previous_iteration < next_sphere_dump_iteration[i] && outputCycle >= next_sphere_dump_iteration[i]) {
				(*it)->writePlotData(hierarchy, outputCycle, new_time);
				next_sphere_dump_iteration[i] = next_sphere_dump_iteration[i] + d_sphere_output_period[i];
				while (outputCycle >= next_sphere_dump_iteration[i]) {
					next_sphere_dump_iteration[i] = next_sphere_dump_iteration[i] + d_sphere_output_period[i];
				}
			}
			i++;
		}
	}

	//Integration output
	if (ln == hierarchy->getFinestLevelNumber() && d_integration_output_period.size() > 0) {
		int i = 0;
		for (std::vector<std::shared_ptr<IntegrateDataWriter> >::iterator it = d_integrateDataWriters.begin(); it != d_integrateDataWriters.end(); ++it) {
			if (d_integration_output_period[i] > 0 && previous_iteration < next_integration_dump_iteration[i] && outputCycle >= next_integration_dump_iteration[i]) {
				(*it)->writePlotData(hierarchy, outputCycle, new_time);
				next_integration_dump_iteration[i] = next_integration_dump_iteration[i] + d_integration_output_period[i];
				while (outputCycle >= next_integration_dump_iteration[i]) {
					next_integration_dump_iteration[i] = next_integration_dump_iteration[i] + d_integration_output_period[i];
				}
			}
			i++;
		}
	}

	//Point output
	if (ln == hierarchy->getFinestLevelNumber() && d_point_output_period.size() > 0) {
		int i = 0;
		for (std::vector<std::shared_ptr<PointDataWriter> >::iterator it = d_pointDataWriters.begin(); it != d_pointDataWriters.end(); ++it) {
			if (d_point_output_period[i] > 0 && previous_iteration < next_point_dump_iteration[i] && outputCycle >= next_point_dump_iteration[i]) {
				(*it)->writePlotData(hierarchy, outputCycle, new_time);
				next_point_dump_iteration[i] = next_point_dump_iteration[i] + d_point_output_period[i];
				while (outputCycle >= next_point_dump_iteration[i]) {
					next_point_dump_iteration[i] = next_point_dump_iteration[i] + d_point_output_period[i];
				}
			}
			i++;
		}
	}


	t_output->stop();

	if (mpi.getRank() == 0 && d_output_interval > 0 ) {
		if (previous_iteration < next_console_output && outputCycle >= next_console_output) {
			int currentLevelNumber = ln;
			while (currentLevelNumber > 0) {
				currentLevelNumber--;
				cout <<"  ";
			}

			cout << "Level "<<ln<<". Iteration " << current_iteration[ln]<<". Time "<<current_time<<"."<< endl;
			if (ln == hierarchy->getFinestLevelNumber()) {
				next_console_output = next_console_output + d_output_interval;
				while (outputCycle >= next_console_output) {
					next_console_output = next_console_output + d_output_interval;
				}
			
			}
		}
	}

	if (d_timer_output_interval > 0 ) {
		if (previous_iteration < next_timer_output && outputCycle >= next_timer_output) {
			if (ln == hierarchy->getFinestLevelNumber()) {
				//Print timers
				if (mpi.getRank() == 0) {
					tbox::TimerManager::getManager()->print(cout);
				}
				else {
					if (ln == hierarchy->getFinestLevelNumber()) {
						//Dispose other processor timers
						//SAMRAI needs all processors run tbox::TimerManager::getManager()->print, otherwise it hungs
						std::ofstream ofs;
						ofs.setstate(std::ios_base::badbit);
						tbox::TimerManager::getManager()->print(ofs);
					}
				}
				next_timer_output = next_timer_output + d_timer_output_interval;
				while (outputCycle >= next_timer_output) {
					next_timer_output = next_timer_output + d_timer_output_interval;
				}
			
			}
		}
	}

	return simPlat_dt;
}

/*
 * Checks the finalization conditions              
 */
bool Problem::checkFinalization(const double current_time, const double simPlat_dt)
{
	if (greaterEq(current_time, tend)) { 
		return true;
	}
	return false;
	
	

}

void Problem::putToRestart(MainRestartData& mrd) {
	mrd.setNextSliceDumpIteration(next_slice_dump_iteration);
	mrd.setNextSphereDumpIteration(next_sphere_dump_iteration);
	mrd.setNextMeshDumpIteration(next_mesh_dump_iteration);
	mrd.setNextIntegrationDumpIteration(next_integration_dump_iteration);
	mrd.setNextPointDumpIteration(next_point_dump_iteration);

	mrd.setCurrentIteration(current_iteration);
	mrd.setNextConsoleOutputIteration(next_console_output);
	mrd.setNextTimerOutputIteration(next_timer_output);
}

void Problem::getFromRestart(MainRestartData& mrd) {
	next_slice_dump_iteration = mrd.getNextSliceDumpIteration();
	next_sphere_dump_iteration = mrd.getNextSphereDumpIteration();
	next_mesh_dump_iteration = mrd.getNextMeshDumpIteration();
	next_integration_dump_iteration = mrd.getNextIntegrationDumpIteration();
	next_point_dump_iteration = mrd.getNextPointDumpIteration();

	current_iteration = mrd.getCurrentIteration();
	next_console_output = mrd.getNextConsoleOutputIteration();
	next_timer_output = mrd.getNextTimerOutputIteration();
}

void Problem::allocateAfterRestart() {
	for (int il = 0; il < d_patch_hierarchy->getNumberOfLevels(); il++) {
		std::shared_ptr< hier::PatchLevel > level(d_patch_hierarchy->getPatchLevel(il));
		level->allocatePatchData(d_mask_id);
		level->allocatePatchData(d_interior_regridding_value_id);
		level->allocatePatchData(d_nonSync_regridding_tag_id);
		level->allocatePatchData(d_interior_i_id);
		level->allocatePatchData(d_interior_j_id);
		level->allocatePatchData(d_interior_k_id);
		level->allocatePatchData(d_Rscalar_id);
		level->allocatePatchData(d_HamCon_id);
		level->allocatePatchData(d_MomCon_x_id);
		level->allocatePatchData(d_MomCon_y_id);
		level->allocatePatchData(d_MomCon_z_id);
		level->allocatePatchData(d_rk1gammac_xx_id);
		level->allocatePatchData(d_rk1gammac_xy_id);
		level->allocatePatchData(d_rk1gammac_xz_id);
		level->allocatePatchData(d_rk1gammac_yy_id);
		level->allocatePatchData(d_rk1gammac_yx_id);
		level->allocatePatchData(d_rk1gammac_yz_id);
		level->allocatePatchData(d_rk1gammac_zz_id);
		level->allocatePatchData(d_rk1gammac_zx_id);
		level->allocatePatchData(d_rk1gammac_zy_id);
		level->allocatePatchData(d_rk1A_xx_id);
		level->allocatePatchData(d_rk1A_xy_id);
		level->allocatePatchData(d_rk1A_xz_id);
		level->allocatePatchData(d_rk1A_yy_id);
		level->allocatePatchData(d_rk1A_yz_id);
		level->allocatePatchData(d_rk1A_zz_id);
		level->allocatePatchData(d_rk1Phi_id);
		level->allocatePatchData(d_rk1trK_id);
		level->allocatePatchData(d_rk1beta_x_id);
		level->allocatePatchData(d_rk1beta_y_id);
		level->allocatePatchData(d_rk1beta_z_id);
		level->allocatePatchData(d_rk1alpha_id);
		level->allocatePatchData(d_rk1Gam_x_id);
		level->allocatePatchData(d_rk1Gam_y_id);
		level->allocatePatchData(d_rk1Gam_z_id);
		level->allocatePatchData(d_rk2gammac_xx_id);
		level->allocatePatchData(d_rk2gammac_xy_id);
		level->allocatePatchData(d_rk2gammac_xz_id);
		level->allocatePatchData(d_rk2gammac_yy_id);
		level->allocatePatchData(d_rk2gammac_yx_id);
		level->allocatePatchData(d_rk2gammac_yz_id);
		level->allocatePatchData(d_rk2gammac_zz_id);
		level->allocatePatchData(d_rk2gammac_zx_id);
		level->allocatePatchData(d_rk2gammac_zy_id);
		level->allocatePatchData(d_rk2A_xx_id);
		level->allocatePatchData(d_rk2A_xy_id);
		level->allocatePatchData(d_rk2A_xz_id);
		level->allocatePatchData(d_rk2A_yy_id);
		level->allocatePatchData(d_rk2A_yz_id);
		level->allocatePatchData(d_rk2A_zz_id);
		level->allocatePatchData(d_rk2Phi_id);
		level->allocatePatchData(d_rk2trK_id);
		level->allocatePatchData(d_rk2beta_x_id);
		level->allocatePatchData(d_rk2beta_y_id);
		level->allocatePatchData(d_rk2beta_z_id);
		level->allocatePatchData(d_rk2alpha_id);
		level->allocatePatchData(d_rk2Gam_x_id);
		level->allocatePatchData(d_rk2Gam_y_id);
		level->allocatePatchData(d_rk2Gam_z_id);
		level->allocatePatchData(d_rk3gammac_xx_id);
		level->allocatePatchData(d_rk3gammac_xy_id);
		level->allocatePatchData(d_rk3gammac_xz_id);
		level->allocatePatchData(d_rk3gammac_yy_id);
		level->allocatePatchData(d_rk3gammac_yx_id);
		level->allocatePatchData(d_rk3gammac_yz_id);
		level->allocatePatchData(d_rk3gammac_zz_id);
		level->allocatePatchData(d_rk3gammac_zx_id);
		level->allocatePatchData(d_rk3gammac_zy_id);
		level->allocatePatchData(d_rk3A_xx_id);
		level->allocatePatchData(d_rk3A_xy_id);
		level->allocatePatchData(d_rk3A_xz_id);
		level->allocatePatchData(d_rk3A_yy_id);
		level->allocatePatchData(d_rk3A_yz_id);
		level->allocatePatchData(d_rk3A_zz_id);
		level->allocatePatchData(d_rk3Phi_id);
		level->allocatePatchData(d_rk3trK_id);
		level->allocatePatchData(d_rk3beta_x_id);
		level->allocatePatchData(d_rk3beta_y_id);
		level->allocatePatchData(d_rk3beta_z_id);
		level->allocatePatchData(d_rk3alpha_id);
		level->allocatePatchData(d_rk3Gam_x_id);
		level->allocatePatchData(d_rk3Gam_y_id);
		level->allocatePatchData(d_rk3Gam_z_id);
		level->allocatePatchData(d_Phi_p_id);
		level->allocatePatchData(d_gammac_xx_p_id);
		level->allocatePatchData(d_gammac_xy_p_id);
		level->allocatePatchData(d_gammac_xz_p_id);
		level->allocatePatchData(d_gammac_yx_p_id);
		level->allocatePatchData(d_gammac_yy_p_id);
		level->allocatePatchData(d_gammac_yz_p_id);
		level->allocatePatchData(d_gammac_zx_p_id);
		level->allocatePatchData(d_gammac_zy_p_id);
		level->allocatePatchData(d_gammac_zz_p_id);
		level->allocatePatchData(d_A_xx_p_id);
		level->allocatePatchData(d_A_xy_p_id);
		level->allocatePatchData(d_A_xz_p_id);
		level->allocatePatchData(d_A_yy_p_id);
		level->allocatePatchData(d_A_yz_p_id);
		level->allocatePatchData(d_A_zz_p_id);
		level->allocatePatchData(d_trK_p_id);
		level->allocatePatchData(d_alpha_p_id);
		level->allocatePatchData(d_beta_x_p_id);
		level->allocatePatchData(d_beta_y_p_id);
		level->allocatePatchData(d_beta_z_p_id);
		level->allocatePatchData(d_Gam_x_p_id);
		level->allocatePatchData(d_Gam_y_p_id);
		level->allocatePatchData(d_Gam_z_p_id);
	}

}

/*
 *  Cell tagging routine - tag cells that require refinement based on a provided condition. 
 */
void Problem::applyGradientDetector(
   const std::shared_ptr< hier::PatchHierarchy >& hierarchy, 
   const int level_number,
   const double time, 
   const int tag_index,
   const bool initial_time,
   const bool uses_richardson_extrapolation_too) 
{
	if (d_regridding && level_number + 1 >= d_regridding_min_level && level_number + 1 <= d_regridding_max_level) {
		hier::VariableDatabase *vdb = hier::VariableDatabase::getDatabase();
		if (!(vdb->checkVariableExists(d_regridding_field))) {
			TBOX_ERROR(d_object_name << ": Regridding field selected not found:n"					<<  d_regridding_field<<  "n");
		}

		std::shared_ptr< hier::PatchLevel > level(hierarchy->getPatchLevel(level_number));

		for (hier::PatchLevel::iterator ip(level->begin()); ip != level->end(); ++ip) {
			const std::shared_ptr< hier::Patch >& patch = *ip;
			int* tags = ((pdat::CellData<int> *) patch->getPatchData(tag_index).get())->getPointer();
			int* regridding_tag = ((pdat::NodeData<int> *) patch->getPatchData(d_nonSync_regridding_tag_id).get())->getPointer();
			const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
			const double* dx  = patch_geom->getDx();
			const hier::Index tfirst = patch->getPatchData(tag_index)->getGhostBox().lower();
			const hier::Index tlast  = patch->getPatchData(tag_index)->getGhostBox().upper();
			const hier::Index boxfirst = patch->getBox().lower();
			const hier::Index boxlast  = patch->getBox().upper();
			int ilast = boxlast(0)-boxfirst(0)+2+2*d_ghost_width;
			int itlast = tlast(0)-tfirst(0)+1;
			int jlast = boxlast(1)-boxfirst(1)+2+2*d_ghost_width;
			int jtlast = tlast(1)-tfirst(1)+1;
			int klast = boxlast(2)-boxfirst(2)+2+2*d_ghost_width;
			int ktlast = tlast(2)-tfirst(2)+1;
			for(int index2 = 0; index2 < (tlast(2)-tfirst(2))+1; index2++) {
				for(int index1 = 0; index1 < (tlast(1)-tfirst(1))+1; index1++) {
					for(int index0 = 0; index0 < (tlast(0)-tfirst(0))+1; index0++) {
						vectorT(tags,index0, index1, index2) = 0;
					}
				}
			}
			for(int index2 = 0; index2 < klast; index2++) {
				for(int index1 = 0; index1 < jlast; index1++) {
					for(int index0 = 0; index0 < ilast; index0++) {
						vector(regridding_tag,index0, index1, index2) = 0;
					}
				}
			}
			if (vdb->checkVariableExists(d_regridding_field)) {
				//Mesh
				if (d_regridding_type == "GRADIENT") {
					int regrid_field_id = vdb->getVariable(d_regridding_field)->getInstanceIdentifier();
					double* regrid_field = ((pdat::NodeData<double> *) patch->getPatchData(regrid_field_id).get())->getPointer();
					double* regridding_value = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
					for(int index2 = 0; index2 < klast - 1; index2++) {
						for(int index1 = 0; index1 < jlast - 1; index1++) {
							for(int index0 = 0; index0 < ilast - 1; index0++) {
								if (vector(regrid_field, index0, index1, index2)!=0) {
									if ((fabs(vector(regrid_field, index0+1+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)) > d_regridding_compressionFactor * MIN(fabs(vector(regrid_field, index0+2+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+1+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)) + d_regridding_mOffset * pow(dx[0], 2), fabs(vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0-1+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)) + d_regridding_mOffset * pow(dx[0], 2)) ) ||(fabs(vector(regrid_field, index0+d_ghost_width, index1+1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)) > d_regridding_compressionFactor * MIN(fabs(vector(regrid_field, index0+d_ghost_width, index1+2+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+1+d_ghost_width, index2+d_ghost_width)) + d_regridding_mOffset * pow(dx[1], 2), fabs(vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1-1+d_ghost_width, index2+d_ghost_width)) + d_regridding_mOffset * pow(dx[1], 2)) ) ||(fabs(vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+1+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)) > d_regridding_compressionFactor * MIN(fabs(vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+1+d_ghost_width)) + d_regridding_mOffset * pow(dx[2], 2), fabs(vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2+d_ghost_width)-vector(regrid_field, index0+d_ghost_width, index1+d_ghost_width, index2-1+d_ghost_width)) + d_regridding_mOffset * pow(dx[2], 2)) ) ) {
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags,index0 - d_ghost_width, index1 - d_ghost_width, index2 - d_ghost_width) = 1;
										}
										vector(regridding_tag,index0, index1, index2) = 1;
										//SAMRAI tagging
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
										}
										//Informative tagging
										if (index0 > 0 && index1 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0-1,index1-1,index2-1) != 1)
												vector(regridding_tag,index0-1,index1-1,index2-1) = 1;
										}
										if (index1 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0,index1-1,index2-1) != 1)
												vector(regridding_tag,index0,index1-1,index2-1) = 1;
										}
										if (index0 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0-1,index1,index2-1) != 1)
												vector(regridding_tag,index0-1,index1,index2-1) = 1;
										}
										if (index2 > 0) {
											if (vector(regridding_tag,index0,index1,index2-1) != 1)
												vector(regridding_tag,index0,index1,index2-1) = 1;
										}
										if (index0 > 0 && index1 > 0) {
											if (vector(regridding_tag,index0-1,index1-1,index2) != 1)
												vector(regridding_tag,index0-1,index1-1,index2) = 1;
										}
										if (index0 > 0) {
											if (vector(regridding_tag,index0-1,index1,index2) != 1)
												vector(regridding_tag,index0-1,index1,index2) = 1;
										}
										if (index1 > 0) {
											if (vector(regridding_tag,index0,index1-1,index2) != 1)
												vector(regridding_tag,index0,index1-1,index2) = 1;
										}
										if (d_regridding_buffer > 0) {
											int distance;
											for(int index2b = MAX(0, index2 - d_regridding_buffer - 1); index2b < MIN(index2 + d_regridding_buffer + 1, klast); index2b++) {
												for(int index1b = MAX(0, index1 - d_regridding_buffer - 1); index1b < MIN(index1 + d_regridding_buffer + 1, jlast); index1b++) {
													for(int index0b = MAX(0, index0 - d_regridding_buffer - 1); index0b < MIN(index0 + d_regridding_buffer + 1, ilast); index0b++) {
														int distx = (index0b - index0);
														if (distx < 0) {
															distx++;
														}
														int disty = (index1b - index1);
														if (disty < 0) {
															disty++;
														}
														int distz = (index2b - index2);
														if (distz < 0) {
															distz++;
														}
														distance = 1 + MAX(MAX(abs(distx), abs(disty)), abs(distz));
														if (index0b >= d_ghost_width && index0b < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1b >= d_ghost_width && index1b < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2b >= d_ghost_width && index2b < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
															vectorT(tags,index0b-d_ghost_width,index1b-d_ghost_width,index2b-d_ghost_width) = 1;
														}
														if (vector(regridding_tag,index0b,index1b,index2b) == 0 || vector(regridding_tag,index0b,index1b,index2b) > distance) {
															vector(regridding_tag,index0b,index1b,index2b) = distance;
														}
													}
												}
											}
										}
			
									}
								}
							}
						}
					}
		
				} else {
					if (d_regridding_type == "FUNCTION") {
						int regrid_field_id = vdb->getVariable(d_regridding_field)->getInstanceIdentifier();
						double* regrid_field = ((pdat::NodeData<double> *) patch->getPatchData(regrid_field_id).get())->getPointer();
						double* regridding_value = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
						for(int index2 = 0; index2 < klast; index2++) {
							for(int index1 = 0; index1 < jlast; index1++) {
								for(int index0 = 0; index0 < ilast; index0++) {
									vector(regridding_value, index0, index1, index2) = vector(regrid_field, index0, index1, index2);
									if (vector(regrid_field, index0, index1, index2) > d_regridding_threshold) {
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags,index0 - d_ghost_width, index1 - d_ghost_width, index2 - d_ghost_width) = 1;
										}
										vector(regridding_tag,index0, index1, index2) = 1;
										//SAMRAI tagging
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
										}
										if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width) = 1;
										}
										if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
											vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
										}
										//Informative tagging
										if (index0 > 0 && index1 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0-1,index1-1,index2-1) != 1)
												vector(regridding_tag,index0-1,index1-1,index2-1) = 1;
										}
										if (index1 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0,index1-1,index2-1) != 1)
												vector(regridding_tag,index0,index1-1,index2-1) = 1;
										}
										if (index0 > 0 && index2 > 0) {
											if (vector(regridding_tag,index0-1,index1,index2-1) != 1)
												vector(regridding_tag,index0-1,index1,index2-1) = 1;
										}
										if (index2 > 0) {
											if (vector(regridding_tag,index0,index1,index2-1) != 1)
												vector(regridding_tag,index0,index1,index2-1) = 1;
										}
										if (index0 > 0 && index1 > 0) {
											if (vector(regridding_tag,index0-1,index1-1,index2) != 1)
												vector(regridding_tag,index0-1,index1-1,index2) = 1;
										}
										if (index0 > 0) {
											if (vector(regridding_tag,index0-1,index1,index2) != 1)
												vector(regridding_tag,index0-1,index1,index2) = 1;
										}
										if (index1 > 0) {
											if (vector(regridding_tag,index0,index1-1,index2) != 1)
												vector(regridding_tag,index0,index1-1,index2) = 1;
										}
										if (d_regridding_buffer > 0) {
											int distance;
											for(int index2b = MAX(0, index2 - d_regridding_buffer - 1); index2b < MIN(index2 + d_regridding_buffer + 1, klast); index2b++) {
												for(int index1b = MAX(0, index1 - d_regridding_buffer - 1); index1b < MIN(index1 + d_regridding_buffer + 1, jlast); index1b++) {
													for(int index0b = MAX(0, index0 - d_regridding_buffer - 1); index0b < MIN(index0 + d_regridding_buffer + 1, ilast); index0b++) {
														int distx = (index0b - index0);
														if (distx < 0) {
															distx++;
														}
														int disty = (index1b - index1);
														if (disty < 0) {
															disty++;
														}
														int distz = (index2b - index2);
														if (distz < 0) {
															distz++;
														}
														distance = 1 + MAX(MAX(abs(distx), abs(disty)), abs(distz));
														if (index0b >= d_ghost_width && index0b < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1b >= d_ghost_width && index1b < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2b >= d_ghost_width && index2b < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
															vectorT(tags,index0b-d_ghost_width,index1b-d_ghost_width,index2b-d_ghost_width) = 1;
														}
														if (vector(regridding_tag,index0b,index1b,index2b) == 0 || vector(regridding_tag,index0b,index1b,index2b) > distance) {
															vector(regridding_tag,index0b,index1b,index2b) = distance;
														}
													}
												}
											}
										}
									}
								}
							}
						}
			
					} else {
						if (d_regridding_type == "SHADOW") {
							if (!initial_time) {
								if (!(vdb->checkVariableExists(d_regridding_field_shadow))) {
									TBOX_ERROR(d_object_name << ": Regridding field selected not found:" <<  d_regridding_field_shadow<<  "");
								}
								int regrid_field_id = vdb->getVariable(d_regridding_field)->getInstanceIdentifier();
								double* regrid_field1 = ((pdat::NodeData<double> *) patch->getPatchData(regrid_field_id).get())->getPointer();
								int regrid_field_shadow_id = vdb->getVariable(d_regridding_field_shadow)->getInstanceIdentifier();
								double* regrid_field2 = ((pdat::NodeData<double> *) patch->getPatchData(regrid_field_shadow_id).get())->getPointer();
								double* regridding_value = ((pdat::NodeData<double> *) patch->getPatchData(d_interior_regridding_value_id).get())->getPointer();
								for(int index2 = 0; index2 < klast; index2++) {
									for(int index1 = 0; index1 < jlast; index1++) {
										for(int index0 = 0; index0 < ilast; index0++) {
					
											double error = 2 * fabs(vector(regrid_field1, index0, index1, index2) - vector(regrid_field2, index0, index1, index2))/fabs(vector(regrid_field1, index0, index1, index2) + vector(regrid_field2, index0, index1, index2));
											vector(regridding_value, index0, index1, index2) = error;
											if (error > d_regridding_error) {
												if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags,index0 - d_ghost_width, index1 - d_ghost_width, index2 - d_ghost_width) = 1;
												}
												vector(regridding_tag,index0, index1, index2) = 1;
												//SAMRAI tagging
												if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
												}
												if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width - 1) = 1;
												}
												if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
												}
												if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 > d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width, index1-d_ghost_width, index2-d_ghost_width - 1) = 1;
												}
												if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
												}
												if (index0 > d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 >= d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width - 1, index1-d_ghost_width, index2-d_ghost_width) = 1;
												}
												if (index0 >= d_ghost_width && index0 < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1 > d_ghost_width && index1 < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2 >= d_ghost_width && index2 < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
													vectorT(tags, index0-d_ghost_width, index1-d_ghost_width - 1, index2-d_ghost_width) = 1;
												}
												//Informative tagging
												if (index0 > 0 && index1 > 0 && index2 > 0) {
													if (vector(regridding_tag,index0-1,index1-1,index2-1) != 1)
														vector(regridding_tag,index0-1,index1-1,index2-1) = 1;
												}
												if (index1 > 0 && index2 > 0) {
													if (vector(regridding_tag,index0,index1-1,index2-1) != 1)
														vector(regridding_tag,index0,index1-1,index2-1) = 1;
												}
												if (index0 > 0 && index2 > 0) {
													if (vector(regridding_tag,index0-1,index1,index2-1) != 1)
														vector(regridding_tag,index0-1,index1,index2-1) = 1;
												}
												if (index2 > 0) {
													if (vector(regridding_tag,index0,index1,index2-1) != 1)
														vector(regridding_tag,index0,index1,index2-1) = 1;
												}
												if (index0 > 0 && index1 > 0) {
													if (vector(regridding_tag,index0-1,index1-1,index2) != 1)
														vector(regridding_tag,index0-1,index1-1,index2) = 1;
												}
												if (index0 > 0) {
													if (vector(regridding_tag,index0-1,index1,index2) != 1)
														vector(regridding_tag,index0-1,index1,index2) = 1;
												}
												if (index1 > 0) {
													if (vector(regridding_tag,index0,index1-1,index2) != 1)
														vector(regridding_tag,index0,index1-1,index2) = 1;
												}
												if (d_regridding_buffer > 0) {
													int distance;
													for(int index2b = MAX(0, index2 - d_regridding_buffer - 1); index2b < MIN(index2 + d_regridding_buffer + 1, klast); index2b++) {
														for(int index1b = MAX(0, index1 - d_regridding_buffer - 1); index1b < MIN(index1 + d_regridding_buffer + 1, jlast); index1b++) {
															for(int index0b = MAX(0, index0 - d_regridding_buffer - 1); index0b < MIN(index0 + d_regridding_buffer + 1, ilast); index0b++) {
																int distx = (index0b - index0);
																if (distx < 0) {
																	distx++;
																}
																int disty = (index1b - index1);
																if (disty < 0) {
																	disty++;
																}
																int distz = (index2b - index2);
																if (distz < 0) {
																	distz++;
																}
																distance = 1 + MAX(MAX(abs(distx), abs(disty)), abs(distz));
																if (index0b >= d_ghost_width && index0b < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1b >= d_ghost_width && index1b < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2b >= d_ghost_width && index2b < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
																	vectorT(tags,index0b-d_ghost_width,index1b-d_ghost_width,index2b-d_ghost_width) = 1;
																}
																if (vector(regridding_tag,index0b,index1b,index2b) == 0 || vector(regridding_tag,index0b,index1b,index2b) > distance) {
																	vector(regridding_tag,index0b,index1b,index2b) = distance;
																}
															}
														}
													}
												}
					
											}
										}
									}
								}
					
							}
				
						}
					}
				}
			}
		}
		//Buffer synchronization if needed
		if (d_regridding_buffer > d_ghost_width) {
			d_tagging_fill->createSchedule(level)->fillData(0, false);
		}
		if (d_regridding_buffer > 0) {
			for (hier::PatchLevel::iterator ip(level->begin()); ip != level->end(); ++ip) {
				const std::shared_ptr< hier::Patch >& patch = *ip;
				int* tags = ((pdat::CellData<int> *) patch->getPatchData(tag_index).get())->getPointer();
				int* regridding_tag = ((pdat::NodeData<int> *) patch->getPatchData(d_nonSync_regridding_tag_id).get())->getPointer();
				const std::shared_ptr<geom::CartesianPatchGeometry > patch_geom(SAMRAI_SHARED_PTR_CAST<geom::CartesianPatchGeometry, hier::PatchGeometry>(patch->getPatchGeometry()));
				const double* dx  = patch_geom->getDx();
				const hier::Index tfirst = patch->getPatchData(tag_index)->getGhostBox().lower();
				const hier::Index tlast  = patch->getPatchData(tag_index)->getGhostBox().upper();
				const hier::Index boxfirst = patch->getBox().lower();
				const hier::Index boxlast  = patch->getBox().upper();
				int ilast = boxlast(0)-boxfirst(0)+2+2*d_ghost_width;
				int itlast = tlast(0)-tfirst(0)+1;
				int jlast = boxlast(1)-boxfirst(1)+2+2*d_ghost_width;
				int jtlast = tlast(1)-tfirst(1)+1;
				int klast = boxlast(2)-boxfirst(2)+2+2*d_ghost_width;
				int ktlast = tlast(2)-tfirst(2)+1;
	
				for(int index2 = 0; index2 < klast; index2++) {
					for(int index1 = 0; index1 < jlast; index1++) {
						for(int index0 = 0; index0 < ilast; index0++) {
	
							int value = vector(regridding_tag, index0, index1, index2);
							if (value > 0 && value < 1 + d_regridding_buffer) {
								int buffer_left = 1 + d_regridding_buffer - value;
								int distance;
								for(int index2b = MAX(0, index2 - buffer_left); index2b < MIN(index2 + buffer_left + 1, klast); index2b++) {
									for(int index1b = MAX(0, index1 - buffer_left); index1b < MIN(index1 + buffer_left + 1, jlast); index1b++) {
										for(int index0b = MAX(0, index0 - buffer_left); index0b < MIN(index0 + buffer_left + 1, ilast); index0b++) {
								
											distance = MAX(MAX(abs(index0b - index0), abs(index1b - index1)), abs(index2b - index2));
											if (distance > 0 && index0b >= d_ghost_width && index0b < (tlast(0)-tfirst(0))+1 + d_ghost_width && index1b >= d_ghost_width && index1b < (tlast(1)-tfirst(1))+1 + d_ghost_width && index2b >= d_ghost_width && index2b < (tlast(2)-tfirst(2))+1 + d_ghost_width) {
												vectorT(tags, index0b - d_ghost_width, index1b - d_ghost_width, index2b - d_ghost_width) = 1;
											}
											if (distance > 0 && (vector(regridding_tag,index0b, index1b, index2b) == 0 || vector(regridding_tag, index0b, index1b, index2b) > value + distance)) {
												vector(regridding_tag, index0b, index1b, index2b) = value + distance;
											}
										}
									}
								}
								
							}
						}
					}
				}
	
			}
		}
	}
}



